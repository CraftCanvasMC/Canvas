From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Wed, 15 Jan 2025 02:25:53 -0800
Subject: [PATCH] Threaded Dimensions


diff --git a/src/main/java/ca/spottedleaf/moonrise/common/list/ReferenceList.java b/src/main/java/ca/spottedleaf/moonrise/common/list/ReferenceList.java
index 2e876b918672e8ef3b5197b7e6b1597247fdeaa1..7a4fd6a1762bba8ed784eaebc45b64f3970f8bf9 100644
--- a/src/main/java/ca/spottedleaf/moonrise/common/list/ReferenceList.java
+++ b/src/main/java/ca/spottedleaf/moonrise/common/list/ReferenceList.java
@@ -1,17 +1,20 @@
 package ca.spottedleaf.moonrise.common.list;
 
+import it.unimi.dsi.fastutil.objects.Reference2IntMap;
+import it.unimi.dsi.fastutil.objects.Reference2IntMaps;
 import it.unimi.dsi.fastutil.objects.Reference2IntOpenHashMap;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
+import java.util.concurrent.atomic.AtomicInteger;
 
 public final class ReferenceList<E> implements Iterable<E> {
 
     private static final Object[] EMPTY_LIST = new Object[0];
 
-    private final Reference2IntOpenHashMap<E> referenceToIndex;
+    private final Reference2IntMap<E> referenceToIndex; // Canvas
     private E[] references;
-    private int count;
+    private final AtomicInteger count = new AtomicInteger(); // Canvas - atomic
 
     public ReferenceList() {
         this((E[])EMPTY_LIST);
@@ -19,22 +22,22 @@ public final class ReferenceList<E> implements Iterable<E> {
 
     public ReferenceList(final E[] referenceArray) {
         this.references = referenceArray;
-        this.referenceToIndex = new Reference2IntOpenHashMap<>(2, 0.8f);
+        this.referenceToIndex = Reference2IntMaps.synchronize(new Reference2IntOpenHashMap<>(2, 0.8f)); // Canvas
         this.referenceToIndex.defaultReturnValue(Integer.MIN_VALUE);
     }
 
     private ReferenceList(final E[] references, final int count, final Reference2IntOpenHashMap<E> referenceToIndex) {
         this.references = references;
-        this.count = count;
+        this.count.set(count); // Canvas - atomic
         this.referenceToIndex = referenceToIndex;
     }
 
     public ReferenceList<E> copy() {
-        return new ReferenceList<>(this.references.clone(), this.count, this.referenceToIndex.clone());
+        return new ReferenceList<>(this.references.clone(), this.count.get(), new Reference2IntOpenHashMap<>(this.referenceToIndex)); // Canvas // - atomic
     }
 
     public int size() {
-        return this.count;
+        return this.count.get(); // Canvas - atomic
     }
 
     public boolean contains(final E obj) {
@@ -48,7 +51,13 @@ public final class ReferenceList<E> implements Iterable<E> {
         }
 
         // move the object at the end to this index
-        final int endIndex = --this.count;
+        // Canvas start - convert count to atomic, set count to 0 if endIndex < 0
+        int endIndex = this.count.decrementAndGet();
+        if(endIndex < 0) {
+            this.count.set(0);
+            endIndex = 0;
+        }
+        // Canvas end
         final E end = (E)this.references[endIndex];
         if (index != endIndex) {
             // not empty after this call
@@ -61,7 +70,7 @@ public final class ReferenceList<E> implements Iterable<E> {
     }
 
     public boolean add(final E obj) {
-        final int count = this.count;
+        final int count = this.count.get(); // Canvas - atomic
         final int currIndex = this.referenceToIndex.putIfAbsent(obj, count);
 
         if (currIndex != Integer.MIN_VALUE) {
@@ -76,13 +85,13 @@ public final class ReferenceList<E> implements Iterable<E> {
         }
 
         list[count] = obj;
-        this.count = count + 1;
+        this.count.set(count + 1); // Canvas - atomic
 
         return true;
     }
 
     public E getChecked(final int index) {
-        if (index < 0 || index >= this.count) {
+        if (index < 0 || index >= this.count.get()) { // Canvas - atomic
             throw new IndexOutOfBoundsException("Index: " + index + " is out of bounds, size: " + this.count);
         }
         return this.references[index];
@@ -102,8 +111,8 @@ public final class ReferenceList<E> implements Iterable<E> {
 
     public void clear() {
         this.referenceToIndex.clear();
-        Arrays.fill(this.references, 0, this.count, null);
-        this.count = 0;
+        Arrays.fill(this.references, 0, this.count.get(), null); // Canvas - atomic
+        this.count.set(0); // Canvas - atomic
     }
 
     @Override
@@ -114,12 +123,12 @@ public final class ReferenceList<E> implements Iterable<E> {
 
             @Override
             public boolean hasNext() {
-                return this.current < ReferenceList.this.count;
+                return this.current < ReferenceList.this.count.get(); // Canvas - atomic
             }
 
             @Override
             public E next() {
-                if (this.current >= ReferenceList.this.count) {
+                if (this.current >= ReferenceList.this.count.get()) { // Canvas - atomic
                     throw new NoSuchElementException();
                 }
                 return this.lastRet = ReferenceList.this.references[this.current++];
diff --git a/src/main/java/ca/spottedleaf/moonrise/common/misc/Delayed8WayDistancePropagator2D.java b/src/main/java/ca/spottedleaf/moonrise/common/misc/Delayed8WayDistancePropagator2D.java
index ab2fa1563d5e32a5313dfcc1da411cab45fb5ca0..5bcd4fb805218a7c260d2e40123884a73b85189b 100644
--- a/src/main/java/ca/spottedleaf/moonrise/common/misc/Delayed8WayDistancePropagator2D.java
+++ b/src/main/java/ca/spottedleaf/moonrise/common/misc/Delayed8WayDistancePropagator2D.java
@@ -561,7 +561,7 @@ public final class Delayed8WayDistancePropagator2D {
         }
 
         // copied from superclass
-        private int find(final long k) {
+        private synchronized int find(final long k) { // Canvas - synchronize
             if (k == 0L) {
                 return this.containsNullKey ? this.n : -(this.n + 1);
             } else {
@@ -585,7 +585,7 @@ public final class Delayed8WayDistancePropagator2D {
         }
 
         // copied from superclass
-        private void insert(final int pos, final long k, final byte v) {
+        private synchronized void insert(final int pos, final long k, final byte v) { // Canvas - synchronize
             if (pos == this.n) {
                 this.containsNullKey = true;
             }
@@ -598,7 +598,7 @@ public final class Delayed8WayDistancePropagator2D {
         }
 
         // copied from superclass
-        public byte putIfGreater(final long key, final byte value) {
+        public synchronized byte putIfGreater(final long key, final byte value) { // Canvas - synchronize
             final int pos = this.find(key);
             if (pos < 0) {
                 if (this.defRetValue < value) {
@@ -616,7 +616,7 @@ public final class Delayed8WayDistancePropagator2D {
         }
 
         // copied from superclass
-        private void removeEntry(final int pos) {
+        private synchronized void removeEntry(final int pos) { // Canvas - synchronize
             --this.size;
             this.shiftKeys(pos);
             if (this.n > this.minN && this.size < this.maxFill / 4 && this.n > 16) {
@@ -625,7 +625,7 @@ public final class Delayed8WayDistancePropagator2D {
         }
 
         // copied from superclass
-        private void removeNullEntry() {
+        private synchronized void removeNullEntry() { // Canvas - synchronize
             this.containsNullKey = false;
             --this.size;
             if (this.n > this.minN && this.size < this.maxFill / 4 && this.n > 16) {
@@ -634,7 +634,7 @@ public final class Delayed8WayDistancePropagator2D {
         }
 
         // copied from superclass
-        public byte removeIfGreaterOrEqual(final long key, final byte value) {
+        public synchronized byte removeIfGreaterOrEqual(final long key, final byte value) { // Canvas - synchronize
             if (key == 0L) {
                 if (!this.containsNullKey) {
                     return this.defRetValue;
diff --git a/src/main/java/io/papermc/paper/command/MSPTCommand.java b/src/main/java/io/papermc/paper/command/MSPTCommand.java
index 8b5293b0c696ef21d0101493ffa41b60bf0bc86b..4d061ceba635ab6fc1563026f6f10e16555a1252 100644
--- a/src/main/java/io/papermc/paper/command/MSPTCommand.java
+++ b/src/main/java/io/papermc/paper/command/MSPTCommand.java
@@ -96,7 +96,7 @@ public final class MSPTCommand extends Command {
         return Arrays.asList(getColor(avgD), getColor(minD), getColor(maxD));
     }
 
-    private static Component getColor(double avg) {
+    public static Component getColor(double avg) { // Canvas - private -> public
         return text(DF.format(avg), avg >= 50 ? RED : avg >= 40 ? YELLOW : GREEN);
     }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index d067b775b7311631b947fd0faa0dce4129c4a846..caa165572e2aaeccb34f16c12b248f9c38558cd0 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -13,6 +13,7 @@ import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.Lifecycle;
+import io.canvasmc.canvas.server.ThreadedServer;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.awt.image.BufferedImage;
 import java.io.ByteArrayOutputStream;
@@ -1488,6 +1489,12 @@ public final class CraftServer implements Server {
         io.papermc.paper.FeatureHooks.tickEntityManager(serverLevel); // SPIGOT-6526: Load pending entities so they are available to the API // Paper - chunk system
 
         this.pluginManager.callEvent(new WorldLoadEvent(serverLevel.getWorld()));
+        // Canvas start
+        if (MinecraftServer.getThreadedServer().hasStarted()) {
+            // only spin it here if the server already started
+            ThreadedServer.SPINNER.apply(serverLevel);
+        }
+        // Canvas end
         return serverLevel.getWorld();
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index f4d45ef506172c7c8ca65beeee7536f09c0c0284..47770e3dc4ebb3c98c6c3f7335174c478f1c5d87 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -38,10 +38,12 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.WeakHashMap;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.shorts.ShortSets;
 import net.minecraft.advancements.AdvancementProgress;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
@@ -1016,7 +1018,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
             SectionPos sectionPos = entry.getKey();
             it.unimi.dsi.fastutil.shorts.Short2ObjectMap<net.minecraft.world.level.block.state.BlockState> blockData = entry.getValue();
 
-            net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket packet = new net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket(sectionPos, blockData);
+            net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket packet = new net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket(sectionPos, new ConcurrentHashMap<>(blockData)); // Canvas
             this.getHandle().connection.send(packet);
         }
     }
@@ -1061,7 +1063,7 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     private record ChunkSectionChanges(ShortSet positions, List<net.minecraft.world.level.block.state.BlockState> blockData) {
 
         public ChunkSectionChanges() {
-            this(new ShortArraySet(), new ArrayList<>());
+            this(ShortSets.synchronize(new ShortArraySet()), new ArrayList<>()); // Canvas
         }
     }
 
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index e0d4222a99f22d7130d95cf29b034a98f2f3b76e..cc3c91e38f85ceadb982c861a4f8a5f7bdd862c8 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -110,7 +110,7 @@ public class SpigotConfig {
         return SpigotConfig.config.getBoolean(path, SpigotConfig.config.getBoolean(path));
     }
 
-    private static int getInt(String path, int def) {
+    public static int getInt(String path, int def) { // Canvas - private -> public
         SpigotConfig.config.addDefault(path, def);
         return SpigotConfig.config.getInt(path, SpigotConfig.config.getInt(path));
     }
diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
index 8d4d0ed8a41d7840ac2add638a034a52c965a1e0..4d9afe27ee3c883835b96da060788ff45377adff 100644
--- a/src/main/java/org/spigotmc/WatchdogThread.java
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -5,10 +5,16 @@ import io.papermc.paper.configuration.GlobalConfiguration;
 import java.lang.management.ManagementFactory;
 import java.lang.management.MonitorInfo;
 import java.lang.management.ThreadInfo;
+import java.util.Locale;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.function.Consumer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import io.canvasmc.canvas.server.level.WatchdogWatcher;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
 import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
 import org.bukkit.craftbukkit.CraftServer;
 
 public class WatchdogThread extends ca.spottedleaf.moonrise.common.util.TickThread { // Paper - rewrite chunk system
@@ -50,6 +56,13 @@ public class WatchdogThread extends ca.spottedleaf.moonrise.common.util.TickThre
     public static void tick() {
         WatchdogThread.instance.lastTick = WatchdogThread.monotonicMillis();
     }
+    // Canvas start
+
+    public static void tickLevel(@NotNull ServerLevel level)
+    {
+        level.lastWatchdogTick = WatchdogThread.monotonicMillis();
+    }
+    // Canvas end
 
     public static void doStop() {
         if (WatchdogThread.instance != null) {
@@ -64,21 +77,32 @@ public class WatchdogThread extends ca.spottedleaf.moonrise.common.util.TickThre
             Logger logger = Bukkit.getServer().getLogger();
             long currentTime = WatchdogThread.monotonicMillis();
             MinecraftServer server = MinecraftServer.getServer();
-            if (this.lastTick != 0 && this.timeoutTime > 0 && WatchdogThread.hasStarted && (!server.isRunning() || (currentTime > this.lastTick + this.earlyWarningEvery && !DISABLE_WATCHDOG))) { // Paper - add property to disable
-                boolean isLongTimeout = currentTime > this.lastTick + this.timeoutTime || (!server.isRunning() && !server.hasStopped() && currentTime > this.lastTick + 1000);
+            // Canvas start
+            // if (this.lastTick != 0 && this.timeoutTime > 0 && WatchdogThread.hasStarted && (!server.isRunning() || (currentTime > this.lastTick + this.earlyWarningEvery && !DISABLE_WATCHDOG))) { // Paper - add property to disable
+            final AtomicBoolean shouldBreak = new AtomicBoolean(false);
+            Consumer<WatchdogWatcher> laggingConsume = (levelOrServer) -> {
+                long lt = levelOrServer instanceof MinecraftServer ? lastTick : ((ServerLevel)levelOrServer).lastWatchdogTick;
+                String capitalized = levelOrServer.getName().substring(0, 1).toUpperCase() + levelOrServer.getName().substring(1).toLowerCase();
+                boolean isLongTimeout = currentTime > lt + timeoutTime || (!server.isRunning() && !server.hasStopped() && currentTime > lt + 1000);
+                if (levelOrServer instanceof ServerLevel level) {
+                    if (!level.isTicking()) {
+                        return;
+                    }
+                }
                 // Don't spam early warning dumps
                 if (!isLongTimeout && (this.earlyWarningEvery <= 0 ||
                     !hasStarted || currentTime < this.lastEarlyWarning + this.earlyWarningEvery ||
                     currentTime < this.lastTick + this.earlyWarningDelay))
-                    continue;
+                    return; // Canvas
                 if (!isLongTimeout && server.hasStopped())
-                    continue; // Don't spam early watchdog warnings during shutdown, we'll come back to this...
+                    return; // Don't spam early watchdog warnings during shutdown, we'll come back to this... // Canvas
+             // Canvas end
                 this.lastEarlyWarning = currentTime;
                 if (isLongTimeout) {
                     // Paper end
                     logger.log(Level.SEVERE, "------------------------------");
-                    logger.log(Level.SEVERE, "The server has stopped responding! This is (probably) not a Canvas bug."); // Paper // Purpur - Rebrand // Canvas - Rebrand
-                    logger.log(Level.SEVERE, "If you see a plugin in the Server thread dump below, then please report it to that author");
+                    logger.log( Level.SEVERE, "The " + levelOrServer.getName() + " has stopped responding! This is (probably) not a Canvas bug." ); // Paper // Purpur - Rebrand // Canvas
+                    logger.log( Level.SEVERE, "If you see a plugin in the " + capitalized + " thread dump below, then please report it to that author" ); // Canvas
                     logger.log(Level.SEVERE, "\t *Especially* if it looks like HTTP or MySQL operations are occurring");
                     logger.log(Level.SEVERE, "If you see a world save or edit, then it means you did far more than your server can handle at once");
                     logger.log(Level.SEVERE, "\t If this is the case, consider increasing timeout-time in spigot.yml but note that this will replace the crash with LARGE lag spikes");
@@ -105,13 +129,13 @@ public class WatchdogThread extends ca.spottedleaf.moonrise.common.util.TickThre
                     // Paper end
                 } else {
                     logger.log(Level.SEVERE, "--- DO NOT REPORT THIS TO CANVAS - THIS IS NOT A BUG OR A CRASH  - " + Bukkit.getServer().getVersion() + " ---"); // Purpur - Rebrand // Canvas - Rebrand
-                    logger.log(Level.SEVERE, "The server has not responded for " + (currentTime - lastTick) / 1000 + " seconds! Creating thread dump");
+                    logger.log(Level.SEVERE, "The " + levelOrServer.getName() + " has not responded for " + (currentTime - lt) / 1000 + " seconds! Creating thread dump"); // Canvas
                 }
                 // Paper end - Different message for short timeout
                 logger.log(Level.SEVERE, "------------------------------");
-                logger.log(Level.SEVERE, "Server thread dump (Look for plugins here before reporting to Canvas!):" ); // Paper // Purpur - Rebrand // Canvas - Rebrand
+                logger.log( Level.SEVERE, capitalized + " thread dump (Look for plugins here before reporting to Canvas!):" ); // Paper // Purpur - Rebrand // Canvas
                 FeatureHooks.dumpAllChunkLoadInfo(MinecraftServer.getServer(), isLongTimeout); // Paper - log detailed tick information
-                WatchdogThread.dumpThread(ManagementFactory.getThreadMXBean().getThreadInfo(MinecraftServer.getServer().serverThread.getId(), Integer.MAX_VALUE), logger);
+                WatchdogThread.dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( levelOrServer.getRunningThread().getId(), Integer.MAX_VALUE ), logger ); // Canvas
                 logger.log(Level.SEVERE, "------------------------------");
 
                 // Paper start - Only print full dump on long timeouts
@@ -146,11 +170,28 @@ public class WatchdogThread extends ca.spottedleaf.moonrise.common.util.TickThre
                             server.close();
                         }
                     }
-                    break;
+                // Canvas start
+                    shouldBreak.set(true);
                 }
                 // Paper end
+            };
+
+            if (checkMainThread(server, currentTime)) {
+                laggingConsume.accept(server);
+                if (shouldBreak.get()) {
+                    break;
+                }
+            }
+            for (ServerLevel level : server.getAllLevels()) {
+                if (checkLevelThread(level, currentTime)) {
+                    laggingConsume.accept(level);
+                    if (shouldBreak.get()) {
+                        break;
+                    }
+                }
             }
 
+            // Canvas end
             try {
                 sleep(1000); // Paper - Reduce check time to every second instead of every ten seconds, more consistent and allows for short timeout
             } catch (InterruptedException ex) {
@@ -158,7 +199,17 @@ public class WatchdogThread extends ca.spottedleaf.moonrise.common.util.TickThre
             }
         }
     }
+    // Canvas start
+
+    private boolean checkMainThread(MinecraftServer server, long currentTime) {
+        return this.lastTick != 0 && this.timeoutTime > 0 && WatchdogThread.hasStarted && (!server.isRunning() || (currentTime > this.lastTick + this.earlyWarningEvery && !DISABLE_WATCHDOG));
+    }
+
+    private boolean checkLevelThread(@NotNull ServerLevel level, long currentTime) {
+        return level.lastWatchdogTick != 0 && this.timeoutTime > 0 && WatchdogThread.hasStarted && (!level.running || (currentTime > level.lastWatchdogTick + this.earlyWarningEvery && !DISABLE_WATCHDOG));
+    }
 
+    // Canvas end
     private static void dumpThread(ThreadInfo thread, Logger log) {
         log.log(Level.SEVERE, "------------------------------");
 
