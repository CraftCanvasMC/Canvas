--- a/src/main/java/ca/spottedleaf/moonrise/common/list/IteratorSafeOrderedReferenceSet.java
+++ b/src/main/java/ca/spottedleaf/moonrise/common/list/IteratorSafeOrderedReferenceSet.java
@@ -18,7 +_,7 @@
 
     private final double maxFragFactor;
 
-    private int iteratorCount;
+    private final java.util.concurrent.atomic.AtomicInteger iteratorCount = new java.util.concurrent.atomic.AtomicInteger(); // Canvas
 
     public IteratorSafeOrderedReferenceSet() {
         this(16, 0.75f, 16, 0.2);
@@ -79,7 +_,7 @@
     }
 
     public int createRawIterator() {
-        ++this.iteratorCount;
+        this.iteratorCount.incrementAndGet(); // Canvas
         if (this.indexMap.isEmpty()) {
             return -1;
         } else {
@@ -100,7 +_,7 @@
     }
 
     public void finishRawIterator() {
-        if (--this.iteratorCount == 0) {
+        if (this.iteratorCount.decrementAndGet() == 0) { // Canvas
             if (this.getFragFactor() >= this.maxFragFactor) {
                 this.defrag();
             }
@@ -117,7 +_,7 @@
                 throw new IllegalStateException();
             }
             this.listElements[index] = null;
-            if (this.iteratorCount == 0 && this.getFragFactor() >= this.maxFragFactor) {
+            if (this.iteratorCount.get() == 0 && this.getFragFactor() >= this.maxFragFactor) { // Canvas
                 this.defrag();
             }
             //this.check();
@@ -219,7 +_,7 @@
     }
 
     public IteratorSafeOrderedReferenceSet.Iterator<E> iterator(final int flags) {
-        ++this.iteratorCount;
+        this.iteratorCount.incrementAndGet(); // Canvas
         return new BaseIterator<>(this, true, (flags & ITERATOR_FLAG_SEE_ADDITIONS) != 0 ? Integer.MAX_VALUE : this.listSize);
     }
 
