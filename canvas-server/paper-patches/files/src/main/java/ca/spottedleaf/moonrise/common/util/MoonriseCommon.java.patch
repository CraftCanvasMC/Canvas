--- a/src/main/java/ca/spottedleaf/moonrise/common/util/MoonriseCommon.java
+++ b/src/main/java/ca/spottedleaf/moonrise/common/util/MoonriseCommon.java
@@ -3,6 +_,8 @@
 import ca.spottedleaf.concurrentutil.executor.thread.PrioritisedThreadPool;
 import ca.spottedleaf.moonrise.common.PlatformHooks;
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.ChunkSystemAlgorithm;
+import io.canvasmc.canvas.Config;
 import org.slf4j.Logger;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -38,7 +_,8 @@
     public static final PrioritisedThreadPool.ExecutorGroup LOAD_GROUP         = MoonriseCommon.WORKER_POOL.createExecutorGroup(SERVER_DIVISION, 0);
 
     public static void adjustWorkerThreads(final int configWorkerThreads, final int configIoThreads) {
-        int defaultWorkerThreads = Runtime.getRuntime().availableProcessors() / 2;
+        // Canvas start - rewrite chunk worker system
+        /* int defaultWorkerThreads = Runtime.getRuntime().availableProcessors() / 2;
         if (defaultWorkerThreads <= 4) {
             defaultWorkerThreads = defaultWorkerThreads <= 3 ? 1 : 2;
         } else {
@@ -53,11 +_,17 @@
         }
 
         final int ioThreads = Math.max(1, configIoThreads);
+         */
+        String raw = Config.INSTANCE.chunkGeneration.chunkWorkerAlgorithm;
+        ChunkSystemAlgorithm algorithm = ChunkSystemAlgorithm.fromRaw(raw);
+        int workerThreads = algorithm.evalWorkers(configWorkerThreads, configIoThreads);
+        int ioThreads = algorithm.evalIO(configWorkerThreads, configIoThreads);
 
         WORKER_POOL.adjustThreadCount(workerThreads);
         IO_POOL.adjustThreadCount(ioThreads);
 
-        LOGGER.info(PlatformHooks.get().getBrand() + " is using " + workerThreads + " worker threads, " + ioThreads + " I/O threads");
+        LOGGER.info("Using chunk system algorithm of {}, using {} worker threads, {} I/O threads", algorithm.asDebugString(), workerThreads, ioThreads);
+        // Canvas end
     }
 
     public static final PrioritisedThreadPool IO_POOL = new PrioritisedThreadPool(
