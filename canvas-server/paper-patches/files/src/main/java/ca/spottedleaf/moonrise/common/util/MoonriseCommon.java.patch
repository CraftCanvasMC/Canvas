--- a/src/main/java/ca/spottedleaf/moonrise/common/util/MoonriseCommon.java
+++ b/src/main/java/ca/spottedleaf/moonrise/common/util/MoonriseCommon.java
@@ -3,6 +_,11 @@
 import ca.spottedleaf.concurrentutil.executor.thread.PrioritisedThreadPool;
 import ca.spottedleaf.moonrise.common.PlatformHooks;
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.ChunkSystemAlgorithm;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.server.chunk.TheChunkSystem;
+import io.canvasmc.canvas.util.ThreadBuilder;
+import org.jetbrains.annotations.NotNull;
 import org.slf4j.Logger;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
@@ -12,83 +_,65 @@
 
     private static final Logger LOGGER = LogUtils.getClassLogger();
 
-    public static final PrioritisedThreadPool WORKER_POOL = new PrioritisedThreadPool(
-            new Consumer<>() {
-                private final AtomicInteger idGenerator = new AtomicInteger();
-
-                @Override
-                public void accept(Thread thread) {
-                    thread.setDaemon(true);
-                    thread.setName(PlatformHooks.get().getBrand() + " Common Worker #" + this.idGenerator.getAndIncrement());
-                    thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
-                        @Override
-                        public void uncaughtException(final Thread thread, final Throwable throwable) {
-                            LOGGER.error("Uncaught exception in thread " + thread.getName(), throwable);
-                        }
-                    });
-                }
-            }
-    );
-    public static final long WORKER_QUEUE_HOLD_TIME = (long)(20.0e6); // 20ms
-    public static final int CLIENT_DIVISION = 0;
-    public static final PrioritisedThreadPool.ExecutorGroup RENDER_EXECUTOR_GROUP = MoonriseCommon.WORKER_POOL.createExecutorGroup(CLIENT_DIVISION, 0);
-    public static final int SERVER_DIVISION = 1;
-    public static final PrioritisedThreadPool.ExecutorGroup PARALLEL_GEN_GROUP = MoonriseCommon.WORKER_POOL.createExecutorGroup(SERVER_DIVISION, 0);
-    public static final PrioritisedThreadPool.ExecutorGroup RADIUS_AWARE_GROUP = MoonriseCommon.WORKER_POOL.createExecutorGroup(SERVER_DIVISION, 0);
-    public static final PrioritisedThreadPool.ExecutorGroup LOAD_GROUP         = MoonriseCommon.WORKER_POOL.createExecutorGroup(SERVER_DIVISION, 0);
-
-    public static void adjustWorkerThreads(final int configWorkerThreads, final int configIoThreads) {
-        int defaultWorkerThreads = Runtime.getRuntime().availableProcessors() / 2;
-        if (defaultWorkerThreads <= 4) {
-            defaultWorkerThreads = defaultWorkerThreads <= 3 ? 1 : 2;
-        } else {
-            defaultWorkerThreads = defaultWorkerThreads / 2;
-        }
-        defaultWorkerThreads = Integer.getInteger(PlatformHooks.get().getBrand() + ".WorkerThreadCount", Integer.valueOf(defaultWorkerThreads));
-
-        int workerThreads = configWorkerThreads;
-
-        if (workerThreads <= 0) {
-            workerThreads = defaultWorkerThreads;
-        }
-
-        final int ioThreads = Math.max(1, configIoThreads);
-
-        WORKER_POOL.adjustThreadCount(workerThreads);
+    // Canvas start - rewrite moonrise executor
+    public static TheChunkSystem WORKER_POOL;
+    public static TheChunkSystem.ExecutorGroup PARALLEL_GEN_GROUP;
+    public static TheChunkSystem.ExecutorGroup RADIUS_AWARE_GROUP;
+    public static TheChunkSystem.ExecutorGroup LOAD_GROUP;
+
+    public static void init(final int configWorkerThreads, final int configIoThreads) {
+        ChunkSystemAlgorithm algorithm = Config.INSTANCE.chunks.chunkWorkerAlgorithm;
+        int workerThreads = algorithm.evalWorkers(configWorkerThreads, configIoThreads);
+        int ioThreads = algorithm.evalIO(configWorkerThreads, configIoThreads);
+
+        WORKER_POOL = buildChunkSystem(workerThreads);
+
+        PARALLEL_GEN_GROUP = MoonriseCommon.WORKER_POOL.createExecutorGroup();
+        RADIUS_AWARE_GROUP = MoonriseCommon.WORKER_POOL.createExecutorGroup();
+        LOAD_GROUP = MoonriseCommon.WORKER_POOL.createExecutorGroup();
+
         IO_POOL.adjustThreadCount(ioThreads);
+        LOGGER.info("Running LS ChunkSystem with {} worker threads and {} io threads", workerThreads, ioThreads);
+    }
 
-        LOGGER.info(PlatformHooks.get().getBrand() + " is using " + workerThreads + " worker threads, " + ioThreads + " I/O threads");
+    private static @NotNull TheChunkSystem buildChunkSystem(int workerThreads) {
+        return new TheChunkSystem(workerThreads, new ThreadBuilder() {
+            @Override
+            public void accept(final Thread thread) {
+                thread.setPriority(Config.INSTANCE.chunks.threadPoolPriority);
+                thread.setDaemon(true);
+                thread.setUncaughtExceptionHandler((thread1, throwable) -> LOGGER.error("Uncaught exception in thread {}", thread1.getName(), throwable));
+                thread.setName("ls_wg worker #" + getAndIncrementId());
+            }
+        }, "ls_wg");
     }
+    // Canvas end
 
     public static final PrioritisedThreadPool IO_POOL = new PrioritisedThreadPool(
-            new Consumer<>() {
-                private final AtomicInteger idGenerator = new AtomicInteger();
-
-                @Override
-                public void accept(final Thread thread) {
-                    thread.setDaemon(true);
-                    thread.setName(PlatformHooks.get().getBrand() + " I/O Worker #" + this.idGenerator.getAndIncrement());
-                    thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
-                        @Override
-                        public void uncaughtException(final Thread thread, final Throwable throwable) {
-                            LOGGER.error("Uncaught exception in thread " + thread.getName(), throwable);
-                        }
-                    });
-                }
+        new Consumer<>() {
+            private final AtomicInteger idGenerator = new AtomicInteger();
+            @Override
+            public void accept(final Thread thread) {
+                thread.setDaemon(true);
+                thread.setName(PlatformHooks.get().getBrand() + " I/O Worker #" + this.idGenerator.getAndIncrement());
+                thread.setUncaughtExceptionHandler(new Thread.UncaughtExceptionHandler() {
+                    @Override
+                    public void uncaughtException(final Thread thread, final Throwable throwable) {
+                        LOGGER.error("Uncaught exception in thread " + thread.getName(), throwable);
+                    }
+                });
             }
+        }
     );
     public static final long IO_QUEUE_HOLD_TIME = (long)(100.0e6); // 100ms
-    public static final PrioritisedThreadPool.ExecutorGroup CLIENT_PROFILER_IO_GROUP = IO_POOL.createExecutorGroup(CLIENT_DIVISION, 0);
-    public static final PrioritisedThreadPool.ExecutorGroup SERVER_REGION_IO_GROUP = IO_POOL.createExecutorGroup(SERVER_DIVISION, 0);
+    // Canvas
+    public static final PrioritisedThreadPool.ExecutorGroup SERVER_REGION_IO_GROUP = IO_POOL.createExecutorGroup(1, 0);
 
     public static void haltExecutors() {
-        MoonriseCommon.WORKER_POOL.shutdown(false);
-        LOGGER.info("Awaiting termination of worker pool for up to 60s...");
-        if (!MoonriseCommon.WORKER_POOL.join(TimeUnit.SECONDS.toMillis(60L))) {
-            LOGGER.error("Worker pool did not shut down in time!");
-            MoonriseCommon.WORKER_POOL.halt(false);
-        }
-
+        // Canvas start
+        LOGGER.info("Terminating ChunkSystem...");
+        MoonriseCommon.WORKER_POOL.shutdown();
+        // Canvas end
         MoonriseCommon.IO_POOL.shutdown(false);
         LOGGER.info("Awaiting termination of I/O pool for up to 60s...");
         if (!MoonriseCommon.IO_POOL.join(TimeUnit.SECONDS.toMillis(60L))) {
