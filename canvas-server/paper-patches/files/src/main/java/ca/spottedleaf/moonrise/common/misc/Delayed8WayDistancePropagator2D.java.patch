--- a/src/main/java/ca/spottedleaf/moonrise/common/misc/Delayed8WayDistancePropagator2D.java
+++ b/src/main/java/ca/spottedleaf/moonrise/common/misc/Delayed8WayDistancePropagator2D.java
@@ -7,6 +_,7 @@
 import it.unimi.dsi.fastutil.longs.LongArrayFIFOQueue;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet;
+import java.util.concurrent.ConcurrentLinkedDeque;
 
 public final class Delayed8WayDistancePropagator2D {
 
@@ -356,24 +_,24 @@
 
     protected final void addToIncreaseWorkQueue(final long coordinate, final byte level) {
         final WorkQueue queue = this.levelIncreaseWorkQueues[level];
-        queue.queuedCoordinates.enqueue(coordinate);
-        queue.queuedLevels.enqueue(level);
+        queue.queuedCoordinates.add(coordinate);
+        queue.queuedLevels.add(level);
 
         this.levelIncreaseWorkQueueBitset |= (1L << level);
     }
 
     protected final void addToIncreaseWorkQueue(final long coordinate, final byte index, final byte level) {
         final WorkQueue queue = this.levelIncreaseWorkQueues[index];
-        queue.queuedCoordinates.enqueue(coordinate);
-        queue.queuedLevels.enqueue(level);
+        queue.queuedCoordinates.add(coordinate);
+        queue.queuedLevels.add(level);
 
         this.levelIncreaseWorkQueueBitset |= (1L << index);
     }
 
     protected final void addToRemoveWorkQueue(final long coordinate, final byte level) {
         final WorkQueue queue = this.levelRemoveWorkQueues[level];
-        queue.queuedCoordinates.enqueue(coordinate);
-        queue.queuedLevels.enqueue(level);
+        queue.queuedCoordinates.add(coordinate);
+        queue.queuedLevels.add(level);
 
         this.levelRemoveWorkQueueBitset |= (1L << level);
     }
@@ -426,8 +_,8 @@
 
             final WorkQueue queue = this.levelIncreaseWorkQueues[queueIndex];
             while (!queue.queuedLevels.isEmpty()) {
-                final long coordinate = queue.queuedCoordinates.removeFirstLong();
-                byte level = queue.queuedLevels.removeFirstByte();
+                final long coordinate = queue.queuedCoordinates.removeFirst(); // Canvas
+                byte level = queue.queuedLevels.removeFirst(); // Canvas
 
                 final boolean neighbourCheck = level < 0;
 
@@ -492,8 +_,8 @@
 
             final WorkQueue queue = this.levelRemoveWorkQueues[queueIndex];
             while (!queue.queuedLevels.isEmpty()) {
-                final long coordinate = queue.queuedCoordinates.removeFirstLong();
-                final byte level = queue.queuedLevels.removeFirstByte();
+                final long coordinate = queue.queuedCoordinates.removeFirst(); // Canvas
+                final byte level = queue.queuedLevels.removeFirst(); // Canvas
 
                 final byte currentLevel = this.levels.removeIfGreaterOrEqual(coordinate, level);
                 if (currentLevel == 0) {
@@ -561,7 +_,7 @@
         }
 
         // copied from superclass
-        private int find(final long k) {
+        private synchronized int find(final long k) { // Canvas - synchronize
             if (k == 0L) {
                 return this.containsNullKey ? this.n : -(this.n + 1);
             } else {
@@ -585,7 +_,7 @@
         }
 
         // copied from superclass
-        private void insert(final int pos, final long k, final byte v) {
+        private synchronized void insert(final int pos, final long k, final byte v) { // Canvas - synchronize
             if (pos == this.n) {
                 this.containsNullKey = true;
             }
@@ -598,7 +_,7 @@
         }
 
         // copied from superclass
-        public byte putIfGreater(final long key, final byte value) {
+        public synchronized byte putIfGreater(final long key, final byte value) { // Canvas - synchronize
             final int pos = this.find(key);
             if (pos < 0) {
                 if (this.defRetValue < value) {
@@ -616,7 +_,7 @@
         }
 
         // copied from superclass
-        private void removeEntry(final int pos) {
+        private synchronized void removeEntry(final int pos) { // Canvas - synchronize
             --this.size;
             this.shiftKeys(pos);
             if (this.n > this.minN && this.size < this.maxFill / 4 && this.n > 16) {
@@ -625,7 +_,7 @@
         }
 
         // copied from superclass
-        private void removeNullEntry() {
+        private synchronized void removeNullEntry() { // Canvas - synchronize
             this.containsNullKey = false;
             --this.size;
             if (this.n > this.minN && this.size < this.maxFill / 4 && this.n > 16) {
@@ -634,7 +_,7 @@
         }
 
         // copied from superclass
-        public byte removeIfGreaterOrEqual(final long key, final byte value) {
+        public synchronized byte removeIfGreaterOrEqual(final long key, final byte value) { // Canvas - synchronize
             if (key == 0L) {
                 if (!this.containsNullKey) {
                     return this.defRetValue;
@@ -679,8 +_,8 @@
 
     protected static final class WorkQueue {
 
-        public final NoResizeLongArrayFIFODeque queuedCoordinates = new NoResizeLongArrayFIFODeque();
-        public final NoResizeByteArrayFIFODeque queuedLevels = new NoResizeByteArrayFIFODeque();
+        public final ConcurrentLinkedDeque<Long> queuedCoordinates = new ConcurrentLinkedDeque<>();
+        public final ConcurrentLinkedDeque<Byte> queuedLevels = new ConcurrentLinkedDeque<>();
 
     }
 
