--- a/src/main/java/ca/spottedleaf/moonrise/common/list/ShortList.java
+++ b/src/main/java/ca/spottedleaf/moonrise/common/list/ShortList.java
@@ -1,11 +_,13 @@
 package ca.spottedleaf.moonrise.common.list;
 
+import it.unimi.dsi.fastutil.shorts.Short2ShortMap;
+import it.unimi.dsi.fastutil.shorts.Short2ShortMaps;
 import it.unimi.dsi.fastutil.shorts.Short2ShortOpenHashMap;
 import java.util.Arrays;
 
 public final class ShortList {
 
-    private final Short2ShortOpenHashMap map = new Short2ShortOpenHashMap();
+    private final Short2ShortMap map = Short2ShortMaps.synchronize(new Short2ShortOpenHashMap());
     {
         this.map.defaultReturnValue(Short.MIN_VALUE);
     }
@@ -13,13 +_,13 @@
     private static final short[] EMPTY_LIST = new short[0];
 
     private short[] byIndex = EMPTY_LIST;
-    private short count;
+    private volatile short count; // Canvas - volatile
 
     public int size() {
-        return (int)this.count;
+        return this.count; // Canvas - remove redundant cast
     }
 
-    public short getRaw(final int index) {
+    public synchronized short getRaw(final int index) {
         return this.byIndex[index];
     }
 
@@ -30,8 +_,8 @@
         }
     }
 
-    public boolean add(final short value) {
-        final int count = (int)this.count;
+    public synchronized boolean add(final short value) {
+        final int count = this.count;
         final short currIndex = this.map.putIfAbsent(value, (short)count);
 
         if (currIndex != Short.MIN_VALUE) {
@@ -51,7 +_,7 @@
         return true;
     }
 
-    public boolean remove(final short value) {
+    public synchronized boolean remove(final short value) {
         final short index = this.map.remove(value);
         if (index == Short.MIN_VALUE) {
             return false;
@@ -70,7 +_,7 @@
         return true;
     }
 
-    public void clear() {
+    public synchronized void clear() {
         this.count = (short)0;
         this.map.clear();
     }
