--- a/src/main/java/ca/spottedleaf/moonrise/common/list/EntityList.java
+++ b/src/main/java/ca/spottedleaf/moonrise/common/list/EntityList.java
@@ -1,5 +_,7 @@
 package ca.spottedleaf.moonrise.common.list;
 
+import it.unimi.dsi.fastutil.ints.Int2IntMap;
+import it.unimi.dsi.fastutil.ints.Int2IntMaps;
 import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
 import net.minecraft.world.entity.Entity;
 import java.util.Arrays;
@@ -13,7 +_,7 @@
  */
 public final class EntityList implements Iterable<Entity> {
 
-    private final Int2IntOpenHashMap entityToIndex = new Int2IntOpenHashMap(2, 0.8f);
+    private final Int2IntMap entityToIndex = Int2IntMaps.synchronize(new Int2IntOpenHashMap(2, 0.8f)); // Canvas - synchronize
     {
         this.entityToIndex.defaultReturnValue(Integer.MIN_VALUE);
     }
@@ -27,11 +_,11 @@
         return this.count;
     }
 
-    public boolean contains(final Entity entity) {
+    public synchronized boolean contains(final Entity entity) { // Canvas - synchronize
         return this.entityToIndex.containsKey(entity.getId());
     }
 
-    public boolean remove(final Entity entity) {
+    public synchronized boolean remove(final Entity entity) { // Canvas - synchronize
         final int index = this.entityToIndex.remove(entity.getId());
         if (index == Integer.MIN_VALUE) {
             return false;
@@ -50,7 +_,7 @@
         return true;
     }
 
-    public boolean add(final Entity entity) {
+    public synchronized boolean add(final Entity entity) { // Canvas - synchronize
         final int count = this.count;
         final int currIndex = this.entityToIndex.putIfAbsent(entity.getId(), count);
 
@@ -82,18 +_,18 @@
         return this.entities[index];
     }
 
-    public Entity[] getRawData() {
+    public synchronized Entity[] getRawData() { // Canvas - synchronize
         return this.entities;
     }
 
-    public void clear() {
+    public synchronized void clear() { // Canvas - synchronize
         this.entityToIndex.clear();
         Arrays.fill(this.entities, 0, this.count, null);
         this.count = 0;
     }
 
     @Override
-    public Iterator<Entity> iterator() {
+    public synchronized Iterator<Entity> iterator() { // Canvas - synchronize
         return new Iterator<>() {
             private Entity lastRet;
             private int current;
