--- a/src/main/java/org/spigotmc/WatchdogThread.java
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -1,15 +_,24 @@
 package org.spigotmc;
 
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.entity.ThreadedEntityScheduler;
 import io.papermc.paper.FeatureHooks;
 import io.papermc.paper.configuration.GlobalConfiguration;
 import java.lang.management.ManagementFactory;
 import java.lang.management.MonitorInfo;
 import java.lang.management.ThreadInfo;
+import java.util.Locale;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.function.Consumer;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import io.canvasmc.canvas.server.level.WatchdogWatcher;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
 import org.bukkit.Bukkit;
+import org.jetbrains.annotations.NotNull;
 import org.bukkit.craftbukkit.CraftServer;
+import org.jetbrains.annotations.Nullable;
 
 public class WatchdogThread extends ca.spottedleaf.moonrise.common.util.TickThread { // Paper - rewrite chunk system
 
@@ -50,6 +_,17 @@
     public static void tick() {
         WatchdogThread.instance.lastTick = WatchdogThread.monotonicMillis();
     }
+    // Canvas start
+
+    public static void tickLevel(@NotNull ServerLevel level)
+    {
+        level.lastWatchdogTick = WatchdogThread.monotonicMillis();
+    }
+
+    public static void tickEntityThread(@NotNull ThreadedEntityScheduler entityScheduler) {
+        entityScheduler.lastWatchdogTick = WatchdogThread.monotonicMillis();
+    }
+    // Canvas end
 
     public static void doStop() {
         if (WatchdogThread.instance != null) {
@@ -59,32 +_,48 @@
 
     @Override
     public void run() {
+        // Canvas start - allow disabling watchdog
+        if (!Config.INSTANCE.enableWatchdog) {
+            return;
+        }
+        // Canvas end
         while (!this.stopping) {
             // Paper start
             Logger logger = Bukkit.getServer().getLogger();
             long currentTime = WatchdogThread.monotonicMillis();
             MinecraftServer server = MinecraftServer.getServer();
-            if (this.lastTick != 0 && this.timeoutTime > 0 && WatchdogThread.hasStarted && (!server.isRunning() || (currentTime > this.lastTick + this.earlyWarningEvery && !DISABLE_WATCHDOG))) { // Paper - add property to disable
-                boolean isLongTimeout = currentTime > this.lastTick + this.timeoutTime || (!server.isRunning() && !server.hasStopped() && currentTime > this.lastTick + 1000);
+            // Canvas start
+            // if (this.lastTick != 0 && this.timeoutTime > 0 && WatchdogThread.hasStarted && (!server.isRunning() || (currentTime > this.lastTick + this.earlyWarningEvery && !DISABLE_WATCHDOG))) { // Paper - add property to disable
+            final AtomicBoolean shouldBreak = new AtomicBoolean(false);
+            Consumer<WatchdogWatcher> laggingConsume = (levelOrServer) -> {
+                long lt = levelOrServer instanceof MinecraftServer ? lastTick : levelOrServer instanceof ThreadedEntityScheduler ? ((ThreadedEntityScheduler)levelOrServer).lastWatchdogTick : ((ServerLevel)levelOrServer).lastWatchdogTick;
+                String capitalized = levelOrServer.getName().substring(0, 1).toUpperCase() + levelOrServer.getName().substring(1).toLowerCase();
+                boolean isLongTimeout = currentTime > lt + timeoutTime || (!server.isRunning() && !server.hasStopped() && currentTime > lt + 1000);
+                if (levelOrServer instanceof ServerLevel level) {
+                    if (!level.isTicking()) {
+                        return;
+                    }
+                }
                 // Don't spam early warning dumps
                 if (!isLongTimeout && (this.earlyWarningEvery <= 0 ||
                     !hasStarted || currentTime < this.lastEarlyWarning + this.earlyWarningEvery ||
                     currentTime < this.lastTick + this.earlyWarningDelay))
-                    continue;
+                    return; // Canvas
                 if (!isLongTimeout && server.hasStopped())
-                    continue; // Don't spam early watchdog warnings during shutdown, we'll come back to this...
+                    return; // Don't spam early watchdog warnings during shutdown, we'll come back to this... // Canvas
+             // Canvas end
                 this.lastEarlyWarning = currentTime;
                 if (isLongTimeout) {
                     // Paper end
                     logger.log(Level.SEVERE, "------------------------------");
-                    logger.log(Level.SEVERE, "The server has stopped responding! This is (probably) not a Purpur bug."); // Paper // Purpur - Rebrand
-                    logger.log(Level.SEVERE, "If you see a plugin in the Server thread dump below, then please report it to that author");
+                    logger.log( Level.SEVERE, "The " + levelOrServer.getName() + " has stopped responding! This is (probably) not a Canvas bug." ); // Paper // Purpur - Rebrand // Canvas
+                    logger.log( Level.SEVERE, "If you see a plugin in the " + capitalized + " thread dump below, then please report it to that author" ); // Canvas
                     logger.log(Level.SEVERE, "\t *Especially* if it looks like HTTP or MySQL operations are occurring");
                     logger.log(Level.SEVERE, "If you see a world save or edit, then it means you did far more than your server can handle at once");
                     logger.log(Level.SEVERE, "\t If this is the case, consider increasing timeout-time in spigot.yml but note that this will replace the crash with LARGE lag spikes");
-                    logger.log(Level.SEVERE, "If you are unsure or still think this is a Purpur bug, please report this to https://github.com/PurpurMC/Purpur/issues"); // Purpur - Rebrand
+                    logger.log(Level.SEVERE, "If you are unsure or still think this is a Canvas bug, please report this to https://github.com/CraftCanvasMC/Canvas/issues"); // Purpur - Rebrand // Canvas - Rebrand
                     logger.log(Level.SEVERE, "Be sure to include ALL relevant console errors and Minecraft crash reports");
-                    logger.log(Level.SEVERE, "Purpur version: " + Bukkit.getServer().getVersion()); // Purpur - Rebrand
+                    logger.log(Level.SEVERE, "Canvas version: " + Bukkit.getServer().getVersion()); // Purpur - Rebrand // Canvas - Rebrand
 
                     if (net.minecraft.world.level.Level.lastPhysicsProblem != null) {
                         logger.log(Level.SEVERE, "------------------------------");
@@ -104,14 +_,14 @@
                     }
                     // Paper end
                 } else {
-                    logger.log(Level.SEVERE, "--- DO NOT REPORT THIS TO PURPUR - THIS IS NOT A BUG OR A CRASH  - " + Bukkit.getServer().getVersion() + " ---"); // Purpur - Rebrand
-                    logger.log(Level.SEVERE, "The server has not responded for " + (currentTime - lastTick) / 1000 + " seconds! Creating thread dump");
+                    logger.log(Level.SEVERE, "--- DO NOT REPORT THIS TO CANVAS - THIS IS NOT A BUG OR A CRASH  - " + Bukkit.getServer().getVersion() + " ---"); // Purpur - Rebrand // Canvas - Rebrand
+                    logger.log(Level.SEVERE, "The " + levelOrServer.getName() + " has not responded for " + (currentTime - lt) / 1000 + " seconds! Creating thread dump"); // Canvas
                 }
                 // Paper end - Different message for short timeout
                 logger.log(Level.SEVERE, "------------------------------");
-                logger.log(Level.SEVERE, "Server thread dump (Look for plugins here before reporting to Purpur!):" ); // Paper // Purpur - Rebrand
+                logger.log( Level.SEVERE, capitalized + " thread dump (Look for plugins here before reporting to Canvas!):" ); // Paper // Purpur - Rebrand // Canvas
                 FeatureHooks.dumpAllChunkLoadInfo(MinecraftServer.getServer(), isLongTimeout); // Paper - log detailed tick information
-                WatchdogThread.dumpThread(ManagementFactory.getThreadMXBean().getThreadInfo(MinecraftServer.getServer().serverThread.getId(), Integer.MAX_VALUE), logger);
+                WatchdogThread.dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( levelOrServer.getRunningThread().getId(), Integer.MAX_VALUE ), logger ); // Canvas
                 logger.log(Level.SEVERE, "------------------------------");
 
                 // Paper start - Only print full dump on long timeouts
@@ -122,7 +_,7 @@
                         WatchdogThread.dumpThread(thread, logger);
                     }
                 } else {
-                    logger.log(Level.SEVERE, "--- DO NOT REPORT THIS TO PURPUR - THIS IS NOT A BUG OR A CRASH ---"); // Purpur - Rebrand
+                    logger.log(Level.SEVERE, "--- DO NOT REPORT THIS TO CANVAS - THIS IS NOT A BUG OR A CRASH ---"); // Purpur - Rebrand // Canvas - Rebrand
                 }
 
                 logger.log(Level.SEVERE, "------------------------------");
@@ -146,11 +_,35 @@
                             server.close();
                         }
                     }
-                    break;
+                // Canvas start
+                    shouldBreak.set(true);
                 }
                 // Paper end
-            }
-
+            };
+
+            if (checkMainThread(server, currentTime)) {
+                laggingConsume.accept(server);
+                if (shouldBreak.get()) {
+                    break;
+                }
+            }
+            ThreadedEntityScheduler entityScheduler = MinecraftServer.getThreadedServer().entityScheduler;
+            if (checkEntityScheduler(entityScheduler, currentTime)) {
+                laggingConsume.accept(entityScheduler);
+                if (shouldBreak.get()) {
+                    break;
+                }
+            }
+            for (ServerLevel level : server.getAllLevels()) {
+                if (checkLevelThread(level, currentTime)) {
+                    laggingConsume.accept(level);
+                    if (shouldBreak.get()) {
+                        break;
+                    }
+                }
+            }
+
+            // Canvas end
             try {
                 sleep(1000); // Paper - Reduce check time to every second instead of every ten seconds, more consistent and allows for short timeout
             } catch (InterruptedException ex) {
@@ -158,7 +_,20 @@
             }
         }
     }
-
+    // Canvas start
+
+    private boolean checkMainThread(MinecraftServer server, long currentTime) {
+        return this.lastTick != 0 && this.timeoutTime > 0 && WatchdogThread.hasStarted && (!server.isRunning() || (currentTime > this.lastTick + this.earlyWarningEvery && !DISABLE_WATCHDOG));
+    }
+
+    private boolean checkLevelThread(@NotNull ServerLevel level, long currentTime) {
+        return level.lastWatchdogTick != 0 && this.timeoutTime > 0 && WatchdogThread.hasStarted && (!level.running || (currentTime > level.lastWatchdogTick + this.earlyWarningEvery && !DISABLE_WATCHDOG));
+    }
+
+    private boolean checkEntityScheduler(@Nullable ThreadedEntityScheduler entityScheduler, long currentTime) {
+        return entityScheduler != null && entityScheduler.lastWatchdogTick != 0 && this.timeoutTime > 0 && WatchdogThread.hasStarted && (!entityScheduler.running || (currentTime > entityScheduler.lastWatchdogTick + this.earlyWarningEvery && !DISABLE_WATCHDOG));
+    }
+    // Canvas end
     private static void dumpThread(ThreadInfo thread, Logger log) {
         log.log(Level.SEVERE, "------------------------------");
 
