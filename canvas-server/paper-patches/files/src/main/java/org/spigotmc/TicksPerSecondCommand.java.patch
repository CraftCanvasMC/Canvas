--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -1,5 +_,8 @@
 package org.spigotmc;
 
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.ThreadedBukkitServer;
+import io.canvasmc.canvas.command.ThreadedServerHealthDump;
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.JoinConfiguration;
 import net.kyori.adventure.text.TextComponent;
@@ -7,6 +_,13 @@
 import net.kyori.adventure.text.format.TextColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
 import static net.kyori.adventure.text.Component.text;
 
@@ -28,11 +_,31 @@
         .build();
     // Paper end
 
-    @Override
+    // Canvas start - rewrite tps command
+    @Override
+    public @NotNull List<String> tabComplete(@NotNull final CommandSender sender, @NotNull final String alias, final @NotNull String @NotNull [] args) throws IllegalArgumentException {
+        return args.length == 1 ? Stream.of("regions", "all", "rate")
+            .filter(arg -> arg.startsWith(args[0].toLowerCase()))
+            .collect(Collectors.toList()) : args.length == 2 ? Stream.of("20")
+            .filter(arg -> arg.startsWith(args[1].toLowerCase()))
+            .collect(Collectors.toList()) : Collections.emptyList();
+    }
+
+    @Override
+    // Canvas end
     public boolean execute(CommandSender sender, String currentAlias, String[] args) {
         if (!this.testPermission(sender)) {
             return true;
         }
+        // Canvas start - we have our own new tick command
+        if (true) {
+            if (args.length > 1 && args[0].equalsIgnoreCase("rate")) {
+                int newRate = Integer.parseInt(args[1]);
+                ThreadedBukkitServer.getInstance().getScheduler().setTickRate(newRate);
+            } else ThreadedServerHealthDump.dump(sender, Config.INSTANCE.ticking.enableThreadedRegionizing && Arrays.stream(args).toList().contains("regions"));
+            return true;
+        }
+        // Canvas end
 
         // Paper start - Further improve tick handling
         double[] tps = org.bukkit.Bukkit.getTPS();
