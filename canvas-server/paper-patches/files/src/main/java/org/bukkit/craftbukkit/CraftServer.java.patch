--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -13,6 +_,9 @@
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.serialization.Dynamic;
 import com.mojang.serialization.Lifecycle;
+import io.canvasmc.canvas.scheduler.CanvasPerWorldScheduler;
+import io.canvasmc.canvas.server.MultiWatchdogThread;
+import io.canvasmc.canvas.server.ThreadedServer;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.awt.image.BufferedImage;
 import java.io.ByteArrayOutputStream;
@@ -317,7 +_,7 @@
     public final io.papermc.paper.SparksFly spark; // Paper - spark
 
     // Paper start - Folia region threading API
-    private final io.papermc.paper.threadedregions.scheduler.FallbackRegionScheduler regionizedScheduler = new io.papermc.paper.threadedregions.scheduler.FallbackRegionScheduler();
+    private final CanvasPerWorldScheduler regionizedScheduler = new CanvasPerWorldScheduler(); // Canvas - support folia regionzed threading
     private final io.papermc.paper.threadedregions.scheduler.FoliaAsyncScheduler asyncScheduler = new io.papermc.paper.threadedregions.scheduler.FoliaAsyncScheduler();
     private final io.papermc.paper.threadedregions.scheduler.FoliaGlobalRegionScheduler globalRegionScheduler = new io.papermc.paper.threadedregions.scheduler.FoliaGlobalRegionScheduler();
 
@@ -1068,7 +_,7 @@
             throw new IllegalStateException(org.bukkit.command.defaults.ReloadCommand.RELOADING_DISABLED_MESSAGE);
         }
         // Paper end - lifecycle events
-        org.spigotmc.WatchdogThread.hasStarted = false; // Paper - Disable watchdog early timeout on reload
+        MultiWatchdogThread.hasStarted = false; // Paper - Disable watchdog early timeout on reload // Canvas - rewrite watchdog
         this.reloadCount++;
         this.configuration = YamlConfiguration.loadConfiguration(this.getConfigFile());
         this.commandsConfiguration = YamlConfiguration.loadConfiguration(this.getCommandsConfigFile());
@@ -1174,7 +_,7 @@
         this.syncCommands(); // Refresh commands after event
         // Paper end - brigadier command API
         this.getPluginManager().callEvent(new ServerLoadEvent(ServerLoadEvent.LoadType.RELOAD));
-        org.spigotmc.WatchdogThread.hasStarted = true; // Paper - Disable watchdog early timeout on reload
+        MultiWatchdogThread.hasStarted = true; // Paper - Disable watchdog early timeout on reload // Canvas - rewrite watchdog
     }
 
     // Paper start - Wait for Async Tasks during shutdown
@@ -1489,6 +_,12 @@
         io.papermc.paper.FeatureHooks.tickEntityManager(serverLevel); // SPIGOT-6526: Load pending entities so they are available to the API // Paper - chunk system
 
         this.pluginManager.callEvent(new WorldLoadEvent(serverLevel.getWorld()));
+        // Canvas start
+        if (MinecraftServer.getThreadedServer().hasStarted()) {
+            // only spin it here if the server already started
+            ThreadedServer.LEVEL_SPINNER.apply(serverLevel);
+        }
+        // Canvas end
         return serverLevel.getWorld();
     }
 
