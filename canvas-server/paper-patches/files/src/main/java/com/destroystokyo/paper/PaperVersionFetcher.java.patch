--- a/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
+++ b/src/main/java/com/destroystokyo/paper/PaperVersionFetcher.java
@@ -36,7 +_,7 @@
     private static final int DISTANCE_ERROR = -1;
     private static final int DISTANCE_UNKNOWN = -2;
     // Purpur start - Rebrand
-    private static final String DOWNLOAD_PAGE = "https://purpurmc.org/downloads";
+    private static final String DOWNLOAD_PAGE = "https://jenkins.canvasmc.io/job/Canvas/"; // Canvas
     private static int distance = DISTANCE_UNKNOWN; public int distance() { return distance; }
     // Purpur end - Rebrand
 
@@ -52,7 +_,7 @@
         if (build.buildNumber().isEmpty() && build.gitCommit().isEmpty()) {
             updateMessage = text("You are running a development version without access to version information", color(0xFF5300));
         } else {
-            updateMessage = getUpdateStatusMessage("PurpurMC/Purpur", build); // Purpur - Rebrand
+            updateMessage = getUpdateStatusMessage("CraftCanvasMC/Canvas", build); // Purpur - Rebrand // Canvas
         }
         final @Nullable Component history = this.getHistory();
 
@@ -66,14 +_,18 @@
         if (buildNumber.isPresent()) {
             distance = fetchDistanceFromSiteApi(build, buildNumber.getAsInt());
         } else {
-            final Optional<String> gitBranch = build.gitBranch();
+            // Canvas start
+            /* final Optional<String> gitBranch = build.gitBranch();
             final Optional<String> gitCommit = build.gitCommit();
             if (gitBranch.isPresent() && gitCommit.isPresent()) {
                 distance = fetchDistanceFromGitHub(repo, gitBranch.get(), gitCommit.get());
-            }
+            } */
+            distance = -10;
+            // Canvas end
         }
 
         return switch (distance) {
+            case -10 -> text("* You are running a development/local version", NamedTextColor.RED); // Canvas
             case DISTANCE_ERROR -> text("* Error obtaining version information", NamedTextColor.RED); // Purpur - Rebrand
             case 0 -> text("* You are running the latest version", NamedTextColor.GREEN); // Purpur - Rebrand
             case DISTANCE_UNKNOWN -> text("* Unknown version", NamedTextColor.YELLOW); // Purpur - Rebrand
@@ -88,20 +_,23 @@
 
     private static int fetchDistanceFromSiteApi(final ServerBuildInfo build, final int jenkinsBuild) {
         try {
+            // Canvas start
+            final String jenkinsApiUrl = "https://jenkins.canvasmc.io/job/Canvas/lastSuccessfulBuild/api/json";
+             
             try (final BufferedReader reader = Resources.asCharSource(
-                URI.create("https://api.purpurmc.org/v2/purpur/" + build.minecraftVersionId()).toURL(), // Purpur - Rebrand
+                URI.create(jenkinsApiUrl).toURL(),
                 Charsets.UTF_8
             ).openBufferedStream()) {
                 final JsonObject json = new Gson().fromJson(reader, JsonObject.class);
-                //final JsonArray builds = json.getAsJsonArray("builds"); // Purpur - Rebrand
-                final int latest = json.getAsJsonObject("builds").getAsJsonPrimitive("latest").getAsInt(); // Purpur - Rebrand
-                return latest - jenkinsBuild;
+                final int latestBuild = json.getAsJsonPrimitive("number").getAsInt();
+                return latestBuild - jenkinsBuild;
             } catch (final JsonSyntaxException ex) {
-                LOGGER.error("Error parsing json from Purpur's downloads API", ex); // Purpur - Rebrand
+                LOGGER.error("Error parsing JSON from CanvasMC's Jenkins API", ex);
+            // Canvas end
                 return DISTANCE_ERROR;
             }
         } catch (final IOException e) {
-            LOGGER.error("Error while parsing version", e);
+            LOGGER.error("Error while parsing version from Jenkins API", e); // Canvas
             return DISTANCE_ERROR;
         }
     }
