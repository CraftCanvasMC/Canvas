--- a/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java
+++ b/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java
@@ -39,12 +_,13 @@
 
     private static final record ScheduledTask(Consumer<? extends Entity> run, Consumer<? extends Entity> retired) {}
 
-    private long tickCount = 0L;
+    private volatile long tickCount = 0L; // Canvas - volatile
     private static final long RETIRED_TICK_COUNT = -1L;
     private final Object stateLock = new Object();
     private final Long2ObjectOpenHashMap<List<ScheduledTask>> oneTimeDelayed = new Long2ObjectOpenHashMap<>();
 
     private final ArrayDeque<ScheduledTask> currentlyExecuting = new ArrayDeque<>();
+    public volatile boolean retired = false; // Canvas - volatile
 
     public EntityScheduler(final CraftEntity entity) {
         this.entity = Validate.notNull(entity);
@@ -63,6 +_,7 @@
     public void retire() {
         synchronized (this.stateLock) {
             if (this.tickCount == RETIRED_TICK_COUNT) {
+                this.retired = true;
                 throw new IllegalStateException("Already retired");
             }
             this.tickCount = RETIRED_TICK_COUNT;
@@ -144,7 +_,7 @@
         final List<ScheduledTask> toRun;
         synchronized (this.stateLock) {
             if (this.tickCount == RETIRED_TICK_COUNT) {
-                throw new IllegalStateException("Ticking retired scheduler");
+                return; // Canvas - don't fail-fast, just return... please?
             }
             ++this.tickCount;
             if (this.oneTimeDelayed.isEmpty()) {
