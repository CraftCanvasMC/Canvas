--- a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
@@ -4,6 +_,7 @@
 import com.destroystokyo.paper.event.server.ServerExceptionEvent;
 import com.destroystokyo.paper.exception.ServerEventException;
 import com.google.common.collect.Sets;
+import io.canvasmc.canvas.Config;
 import org.bukkit.Server;
 import org.bukkit.Warning;
 import org.bukkit.event.Event;
@@ -24,6 +_,8 @@
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.locks.Condition;
+import java.util.concurrent.locks.ReentrantLock;
 import java.util.logging.Level;
 
 class PaperEventManager {
@@ -35,12 +_,32 @@
     }
 
     // SimplePluginManager
+    // Canvas start
+    private final Object singleThreadedEventLock = new Object();
+
     public void callEvent(@NotNull Event event) {
-        if (event.isAsynchronous() && this.server.isPrimaryThread()) {
+        if (Config.INSTANCE.pluginCompatibilityMode && !event.isAsynchronous()) {
+            if (!event.getHandlers().hasRegisteredListeners()) {
+                return;
+            }
+            synchronized (singleThreadedEventLock) {
+                callEventInternal(event);
+            }
+            return;
+        }
+
+        // if it's an async event, we don't sync-lock it, given plugins SHOULD already have code to handle this correctly
+        // otherwise plugin compat mode is disabled
+        callEventInternal(event);
+    }
+
+    public void callEventInternal(@NotNull Event event) {
+        /* if (event.isAsynchronous() && this.server.isPrimaryThread()) {
             throw new IllegalStateException(event.getEventName() + " may only be triggered asynchronously.");
         } else if (!event.isAsynchronous() && !this.server.isPrimaryThread() && !this.server.isStopping()) {
             throw new IllegalStateException(event.getEventName() + " may only be triggered synchronously.");
-        }
+        } */
+    // Canvas end
 
         HandlerList handlers = event.getHandlers();
         RegisteredListener[] listeners = handlers.getRegisteredListeners();
