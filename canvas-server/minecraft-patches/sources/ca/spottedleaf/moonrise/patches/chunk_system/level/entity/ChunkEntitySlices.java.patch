--- a/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/ChunkEntitySlices.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/ChunkEntitySlices.java
@@ -28,6 +_,7 @@
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
+import java.util.concurrent.locks.ReentrantLock;
 import java.util.function.Predicate;
 
 public final class ChunkEntitySlices {
@@ -203,8 +_,10 @@
         }
     }
 
-    private boolean preventStatusUpdates;
+    public final ReentrantLock statusLock = new ReentrantLock(); // Canvas - status locks
+    private volatile boolean preventStatusUpdates; // Canvas - volatile
     public boolean startPreventingStatusUpdates() {
+        this.statusLock.lock(); // Canvas - status locks
         final boolean ret = this.preventStatusUpdates;
         this.preventStatusUpdates = true;
         return ret;
@@ -216,9 +_,11 @@
 
     public void stopPreventingStatusUpdates(final boolean prev) {
         this.preventStatusUpdates = prev;
+        this.statusLock.unlock(); // Canvas - status locks
     }
 
     public void updateStatus(final FullChunkStatus status, final EntityLookup lookup) {
+        this.statusLock.lock(); try { // Canvas - chunk status locks
         this.status = status;
 
         final Entity[] entities = this.entities.getRawData();
@@ -232,9 +_,11 @@
 
             lookup.entityStatusChange(entity, this, oldVisibility, newVisibility, false, false, false);
         }
+        } finally { this.statusLock.unlock(); } // Canvas - chunk status locks
     }
 
     public boolean addEntity(final Entity entity, final int chunkSection) {
+        this.statusLock.lock(); try { // Canvas - chunk status locks
         if (!this.entities.add(entity)) {
             return false;
         }
@@ -266,9 +_,11 @@
         }
 
         return true;
+        } finally { this.statusLock.unlock(); } // Canvas - chunk status locks
     }
 
     public boolean removeEntity(final Entity entity, final int chunkSection) {
+        this.statusLock.lock(); try { // Canvas - chunk status locks
         if (!this.entities.remove(entity)) {
             return false;
         }
@@ -295,6 +_,7 @@
         byType.removeEntity(entity, sectionIndex);
 
         return true;
+        } finally { this.statusLock.unlock(); } // Canvas - chunk status locks
     }
 
     public void getHardCollidingEntities(final Entity except, final AABB box, final List<Entity> into, final Predicate<? super Entity> predicate) {
