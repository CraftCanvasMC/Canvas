--- a/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkTaskScheduler.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkTaskScheduler.java
@@ -26,6 +_,8 @@
 import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.server.chunk.AsyncPlayerChunkLoader;
+import io.canvasmc.canvas.server.chunk.TheChunkSystem;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -66,11 +_,7 @@
     private static final Logger LOGGER = LogUtils.getClassLogger();
 
     public static void init(final boolean useParallelGen) {
-        for (final PrioritisedThreadPool.ExecutorGroup.ThreadPoolExecutor executor : MoonriseCommon.RADIUS_AWARE_GROUP.getAllExecutors()) {
-            executor.setMaxParallelism(useParallelGen ? -1 : 1);
-        }
-
-        LOGGER.info("Chunk system is using population gen parallelism: " + useParallelGen);
+        // Canvas - not anymore :)
     }
 
     public static final TicketType<Long> CHUNK_LOAD = TicketType.create("chunk_system:chunk_load", Long::compareTo);
@@ -115,12 +_,14 @@
 
     public final ServerLevel world;
     public final RadiusAwarePrioritisedExecutor radiusAwareScheduler;
-    public final PrioritisedThreadPool.ExecutorGroup.ThreadPoolExecutor parallelGenExecutor;
-    private final PrioritisedThreadPool.ExecutorGroup.ThreadPoolExecutor radiusAwareGenExecutor;
-    public final PrioritisedThreadPool.ExecutorGroup.ThreadPoolExecutor loadExecutor;
+    // Canvas start - rewrite moonrise executor
+    public final TheChunkSystem.ExecutorGroup.ThreadPoolExecutor parallelGenExecutor;
+    private final TheChunkSystem.ExecutorGroup.ThreadPoolExecutor radiusAwareGenExecutor;
+    public final TheChunkSystem.ExecutorGroup.ThreadPoolExecutor loadExecutor;
     public final PrioritisedThreadPool.ExecutorGroup.ThreadPoolExecutor ioExecutor;
-    public final PrioritisedThreadPool.ExecutorGroup.ThreadPoolExecutor compressionExecutor;
-    public final PrioritisedThreadPool.ExecutorGroup.ThreadPoolExecutor saveExecutor;
+    public final TheChunkSystem.ExecutorGroup.ThreadPoolExecutor compressionExecutor;
+    public final TheChunkSystem.ExecutorGroup.ThreadPoolExecutor saveExecutor;
+    // Canvas end
 
     private final PrioritisedTaskQueue mainThreadExecutor = new PrioritisedTaskQueue();
 
@@ -198,7 +_,7 @@
                 // FULL is executed on main.
         );
 
-        for (final ChunkStatus status : parallelCapableStatus) {
+        for (final ChunkStatus status : ChunkStatus.getStatusList()) { // Canvas - mark all ChunkStatuses as parallel capable
             ((ChunkSystemChunkStatus)status).moonrise$setParallelCapable(true);
         }
     }
@@ -291,14 +_,16 @@
         this.lockShift = Math.max(((ChunkSystemServerLevel)world).moonrise$getRegionChunkShift(), ThreadedTicketLevelPropagator.SECTION_SHIFT);
         this.schedulingLockArea = new ReentrantAreaLock(this.getChunkSystemLockShift());
 
-        this.parallelGenExecutor = MoonriseCommon.PARALLEL_GEN_GROUP.createExecutor(-1, MoonriseCommon.WORKER_QUEUE_HOLD_TIME, 0);
-        this.radiusAwareGenExecutor = MoonriseCommon.RADIUS_AWARE_GROUP.createExecutor(1, MoonriseCommon.WORKER_QUEUE_HOLD_TIME, 0);
-        this.loadExecutor = MoonriseCommon.LOAD_GROUP.createExecutor(-1, MoonriseCommon.WORKER_QUEUE_HOLD_TIME, 0);
-        this.radiusAwareScheduler = new RadiusAwarePrioritisedExecutor(this.radiusAwareGenExecutor, 16);
+        // Canvas start - rewrite moonrise executor
+        this.parallelGenExecutor = MoonriseCommon.PARALLEL_GEN_GROUP.createExecutor();
+        this.radiusAwareGenExecutor = MoonriseCommon.RADIUS_AWARE_GROUP.createExecutor();
+        this.loadExecutor = MoonriseCommon.LOAD_GROUP.createExecutor();
+        this.radiusAwareScheduler = new RadiusAwarePrioritisedExecutor(this.radiusAwareGenExecutor, 10_000); // Canvas - optimize moonrise
         this.ioExecutor = MoonriseCommon.SERVER_REGION_IO_GROUP.createExecutor(-1, MoonriseCommon.IO_QUEUE_HOLD_TIME, 0);
         // we need a separate executor here so that on shutdown we can continue to process I/O tasks
-        this.compressionExecutor = MoonriseCommon.LOAD_GROUP.createExecutor(-1, MoonriseCommon.WORKER_QUEUE_HOLD_TIME, 0);
-        this.saveExecutor = MoonriseCommon.LOAD_GROUP.createExecutor(-1, MoonriseCommon.WORKER_QUEUE_HOLD_TIME, 0);
+        this.compressionExecutor = MoonriseCommon.LOAD_GROUP.createExecutor();
+        this.saveExecutor = MoonriseCommon.LOAD_GROUP.createExecutor();
+        // Canvas end
         this.chunkHolderManager = new ChunkHolderManager(world, this);
     }
 
@@ -372,7 +_,12 @@
         }
         final int accessRadius = getAccessRadius(toStatus);
         if (this.chunkHolderManager.ticketLockArea.isHeldByCurrentThread(chunkX, chunkZ, accessRadius)) {
-            throw new IllegalStateException("Cannot schedule chunk load during ticket level update");
+            // Canvas start
+            this.scheduleChunkTask(chunkX, chunkZ, () -> {
+                ChunkTaskScheduler.this.scheduleTickingState(chunkX, chunkZ, toStatus, addTicket, priority, onComplete);
+            }, priority);
+            return;
+            // Canvas end
         }
         if (this.schedulingLockArea.isHeldByCurrentThread(chunkX, chunkZ, accessRadius)) {
             throw new IllegalStateException("Cannot schedule chunk loading recursively");
@@ -576,7 +_,12 @@
         }
         final int accessRadius = getAccessRadius(toStatus);
         if (this.chunkHolderManager.ticketLockArea.isHeldByCurrentThread(chunkX, chunkZ, accessRadius)) {
-            throw new IllegalStateException("Cannot schedule chunk load during ticket level update");
+            // Canvas start
+            this.scheduleChunkTask(chunkX, chunkZ, () -> {
+                ChunkTaskScheduler.this.scheduleChunkLoad(chunkX, chunkZ, toStatus, addTicket, priority, onComplete);
+            }, priority);
+            return;
+            // Canvas end
         }
         if (this.schedulingLockArea.isHeldByCurrentThread(chunkX, chunkZ, accessRadius)) {
             throw new IllegalStateException("Cannot schedule chunk loading recursively");
