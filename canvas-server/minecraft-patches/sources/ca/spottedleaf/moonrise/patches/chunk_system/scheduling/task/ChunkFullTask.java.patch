--- a/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/task/ChunkFullTask.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/task/ChunkFullTask.java
@@ -10,6 +_,8 @@
 import ca.spottedleaf.moonrise.patches.chunk_system.level.poi.PoiChunk;
 import ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler;
 import ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder;
+import io.canvasmc.canvas.Config;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerChunkCache;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.level.chunk.ChunkAccess;
@@ -29,6 +_,24 @@
     private final NewChunkHolder chunkHolder;
     private final ChunkAccess fromChunk;
     private final PrioritisedExecutor.PrioritisedTask convertToFullTask;
+    // Canvas start - debug
+    public static final io.papermc.paper.util.IntervalledCounter chunkLoads = new io.papermc.paper.util.IntervalledCounter(java.util.concurrent.TimeUnit.SECONDS.toNanos(15L));
+    public static final io.papermc.paper.util.IntervalledCounter chunkGenerates = new io.papermc.paper.util.IntervalledCounter(java.util.concurrent.TimeUnit.SECONDS.toNanos(15L));
+
+    public static double genRate(final long time) {
+        synchronized (chunkGenerates) {
+            chunkGenerates.updateCurrentTime(time);
+            return chunkGenerates.getRate();
+        }
+    }
+
+    public static double loadRate(final long time) {
+        synchronized (chunkLoads) {
+            chunkLoads.updateCurrentTime(time);
+            return chunkLoads.getRate();
+        }
+    }
+    // Canvas end
 
     public ChunkFullTask(final ChunkTaskScheduler scheduler, final ServerLevel world, final int chunkX, final int chunkZ,
                          final NewChunkHolder chunkHolder, final ChunkAccess fromChunk, final Priority priority) {
@@ -59,6 +_,18 @@
                 ((ChunkSystemPoiManager)this.world.getPoiManager()).moonrise$checkConsistency(this.fromChunk);
             }
 
+            // Canvas start - debug
+            final long time = System.nanoTime();
+            if (this.fromChunk instanceof ImposterProtoChunk wrappedFull) {
+                synchronized (chunkLoads) {
+                    chunkLoads.updateAndAdd(1L, time);
+                }
+            } else {
+                synchronized (chunkGenerates) {
+                    chunkGenerates.updateAndAdd(1L, time);
+                }
+            }
+            // Canvas end
             if (this.fromChunk instanceof ImposterProtoChunk wrappedFull) {
                 chunk = wrappedFull.getWrapped();
             } else {
@@ -83,9 +_,18 @@
                 // Since we load the NBT in the empty status, this will never block for I/O
                 ((ChunkSystemServerLevel)this.world).moonrise$getChunkTaskScheduler().chunkHolderManager.getOrCreateEntityChunk(this.chunkX, this.chunkZ, false);
                 chunk.setLoaded(true);
-                chunk.registerAllBlockEntitiesAfterLevelLoad();
-                chunk.registerTickContainerInLevel(this.world);
-                chunk.setUnsavedListener(this.world.getChunkSource().chunkMap.worldGenContext.unsavedListener());
+                // Canvas start - Threaded Regions
+                Runnable registerTask = () -> {
+                    chunk.registerAllBlockEntitiesAfterLevelLoad();
+                    chunk.registerTickContainerInLevel(this.world);
+                    chunk.setUnsavedListener(this.world.getChunkSource().chunkMap.worldGenContext.unsavedListener());
+                };
+                if (Config.INSTANCE.ticking.enableThreadedRegionizing) {
+                    MinecraftServer.getThreadedServer().taskQueue.queueTickTaskQueue(this.world, chunkX, chunkZ, registerTask, Priority.BLOCKING);
+                } else {
+                    this.world.pushTask(registerTask);
+                }
+                // Canvas end
                 platformHooks.chunkFullStatusComplete(chunk, (ProtoChunk)this.fromChunk);
             } finally {
                 platformHooks.setCurrentlyLoading(this.chunkHolder.vanillaChunkHolder, null);
