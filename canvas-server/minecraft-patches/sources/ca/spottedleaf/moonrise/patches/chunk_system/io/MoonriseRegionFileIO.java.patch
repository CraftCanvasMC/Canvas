--- a/ca/spottedleaf/moonrise/patches/chunk_system/io/MoonriseRegionFileIO.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/io/MoonriseRegionFileIO.java
@@ -14,6 +_,7 @@
 import ca.spottedleaf.moonrise.common.util.TickThread;
 import ca.spottedleaf.moonrise.common.util.WorldUtil;
 import ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel;
+import io.canvasmc.canvas.server.chunk.ChunkRunnable;
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.server.MinecraftServer;
@@ -936,7 +_,7 @@
         }
     }
 
-    private static final class ChunkIOTask {
+    public static final class ChunkIOTask { // Canvas - private -> public
 
         private final ServerLevel world;
         private final RegionDataController regionDataController;
@@ -1037,7 +_,7 @@
         public void scheduleReadIO() {
             final PrioritisedExecutor.PrioritisedTask task;
             synchronized (this) {
-                task = this.regionDataController.ioScheduler.createTask(this.chunkX, this.chunkZ, this::performReadIO, this.priority);
+                task = this.regionDataController.ioScheduler.createTask(this.chunkX, this.chunkZ, new ChunkRunnable(this.chunkX, this.chunkZ, this.world, this::performReadIO), this.priority); // Canvas - rewrite chunk system
                 this.currentTask = task;
             }
             task.queue();
@@ -1123,7 +_,7 @@
         private void scheduleReadDecompress() {
             final PrioritisedExecutor.PrioritisedTask task;
             synchronized (this) {
-                task = this.regionDataController.compressionExecutor.createTask(this::performReadDecompress, this.priority);
+                task = this.regionDataController.compressionExecutor.createTask(new ChunkRunnable(this.chunkX, this.chunkZ, this.world, this::performReadDecompress), this.priority); // Canvas - rewrite chunk system
                 this.currentTask = task;
             }
             task.queue();
@@ -1164,9 +_,11 @@
 
             final PrioritisedExecutor.PrioritisedTask task;
             synchronized (this) {
-                task = this.regionDataController.compressionExecutor.createTask(() -> {
+                // Canvas start - rewrite chunk system
+                task = this.regionDataController.compressionExecutor.createTask(new ChunkRunnable(this.chunkX, this.chunkZ, this.world, () -> {
                     ChunkIOTask.this.performWriteCompress(inProgressWrite);
-                }, this.priority);
+                }), this.priority);
+                // Canvas end
                 this.currentTask = task;
             }
 
@@ -1242,9 +_,11 @@
         private void scheduleWriteIO(final InProgressWrite inProgressWrite) {
             final PrioritisedExecutor.PrioritisedTask task;
             synchronized (this) {
-                task = this.regionDataController.ioScheduler.createTask(this.chunkX, this.chunkZ, () -> {
+                // Canvas start - rewrite chunk system
+                task = this.regionDataController.ioScheduler.createTask(this.chunkX, this.chunkZ, new ChunkRunnable(this.chunkX, this.chunkZ, this.world, () -> {
                     ChunkIOTask.this.runWriteIO(inProgressWrite);
-                }, this.priority);
+                }), this.priority);
+                // Canvas end
                 this.currentTask = task;
             }
             task.queue();
