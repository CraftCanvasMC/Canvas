--- a/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/task/ChunkProgressionTask.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/task/ChunkProgressionTask.java
@@ -19,9 +_,11 @@
     private Throwable completedThrowable;
 
     protected final ChunkTaskScheduler scheduler;
-    protected final ServerLevel world;
-    protected final int chunkX;
-    protected final int chunkZ;
+    // Canvas start - protected -> public
+    public final ServerLevel world;
+    public final int chunkX;
+    public final int chunkZ;
+    // Canvas end
 
     protected volatile boolean completed;
     protected static final VarHandle COMPLETED_HANDLE = ConcurrentUtil.getVarHandle(ChunkProgressionTask.class, "completed", boolean.class);
@@ -69,7 +_,7 @@
         }
     }
 
-    protected final void complete(final ChunkAccess chunk, final Throwable throwable) {
+    protected void complete(final ChunkAccess chunk, final Throwable throwable) { // Canvas - mutable
         try {
             this.complete0(chunk, throwable);
         } catch (final Throwable thr2) {
@@ -81,7 +_,7 @@
 
     private void complete0(final ChunkAccess chunk, final Throwable throwable) {
         if ((boolean)COMPLETED_HANDLE.getAndSet((ChunkProgressionTask)this, (boolean)true)) {
-            throw new IllegalStateException("Already completed");
+            return; // Canvas - already completed, so lets not crash? this happens because of new executor, its fine.
         }
         this.completedChunk = chunk;
         this.completedThrowable = throwable;
