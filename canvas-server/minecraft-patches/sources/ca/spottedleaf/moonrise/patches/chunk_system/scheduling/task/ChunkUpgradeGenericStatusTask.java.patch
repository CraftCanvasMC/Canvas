--- a/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/task/ChunkUpgradeGenericStatusTask.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/task/ChunkUpgradeGenericStatusTask.java
@@ -6,6 +_,7 @@
 import ca.spottedleaf.moonrise.common.util.WorldUtil;
 import ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkSystemChunkStatus;
 import ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler;
+import io.canvasmc.canvas.server.chunk.ChunkPriorityManager;
 import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.server.level.ChunkMap;
 import net.minecraft.server.level.GenerationChunkHolder;
@@ -47,13 +_,13 @@
         this.toStatus = toStatus;
         this.neighbours = neighbours;
         if (((ChunkSystemChunkStatus)this.toStatus).moonrise$isParallelCapable()) {
-            this.generateTask = this.scheduler.parallelGenExecutor.createTask(this, priority);
+            this.generateTask = this.scheduler.parallelGenExecutor.createTask(this, this.world.getPriorityManager().getPriority(chunkX, chunkZ, ChunkPriorityManager.TaskType.GEN)); // Canvas - optimize moonrise
         } else {
             final int writeRadius = ((ChunkSystemChunkStatus)this.toStatus).moonrise$getWriteRadius();
             if (writeRadius < 0) {
-                this.generateTask = this.scheduler.radiusAwareScheduler.createInfiniteRadiusTask(this, priority);
+                this.generateTask = this.scheduler.radiusAwareScheduler.createInfiniteRadiusTask(this, this.world.getPriorityManager().getPriority(chunkX, chunkZ, ChunkPriorityManager.TaskType.GEN)); // Canvas - optimize moonrise
             } else {
-                this.generateTask = this.scheduler.radiusAwareScheduler.createTask(chunkX, chunkZ, writeRadius, this, priority);
+                this.generateTask = this.scheduler.radiusAwareScheduler.createTask(chunkX, chunkZ, writeRadius, this, this.world.getPriorityManager().getPriority(chunkX, chunkZ, ChunkPriorityManager.TaskType.GEN)); // Canvas - optimize moonrise
             }
         }
     }
@@ -205,7 +_,7 @@
         if (!Priority.isValidPriority(priority)) {
             throw new IllegalArgumentException("Invalid priority " + priority);
         }
-        this.generateTask.setPriority(priority);
+        this.generateTask.setPriority(this.world.getPriorityManager().getPriority(chunkX, chunkZ, ChunkPriorityManager.TaskType.GEN)); // Canvas - optimize moonrise
     }
 
     @Override
