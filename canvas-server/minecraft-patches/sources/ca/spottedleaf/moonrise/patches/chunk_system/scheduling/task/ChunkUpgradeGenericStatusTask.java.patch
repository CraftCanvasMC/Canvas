--- a/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/task/ChunkUpgradeGenericStatusTask.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/task/ChunkUpgradeGenericStatusTask.java
@@ -4,8 +_,10 @@
 import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
 import ca.spottedleaf.concurrentutil.util.Priority;
 import ca.spottedleaf.moonrise.common.util.WorldUtil;
+import ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel;
 import ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkSystemChunkStatus;
 import ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler;
+import io.canvasmc.canvas.server.chunk.ChunkPriorityManager;
 import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.server.level.ChunkMap;
 import net.minecraft.server.level.GenerationChunkHolder;
@@ -13,6 +_,7 @@
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.StaticCache2D;
 import net.minecraft.world.level.chunk.ChunkAccess;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.ProtoChunk;
 import net.minecraft.world.level.chunk.status.ChunkPyramid;
 import net.minecraft.world.level.chunk.status.ChunkStatus;
@@ -47,13 +_,13 @@
         this.toStatus = toStatus;
         this.neighbours = neighbours;
         if (((ChunkSystemChunkStatus)this.toStatus).moonrise$isParallelCapable()) {
-            this.generateTask = this.scheduler.parallelGenExecutor.createTask(this, priority);
+            this.generateTask = this.scheduler.parallelGenExecutor.createTask(this, this.world.getPriorityManager().getPriority(chunkX, chunkZ, ChunkPriorityManager.TaskType.GEN)); // Canvas - optimize moonrise
         } else {
             final int writeRadius = ((ChunkSystemChunkStatus)this.toStatus).moonrise$getWriteRadius();
             if (writeRadius < 0) {
-                this.generateTask = this.scheduler.radiusAwareScheduler.createInfiniteRadiusTask(this, priority);
+                this.generateTask = this.scheduler.radiusAwareScheduler.createInfiniteRadiusTask(this, this.world.getPriorityManager().getPriority(chunkX, chunkZ, ChunkPriorityManager.TaskType.GEN)); // Canvas - optimize moonrise
             } else {
-                this.generateTask = this.scheduler.radiusAwareScheduler.createTask(chunkX, chunkZ, writeRadius, this, priority);
+                this.generateTask = this.scheduler.radiusAwareScheduler.createTask(chunkX, chunkZ, writeRadius, this, this.world.getPriorityManager().getPriority(chunkX, chunkZ, ChunkPriorityManager.TaskType.GEN)); // Canvas - optimize moonrise
             }
         }
     }
@@ -205,7 +_,7 @@
         if (!Priority.isValidPriority(priority)) {
             throw new IllegalArgumentException("Invalid priority " + priority);
         }
-        this.generateTask.setPriority(priority);
+        this.generateTask.setPriority(this.world.getPriorityManager().getPriority(chunkX, chunkZ, ChunkPriorityManager.TaskType.GEN)); // Canvas - optimize moonrise
     }
 
     @Override
@@ -215,4 +_,22 @@
         }
         this.generateTask.raisePriority(priority);
     }
+    // Canvas start - immediately run FULL task
+
+    @Override
+    protected void complete(final ChunkAccess chunk, final Throwable throwable) {
+        super.complete(chunk, throwable);
+        if (this.toStatus == (ChunkStatus.SPAWN) && !(chunk instanceof LevelChunk)) {
+            // schedule full status to ensure we don't call syncload
+            // we check if the status is spawn because that's the one
+            // directly before full, and we check if it's a LevelChunk
+            // because those are always full statuses
+            final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler chunkTaskScheduler = ((ChunkSystemServerLevel)this.world).moonrise$getChunkTaskScheduler();
+            chunkTaskScheduler.scheduleChunkLoad(
+                this.chunkX, this.chunkZ, this.toStatus, true, ca.spottedleaf.concurrentutil.util.Priority.BLOCKING,
+                (_) -> {}
+            );
+        }
+    }
+    // Canvas end
 }
