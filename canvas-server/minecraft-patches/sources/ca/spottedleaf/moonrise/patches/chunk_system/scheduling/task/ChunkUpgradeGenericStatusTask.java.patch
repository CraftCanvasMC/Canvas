--- a/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/task/ChunkUpgradeGenericStatusTask.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/task/ChunkUpgradeGenericStatusTask.java
@@ -4,15 +_,16 @@
 import ca.spottedleaf.concurrentutil.util.ConcurrentUtil;
 import ca.spottedleaf.concurrentutil.util.Priority;
 import ca.spottedleaf.moonrise.common.util.WorldUtil;
+import ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel;
 import ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkSystemChunkStatus;
 import ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler;
-import net.minecraft.server.level.ChunkHolder;
 import net.minecraft.server.level.ChunkMap;
 import net.minecraft.server.level.GenerationChunkHolder;
 import net.minecraft.server.level.ServerChunkCache;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.StaticCache2D;
 import net.minecraft.world.level.chunk.ChunkAccess;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.ProtoChunk;
 import net.minecraft.world.level.chunk.status.ChunkPyramid;
 import net.minecraft.world.level.chunk.status.ChunkStatus;
@@ -215,4 +_,22 @@
         }
         this.generateTask.raisePriority(priority);
     }
+    // Canvas start - immediately run FULL task
+
+    @Override
+    protected void complete(final ChunkAccess chunk, final Throwable throwable) {
+        super.complete(chunk, throwable);
+        if (this.toStatus == (ChunkStatus.SPAWN) && !(chunk instanceof LevelChunk)) {
+            // schedule full status to ensure we don't call syncload
+            // we check if the status is spawn because that's the one
+            // directly before full, and we check if it's a LevelChunk
+            // because those are always full statuses
+            final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.ChunkTaskScheduler chunkTaskScheduler = ((ChunkSystemServerLevel)this.world).moonrise$getChunkTaskScheduler();
+            chunkTaskScheduler.scheduleChunkLoad(
+                this.chunkX, this.chunkZ, this.toStatus, true, ca.spottedleaf.concurrentutil.util.Priority.BLOCKING,
+                (_) -> {}
+            );
+        }
+    }
+    // Canvas end
 }
