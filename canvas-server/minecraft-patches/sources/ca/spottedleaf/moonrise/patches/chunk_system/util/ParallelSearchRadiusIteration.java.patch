--- a/ca/spottedleaf/moonrise/patches/chunk_system/util/ParallelSearchRadiusIteration.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/util/ParallelSearchRadiusIteration.java
@@ -2,12 +_,14 @@
 
 import ca.spottedleaf.moonrise.common.util.CoordinateUtils;
 import ca.spottedleaf.moonrise.common.util.MoonriseConstants;
+import io.canvasmc.canvas.Config;
 import it.unimi.dsi.fastutil.HashCommon;
 import it.unimi.dsi.fastutil.longs.LongArrayList;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.longs.LongLinkedOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import java.util.Arrays;
+import java.util.Comparator;
 import java.util.Objects;
 
 public final class ParallelSearchRadiusIteration {
@@ -15,16 +_,41 @@
     // expected that this list returns for a given radius, the set of chunks ordered
     // by manhattan distance
     private static final long[][] SEARCH_RADIUS_ITERATION_LIST = new long[MoonriseConstants.MAX_VIEW_DISTANCE+2+1][];
+    private static final long[][] SEARCH_RADIUS_ITERATION_LIST_EUCLIDEAN = new long[MoonriseConstants.MAX_VIEW_DISTANCE+2+1][]; // Canvas
     static {
         for (int i = 0; i < SEARCH_RADIUS_ITERATION_LIST.length; ++i) {
             // a BFS around -x, -z, +x, +z will give increasing manhatten distance
             SEARCH_RADIUS_ITERATION_LIST[i] = generateBFSOrder(i);
         }
+        // Canvas start
+        for (int i = 0; i < SEARCH_RADIUS_ITERATION_LIST.length; ++i) {
+            SEARCH_RADIUS_ITERATION_LIST[i] = generateBFSOrder(i);
+            SEARCH_RADIUS_ITERATION_LIST_EUCLIDEAN[i] = reorderByEuclideanDistance(SEARCH_RADIUS_ITERATION_LIST[i]);
+        }
+        // Canvas end
+    }
+
+    // Canvas start
+    public static long[] getEuclideanSearchIteration(final int radius) {
+        return SEARCH_RADIUS_ITERATION_LIST_EUCLIDEAN[radius];
+    }
+
+    private static long[] reorderByEuclideanDistance(final long[] chunks) {
+        return Arrays.stream(chunks)
+                     .boxed()
+                     .sorted(Comparator.comparingLong(chunk -> {
+                         int x = CoordinateUtils.getChunkX(chunk);
+                         int z = CoordinateUtils.getChunkZ(chunk);
+                         return (long) x * x + (long) z * z; // euclidean distance squared
+                     }))
+                     .mapToLong(Long::longValue)
+                     .toArray();
     }
 
     public static long[] getSearchIteration(final int radius) {
-        return SEARCH_RADIUS_ITERATION_LIST[radius];
+        return Config.INSTANCE.useEuclideanDistanceSquaredChunkPriorities ? getEuclideanSearchIteration(radius) : SEARCH_RADIUS_ITERATION_LIST[radius];
     }
+    // Canvas end
 
     private static class CustomLongArray extends LongArrayList {
 
