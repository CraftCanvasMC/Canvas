--- a/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/executor/RadiusAwarePrioritisedExecutor.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/executor/RadiusAwarePrioritisedExecutor.java
@@ -5,6 +_,7 @@
 import ca.spottedleaf.moonrise.common.util.CoordinateUtils;
 import it.unimi.dsi.fastutil.longs.Long2ReferenceOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
+import net.minecraft.server.level.ServerLevel;
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.List;
@@ -111,54 +_,23 @@
     }
 
     public PrioritisedExecutor.PrioritisedTask createTask(final int chunkX, final int chunkZ, final int radius,
-                                                          final Runnable run, final Priority priority) {
+                                                          final Runnable run, final Priority priority, final ServerLevel world) { // Canvas - rewrite chunk system
         if (radius < 0) {
             throw new IllegalArgumentException("Radius must be > 0: " + radius);
         }
-        return new Task(this, chunkX, chunkZ, radius, run, priority);
-    }
-
-    public PrioritisedExecutor.PrioritisedTask createTask(final int chunkX, final int chunkZ, final int radius,
-                                                          final Runnable run) {
-        return this.createTask(chunkX, chunkZ, radius, run, Priority.NORMAL);
-    }
-
-    public PrioritisedExecutor.PrioritisedTask queueTask(final int chunkX, final int chunkZ, final int radius,
-                                                         final Runnable run, final Priority priority) {
-        final PrioritisedExecutor.PrioritisedTask ret = this.createTask(chunkX, chunkZ, radius, run, priority);
-
-        ret.queue();
-
-        return ret;
-    }
-
-    public PrioritisedExecutor.PrioritisedTask queueTask(final int chunkX, final int chunkZ, final int radius,
-                                                         final Runnable run) {
-        final PrioritisedExecutor.PrioritisedTask ret = this.createTask(chunkX, chunkZ, radius, run);
-
-        ret.queue();
-
-        return ret;
-    }
-
-    public PrioritisedExecutor.PrioritisedTask createInfiniteRadiusTask(final Runnable run, final Priority priority) {
-        return new Task(this, 0, 0, -1, run, priority);
-    }
-
-    public PrioritisedExecutor.PrioritisedTask createInfiniteRadiusTask(final Runnable run) {
-        return this.createInfiniteRadiusTask(run, Priority.NORMAL);
-    }
-
-    public PrioritisedExecutor.PrioritisedTask queueInfiniteRadiusTask(final Runnable run, final Priority priority) {
-        final PrioritisedExecutor.PrioritisedTask ret = this.createInfiniteRadiusTask(run, priority);
-
-        ret.queue();
-
-        return ret;
-    }
-
-    public PrioritisedExecutor.PrioritisedTask queueInfiniteRadiusTask(final Runnable run) {
-        final PrioritisedExecutor.PrioritisedTask ret = this.createInfiniteRadiusTask(run, Priority.NORMAL);
+        return new Task(this, chunkX, chunkZ, radius, run, priority, world); // Canvas - rewrite chunk system
+    }
+
+    // Canvas - rewrite chunk system
+
+    public PrioritisedExecutor.PrioritisedTask createInfiniteRadiusTask(final Runnable run, final Priority priority, final ServerLevel world) { // Canvas - rewrite chunk system
+        return new Task(this, 0, 0, -1, run, priority, world);
+    }
+
+    // Canvas - rewrite chunk system
+
+    public PrioritisedExecutor.PrioritisedTask queueInfiniteRadiusTask(final Runnable run, final ServerLevel world) { // Canvas - rewrite chunk system
+        final PrioritisedExecutor.PrioritisedTask ret = this.createInfiniteRadiusTask(run, Priority.NORMAL, world); // Canvas - rewrite chunk system
 
         ret.queue();
 
@@ -431,27 +_,31 @@
         }
     }
 
-    private static final class Task implements PrioritisedExecutor.PrioritisedTask, Runnable {
+    public static final class Task implements PrioritisedExecutor.PrioritisedTask, Runnable { // Canvas - private -> public
 
         // task specific fields
         private final RadiusAwarePrioritisedExecutor scheduler;
-        private final int chunkX;
-        private final int chunkZ;
+        // Canvas start - private -> public
+        public final int chunkX;
+        public final int chunkZ;
+        // Canvas end
         private final int radius;
         private Runnable run;
         private Priority priority;
 
         private DependencyNode dependencyNode;
         private PrioritisedExecutor.PrioritisedTask queuedTask;
+        public final ServerLevel world; // Canvas - rewrite chunk system
 
         private Task(final RadiusAwarePrioritisedExecutor scheduler, final int chunkX, final int chunkZ, final int radius,
-                     final Runnable run, final Priority priority) {
+                     final Runnable run, final Priority priority, final ServerLevel world) { // Canvas - rewrite chunk system
             this.scheduler = scheduler;
             this.chunkX = chunkX;
             this.chunkZ = chunkZ;
             this.radius = radius;
             this.run = run;
             this.priority = priority;
+            this.world = world; // Canvas - rewrite chunk system
         }
 
         private boolean isFiniteRadius() {
@@ -473,6 +_,7 @@
             synchronized (this.scheduler) {
                 final DependencyNode node = this.dependencyNode;
                 this.dependencyNode = null;
+                if (node == null) return; // Canvas - NPE
                 toSchedule = node.tree.returnNode(node);
             }
 
@@ -489,6 +_,7 @@
             final Runnable run = this.run;
             this.run = null;
             try {
+                if (run == null) return; // Canvas - NPE
                 run.run();
             } finally {
                 this.returnNode();
