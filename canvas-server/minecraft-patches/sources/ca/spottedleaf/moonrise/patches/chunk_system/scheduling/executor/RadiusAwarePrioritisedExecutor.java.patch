--- a/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/executor/RadiusAwarePrioritisedExecutor.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/executor/RadiusAwarePrioritisedExecutor.java
@@ -5,6 +_,7 @@
 import ca.spottedleaf.moonrise.common.util.CoordinateUtils;
 import it.unimi.dsi.fastutil.longs.Long2ReferenceOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
+import net.minecraft.server.level.ServerLevel;
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.List;
@@ -431,12 +_,14 @@
         }
     }
 
-    private static final class Task implements PrioritisedExecutor.PrioritisedTask, Runnable {
+    public static final class Task implements PrioritisedExecutor.PrioritisedTask, Runnable { // Canvas - private -> public
 
         // task specific fields
         private final RadiusAwarePrioritisedExecutor scheduler;
-        private final int chunkX;
-        private final int chunkZ;
+        // Canvas start - private -> public
+        public final int chunkX;
+        public final int chunkZ;
+        // Canvas end
         private final int radius;
         private Runnable run;
         private Priority priority;
@@ -473,6 +_,7 @@
             synchronized (this.scheduler) {
                 final DependencyNode node = this.dependencyNode;
                 this.dependencyNode = null;
+                if (node == null) return; // Canvas - NPE
                 toSchedule = node.tree.returnNode(node);
             }
 
@@ -489,6 +_,7 @@
             final Runnable run = this.run;
             this.run = null;
             try {
+                if (run == null) return; // Canvas - NPE
                 run.run();
             } finally {
                 this.returnNode();
