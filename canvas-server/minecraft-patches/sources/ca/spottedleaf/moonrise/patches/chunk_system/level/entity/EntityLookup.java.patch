--- a/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/EntityLookup.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/EntityLookup.java
@@ -6,12 +_,16 @@
 import ca.spottedleaf.moonrise.common.util.CoordinateUtils;
 import ca.spottedleaf.moonrise.common.util.WorldUtil;
 import ca.spottedleaf.moonrise.patches.chunk_system.entity.ChunkSystemEntity;
+import com.google.common.collect.Sets;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.FullChunkStatus;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.AbortableIterationConsumer;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.entity.EntityInLevelCallback;
@@ -21,6 +_,7 @@
 import net.minecraft.world.level.entity.Visibility;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import java.util.ArrayList;
@@ -29,7 +_,9 @@
 import java.util.List;
 import java.util.NoSuchElementException;
 import java.util.Objects;
+import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
@@ -50,7 +_,7 @@
 
     protected final ConcurrentLong2ReferenceChainedHashTable<Entity> entityById = new ConcurrentLong2ReferenceChainedHashTable<>();
     protected final ConcurrentHashMap<UUID, Entity> entityByUUID = new ConcurrentHashMap<>();
-    protected final EntityList accessibleEntities = new EntityList();
+    protected final Set<Entity> accessibleEntities = Sets.newConcurrentHashSet(); // Canvas - concurrent
 
     public EntityLookup(final Level world, final LevelCallback<Entity> worldCallback) {
         this.world = world;
@@ -171,7 +_,7 @@
     public Iterable<Entity> getAll() {
         synchronized (this.accessibleEntities) {
             final int len = this.accessibleEntities.size();
-            final Entity[] cpy = Arrays.copyOf(this.accessibleEntities.getRawData(), len, Entity[].class);
+            final Entity[] cpy = Arrays.copyOf(this.accessibleEntities.toArray(new Entity[0]), len, Entity[].class); // Canvas
 
             Objects.checkFromToIndex(0, len, cpy.length);
 
@@ -187,7 +_,7 @@
 
     public Entity[] getAllCopy() {
         synchronized (this.accessibleEntities) {
-            return Arrays.copyOf(this.accessibleEntities.getRawData(), this.accessibleEntities.size(), Entity[].class);
+            return Arrays.copyOf(this.accessibleEntities.toArray(new Entity[0]), this.accessibleEntities.size(), Entity[].class); // Canvas
         }
     }
 
@@ -397,7 +_,7 @@
         return Visibility.fromFullChunkStatus(entityStatus == null ? FullChunkStatus.INACCESSIBLE : entityStatus);
     }
 
-    protected boolean addEntity(final Entity entity, final boolean fromDisk, final boolean event) {
+    protected synchronized boolean addEntity(final Entity entity, final boolean fromDisk, final boolean event) { // Canvas - synchronized
         final BlockPos pos = entity.blockPosition();
         final int sectionX = pos.getX() >> 4;
         final int sectionY = Mth.clamp(pos.getY() >> 4, WorldUtil.getMinSection(this.world), WorldUtil.getMaxSection(this.world));
@@ -460,7 +_,7 @@
         return slices == null || !slices.isPreventingStatusUpdates();
     }
 
-    protected void removeEntity(final Entity entity) {
+    protected synchronized void removeEntity(final Entity entity) { // Canvas - synchronized
         final int sectionX = ((ChunkSystemEntity)entity).moonrise$getSectionX();
         final int sectionY = ((ChunkSystemEntity)entity).moonrise$getSectionY();
         final int sectionZ = ((ChunkSystemEntity)entity).moonrise$getSectionZ();
@@ -510,7 +_,7 @@
         }
     }
 
-    protected ChunkEntitySlices moveEntity(final Entity entity) {
+    protected synchronized ChunkEntitySlices moveEntity(final Entity entity) { // Canvas - synchronized
         // ensure we own the entity
         this.checkThread(entity, "Cannot move entity off-main");
 
@@ -950,9 +_,10 @@
         }
     }
 
-    protected final class EntityCallback implements EntityInLevelCallback {
+    public final class EntityCallback implements EntityInLevelCallback { // Canvas - protected -> public
 
         public final Entity entity;
+        public final Object callbackLock = new Object(); // Canvas - callback locks
 
         public EntityCallback(final Entity entity) {
             this.entity = entity;
@@ -960,6 +_,7 @@
 
         @Override
         public void onMove() {
+            synchronized (callbackLock) { // Canvas - callback locks
             final Entity entity = this.entity;
             final Visibility oldVisibility = getEntityStatus(entity);
             final ChunkEntitySlices newSlices = EntityLookup.this.moveEntity(this.entity);
@@ -971,10 +_,12 @@
             final Visibility newVisibility = getEntityStatus(entity);
 
             EntityLookup.this.entityStatusChange(entity, newSlices, oldVisibility, newVisibility, true, false, false);
+            } // Canvas - callback locks
         }
 
         @Override
         public void onRemove(final Entity.RemovalReason reason) {
+            synchronized (callbackLock) { // Canvas - callback locks
             final Entity entity = this.entity;
             EntityLookup.this.checkThread(entity, "Cannot remove entity off-main");
             final Visibility tickingState = EntityLookup.getEntityStatus(entity);
@@ -986,6 +_,7 @@
             EntityLookup.this.removeEntityCallback(entity);
 
             this.entity.setLevelCallback(NoOpCallback.INSTANCE);
+            } // Canvas - callback locks
         }
     }
 
