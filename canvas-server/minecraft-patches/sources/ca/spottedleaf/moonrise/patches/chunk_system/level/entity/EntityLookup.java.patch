--- a/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/EntityLookup.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/EntityLookup.java
@@ -6,12 +_,16 @@
 import ca.spottedleaf.moonrise.common.util.CoordinateUtils;
 import ca.spottedleaf.moonrise.common.util.WorldUtil;
 import ca.spottedleaf.moonrise.patches.chunk_system.entity.ChunkSystemEntity;
+import com.google.common.collect.Sets;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.FullChunkStatus;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.AbortableIterationConsumer;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.entity.item.ItemEntity;
+import net.minecraft.world.item.Items;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.entity.EntityInLevelCallback;
@@ -21,6 +_,7 @@
 import net.minecraft.world.level.entity.Visibility;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.Vec3;
+import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import java.util.ArrayList;
@@ -29,7 +_,9 @@
 import java.util.List;
 import java.util.NoSuchElementException;
 import java.util.Objects;
+import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
@@ -50,7 +_,7 @@
 
     protected final ConcurrentLong2ReferenceChainedHashTable<Entity> entityById = new ConcurrentLong2ReferenceChainedHashTable<>();
     protected final ConcurrentHashMap<UUID, Entity> entityByUUID = new ConcurrentHashMap<>();
-    protected final EntityList accessibleEntities = new EntityList();
+    protected final Set<Entity> accessibleEntities = Sets.newConcurrentHashSet(); // Canvas - concurrent
 
     public EntityLookup(final Level world, final LevelCallback<Entity> worldCallback) {
         this.world = world;
@@ -171,7 +_,7 @@
     public Iterable<Entity> getAll() {
         synchronized (this.accessibleEntities) {
             final int len = this.accessibleEntities.size();
-            final Entity[] cpy = Arrays.copyOf(this.accessibleEntities.getRawData(), len, Entity[].class);
+            final Entity[] cpy = Arrays.copyOf(this.accessibleEntities.toArray(new Entity[0]), len, Entity[].class); // Canvas
 
             Objects.checkFromToIndex(0, len, cpy.length);
 
@@ -187,7 +_,7 @@
 
     public Entity[] getAllCopy() {
         synchronized (this.accessibleEntities) {
-            return Arrays.copyOf(this.accessibleEntities.getRawData(), this.accessibleEntities.size(), Entity[].class);
+            return Arrays.copyOf(this.accessibleEntities.toArray(new Entity[0]), this.accessibleEntities.size(), Entity[].class); // Canvas
         }
     }
 
@@ -227,8 +_,11 @@
         }
     }
 
+    private ConcurrentLinkedQueue<Runnable> statusChangesQue = new ConcurrentLinkedQueue<>(); // Canvas
+    private final Object lock = new Object(); // Canvas
     public void entityStatusChange(final Entity entity, final ChunkEntitySlices slices, final Visibility oldVisibility, final Visibility newVisibility, final boolean moved,
                                    final boolean created, final boolean destroyed) {
+        synchronized (lock) { // Canvas - sync-lock
         this.checkThread(entity, "Entity status change must only happen on the main thread");
 
         if (((ChunkSystemEntity)entity).moonrise$isUpdatingSectionStatus()) {
@@ -322,8 +_,14 @@
         } finally {
             if (slices != null) {
                 slices.stopPreventingStatusUpdates(false);
+                // Canvas start
+                ConcurrentLinkedQueue<Runnable> clone = new ConcurrentLinkedQueue<>(statusChangesQue);
+                statusChangesQue.clear();
+                clone.forEach(Runnable::run);
+                // Canvas end
             }
         }
+        } // Canvas
     }
 
     public void chunkStatusChange(final int x, final int z, final FullChunkStatus newStatus) {
@@ -474,10 +_,18 @@
             LOGGER.warn("Cannot remove entity " + entity + " from null entity slices (" + sectionX + "," + sectionZ + ")");
         } else {
             if (slices.isPreventingStatusUpdates()) {
-                throw new IllegalStateException("Attempting to remove entity " + entity + " from entity slices (" + sectionX + "," + sectionZ + ") that is receiving status updates");
+                // Canvas start
+               ((ServerLevel)entity.level()).scheduleOnMain(() -> {
+                    removeEntity(entity);
+                });
+                return;
+                // throw new IllegalStateException("Attempting to remove entity " + entity + " from entity slices (" + sectionX + "," + sectionZ + ") that is receiving status updates");
+                // Canvas end
             }
             if (!slices.removeEntity(entity, sectionY)) {
+                if (shouldWarn(entity)) { // Canvas
                 LOGGER.warn("Failed to remove entity " + entity + " from entity slices (" + sectionX + "," + sectionZ + ")");
+                } // Canvas
             }
         }
         ((ChunkSystemEntity)entity).moonrise$setSectionX(Integer.MIN_VALUE);
@@ -487,7 +_,9 @@
 
         Entity currentlyMapped;
         if ((currentlyMapped = this.entityById.remove(entity.getId(), entity)) != entity) {
+            if (shouldWarn(entity)) { // Canvas
             LOGGER.warn("Failed to remove entity " + entity + " by id, current entity mapped: " + currentlyMapped);
+            } // Canvas
         }
 
         Entity[] currentlyMappedArr = new Entity[1];
@@ -502,15 +_,23 @@
         });
 
         if (currentlyMappedArr[0] != entity) {
+            if (shouldWarn(entity)) { // Canvas
             LOGGER.warn("Failed to remove entity " + entity + " by uuid, current entity mapped: " + currentlyMappedArr[0]);
+            } // Canvas
         }
 
         if (slices != null && slices.isEmpty()) {
             this.onEmptySlices(sectionX, sectionZ);
         }
     }
-
-    protected ChunkEntitySlices moveEntity(final Entity entity) {
+    // Canvas start
+
+    public boolean shouldWarn(Entity entity) {
+        return !(entity instanceof ItemEntity itemEntity) || !itemEntity.getItem().is(Items.AIR);
+    }
+    // Canvas end
+
+    protected synchronized ChunkEntitySlices moveEntity(final Entity entity) { // Canvas
         // ensure we own the entity
         this.checkThread(entity, "Cannot move entity off-main");
 
@@ -532,10 +_,10 @@
         // ensure the old section is owned by this tick thread
         this.checkThread(sectionX, sectionZ, "Cannot move entity off-main");
 
-        final ChunkEntitySlices old = this.getChunk(sectionX, sectionZ);
+        final @Nullable ChunkEntitySlices old = this.getChunk(sectionX, sectionZ); // Canvas
         final ChunkEntitySlices slices = this.getOrCreateChunk(newSectionX, newSectionZ);
 
-        if (!old.removeEntity(entity, sectionY)) {
+        if (old == null || !old.removeEntity(entity, sectionY)) { // Canvas
             LOGGER.warn("Could not remove entity " + entity + " from its old chunk section (" + sectionX + "," + sectionY + "," + sectionZ + ") since it was not contained in the section");
         }
 
@@ -547,7 +_,7 @@
         ((ChunkSystemEntity)entity).moonrise$setSectionY(newSectionY);
         ((ChunkSystemEntity)entity).moonrise$setSectionZ(newSectionZ);
 
-        if (old.isEmpty()) {
+        if (old == null || old.isEmpty()) { // Canvas
             this.onEmptySlices(sectionX, sectionZ);
         }
 
@@ -950,9 +_,10 @@
         }
     }
 
-    protected final class EntityCallback implements EntityInLevelCallback {
+    public final class EntityCallback implements EntityInLevelCallback { // Canvas - protected -> public
 
         public final Entity entity;
+        public final Object callbackLock = new Object(); // Canvas - callback locks
 
         public EntityCallback(final Entity entity) {
             this.entity = entity;
@@ -960,6 +_,7 @@
 
         @Override
         public void onMove() {
+            synchronized (callbackLock) { // Canvas - callback locks
             final Entity entity = this.entity;
             final Visibility oldVisibility = getEntityStatus(entity);
             final ChunkEntitySlices newSlices = EntityLookup.this.moveEntity(this.entity);
@@ -971,10 +_,12 @@
             final Visibility newVisibility = getEntityStatus(entity);
 
             EntityLookup.this.entityStatusChange(entity, newSlices, oldVisibility, newVisibility, true, false, false);
+            } // Canvas - callback locks
         }
 
         @Override
         public void onRemove(final Entity.RemovalReason reason) {
+            synchronized (callbackLock) { // Canvas - callback locks
             final Entity entity = this.entity;
             EntityLookup.this.checkThread(entity, "Cannot remove entity off-main");
             final Visibility tickingState = EntityLookup.getEntityStatus(entity);
@@ -986,6 +_,7 @@
             EntityLookup.this.removeEntityCallback(entity);
 
             this.entity.setLevelCallback(NoOpCallback.INSTANCE);
+            } // Canvas - callback locks
         }
     }
 
