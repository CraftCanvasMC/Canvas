--- a/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/EntityLookup.java
+++ b/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/EntityLookup.java
@@ -6,6 +_,8 @@
 import ca.spottedleaf.moonrise.common.util.CoordinateUtils;
 import ca.spottedleaf.moonrise.common.util.WorldUtil;
 import ca.spottedleaf.moonrise.patches.chunk_system.entity.ChunkSystemEntity;
+import io.canvasmc.canvas.entity.EntityStatusLock;
+import io.canvasmc.canvas.region.ServerRegions;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.FullChunkStatus;
 import net.minecraft.util.AbortableIterationConsumer;
@@ -231,6 +_,7 @@
                                    final boolean created, final boolean destroyed) {
         this.checkThread(entity, "Entity status change must only happen on the main thread");
 
+        try { entity.statusLock.acquire(); // Canvas - threadsafe entity status changes
         if (((ChunkSystemEntity)entity).moonrise$isUpdatingSectionStatus()) {
             // recursive status update
             LOGGER.error("Cannot recursively update entity chunk status for entity " + entity, new Throwable());
@@ -324,6 +_,9 @@
                 slices.stopPreventingStatusUpdates(false);
             }
         }
+        } finally {
+            entity.statusLock.release();
+        }
     }
 
     public void chunkStatusChange(final int x, final int z, final FullChunkStatus newStatus) {
@@ -976,6 +_,7 @@
         @Override
         public void onRemove(final Entity.RemovalReason reason) {
             final Entity entity = this.entity;
+            ServerRegions.WorldTickData data = ServerRegions.getTickData(entity.level().level()); // Canvas - Threaded Regions
             EntityLookup.this.checkThread(entity, "Cannot remove entity off-main");
             final Visibility tickingState = EntityLookup.getEntityStatus(entity);
 
@@ -986,6 +_,7 @@
             EntityLookup.this.removeEntityCallback(entity);
 
             this.entity.setLevelCallback(NoOpCallback.INSTANCE);
+            data.removeEntity(entity); // Canvas - Threaded Regions
         }
     }
 
