--- a/ca/spottedleaf/moonrise/patches/blockstate_propertyaccess/util/ZeroCollidingReferenceStateTable.java
+++ b/ca/spottedleaf/moonrise/patches/blockstate_propertyaccess/util/ZeroCollidingReferenceStateTable.java
@@ -3,6 +_,8 @@
 import ca.spottedleaf.concurrentutil.util.IntegerUtil;
 import ca.spottedleaf.moonrise.patches.blockstate_propertyaccess.PropertyAccess;
 import ca.spottedleaf.moonrise.patches.blockstate_propertyaccess.PropertyAccessStateHolder;
+import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.AbstractObjectSet;
 import it.unimi.dsi.fastutil.objects.AbstractReference2ObjectMap;
@@ -16,18 +_,19 @@
 import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
+import it.unimi.dsi.fastutil.objects.ReferenceLists;
 import net.minecraft.world.level.block.state.StateHolder;
 import net.minecraft.world.level.block.state.properties.Property;
 
 public final class ZeroCollidingReferenceStateTable<O, S> {
 
-    private final Int2ObjectOpenHashMap<Indexer> propertyToIndexer;
+    private final Int2ObjectMap<Indexer> propertyToIndexer; // Canvas - synchronized
     private S[] lookup;
     private final Collection<Property<?>> properties;
 
     public ZeroCollidingReferenceStateTable(final Collection<Property<?>> properties) {
-        this.propertyToIndexer = new Int2ObjectOpenHashMap<>(properties.size());
-        this.properties = new ReferenceArrayList<>(properties);
+        this.propertyToIndexer = Int2ObjectMaps.synchronize(new Int2ObjectOpenHashMap<>(properties.size())); // Canvas - synchronized
+        this.properties = ReferenceLists.synchronize(new ReferenceArrayList<>(properties)); // Canvas - synchronize
 
         final List<Property<?>> sortedProperties = new ArrayList<>(properties);
 
@@ -77,11 +_,11 @@
         return ret;
     }
 
-    public boolean isLoaded() {
+    public synchronized boolean isLoaded() { // Canvas - synchronized
         return this.lookup != null;
     }
 
-    public void loadInTable(final Map<Map<Property<?>, Comparable<?>>, S> universe) {
+    public synchronized void loadInTable(final Map<Map<Property<?>, Comparable<?>>, S> universe) { // Canvas - synchronized
         if (this.lookup != null) {
             throw new IllegalStateException();
         }
@@ -117,7 +_,7 @@
         return ((PropertyAccess<T>)property).moonrise$getById((int)modded);
     }
 
-    public <T extends Comparable<T>> S set(final long index, final Property<T> property, final T with) {
+    public synchronized  <T extends Comparable<T>> S set(final long index, final Property<T> property, final T with) { // Canvas - synchronized
         final int newValueId = ((PropertyAccess<T>)property).moonrise$getIdFor(with);
         if (newValueId < 0) {
             return null;
@@ -139,7 +_,7 @@
         return this.lookup[(int)newIndex];
     }
 
-    public <T extends Comparable<T>> S trySet(final long index, final Property<T> property, final T with, final S dfl) {
+    public synchronized  <T extends Comparable<T>> S trySet(final long index, final Property<T> property, final T with, final S dfl) { // Canvas - synchronized
         final Indexer indexer = this.propertyToIndexer.get(((PropertyAccess<T>)property).moonrise$getId());
         if (indexer == null) {
             return dfl;
