--- a/ca/spottedleaf/moonrise/paper/util/BaseChunkSystemHooks.java
+++ b/ca/spottedleaf/moonrise/paper/util/BaseChunkSystemHooks.java
@@ -1,24 +_,15 @@
 package ca.spottedleaf.moonrise.paper.util;
 
 import ca.spottedleaf.concurrentutil.util.Priority;
-import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.region.ServerRegions;
 import net.minecraft.server.level.ChunkHolder;
-import net.minecraft.server.level.ChunkResult;
 import net.minecraft.server.level.FullChunkStatus;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
-import net.minecraft.server.level.TicketType;
-import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.LevelChunk;
-import net.minecraft.world.level.chunk.status.ChunkPyramid;
 import net.minecraft.world.level.chunk.status.ChunkStatus;
-import net.minecraft.world.level.chunk.status.ChunkStep;
-import org.bukkit.Bukkit;
-import org.slf4j.Logger;
-import java.util.ArrayList;
 import java.util.List;
-import java.util.concurrent.CompletableFuture;
 import java.util.function.Consumer;
 
 public abstract class BaseChunkSystemHooks implements ca.spottedleaf.moonrise.common.util.ChunkSystemHooks {
@@ -80,7 +_,7 @@
 
     @Override
     public void onChunkHolderCreate(final ServerLevel level, final ChunkHolder holder) {
-
+        if (io.canvasmc.canvas.Config.INSTANCE.ticking.enableThreadedRegionizing) level.regioniser.addChunk(holder.getPos().x, holder.getPos().z); // Canvas - Threaded Regions
     }
 
     @Override
@@ -92,6 +_,7 @@
                 progressListener.onStatusChange(holder.getPos(), null);
             });
         }
+        if (io.canvasmc.canvas.Config.INSTANCE.ticking.enableThreadedRegionizing) level.regioniser.removeChunk(holder.getPos().x, holder.getPos().z); // Canvas - Threaded Regions
     }
 
     @Override
@@ -102,17 +_,13 @@
 
     @Override
     public void onChunkBorder(final LevelChunk chunk, final ChunkHolder holder) {
-        ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)((ServerLevel)chunk.getLevel())).moonrise$getLoadedChunks().add(
-            ((ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkSystemLevelChunk)chunk).moonrise$getChunkAndHolder()
-        );
+        ServerRegions.getTickData(chunk.level).addChunk(chunk.moonrise$getChunkAndHolder()); // Canvas - Threaded Regions
         chunk.loadCallback();
     }
 
     @Override
     public void onChunkNotBorder(final LevelChunk chunk, final ChunkHolder holder) {
-        ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)((ServerLevel)chunk.getLevel())).moonrise$getLoadedChunks().remove(
-            ((ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkSystemLevelChunk)chunk).moonrise$getChunkAndHolder()
-        );
+        ServerRegions.getTickData(chunk.level).removeChunk(chunk.moonrise$getChunkAndHolder()); // Canvas - Threaded Regions
         chunk.unloadCallback();
     }
 
@@ -124,9 +_,7 @@
 
     @Override
     public void onChunkTicking(final LevelChunk chunk, final ChunkHolder holder) {
-        ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)((ServerLevel)chunk.getLevel())).moonrise$getTickingChunks().add(
-            ((ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkSystemLevelChunk)chunk).moonrise$getChunkAndHolder()
-        );
+        ServerRegions.getTickData(chunk.level).addTickingChunk(chunk.moonrise$getChunkAndHolder()); // Canvas - Threaded Regions
         if (!((ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkSystemLevelChunk)chunk).moonrise$isPostProcessingDone()) {
             chunk.postProcessGeneration((ServerLevel)chunk.getLevel());
         }
@@ -137,24 +_,18 @@
 
     @Override
     public void onChunkNotTicking(final LevelChunk chunk, final ChunkHolder holder) {
-        ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)((ServerLevel)chunk.getLevel())).moonrise$getTickingChunks().remove(
-            ((ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkSystemLevelChunk)chunk).moonrise$getChunkAndHolder()
-        );
+        ServerRegions.getTickData(chunk.level).removeTickingChunk(chunk.moonrise$getChunkAndHolder()); // Canvas - Threaded Regions
         ((ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickServerLevel)(ServerLevel)chunk.getLevel()).moonrise$removeChunkForPlayerTicking(chunk); // Moonrise - chunk tick iteration
     }
 
     @Override
     public void onChunkEntityTicking(final LevelChunk chunk, final ChunkHolder holder) {
-        ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)((ServerLevel)chunk.getLevel())).moonrise$getEntityTickingChunks().add(
-            ((ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkSystemLevelChunk)chunk).moonrise$getChunkAndHolder()
-        );
+        ServerRegions.getTickData(chunk.level).addEntityTickingChunk(chunk.moonrise$getChunkAndHolder()); // Canvas - Threaded Regions
     }
 
     @Override
     public void onChunkNotEntityTicking(final LevelChunk chunk, final ChunkHolder holder) {
-        ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)((ServerLevel)chunk.getLevel())).moonrise$getEntityTickingChunks().remove(
-            ((ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkSystemLevelChunk)chunk).moonrise$getChunkAndHolder()
-        );
+        ServerRegions.getTickData(chunk.level).removeEntityTickingChunk(chunk.moonrise$getChunkAndHolder()); // Canvas - Threaded Regions
     }
 
     @Override
