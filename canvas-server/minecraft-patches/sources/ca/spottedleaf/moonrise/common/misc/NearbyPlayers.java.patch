--- a/ca/spottedleaf/moonrise/common/misc/NearbyPlayers.java
+++ b/ca/spottedleaf/moonrise/common/misc/NearbyPlayers.java
@@ -1,5 +_,6 @@
 package ca.spottedleaf.moonrise.common.misc;
 
+import ca.spottedleaf.concurrentutil.map.ConcurrentLong2ReferenceChainedHashTable;
 import ca.spottedleaf.moonrise.common.PlatformHooks;
 import ca.spottedleaf.moonrise.common.list.ReferenceList;
 import ca.spottedleaf.moonrise.common.util.CoordinateUtils;
@@ -8,13 +_,21 @@
 import ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkData;
 import ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickConstants;
 import ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickServerLevel;
+import io.canvasmc.canvas.Config;
+import it.unimi.dsi.fastutil.longs.Long2ReferenceMap;
+import it.unimi.dsi.fastutil.longs.Long2ReferenceMaps;
 import it.unimi.dsi.fastutil.longs.Long2ReferenceOpenHashMap;
+import it.unimi.dsi.fastutil.objects.Reference2ReferenceMap;
+import it.unimi.dsi.fastutil.objects.Reference2ReferenceMaps;
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.level.ChunkPos;
+import org.agrona.collections.Long2ObjectHashMap;
 import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Map;
 
 public final class NearbyPlayers {
 
@@ -58,13 +_,13 @@
     public static final int GENERAL_SMALL_AREA_VIEW_DISTANCE_BLOCKS = (GENERAL_SMALL_VIEW_DISTANCE << 4);
     public static final int GENERAL_REALLY_SMALL_AREA_VIEW_DISTANCE_BLOCKS = (GENERAL_REALLY_SMALL_VIEW_DISTANCE << 4);
 
-    private final ServerLevel world;
-    private final Reference2ReferenceOpenHashMap<ServerPlayer, TrackedPlayer[]> players = new Reference2ReferenceOpenHashMap<>();
-    private final Long2ReferenceOpenHashMap<TrackedChunk> byChunk = new Long2ReferenceOpenHashMap<>();
-    private final Long2ReferenceOpenHashMap<ReferenceList<ServerPlayer>>[] directByChunk = new Long2ReferenceOpenHashMap[TOTAL_MAP_TYPES];
+    public final ServerLevel world; // Canvas - private -> public
+    public final Reference2ReferenceMap<ServerPlayer, TrackedPlayer[]> players = Reference2ReferenceMaps.synchronize(new Reference2ReferenceOpenHashMap<>()); // Canvas - synchronized - private -> public
+    private final ConcurrentLong2ReferenceChainedHashTable<TrackedChunk> byChunk = new ConcurrentLong2ReferenceChainedHashTable<>(); // Canvas - concurrent
+    private final Long2ReferenceMap<ReferenceList<ServerPlayer>>[] directByChunk = new Long2ReferenceMap[TOTAL_MAP_TYPES]; // Canvas
     {
         for (int i = 0; i < this.directByChunk.length; ++i) {
-            this.directByChunk[i] = new Long2ReferenceOpenHashMap<>();
+            this.directByChunk[i] = Long2ReferenceMaps.synchronize(new Long2ReferenceOpenHashMap<>()); // Canvas
         }
     }
 
@@ -72,10 +_,15 @@
         this.world = world;
     }
 
-    public void addPlayer(final ServerPlayer player) {
+    public synchronized void addPlayer(final ServerPlayer player) { // Canvas - synchronized
+        // Canvas start - Threaded Regions
+        if (player.npr.get() != this) {
+            player.npr.set(this);
+        } else return; // already has player
+        // Canvas end
         final TrackedPlayer[] newTrackers = new TrackedPlayer[TOTAL_MAP_TYPES];
         if (this.players.putIfAbsent(player, newTrackers) != null) {
-            throw new IllegalStateException("Already have player " + player);
+            return; // Canvas - just silence, can be run twice on teleport/add
         }
 
         final ChunkPos chunk = player.chunkPosition();
@@ -89,7 +_,8 @@
         this.tickPlayer(player);
     }
 
-    public void removePlayer(final ServerPlayer player) {
+    public synchronized void removePlayer(final ServerPlayer player) { // Canvas - synchronized
+        if (player.npr.get() == this) player.npr.set(null); // Canvas - Threaded Regions
         final TrackedPlayer[] players = this.players.remove(player);
         if (players == null) {
             return; // May be called during teleportation before the player is actually placed
@@ -100,7 +_,7 @@
         }
     }
 
-    public void clear() {
+    public synchronized void clear() { // Canvas - synchronized
         if (this.players.isEmpty()) {
             return;
         }
@@ -110,7 +_,16 @@
         }
     }
 
-    public void tickPlayer(final ServerPlayer player) {
+    public synchronized void tickPlayer(final ServerPlayer player) { // Canvas - synchronized
+        // Canvas start - Threaded Regions
+        if (player.npr.get() != this) {
+            // player owned by a diff nearbyplayers ref... what?
+            if (player.npr.get() != null) {
+                player.npr.get().removePlayer(player);
+            } // else | no need to remove, was already removed
+            this.addPlayer(player);
+        }
+        // Canvas end
         final TrackedPlayer[] players = this.players.get(player);
         if (players == null) {
             throw new IllegalStateException("Don't have player " + player);
@@ -121,7 +_,7 @@
         players[NearbyMapType.GENERAL.ordinal()].update(chunk.x, chunk.z, GENERAL_AREA_VIEW_DISTANCE);
         players[NearbyMapType.GENERAL_SMALL.ordinal()].update(chunk.x, chunk.z, GENERAL_SMALL_VIEW_DISTANCE);
         players[NearbyMapType.GENERAL_REALLY_SMALL.ordinal()].update(chunk.x, chunk.z, GENERAL_REALLY_SMALL_VIEW_DISTANCE);
-        players[NearbyMapType.TICK_VIEW_DISTANCE.ordinal()].update(chunk.x, chunk.z, PlatformHooks.get().getTickViewDistance(player));
+        players[NearbyMapType.TICK_VIEW_DISTANCE.ordinal()].update(chunk.x, chunk.z, Config.INSTANCE.tickDistanceMaps.enableNearbyPlayersTickViewDistanceOverride ? Config.INSTANCE.tickDistanceMaps.nearbyPlayersTickDistance : PlatformHooks.get().getTickViewDistance(player)); // Canvas - tick distance maps
         players[NearbyMapType.VIEW_DISTANCE.ordinal()].update(chunk.x, chunk.z, PlatformHooks.get().getViewDistance(player));
         players[NearbyMapType.SPAWN_RANGE.ordinal()].update(chunk.x, chunk.z, ChunkTickConstants.PLAYER_SPAWN_TRACK_RANGE); // Moonrise - chunk tick iteration
     }
@@ -220,7 +_,7 @@
         }
     }
 
-    private final class TrackedPlayer extends SingleUserAreaMap<ServerPlayer> {
+    public final class TrackedPlayer extends SingleUserAreaMap<ServerPlayer> { // Canvas - private -> public
 
         private final NearbyMapType type;
 
@@ -244,7 +_,7 @@
                 created.addPlayer(parameter, type);
                 type.addTo(parameter, NearbyPlayers.this.world, chunkX, chunkZ);
 
-                ((ChunkSystemLevel)NearbyPlayers.this.world).moonrise$requestChunkData(chunkKey).nearbyPlayers = created;
+                // ((ChunkSystemLevel)NearbyPlayers.this.world).moonrise$requestChunkData(chunkKey).nearbyPlayers = created; // Canvas - Threaded Regions
             }
         }
 
@@ -263,10 +_,7 @@
 
             if (chunk.isEmpty()) {
                 NearbyPlayers.this.byChunk.remove(chunkKey);
-                final ChunkData chunkData = ((ChunkSystemLevel)NearbyPlayers.this.world).moonrise$releaseChunkData(chunkKey);
-                if (chunkData != null) {
-                    chunkData.nearbyPlayers = null;
-                }
+                // Canvas - Threaded Regions
             }
         }
     }
