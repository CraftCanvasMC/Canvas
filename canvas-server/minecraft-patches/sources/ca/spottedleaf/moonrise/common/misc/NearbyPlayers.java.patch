--- a/ca/spottedleaf/moonrise/common/misc/NearbyPlayers.java
+++ b/ca/spottedleaf/moonrise/common/misc/NearbyPlayers.java
@@ -8,13 +_,21 @@
 import ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkData;
 import ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickConstants;
 import ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickServerLevel;
+import io.canvasmc.canvas.Config;
+import it.unimi.dsi.fastutil.longs.Long2ReferenceMap;
+import it.unimi.dsi.fastutil.longs.Long2ReferenceMaps;
 import it.unimi.dsi.fastutil.longs.Long2ReferenceOpenHashMap;
+import it.unimi.dsi.fastutil.objects.Reference2ReferenceMap;
+import it.unimi.dsi.fastutil.objects.Reference2ReferenceMaps;
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.level.ChunkPos;
+import org.agrona.collections.Long2ObjectHashMap;
 import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Map;
 
 public final class NearbyPlayers {
 
@@ -59,12 +_,12 @@
     public static final int GENERAL_REALLY_SMALL_AREA_VIEW_DISTANCE_BLOCKS = (GENERAL_REALLY_SMALL_VIEW_DISTANCE << 4);
 
     private final ServerLevel world;
-    private final Reference2ReferenceOpenHashMap<ServerPlayer, TrackedPlayer[]> players = new Reference2ReferenceOpenHashMap<>();
-    private final Long2ReferenceOpenHashMap<TrackedChunk> byChunk = new Long2ReferenceOpenHashMap<>();
-    private final Long2ReferenceOpenHashMap<ReferenceList<ServerPlayer>>[] directByChunk = new Long2ReferenceOpenHashMap[TOTAL_MAP_TYPES];
+    private final Reference2ReferenceMap<ServerPlayer, TrackedPlayer[]> players = Reference2ReferenceMaps.synchronize(new Reference2ReferenceOpenHashMap<>()); // Canvas
+    private final Long2ReferenceMap<TrackedChunk> byChunk = Long2ReferenceMaps.synchronize(new Long2ReferenceOpenHashMap<>()); // Canvas
+    private final Long2ReferenceMap<ReferenceList<ServerPlayer>>[] directByChunk = new Long2ReferenceMap[TOTAL_MAP_TYPES]; // Canvas
     {
         for (int i = 0; i < this.directByChunk.length; ++i) {
-            this.directByChunk[i] = new Long2ReferenceOpenHashMap<>();
+            this.directByChunk[i] = Long2ReferenceMaps.synchronize(new Long2ReferenceOpenHashMap<>()); // Canvas
         }
     }
 
@@ -121,7 +_,7 @@
         players[NearbyMapType.GENERAL.ordinal()].update(chunk.x, chunk.z, GENERAL_AREA_VIEW_DISTANCE);
         players[NearbyMapType.GENERAL_SMALL.ordinal()].update(chunk.x, chunk.z, GENERAL_SMALL_VIEW_DISTANCE);
         players[NearbyMapType.GENERAL_REALLY_SMALL.ordinal()].update(chunk.x, chunk.z, GENERAL_REALLY_SMALL_VIEW_DISTANCE);
-        players[NearbyMapType.TICK_VIEW_DISTANCE.ordinal()].update(chunk.x, chunk.z, PlatformHooks.get().getTickViewDistance(player));
+        players[NearbyMapType.TICK_VIEW_DISTANCE.ordinal()].update(chunk.x, chunk.z, Config.INSTANCE.tickDistanceMaps.enableNearbyPlayersTickViewDistanceOverride ? Config.INSTANCE.tickDistanceMaps.nearbyPlayersTickDistance : PlatformHooks.get().getTickViewDistance(player)); // Canvas - tick distance maps
         players[NearbyMapType.VIEW_DISTANCE.ordinal()].update(chunk.x, chunk.z, PlatformHooks.get().getViewDistance(player));
         players[NearbyMapType.SPAWN_RANGE.ordinal()].update(chunk.x, chunk.z, ChunkTickConstants.PLAYER_SPAWN_TRACK_RANGE); // Moonrise - chunk tick iteration
     }
@@ -177,18 +_,19 @@
             return this.updateCount;
         }
 
-        public ReferenceList<ServerPlayer> getPlayers(final NearbyMapType type) {
+        public synchronized ReferenceList<ServerPlayer> getPlayers(final NearbyMapType type) { // Canvas - synchronized
             return this.players[type.ordinal()];
         }
 
-        public void addPlayer(final ServerPlayer player, final NearbyMapType type) {
+        public synchronized void addPlayer(final ServerPlayer player, final NearbyMapType type) { // Canvas - synchronized
             ++this.updateCount;
 
             final int idx = type.ordinal();
             final ReferenceList<ServerPlayer> list = this.players[idx];
             if (list == null) {
                 ++this.nonEmptyLists;
-                final ReferenceList<ServerPlayer> players = (this.players[idx] = new ReferenceList<>(EMPTY_PLAYERS_ARRAY));
+                this.players[idx] = new ReferenceList<>(EMPTY_PLAYERS_ARRAY);
+                final ReferenceList<ServerPlayer> players = this.players[idx]; // Canvas
                 this.nearbyPlayers.directByChunk[idx].put(this.chunkKey, players);
                 players.add(player);
                 return;
@@ -199,7 +_,7 @@
             }
         }
 
-        public void removePlayer(final ServerPlayer player, final NearbyMapType type) {
+        public synchronized void removePlayer(final ServerPlayer player, final NearbyMapType type) { // Canvas - synchronized
             ++this.updateCount;
 
             final int idx = type.ordinal();
@@ -230,7 +_,7 @@
         }
 
         @Override
-        protected void addCallback(final ServerPlayer parameter, final int chunkX, final int chunkZ) {
+        protected synchronized void addCallback(final ServerPlayer parameter, final int chunkX, final int chunkZ) { // Canvas - synchronized
             final long chunkKey = CoordinateUtils.getChunkKey(chunkX, chunkZ);
 
             final TrackedChunk chunk = NearbyPlayers.this.byChunk.get(chunkKey);
@@ -249,7 +_,7 @@
         }
 
         @Override
-        protected void removeCallback(final ServerPlayer parameter, final int chunkX, final int chunkZ) {
+        protected synchronized void removeCallback(final ServerPlayer parameter, final int chunkX, final int chunkZ) { // Canvas - synchronized
             final long chunkKey = CoordinateUtils.getChunkKey(chunkX, chunkZ);
 
             final TrackedChunk chunk = NearbyPlayers.this.byChunk.get(chunkKey);
