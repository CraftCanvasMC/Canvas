--- a/ca/spottedleaf/moonrise/common/misc/NearbyPlayers.java
+++ b/ca/spottedleaf/moonrise/common/misc/NearbyPlayers.java
@@ -8,9 +_,12 @@
 import ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkData;
 import ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickConstants;
 import ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickServerLevel;
+import it.unimi.dsi.fastutil.longs.Long2ReferenceMap;
+import it.unimi.dsi.fastutil.longs.Long2ReferenceMaps;
 import it.unimi.dsi.fastutil.longs.Long2ReferenceOpenHashMap;
 import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
 import net.minecraft.core.BlockPos;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.level.ChunkPos;
@@ -60,11 +_,11 @@
 
     private final ServerLevel world;
     private final Reference2ReferenceOpenHashMap<ServerPlayer, TrackedPlayer[]> players = new Reference2ReferenceOpenHashMap<>();
-    private final Long2ReferenceOpenHashMap<TrackedChunk> byChunk = new Long2ReferenceOpenHashMap<>();
-    private final Long2ReferenceOpenHashMap<ReferenceList<ServerPlayer>>[] directByChunk = new Long2ReferenceOpenHashMap[TOTAL_MAP_TYPES];
+    private final Long2ReferenceMap<TrackedChunk> byChunk = Long2ReferenceMaps.synchronize(new Long2ReferenceOpenHashMap<>()); // Canvas
+    private final Long2ReferenceMap<ReferenceList<ServerPlayer>>[] directByChunk = new Long2ReferenceMap[TOTAL_MAP_TYPES]; // Canvas
     {
         for (int i = 0; i < this.directByChunk.length; ++i) {
-            this.directByChunk[i] = new Long2ReferenceOpenHashMap<>();
+            this.directByChunk[i] = Long2ReferenceMaps.synchronize(new Long2ReferenceOpenHashMap<>()); // Canvas
         }
     }
 
@@ -181,7 +_,7 @@
             return this.players[type.ordinal()];
         }
 
-        public void addPlayer(final ServerPlayer player, final NearbyMapType type) {
+        public synchronized void addPlayer(final ServerPlayer player, final NearbyMapType type) { // Canvas
             ++this.updateCount;
 
             final int idx = type.ordinal();
@@ -199,7 +_,7 @@
             }
         }
 
-        public void removePlayer(final ServerPlayer player, final NearbyMapType type) {
+        public synchronized void removePlayer(final ServerPlayer player, final NearbyMapType type) { // Canvas
             ++this.updateCount;
 
             final int idx = type.ordinal();
@@ -230,7 +_,7 @@
         }
 
         @Override
-        protected void addCallback(final ServerPlayer parameter, final int chunkX, final int chunkZ) {
+        protected synchronized void addCallback(final ServerPlayer parameter, final int chunkX, final int chunkZ) { // Canvas
             final long chunkKey = CoordinateUtils.getChunkKey(chunkX, chunkZ);
 
             final TrackedChunk chunk = NearbyPlayers.this.byChunk.get(chunkKey);
@@ -249,7 +_,7 @@
         }
 
         @Override
-        protected void removeCallback(final ServerPlayer parameter, final int chunkX, final int chunkZ) {
+        protected synchronized void removeCallback(final ServerPlayer parameter, final int chunkX, final int chunkZ) { // Canvas
             final long chunkKey = CoordinateUtils.getChunkKey(chunkX, chunkZ);
 
             final TrackedChunk chunk = NearbyPlayers.this.byChunk.get(chunkKey);
