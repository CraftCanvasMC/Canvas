--- a/net/minecraft/server/network/PlayerChunkSender.java
+++ b/net/minecraft/server/network/PlayerChunkSender.java
@@ -2,6 +_,8 @@
 
 import com.google.common.collect.Comparators;
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.server.level.chunk.ChunkSendingExecutor;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import java.util.Comparator;
@@ -18,6 +_,7 @@
 import net.minecraft.util.Mth;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.chunk.status.ChunkStatus;
 import org.slf4j.Logger;
 
 public class PlayerChunkSender {
@@ -80,6 +_,8 @@
 
     // Paper start - Anti-Xray
     public static void sendChunk(ServerGamePacketListenerImpl packetListener, ServerLevel level, LevelChunk chunk) {
+        ChunkSendingExecutor.execute(() -> { // Canvas - async chunk sending
+        if (Config.INSTANCE.chunkSending.runFullStatusAccessLoadBeforeSending) ChunkSendingExecutor.execute(() -> level.getChunk(chunk.getPos().x, chunk.getPos().z, ChunkStatus.FULL)); // Canvas - load
         final boolean shouldModify = level.chunkPacketBlockController.shouldModify(packetListener.player, chunk);
         packetListener.send(new ClientboundLevelChunkWithLightPacket(chunk, level.getLightEngine(), null, null, shouldModify));
         // Paper end - Anti-Xray
@@ -90,6 +_,8 @@
         // Paper end - PlayerChunkLoadEvent
         ChunkPos pos = chunk.getPos();
         DebugPackets.sendPoiPacketsForChunk(level, pos);
+        }); // Canvas - async chunk sending
+        if (!Config.INSTANCE.chunkSending.runFullStatusAccessLoadBeforeSending) ChunkSendingExecutor.execute(() -> level.getChunk(chunk.getPos().x, chunk.getPos().z, ChunkStatus.FULL)); // Canvas - load
     }
 
     private List<LevelChunk> collectChunksToSend(ChunkMap chunkMap, ChunkPos chunkPos) {
