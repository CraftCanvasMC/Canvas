--- a/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -11,10 +_,13 @@
 import java.net.SocketAddress;
 import java.security.PrivateKey;
 import java.util.Objects;
+import java.util.concurrent.Executors;
 import java.util.concurrent.atomic.AtomicInteger;
 import javax.annotation.Nullable;
 import javax.crypto.Cipher;
 import javax.crypto.SecretKey;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.server.network.PlayerJoinThread;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.DefaultUncaughtExceptionHandler;
@@ -55,7 +_,12 @@
     // CraftBukkit end
     private static final AtomicInteger UNIQUE_THREAD_ID = new AtomicInteger(0);
     static final Logger LOGGER = LogUtils.getLogger();
-    private static final java.util.concurrent.ExecutorService authenticatorPool = java.util.concurrent.Executors.newCachedThreadPool(new com.google.common.util.concurrent.ThreadFactoryBuilder().setNameFormat("User Authenticator #%d").setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER)).build()); // Paper - Cache authenticator threads
+    // Canvas start - virtual threads
+    private static final java.util.concurrent.ExecutorService authenticatorPool =
+        Config.INSTANCE.virtualThreads.shouldReplaceAuthenticator() ?
+            Executors.newVirtualThreadPerTaskExecutor() :
+            java.util.concurrent.Executors.newCachedThreadPool(new com.google.common.util.concurrent.ThreadFactoryBuilder().setNameFormat("User Authenticator #%d").setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(LOGGER)).build()); // Paper - Cache authenticator threads
+    // Canvas end
     private static final int MAX_TICKS_BEFORE_LOGIN = 600;
     private final byte[] challenge;
     final MinecraftServer server;
@@ -127,7 +_,7 @@
             this.finishLoginAndWaitForClient(this.authenticatedProfile);
         }
 
-        if (this.tick++ == 600) {
+        if (this.tick++ == 600 && !Config.INSTANCE.asyncPlayerJoining) { // Canvas
             this.disconnect(Component.translatable("multiplayer.disconnect.slow_login"));
         }
     }
@@ -439,7 +_,7 @@
 
     @Override
     public void handleLoginAcknowledgement(ServerboundLoginAcknowledgedPacket packet) {
-        PacketUtils.ensureRunningOnSameThread(packet, this, this.server); // CraftBukkit
+        PacketUtils.ensureRunningOnSameThread(packet, this, Config.INSTANCE.asyncPlayerJoining ? PlayerJoinThread.getInstance() : this.player.serverLevel()); // CraftBukkit // Canvas
         Validate.validState(this.state == ServerLoginPacketListenerImpl.State.PROTOCOL_SWITCHING, "Unexpected login acknowledgement packet");
         this.connection.setupOutboundProtocol(ConfigurationProtocols.CLIENTBOUND);
         CommonListenerCookie commonListenerCookie = CommonListenerCookie.createInitial(Objects.requireNonNull(this.authenticatedProfile), this.transferred);
@@ -460,7 +_,7 @@
     @Override
     public void handleCookieResponse(ServerboundCookieResponsePacket packet) {
         // CraftBukkit start
-        PacketUtils.ensureRunningOnSameThread(packet, this, this.server);
+        PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel()); // Canvas
         if (this.player != null && this.player.getBukkitEntity().handleCookieResponse(packet)) {
             return;
         }
