--- a/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -3,6 +_,7 @@
 import com.mojang.authlib.GameProfile;
 import com.mojang.logging.LogUtils;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.Config;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -21,6 +_,8 @@
 import net.minecraft.network.protocol.common.ServerboundPongPacket;
 import net.minecraft.network.protocol.common.ServerboundResourcePackPacket;
 import net.minecraft.network.protocol.cookie.ServerboundCookieResponsePacket;
+import net.minecraft.network.protocol.game.ClientboundPlayerChatPacket;
+import net.minecraft.network.protocol.game.ClientboundSystemChatPacket;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ClientInformation;
 import net.minecraft.util.VisibleForDebug;
@@ -45,7 +_,7 @@
     private int latency;
     private volatile boolean suspendFlushingOnServerThread = false;
     // CraftBukkit start
-    protected final net.minecraft.server.level.ServerPlayer player;
+    public final net.minecraft.server.level.ServerPlayer player; // Canvas - protected -> public
     protected final org.bukkit.craftbukkit.CraftServer cserver;
     public boolean processedDisconnect;
     // CraftBukkit end
@@ -135,6 +_,7 @@
             this.latency = (this.latency * 3 + i) / 4;
             this.keepAlivePending = false;
         } else if (!this.isSingleplayerOwner()) {
+            LOGGER.info("Disconnecting {} asynchronously from timeout in serverbound keep alive", this.player.getDisplayName().getString()); // Canvas - debug timeout
             this.disconnectAsync(TIMEOUT_DISCONNECTION_MESSAGE, org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - add proper async disconnect
         }
     }
@@ -220,7 +_,7 @@
 
     @Override
     public void handleResourcePackResponse(ServerboundResourcePackPacket packet) {
-        PacketUtils.ensureRunningOnSameThread(packet, this, this.server);
+        PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel()); // Canvas
         if (packet.action() == ServerboundResourcePackPacket.Action.DECLINED && this.server.isResourcePackRequired()) {
             LOGGER.info("Disconnecting {} due to resource pack {} rejection", this.playerProfile().getName(), packet.id());
             this.disconnect(Component.translatable("multiplayer.requiredTexturePrompt.disconnect"), org.bukkit.event.player.PlayerKickEvent.Cause.RESOURCE_PACK_REJECTION); // Paper - kick event cause
@@ -247,7 +_,7 @@
     @Override
     public void handleCookieResponse(ServerboundCookieResponsePacket packet) {
         // CraftBukkit start
-        PacketUtils.ensureRunningOnSameThread(packet, this, this.server);
+        PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel()); // Canvas
         if (this.player.getBukkitEntity().handleCookieResponse(packet)) {
             return;
         }
@@ -266,6 +_,7 @@
         if (org.purpurmc.purpur.PurpurConfig.useAlternateKeepAlive) {
             if (elapsedTime >= 1000L) { // 1 second
                 if (this.keepAlivePending && !this.processedDisconnect && keepAlives.size() * 1000L >= KEEPALIVE_LIMIT) {
+                    LOGGER.warn("Player {} failed to respond to keep alive via Purpur alternative keep alive", this.player.getDisplayName().getString()); // Canvas - debug timeout
                     this.disconnect(ServerCommonPacketListenerImpl.TIMEOUT_DISCONNECTION_MESSAGE, org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT);
                 } else if (this.checkIfClosed(millis)) {
                     this.keepAlivePending = true;
@@ -280,6 +_,7 @@
         if (!this.isSingleplayerOwner() && elapsedTime >= 15000L) { // use vanilla's 15000L between keep alive packets
             if (this.keepAlivePending) {
                 if (!this.processedDisconnect && elapsedTime >= KEEPALIVE_LIMIT) { // check keepalive limit, don't fire if already disconnected
+                    LOGGER.warn("Player {} failed to respond to keep alive", this.player.getDisplayName().getString()); // Canvas - debug timeout
                     this.disconnect(TIMEOUT_DISCONNECTION_MESSAGE, org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
                 }
                 // Paper end - give clients a longer time to respond to pings as per pre 1.12.2 timings
@@ -297,6 +_,7 @@
     private boolean checkIfClosed(long time) {
         if (this.closed) {
             if (time - this.closedListenerTime >= 15000L) {
+                LOGGER.info("Disconnected player {} from closing", this.player.getDisplayName().getString()); // Canvas - debug timeout
                 this.disconnect(TIMEOUT_DISCONNECTION_MESSAGE, org.bukkit.event.player.PlayerKickEvent.Cause.TIMEOUT); // Paper - kick event cause
             }
 
@@ -316,10 +_,64 @@
     }
 
     public void send(Packet<?> packet) {
+        // Canvas start - no chat reports
+        if (Config.INSTANCE.networking.noChatReports.enable) {
+            Object self = this;
+            boolean cancel = false;
+
+            if (self instanceof ServerGamePacketListenerImpl listener) {
+                if (Config.INSTANCE.networking.noChatReports.debugLog && packet instanceof ClientboundPlayerChatPacket chat) {
+                    MinecraftServer.LOGGER.info("Sending message: {}", chat.unsignedContent() != null ? chat.unsignedContent()
+                        : chat.body().content());
+                }
+
+                if (Config.INSTANCE.networking.noChatReports.convertToGameMessage) {
+                    if (packet instanceof ClientboundPlayerChatPacket chat) {
+                        packet = new ClientboundSystemChatPacket(chat.chatType().decorate(
+                            chat.unsignedContent() != null ? chat.unsignedContent()
+                                : Component.literal(chat.body().content())
+                        ), false);
+
+                        cancel = true;
+                        listener.send(packet);
+                    }
+                }
+            }
+
+            if (cancel) {
+                return;
+            }
+        }
+        // Canvas end
         this.send(packet, null);
     }
 
     public void send(Packet<?> packet, @Nullable PacketSendListener listener) {
+        // Canvas start - no chat reports
+        if (Config.INSTANCE.networking.noChatReports.enable) {
+            Object self = this;
+            boolean cancel = false;
+
+            if (self instanceof ServerGamePacketListenerImpl listenerImpl) {
+                if (Config.INSTANCE.networking.noChatReports.debugLog && packet instanceof ClientboundPlayerChatPacket chat) {
+                    MinecraftServer.LOGGER.info("Sending message: {}", chat.unsignedContent() != null ? chat.unsignedContent()
+                        : chat.body().content());
+                }
+
+                if (Config.INSTANCE.networking.noChatReports.convertToGameMessage) {
+                    if (packet instanceof ClientboundPlayerChatPacket chat && listener != null) {
+                        cancel = true;
+                        listenerImpl.send(chat);
+                    }
+                }
+
+            }
+
+            if (cancel) {
+                return;
+            }
+        }
+        // Canvas end
         // CraftBukkit start
         if (packet == null || this.processedDisconnect) { // Spigot
             return;
@@ -331,7 +_,7 @@
             this.close();
         }
 
-        boolean flag = !this.suspendFlushingOnServerThread || !this.server.isSameThread();
+        boolean flag = true; // Canvas
 
         try {
             this.connection.send(packet, listener, flag);
