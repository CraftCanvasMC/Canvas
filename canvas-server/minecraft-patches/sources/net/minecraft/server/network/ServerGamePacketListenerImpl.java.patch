--- a/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -8,6 +_,8 @@
 import com.mojang.brigadier.StringReader;
 import com.mojang.brigadier.suggestion.Suggestions;
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.region.ServerRegions;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
@@ -22,6 +_,7 @@
 import java.util.Set;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Executors;
 import java.util.function.BiFunction;
 import java.util.function.Consumer;
 import java.util.stream.Collectors;
@@ -130,6 +_,7 @@
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.RunningOnDifferentThreadException;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.util.FutureChain;
@@ -185,6 +_,8 @@
 import net.minecraft.world.level.block.entity.StructureBlockEntity;
 import net.minecraft.world.level.block.state.BlockBehaviour;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.ChunkAccess;
+import net.minecraft.world.level.chunk.status.ChunkStatus;
 import net.minecraft.world.phys.AABB;
 import net.minecraft.world.phys.BlockHitResult;
 import net.minecraft.world.phys.Vec3;
@@ -294,8 +_,8 @@
     // CraftBukkit start - add fields
     private int lastTick = MinecraftServer.currentTick;
     private int allowedPlayerTicks = 1;
-    private int lastDropTick = MinecraftServer.currentTick;
-    private int lastBookTick  = MinecraftServer.currentTick;
+    private long lastDropTick = 0; // Canvas - Threaded Regions
+    private long lastBookTick = 0; // Canvas - Threaded Regions
     private int dropCount = 0;
 
     private boolean hasMoved = false;
@@ -341,6 +_,7 @@
             }
         );
     // Purpur end - AFK API
+    long lastTickTime = Util.getNanos(); // Canvas - Threaded Regions
 
     @Override
     public void tick() {
@@ -369,15 +_,18 @@
         }
 
         this.lastVehicle = this.player.getRootVehicle();
-        if (this.lastVehicle != this.player && this.lastVehicle.getControllingPassenger() == this.player) {
-            this.vehicleFirstGoodX = this.lastVehicle.getX();
-            this.vehicleFirstGoodY = this.lastVehicle.getY();
-            this.vehicleFirstGoodZ = this.lastVehicle.getZ();
-            this.vehicleLastGoodX = this.lastVehicle.getX();
-            this.vehicleLastGoodY = this.lastVehicle.getY();
-            this.vehicleLastGoodZ = this.lastVehicle.getZ();
-            if (this.clientVehicleIsFloating && this.lastVehicle.getControllingPassenger() == this.player) {
-                if (++this.aboveGroundVehicleTickCount > this.getMaximumFlyingTicks(this.lastVehicle)) {
+        // Canvas start - snapshot
+        Entity lastVehicle = this.lastVehicle;
+        if (lastVehicle != null && lastVehicle != this.player && lastVehicle.getControllingPassenger() == this.player) { // Canvas - ensure non null
+            this.vehicleFirstGoodX = lastVehicle.getX();
+            this.vehicleFirstGoodY = lastVehicle.getY();
+            this.vehicleFirstGoodZ = lastVehicle.getZ();
+            this.vehicleLastGoodX = lastVehicle.getX();
+            this.vehicleLastGoodY = lastVehicle.getY();
+            this.vehicleLastGoodZ = lastVehicle.getZ();
+            if (this.clientVehicleIsFloating && lastVehicle.getControllingPassenger() == this.player) {
+                if (++this.aboveGroundVehicleTickCount > this.getMaximumFlyingTicks(lastVehicle)) {
+        // Canvas end
                     LOGGER.warn("{} was kicked for floating a vehicle too long!", this.player.getName().getString());
                     this.disconnect(io.papermc.paper.configuration.GlobalConfiguration.get().messages.kick.flyingVehicle, org.bukkit.event.player.PlayerKickEvent.Cause.FLYING_VEHICLE); // Paper - use configurable kick message & kick event cause
                     return;
@@ -570,6 +_,12 @@
                     !serverLevel.areChunksLoadedForMove(this.player.getBoundingBox().expandTowards(new Vec3(toX, toY, toZ).subtract(this.player.position()))) ||
                         !serverLevel.areChunksLoadedForMove(rootVehicle.getBoundingBox().expandTowards(new Vec3(toX, toY, toZ).subtract(rootVehicle.position())))
                 )) {
+                    // Canvas start - schedule for load if we fail
+                    this.player.serverLevel().moonrise$getChunkTaskScheduler().scheduleChunkLoad(
+                        this.player.chunkPosition().x, this.player.chunkPosition().z, ChunkStatus.FULL, true, ca.spottedleaf.concurrentutil.util.Priority.BLOCKING,
+                        null
+                    );
+                    // Canvas end
                     this.connection.send(ClientboundMoveVehiclePacket.fromEntity(rootVehicle));
                     return;
                 }
@@ -733,8 +_,14 @@
         PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel());
         if (packet.getId() == this.awaitingTeleport) {
             if (this.awaitingPositionFromClient == null) {
+                // Canvas start - graceful teleport handling
+                if (Config.INSTANCE.gracefulTeleportHandling) {
+                    LOGGER.info("Was not expecting position data from client at this time, gracefully returning instead of disconnect.");
+                } else {
                 ServerGamePacketListenerImpl.LOGGER.warn("Disconnected on accept teleport packet. Was not expecting position data from client at this time"); // Purpur - Add more logger output for invalid movement kicks
                 this.disconnect(Component.translatable("multiplayer.disconnect.invalid_player_movement"), org.bukkit.event.player.PlayerKickEvent.Cause.INVALID_PLAYER_MOVEMENT); // Paper - kick event cause
+                }
+                // Canvas end
                 return;
             }
 
@@ -802,7 +_,12 @@
     }
 
     // Paper start - AsyncTabCompleteEvent
-    private static final java.util.concurrent.ExecutorService TAB_COMPLETE_EXECUTOR = java.util.concurrent.Executors.newFixedThreadPool(4,
+    // Canvas start
+    private static final java.util.concurrent.ExecutorService TAB_COMPLETE_EXECUTOR =
+        Config.INSTANCE.virtualThreads.shouldReplaceTabCompleteExecutor() ?
+            Executors.newVirtualThreadPerTaskExecutor() :
+            java.util.concurrent.Executors.newFixedThreadPool(4,
+    // Canvas end
         new com.google.common.util.concurrent.ThreadFactoryBuilder().setDaemon(true).setNameFormat("Async Tab Complete Thread - #%d").setUncaughtExceptionHandler(new net.minecraft.DefaultUncaughtExceptionHandlerWithName(MinecraftServer.LOGGER)).build());
     // Paper end - AsyncTabCompleteEvent
 
@@ -810,7 +_,7 @@
     public void handleCustomCommandSuggestions(ServerboundCommandSuggestionPacket packet) {
         // PacketUtils.ensureRunningOnSameThread(packet, this, this.player.serverLevel()); // Paper - AsyncTabCompleteEvent; run this async
         // CraftBukkit start
-        if (!this.tabSpamThrottler.isIncrementAndUnderThreshold() && !this.server.getPlayerList().isOp(this.player.getGameProfile()) && !this.server.isSingleplayerOwner(this.player.getGameProfile())) { // Paper - configurable tab spam limits
+        if (!this.tabSpamThrottler.isIncrementAndUnderThreshold() && !this.server.getPlayerList().isOp(this.player.getGameProfile()) && !this.server.isSingleplayerOwner(this.player.getGameProfile()) && !Config.INSTANCE.networking.disableDisconnectSpam) { // Paper - configurable tab spam limits // Canvas
             this.disconnectAsync(Component.translatable("disconnect.spam"), org.bukkit.event.player.PlayerKickEvent.Cause.SPAM); // Paper - Kick event cause // Paper - add proper async disconnect
             return;
         }
@@ -822,7 +_,7 @@
         // Paper end - Don't suggest if tab-complete is disabled
         // Paper start
         final int index;
-        if (packet.getCommand().length() > 64 && ((index = packet.getCommand().indexOf(' ')) == -1 || index >= 64)) {
+        if (packet.getCommand().length() > 64 && ((index = packet.getCommand().indexOf(' ')) == -1 || index >= 64) && !Config.INSTANCE.networking.disableDisconnectSpam) { // Canvas
             this.disconnectAsync(Component.translatable("disconnect.spam"), org.bukkit.event.player.PlayerKickEvent.Cause.SPAM); // Paper - add proper async disconnect
             return;
         }
@@ -882,6 +_,7 @@
         ParseResults<CommandSourceStack> parseResults = this.server.getCommands().getDispatcher().parse(stringReader, this.player.createCommandSourceStack());
         // Paper start - Handle non-recoverable exceptions
         if (!parseResults.getExceptions().isEmpty()
+            && !Config.INSTANCE.networking.disableDisconnectSpam // Canvas
             && parseResults.getExceptions().values().stream().anyMatch(e -> e instanceof io.papermc.paper.brigadier.TagParseCommandSyntaxException)) {
             this.disconnect(Component.translatable("disconnect.spam"), org.bukkit.event.player.PlayerKickEvent.Cause.SPAM);
             return;
@@ -1238,11 +_,12 @@
         }
         // Paper end - Book size limits
         // CraftBukkit start
-        if (this.lastBookTick + 20 > MinecraftServer.currentTick) {
+        if (this.lastBookTick + 20 > ServerRegions.getCurrentTick(this.player.serverLevel())) { // Canvas - Threaded Regions
+            LOGGER.warn("Disconnecting player {} from server from editing a book too quickly. Last book tick {} > current tick {}", this.player.getName().getString(), this.lastBookTick, ServerRegions.getCurrentTick(this.player.serverLevel())); // Canvas - Threaded Regions
             this.disconnectAsync(Component.literal("Book edited too quickly!"), org.bukkit.event.player.PlayerKickEvent.Cause.ILLEGAL_ACTION); // Paper - kick event cause // Paper - add proper async disconnect
             return;
         }
-        this.lastBookTick = MinecraftServer.currentTick;
+        this.lastBookTick = ServerRegions.getCurrentTick(this.player.serverLevel()); // Canvas - Threaded Regions
         // CraftBukkit end
         int slot = packet.slot();
         if (Inventory.isHotbarSlot(slot) || slot == 40) {
@@ -1436,6 +_,12 @@
                                     // Paper start - Add fail move event
                                     io.papermc.paper.event.player.PlayerFailMoveEvent event = fireFailMove(io.papermc.paper.event.player.PlayerFailMoveEvent.FailReason.MOVED_INTO_UNLOADED_CHUNK,
                                         toX, toY, toZ, toYaw, toPitch, false);
+                                    // Canvas start - schedule for load if we fail
+                                    this.player.serverLevel().moonrise$getChunkTaskScheduler().scheduleChunkLoad(
+                                        this.player.chunkPosition().x, this.player.chunkPosition().z, ChunkStatus.FULL, true, ca.spottedleaf.concurrentutil.util.Priority.BLOCKING,
+                                        null
+                                    );
+                                    // Canvas end
                                     if (!event.isAllowed()) {
                                         this.internalTeleport(PositionMoveRotation.of(this.player), Collections.emptySet());
                                         return;
@@ -1890,9 +_,10 @@
                     if (!this.player.isSpectator()) {
                         // limit how quickly items can be dropped
                         // If the ticks aren't the same then the count starts from 0 and we update the lastDropTick.
-                        if (this.lastDropTick != MinecraftServer.currentTick) {
+                        ServerRegions.WorldTickData data = ServerRegions.getTickData(this.player.serverLevel()); // Canvas - Threaded Regions
+                        if (this.lastDropTick != data.peekTick()) { // Canvas - Threaded Regions
                             this.dropCount = 0;
-                            this.lastDropTick = MinecraftServer.currentTick;
+                            this.lastDropTick = data.peekTick(); // Canvas - Threaded Regions
                         } else {
                             // Else we increment the drop count and check the amount.
                             this.dropCount++;
@@ -2422,7 +_,7 @@
             this.player.resetLastActionTime();
             // CraftBukkit start
             if (sync) {
-                this.server.execute(handler);
+                this.player.getBukkitEntity().taskScheduler.schedule((_) -> handler.run(), null, 0L);
             } else {
                 handler.run();
             }
@@ -2600,6 +_,7 @@
         // this.chatSpamThrottler.increment();
         if (!this.chatSpamThrottler.isIncrementAndUnderThreshold()
             // CraftBukkit end
+            && !Config.INSTANCE.networking.disableDisconnectSpam // Canvas
             && !this.server.getPlayerList().isOp(this.player.getGameProfile())
             && !this.server.isSingleplayerOwner(this.player.getGameProfile())) {
             this.disconnectAsync(Component.translatable("disconnect.spam"), org.bukkit.event.player.PlayerKickEvent.Cause.SPAM); // Paper - kick event cause & add proper async disconnect
@@ -3378,7 +_,7 @@
     public void handlePlaceRecipe(ServerboundPlaceRecipePacket packet) {
         // Paper start - auto recipe limit
         if (!org.bukkit.Bukkit.isPrimaryThread()) {
-            if (!this.recipeSpamPackets.isIncrementAndUnderThreshold()) {
+            if (!this.recipeSpamPackets.isIncrementAndUnderThreshold() && !Config.INSTANCE.networking.disableDisconnectSpam) { // Canvas
                 this.disconnectAsync(net.minecraft.network.chat.Component.translatable("disconnect.spam"), org.bukkit.event.player.PlayerKickEvent.Cause.SPAM); // Paper - kick event cause // Paper - add proper async disconnect
                 return;
             }
