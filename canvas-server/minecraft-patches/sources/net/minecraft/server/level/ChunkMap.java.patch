--- a/net/minecraft/server/level/ChunkMap.java
+++ b/net/minecraft/server/level/ChunkMap.java
@@ -1,15 +_,26 @@
 package net.minecraft.server.level;
 
+import ca.spottedleaf.concurrentutil.util.Priority;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Queues;
 import com.google.common.collect.ImmutableList.Builder;
+import com.google.common.collect.Sets;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.entity.tracking.ThreadedTracker;
+import io.canvasmc.canvas.region.ServerRegions;
+import io.canvasmc.canvas.util.ConcurrentRegionizedEntityMap;
+import io.canvasmc.canvas.util.fastutil.Int2ObjectConcurrentHashMap;
+import io.netty.util.internal.ConcurrentSet;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
+import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ByteMap;
+import it.unimi.dsi.fastutil.longs.Long2ByteMaps;
 import it.unimi.dsi.fastutil.longs.Long2ByteOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2LongMap;
 import it.unimi.dsi.fastutil.longs.Long2LongOpenHashMap;
@@ -35,7 +_,12 @@
 import java.util.concurrent.CompletionException;
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.Executor;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.function.BiFunction;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
 import java.util.function.IntConsumer;
@@ -55,6 +_,7 @@
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundChunksBiomesPacket;
 import net.minecraft.network.protocol.game.ClientboundSetChunkCacheCenterPacket;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.progress.ChunkProgressListener;
 import net.minecraft.server.network.ServerPlayerConnection;
 import net.minecraft.util.CsvOutput;
@@ -128,9 +_,11 @@
     public final ChunkMap.DistanceManager distanceManager;
     public final AtomicInteger tickingGenerated = new AtomicInteger();  // Paper - public
     private final String storageName;
-    private final PlayerMap playerMap = new PlayerMap();
-    public final Int2ObjectMap<ChunkMap.TrackedEntity> entityMap = new Int2ObjectOpenHashMap<>();
-    private final Long2ByteMap chunkTypeCache = new Long2ByteOpenHashMap();
+    // private final PlayerMap playerMap = new PlayerMap(); // Canvas - Threaded Regions
+    // Canvas start - synchronize / concurrent
+    public final Int2ObjectMap<ChunkMap.TrackedEntity> entityMap; // Canvas - Threaded Regions
+    private final Long2ByteMap chunkTypeCache = Long2ByteMaps.synchronize(new Long2ByteOpenHashMap());
+    // Canvas end
     // Paper - rewrite chunk system
     public int serverViewDistance;
     public final WorldGenContext worldGenContext; // Paper - public
@@ -230,6 +_,7 @@
         );
         this.setServerViewDistance(viewDistance);
         this.worldGenContext = new WorldGenContext(level, generator, structureManager, this.lightEngine, null, this::setChunkUnsaved); // Paper - rewrite chunk system
+        this.entityMap = new ConcurrentRegionizedEntityMap(level); // Canvas - Threaded Regions
     }
 
     private void setChunkUnsaved(ChunkPos chunkPos) {
@@ -244,14 +_,18 @@
 
         final int index = entity.getType().getCategory().ordinal();
         final ca.spottedleaf.moonrise.common.list.ReferenceList<ServerPlayer> inRange =
-            this.level.moonrise$getNearbyPlayers().getPlayers(entity.chunkPosition(), ca.spottedleaf.moonrise.common.misc.NearbyPlayers.NearbyMapType.TICK_VIEW_DISTANCE);
+            this.level.moonrise$getNearbyPlayers(entity.chunkPosition()).getPlayers(entity.chunkPosition(), ca.spottedleaf.moonrise.common.misc.NearbyPlayers.NearbyMapType.TICK_VIEW_DISTANCE); // Canvas - Threaded Regions
         if (inRange == null) {
             return;
         }
 
         final ServerPlayer[] backingSet = inRange.getRawDataUnchecked();
         for (int i = 0, len = inRange.size(); i < len; i++) {
-            ++(backingSet[i].mobCounts[index]);
+            // Canvas start - caution ref lists
+            ServerPlayer player = backingSet[i];
+            if (player == null) continue;
+            ++(player.mobCounts[index]);
+            // Canvas end
         }
     }
 
@@ -262,13 +_,17 @@
         }
         int idx = mobCategory.ordinal();
         final ca.spottedleaf.moonrise.common.list.ReferenceList<ServerPlayer> inRange =
-            this.level.moonrise$getNearbyPlayers().getPlayersByChunk(chunkX, chunkZ, ca.spottedleaf.moonrise.common.misc.NearbyPlayers.NearbyMapType.TICK_VIEW_DISTANCE);
+            this.level.moonrise$getNearbyPlayers(new ChunkPos(chunkX, chunkZ)).getPlayersByChunk(chunkX, chunkZ, ca.spottedleaf.moonrise.common.misc.NearbyPlayers.NearbyMapType.TICK_VIEW_DISTANCE); // Canvas - Threaded Regions
         if (inRange == null) {
             return;
         }
         final ServerPlayer[] backingSet = inRange.getRawDataUnchecked();
         for (int i = 0, len = inRange.size(); i < len; i++) {
-            ++(backingSet[i].mobBackoffCounts[idx]);
+            // Canvas start - caution ref lists
+            ServerPlayer player = backingSet[i];
+            if (player == null) continue;
+            ++(player.mobBackoffCounts[idx]);
+            // Canvas end
         }
     }
     // Paper end - per player mob count backoff
@@ -310,7 +_,7 @@
     }
 
     @Nullable
-    protected ChunkHolder getUpdatingChunkIfPresent(long chunkPos) {
+    public ChunkHolder getUpdatingChunkIfPresent(long chunkPos) { // Canvas - protected -> public
         // Paper start - rewrite chunk system
         final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder holder = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getChunkTaskScheduler().chunkHolderManager.getChunkHolder(chunkPos);
         return holder == null ? null : holder.vanillaChunkHolder;
@@ -409,7 +_,7 @@
         // Paper end - rewrite chunk system
     }
 
-    protected void tick(BooleanSupplier hasMoreTime) {
+    public void tick(BooleanSupplier hasMoreTime) { // Canvas - protected -> public
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("poi");
         this.poiManager.tick(hasMoreTime);
@@ -720,40 +_,19 @@
         double blockRange; // Paper - use from event
         // Spigot end
         // Paper start - chunk tick iteration optimisation
-        final ca.spottedleaf.moonrise.common.list.ReferenceList<ServerPlayer> players = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getNearbyPlayers().getPlayers(
+        final ca.spottedleaf.moonrise.common.list.ReferenceList<ServerPlayer> players = (this.level).moonrise$getNearbyPlayers(chunkPos).getPlayers( // Canvas - Threaded Regions
             chunkPos, ca.spottedleaf.moonrise.common.misc.NearbyPlayers.NearbyMapType.SPAWN_RANGE
         );
         if (players == null) {
             return false;
         }
-
-        final ServerPlayer[] raw = players.getRawDataUnchecked();
-        final int len = players.size();
-
-        Objects.checkFromIndexSize(0, len, raw.length);
-        for (int i = 0; i < len; ++i) {
-            final ServerPlayer serverPlayer = raw[i];
-            // Paper start - PlayerNaturallySpawnCreaturesEvent
-            com.destroystokyo.paper.event.entity.PlayerNaturallySpawnCreaturesEvent event;
-            blockRange = 16384.0D;
-            if (reducedRange) {
-                event = serverPlayer.playerNaturallySpawnedEvent;
-                if (event == null || event.isCancelled()) continue;
-                blockRange = (double) ((event.getSpawnRadius() << 4) * (event.getSpawnRadius() << 4));
-            }
-            // Paper end - PlayerNaturallySpawnCreaturesEvent
-            if (this.playerIsCloseEnoughForSpawning(serverPlayer, chunkPos, blockRange)) {
-                return true;
-            }
-        }
-
-        return false;
+        return !players.isEmpty(); // Canvas - optimize isChunkNearPlayer checks
         // Paper end - chunk tick iteration optimisation
     }
 
     public List<ServerPlayer> getPlayersCloseForSpawning(ChunkPos chunkPos) {
         // Paper start - chunk tick iteration optimisation
-        final ca.spottedleaf.moonrise.common.list.ReferenceList<ServerPlayer> players = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getNearbyPlayers().getPlayers(
+        final ca.spottedleaf.moonrise.common.list.ReferenceList<ServerPlayer> players = (this.level).moonrise$getNearbyPlayers(chunkPos).getPlayers( // Canvas - Threaded Regions
             chunkPos, ca.spottedleaf.moonrise.common.misc.NearbyPlayers.NearbyMapType.SPAWN_RANGE
         );
         if (players == null) {
@@ -765,10 +_,11 @@
         final ServerPlayer[] raw = players.getRawDataUnchecked();
         final int len = players.size();
 
-        Objects.checkFromIndexSize(0, len, raw.length);
-        for (int i = 0; i < len; ++i) {
+        // Objects.checkFromIndexSize(0, len, raw.length); // Canvas - why do we do this??
+        for (int i = 0; i < raw.length; ++i) { // Canvas
             final ServerPlayer player = raw[i];
-            if (this.playerIsCloseEnoughForSpawning(player, chunkPos, 16384.0D)) { // Spigot
+            if (player == null) continue; // Canvas - caution ref lists
+            if (this.playerIsCloseEnoughForSpawning(player, chunkPos, (Config.INSTANCE.tickDistanceMaps.playerNearChunkDetectionRange^2))) { // Spigot // Canvas
                 if (ret == null) {
                     ret = new ArrayList<>(len - i);
                     ret.add(player);
@@ -797,12 +_,12 @@
 
     void updatePlayerStatus(ServerPlayer player, boolean track) {
         boolean flag = this.skipPlayer(player);
-        boolean flag1 = this.playerMap.ignoredOrUnknown(player);
+        // boolean flag1 = this.playerMap.ignoredOrUnknown(player); // Canvas - Threaded Regions
         if (track) {
-            this.playerMap.addPlayer(player, flag);
+            // this.playerMap.addPlayer(player, flag); // Canvas - Threaded Regions
             this.updatePlayerPos(player);
             if (!flag) {
-                this.distanceManager.addPlayer(SectionPos.of(player), player);
+                // this.distanceManager.addPlayer(SectionPos.of(player), player); // Canvas - Threaded Regions
                 ((ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickDistanceManager)this.distanceManager).moonrise$addPlayer(player, SectionPos.of(player)); // Paper - chunk tick iteration optimisation
             }
 
@@ -810,9 +_,9 @@
             ca.spottedleaf.moonrise.common.PlatformHooks.get().addPlayerToDistanceMaps(this.level, player); // Paper - rewrite chunk system
         } else {
             SectionPos lastSectionPos = player.getLastSectionPos();
-            this.playerMap.removePlayer(player);
-            if (!flag1) {
-                this.distanceManager.removePlayer(lastSectionPos, player);
+            // this.playerMap.removePlayer(player); // Canvas - Threaded Regions
+            if (true) { // Canvas - Threaded Regions
+                // this.distanceManager.removePlayer(lastSectionPos, player); // Canvas - Threaded Regions
                 ((ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickDistanceManager)this.distanceManager).moonrise$removePlayer(player, SectionPos.of(player)); // Paper - chunk tick iteration optimisation
             }
 
@@ -830,27 +_,13 @@
 
         SectionPos lastSectionPos = player.getLastSectionPos();
         SectionPos sectionPos = SectionPos.of(player);
-        boolean flag = this.playerMap.ignored(player);
+        // boolean flag = this.playerMap.ignored(player); // Canvas - Threaded Regions
         boolean flag1 = this.skipPlayer(player);
-        boolean flag2 = lastSectionPos.asLong() != sectionPos.asLong();
-        if (flag2 || flag != flag1) {
+        // boolean flag2 = lastSectionPos.asLong() != sectionPos.asLong(); // Canvas - Threaded Regions
+        if (true) { // Canvas - Threaded Regions
             this.updatePlayerPos(player);
-            ((ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickDistanceManager)this.distanceManager).moonrise$updatePlayer(player, lastSectionPos, sectionPos, flag, flag1); // Paper - chunk tick iteration optimisation
-            if (!flag) {
-                this.distanceManager.removePlayer(lastSectionPos, player);
-            }
-
-            if (!flag1) {
-                this.distanceManager.addPlayer(sectionPos, player);
-            }
-
-            if (!flag && flag1) {
-                this.playerMap.ignorePlayer(player);
-            }
-
-            if (flag && !flag1) {
-                this.playerMap.unIgnorePlayer(player);
-            }
+            ((ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickDistanceManager)this.distanceManager).moonrise$updatePlayer(player, lastSectionPos, sectionPos, false, flag1); // Paper - chunk tick iteration optimisation // Canvas - Threaded Regions
+            // Canvas - Threaded Regions
 
             // Paper - rewrite chunk system
         }
@@ -880,9 +_,9 @@
     public void addEntity(Entity entity) {
         org.spigotmc.AsyncCatcher.catchOp("entity track"); // Spigot
         // Paper start - ignore and warn about illegal addEntity calls instead of crashing server
-        if (!entity.valid || entity.level() != this.level || this.entityMap.containsKey(entity.getId())) {
+        if (!entity.valid || entity.level() != this.level || entity.moonrise$getTrackedEntity() != null) { // Canvas - Threaded Regions
             LOGGER.error("Illegal ChunkMap::addEntity for world " + this.level.getWorld().getName()
-                + ": " + entity  + (this.entityMap.containsKey(entity.getId()) ? " ALREADY CONTAINED (This would have crashed your server)" : ""), new Throwable());
+                + ": " + entity  + (entity.moonrise$getTrackedEntity() != null ? " ALREADY CONTAINED (This would have crashed your server)" : entity.level() != this.level ? " NOT CORRECT LEVEL" : !entity.valid ? " NOT VALID" : ""), new Throwable()); // Canvas - be more specific - Threaded Regions
             return;
         }
         // Paper end - ignore and warn about illegal addEntity calls instead of crashing server
@@ -893,22 +_,28 @@
             i = org.spigotmc.TrackingRange.getEntityTrackingRange(entity, i); // Spigot
             if (i != 0) {
                 int updateInterval = type.updateInterval();
-                if (this.entityMap.containsKey(entity.getId())) {
+                if (entity.moonrise$getTrackedEntity() != null) { // Canvas - Threaded Regions
                     throw (IllegalStateException)Util.pauseInIde(new IllegalStateException("Entity is already tracked!"));
                 } else {
                     ChunkMap.TrackedEntity trackedEntity = new ChunkMap.TrackedEntity(entity, i, updateInterval, type.trackDeltas());
-                    this.entityMap.put(entity.getId(), trackedEntity);
+                    // this.entityMap.put(entity.getId(), trackedEntity); // Canvas - Threaded Regions
                     // Paper start - optimise entity tracker
                     if (((ca.spottedleaf.moonrise.patches.entity_tracker.EntityTrackerEntity)entity).moonrise$getTrackedEntity() != null) {
                         throw new IllegalStateException("Entity is already tracked");
                     }
                     ((ca.spottedleaf.moonrise.patches.entity_tracker.EntityTrackerEntity)entity).moonrise$setTrackedEntity(trackedEntity);
                     // Paper end - optimise entity tracker
-                    trackedEntity.updatePlayers(this.level.players());
+                    trackedEntity.updatePlayers(this.level.getLocalPlayers(entity.chunkPosition())); // Canvas - Threaded Regions
                     if (entity instanceof ServerPlayer serverPlayer) {
                         this.updatePlayerStatus(serverPlayer, true);
 
-                        for (ChunkMap.TrackedEntity trackedEntity1 : this.entityMap.values()) {
+                        // Canvas start - Threaded Regions
+                        for (Entity possible : ServerRegions.getTickData(this.level).getTrackerEntities(entity.chunkPosition())) {
+                            ChunkMap.TrackedEntity trackedEntity1 = possible.moonrise$getTrackedEntity();
+                            if (trackedEntity1 == null) {
+                                continue;
+                            }
+                        // Canvas end
                             if (trackedEntity1.entity != serverPlayer) {
                                 trackedEntity1.updatePlayer(serverPlayer);
                             }
@@ -924,12 +_,18 @@
         if (entity instanceof ServerPlayer serverPlayer) {
             this.updatePlayerStatus(serverPlayer, false);
 
-            for (ChunkMap.TrackedEntity trackedEntity : this.entityMap.values()) {
+            // Canvas start - Threaded Regions
+            for (Entity possible : ServerRegions.getTickData(this.level).getLocalEntities(entity.chunkPosition())) {
+                ChunkMap.TrackedEntity trackedEntity = possible.moonrise$getTrackedEntity();
+                if (trackedEntity == null) {
+                    continue;
+                }
+            // Canvas end
                 trackedEntity.removePlayer(serverPlayer);
             }
         }
 
-        ChunkMap.TrackedEntity trackedEntity1 = this.entityMap.remove(entity.getId());
+        ChunkMap.TrackedEntity trackedEntity1 = entity.moonrise$getTrackedEntity(); // Canvas - Threaded Regions
         if (trackedEntity1 != null) {
             trackedEntity1.broadcastRemoved();
         }
@@ -938,19 +_,29 @@
 
     // Paper start - optimise entity tracker
     private void newTrackerTick() {
+        // Canvas start - threaded tracker
+        if (!Config.INSTANCE.ticking.enableThreadedRegionizing) { // Canvas - Threaded Regions - if threaded regions is disabled, we can run threaded.
+            if (ThreadedTracker.INSTANCE.tick(level)) return; // use normal moonrise tracker if threaded tracking is disabled
+        }
+        // Canvas end
         final ca.spottedleaf.moonrise.patches.chunk_system.level.entity.server.ServerEntityLookup entityLookup = (ca.spottedleaf.moonrise.patches.chunk_system.level.entity.server.ServerEntityLookup)((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getEntityLookup();;
 
-        final ca.spottedleaf.moonrise.common.list.ReferenceList<net.minecraft.world.entity.Entity> trackerEntities = entityLookup.trackerEntities;
+        ServerRegions.WorldTickData data = ServerRegions.getTickData(this.level); // Canvas - Threaded Regions
+        final ca.spottedleaf.moonrise.common.misc.NearbyPlayers nearbyPlayers = this.level.moonrise$getNearbyPlayers(); // Canvas - Threaded Regions
+        final ca.spottedleaf.moonrise.common.list.ReferenceList<net.minecraft.world.entity.Entity> trackerEntities = data.trackerEntities; // Canvas - Threaded Regions
         final Entity[] trackerEntitiesRaw = trackerEntities.getRawDataUnchecked();
         for (int i = 0, len = trackerEntities.size(); i < len; ++i) {
             final Entity entity = trackerEntitiesRaw[i];
+            if (entity == null) continue; // Canvas - caution ref lists
             final ChunkMap.TrackedEntity tracker = ((ca.spottedleaf.moonrise.patches.entity_tracker.EntityTrackerEntity)entity).moonrise$getTrackedEntity();
             if (tracker == null) {
                 continue;
             }
-            ((ca.spottedleaf.moonrise.patches.entity_tracker.EntityTrackerTrackedEntity)tracker).moonrise$tick(((ca.spottedleaf.moonrise.patches.chunk_system.entity.ChunkSystemEntity)entity).moonrise$getChunkData().nearbyPlayers);
+            ca.spottedleaf.moonrise.patches.chunk_system.entity.ChunkSystemEntity cse =  ((ca.spottedleaf.moonrise.patches.chunk_system.entity.ChunkSystemEntity)entity);
+            ((ca.spottedleaf.moonrise.patches.entity_tracker.EntityTrackerTrackedEntity)tracker).moonrise$tick(nearbyPlayers.getChunk(entity.chunkPosition())); // Canvas - Threaded Regions
+            @Nullable FullChunkStatus chunkStatus = ((ca.spottedleaf.moonrise.patches.chunk_system.entity.ChunkSystemEntity)entity).moonrise$getChunkStatus(); // Canvas
             if (((ca.spottedleaf.moonrise.patches.entity_tracker.EntityTrackerTrackedEntity)tracker).moonrise$hasPlayers()
-                || ((ca.spottedleaf.moonrise.patches.chunk_system.entity.ChunkSystemEntity)entity).moonrise$getChunkStatus().isOrAfter(FullChunkStatus.ENTITY_TICKING)) {
+                || (chunkStatus != null && chunkStatus.isOrAfter(FullChunkStatus.ENTITY_TICKING))) { // Canvas
                 tracker.serverEntity.sendChanges();
             }
         }
@@ -964,7 +_,7 @@
             return;
         }
         // Paper end - optimise entity tracker
-        // Paper - rewrite chunk system
+        /* // Paper - rewrite chunk system // Canvas - Threaded Regions
 
         List<ServerPlayer> list = Lists.newArrayList();
         List<ServerPlayer> list1 = this.level.players();
@@ -992,18 +_,18 @@
             for (ChunkMap.TrackedEntity trackedEntity : this.entityMap.values()) {
                 trackedEntity.updatePlayers(list);
             }
-        }
+        } */ // Canvas - Threaded Regions
     }
 
     public void broadcast(Entity entity, Packet<?> packet) {
-        ChunkMap.TrackedEntity trackedEntity = this.entityMap.get(entity.getId());
+        ChunkMap.TrackedEntity trackedEntity = entity.moonrise$getTrackedEntity(); // Canvas - Threaded Regions
         if (trackedEntity != null) {
             trackedEntity.broadcast(packet);
         }
     }
 
     protected void broadcastAndSend(Entity entity, Packet<?> packet) {
-        ChunkMap.TrackedEntity trackedEntity = this.entityMap.get(entity.getId());
+        ChunkMap.TrackedEntity trackedEntity = entity.moonrise$getTrackedEntity(); // Canvas - Threaded Regions
         if (trackedEntity != null) {
             trackedEntity.broadcastAndSend(packet);
         }
@@ -1077,10 +_,10 @@
 
     public class TrackedEntity implements ca.spottedleaf.moonrise.patches.entity_tracker.EntityTrackerTrackedEntity { // Paper - optimise entity tracker
         public final ServerEntity serverEntity;
-        final Entity entity;
+        public final Entity entity; // Canvas - public
         private final int range;
         SectionPos lastSectionPos;
-        public final Set<ServerPlayerConnection> seenBy = new it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<>(); // Paper - Perf: optimise map impl
+        public final Set<ServerPlayerConnection> seenBy = Sets.newConcurrentHashSet(); // Paper - Perf: optimise map impl // Canvas - threaded tracker, and make this concurrent-compatible for threaded dimensions
 
         // Paper start - optimise entity tracker
         private long lastChunkUpdate = -1L;
@@ -1110,6 +_,7 @@
 
             for (int i = 0, len = players.size(); i < len; ++i) {
                 final ServerPlayer player = playersRaw[i];
+                if (player == null) continue; // Canvas - caution ref lists
                 this.updatePlayer(player);
             }
 
