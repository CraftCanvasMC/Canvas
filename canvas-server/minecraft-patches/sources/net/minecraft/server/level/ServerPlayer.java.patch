--- a/net/minecraft/server/level/ServerPlayer.java
+++ b/net/minecraft/server/level/ServerPlayer.java
@@ -15,6 +_,7 @@
 import java.util.UUID;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.Config;
 import net.minecraft.ChatFormatting;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -858,6 +_,18 @@
         }
         // Purpur end - Ridables
     }
+    // Canvas start - freeze player if in unloaded chunks
+
+    private boolean frozenMovement = false;
+
+    public void setFrozenMovement(boolean frozen) {
+        this.frozenMovement = frozen;
+    }
+
+    public boolean isFrozenMovement() {
+        return frozenMovement;
+    }
+    // Canvas end
 
     private void updatePlayerAttributes() {
         AttributeInstance attribute = this.getAttribute(Attributes.BLOCK_INTERACTION_RANGE);
@@ -961,6 +_,7 @@
             }
             // CraftBukkit end
         } catch (Throwable var4) {
+            var4.printStackTrace(); // Canvas - print please.
             CrashReport crashReport = CrashReport.forThrowable(var4, "Ticking player");
             CrashReportCategory crashReportCategory = crashReport.addCategory("Player being ticked");
             this.fillCrashReportCategory(crashReportCategory);
@@ -1076,8 +_,10 @@
     }
     // Paper end - PlayerDeathEvent#getItemsToKeep
 
+    public boolean processingDeath = false; // Canvas
     @Override
     public void die(DamageSource cause) {
+        processingDeath = true; // Canvas
         // this.gameEvent(GameEvent.ENTITY_DIE); // Paper - move below event cancellation check
         boolean _boolean = this.serverLevel().getGameRules().getBoolean(GameRules.RULE_SHOWDEATHMESSAGES); final boolean showDeathMessage = _boolean; // Paper - OBFHELPER
         // CraftBukkit start - fire PlayerDeathEvent
@@ -1194,6 +_,7 @@
         this.getCombatTracker().recheckStatus();
         this.setLastDeathLocation(Optional.of(GlobalPos.of(this.level().dimension(), this.blockPosition())));
         this.setClientLoaded(false);
+        processingDeath = false; // Canvas
     }
 
     private void tellNeutralMobsThatIDied() {
@@ -2820,6 +_,18 @@
                 );
             }
 
+            // Canvas start
+            if (processingDeath) {
+                float halfedRandom = this.random.nextFloat() * 0.5F;
+                float piRandom = this.random.nextFloat() * (float) (Math.PI * 2);
+                double factor = Config.INSTANCE.itemEntitySpreadFactor;
+                itemEntity.setDeltaMovement(
+                    (-Mth.sin(piRandom) * halfedRandom) * factor,
+                    0.2F * factor,
+                    (Mth.cos(piRandom) * halfedRandom) * factor
+                );
+            }
+            // Canvas end
             return itemEntity;
         }
     }
