--- a/net/minecraft/server/level/DistanceManager.java
+++ b/net/minecraft/server/level/DistanceManager.java
@@ -3,6 +_,7 @@
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableSet;
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.region.ServerRegions;
 import it.unimi.dsi.fastutil.longs.Long2ByteMap;
 import it.unimi.dsi.fastutil.longs.Long2ByteOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2IntMap;
@@ -57,16 +_,16 @@
     }
     // Paper end - rewrite chunk system
     // Paper start - chunk tick iteration optimisation
-    private final ca.spottedleaf.moonrise.common.misc.PositionCountingAreaMap<ServerPlayer> spawnChunkTracker = new ca.spottedleaf.moonrise.common.misc.PositionCountingAreaMap<>();
+    // private final ca.spottedleaf.moonrise.common.misc.PositionCountingAreaMap<ServerPlayer> spawnChunkTracker = new ca.spottedleaf.moonrise.common.misc.PositionCountingAreaMap<>(); // Canvas - Threaded Regions
 
     @Override
     public final void moonrise$addPlayer(final ServerPlayer player, final SectionPos pos) {
-        this.spawnChunkTracker.add(player, pos.x(), pos.z(), ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickConstants.PLAYER_SPAWN_TRACK_RANGE);
+        ServerRegions.getTickData(this.moonrise$getChunkMap().level).spawnChunkTracker.add(player, pos.x(), pos.z(), ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickConstants.PLAYER_SPAWN_TRACK_RANGE); // Canvas - Threaded Regions
     }
 
     @Override
     public final void moonrise$removePlayer(final ServerPlayer player, final SectionPos pos) {
-        this.spawnChunkTracker.remove(player);
+        ServerRegions.getTickData(this.moonrise$getChunkMap().level).spawnChunkTracker.remove(player); // Canvas - Threaded Regions
     }
 
     @Override
@@ -74,14 +_,14 @@
                                             final SectionPos oldPos, final SectionPos newPos,
                                             final boolean oldIgnore, final boolean newIgnore) {
         if (newIgnore) {
-            this.spawnChunkTracker.remove(player);
+            ServerRegions.getTickData(this.moonrise$getChunkMap().level).spawnChunkTracker.remove(player); // Canvas - Threaded Regions
         } else {
-            this.spawnChunkTracker.addOrUpdate(player, newPos.x(), newPos.z(), ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickConstants.PLAYER_SPAWN_TRACK_RANGE);
+            ServerRegions.getTickData(this.moonrise$getChunkMap().level).spawnChunkTracker.addOrUpdate(player, newPos.x(), newPos.z(), ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickConstants.PLAYER_SPAWN_TRACK_RANGE); // Canvas - Threaded Regions
         }
     }
     // Paper end - chunk tick iteration optimisation
 
-    protected void purgeStaleTickets() {
+    public void purgeStaleTickets() { // Canvas - protected -> public
         this.moonrise$getChunkHolderManager().tick(); // Paper - rewrite chunk system
     }
 
@@ -178,15 +_,13 @@
 
     public boolean inEntityTickingRange(long chunkPos) {
         // Paper start - rewrite chunk system
-        final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder chunkHolder = this.moonrise$getChunkHolderManager().getChunkHolder(chunkPos);
-        return chunkHolder != null && chunkHolder.isEntityTickingReady();
+        return this.moonrise$getChunkHolderManager().entityTickingChunkHolders.contains(chunkPos); // Canvas - faster impl
         // Paper end - rewrite chunk system
     }
 
     public boolean inBlockTickingRange(long chunkPos) {
         // Paper start - rewrite chunk system
-        final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder chunkHolder = this.moonrise$getChunkHolderManager().getChunkHolder(chunkPos);
-        return chunkHolder != null && chunkHolder.isTickingReady();
+        return this.moonrise$getChunkHolderManager().blockTickingChunkHolders.contains(chunkPos); // Canvas - faster impl
         // Paper end - rewrite chunk system
     }
 
@@ -208,15 +_,15 @@
     }
 
     public int getNaturalSpawnChunkCount() {
-        return this.spawnChunkTracker.getTotalPositions(); // Paper - chunk tick iteration optimisation
+        return ServerRegions.getTickData(this.moonrise$getChunkMap().level).spawnChunkTracker.getTotalPositions(); // Paper - chunk tick iteration optimisation // Canvas - Threaded Regions
     }
 
     public boolean hasPlayersNearby(long chunkPos) {
-        return this.spawnChunkTracker.hasObjectsNear(ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkX(chunkPos), ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkZ(chunkPos)); // Paper - chunk tick iteration optimisation
+        return ServerRegions.getTickData(this.moonrise$getChunkMap().level).spawnChunkTracker.hasObjectsNear(ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkX(chunkPos), ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkZ(chunkPos)); // Paper - chunk tick iteration optimisation // Canvas - Threaded Regions
     }
 
     public LongIterator getSpawnCandidateChunks() {
-        return this.spawnChunkTracker.getPositions().iterator(); // Paper - chunk tick iteration optimisation
+        return ServerRegions.getTickData(this.moonrise$getChunkMap().level).spawnChunkTracker.getPositions().iterator(); // Paper - chunk tick iteration optimisation // Canvas - Threaded Regions
     }
 
     public String getDebugStatus() {
