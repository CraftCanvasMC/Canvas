--- a/net/minecraft/server/level/ServerChunkCache.java
+++ b/net/minecraft/server/level/ServerChunkCache.java
@@ -1,22 +_,45 @@
 package net.minecraft.server.level;
 
+import ca.spottedleaf.moonrise.common.list.ReferenceList;
+import ca.spottedleaf.moonrise.common.misc.NearbyPlayers;
+import ca.spottedleaf.moonrise.common.util.TickThread;
+import ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel;
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.collect.Sets;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.region.ServerRegions;
+import io.canvasmc.canvas.scheduler.TickScheduler;
 import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.util.NamedAgnosticThreadFactory;
+import io.netty.util.internal.ConcurrentSet;
 import java.io.IOException;
 import java.nio.file.Path;
+import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashSet;
+import java.util.IdentityHashMap;
 import java.util.List;
+import java.util.Objects;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
+import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Executor;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ForkJoinPool;
+import java.util.concurrent.locks.LockSupport;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+import io.papermc.paper.threadedregions.ThreadedRegionizer;
+import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import net.minecraft.FileUtil;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
@@ -50,35 +_,37 @@
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 import net.minecraft.world.level.storage.DimensionDataStorage;
 import net.minecraft.world.level.storage.LevelStorageSource;
+import org.agrona.collections.Long2ObjectHashMap;
 import org.slf4j.Logger;
 
 public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moonrise.patches.chunk_system.world.ChunkSystemServerChunkCache { // Paper - rewrite chunk system
     private static final Logger LOGGER = LogUtils.getLogger();
-    private final DistanceManager distanceManager;
+    public final DistanceManager distanceManager; // Canvas - private -> public
     private final ServerLevel level;
-    public final Thread mainThread;
+    public Thread mainThread; // Canvas - mutable
     final ThreadedLevelLightEngine lightEngine;
     public final ServerChunkCache.MainThreadExecutor mainThreadProcessor;
     public final ChunkMap chunkMap;
     private final DimensionDataStorage dataStorage;
-    private long lastInhabitedUpdate;
+    public long lastInhabitedUpdate; // Canvas - private -> public
     public boolean spawnEnemies = true;
     public boolean spawnFriendlies = true;
     private static final int CACHE_SIZE = 4;
     private final long[] lastChunkPos = new long[4];
     private final ChunkStatus[] lastChunkStatus = new ChunkStatus[4];
     private final ChunkAccess[] lastChunk = new ChunkAccess[4];
-    private final List<LevelChunk> tickingChunks = new ArrayList<>();
-    private final Set<ChunkHolder> chunkHoldersToBroadcast = new ReferenceOpenHashSet<>();
-    @Nullable
+    // private final List<LevelChunk> tickingChunks = new ObjectArrayList<>(); // Canvas - fastutil - Threaded Regions
+    // private final Set<ChunkHolder> chunkHoldersToBroadcast = new ConcurrentSet<>(); // Canvas - concurrent - Threaded Regions
+    /* @Nullable // Canvas - Threaded Regions
     @VisibleForDebug
-    private NaturalSpawner.SpawnState lastSpawnState;
+    private NaturalSpawner.SpawnState lastSpawnState; */ // Canvas - Threaded Regions
     // Paper start
     private final ca.spottedleaf.concurrentutil.map.ConcurrentLong2ReferenceChainedHashTable<net.minecraft.world.level.chunk.LevelChunk> fullChunks = new ca.spottedleaf.concurrentutil.map.ConcurrentLong2ReferenceChainedHashTable<>();
     public int getFullChunksCount() {
         return this.fullChunks.size();
     }
     long chunkFutureAwaitCounter;
+    public int ticksSinceLastPurgeStaleTicketsCall = 0; // Canvas
     // Paper end
     // Paper start - rewrite chunk system
 
@@ -134,6 +_,14 @@
         final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder currentChunk = chunkHolderManager.getChunkHolder(ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkKey(chunkX, chunkZ));
 
         final ChunkAccess ifPresent = currentChunk == null ? null : currentChunk.getChunkIfPresent(toStatus);
+        // Canvas start - try prevent syncload
+        if (ifPresent == null) {
+            ChunkAccess attempt = this.fullChunks.get(ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkKey(chunkX, chunkZ));
+            if (attempt != null) {
+                return attempt;
+            }
+        }
+        // Canvas end
 
         if (ifPresent != null && (toStatus != ChunkStatus.FULL || currentChunk.isFullChunkReady())) {
             return ifPresent;
@@ -153,35 +_,19 @@
     // Paper end - rewrite chunk system
     // Paper start - chunk tick iteration optimisations
     private final ca.spottedleaf.moonrise.common.util.SimpleThreadUnsafeRandom shuffleRandom = new ca.spottedleaf.moonrise.common.util.SimpleThreadUnsafeRandom(0L);
+    // Canvas start - optimize - reduce overhead
     private boolean isChunkNearPlayer(final ChunkMap chunkMap, final ChunkPos chunkPos, final LevelChunk levelChunk) {
-        final ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkData chunkData = ((ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkSystemChunkHolder)((ca.spottedleaf.moonrise.patches.chunk_system.level.chunk.ChunkSystemLevelChunk)levelChunk).moonrise$getChunkAndHolder().holder())
-            .moonrise$getRealChunkHolder().holderData;
-        final ca.spottedleaf.moonrise.common.misc.NearbyPlayers.TrackedChunk nearbyPlayers = chunkData.nearbyPlayers;
-        if (nearbyPlayers == null) {
-            return false;
-        }
-
-        final ca.spottedleaf.moonrise.common.list.ReferenceList<ServerPlayer> players = nearbyPlayers.getPlayers(ca.spottedleaf.moonrise.common.misc.NearbyPlayers.NearbyMapType.SPAWN_RANGE);
-
-        if (players == null) {
-            return false;
-        }
-
-        final ServerPlayer[] raw = players.getRawDataUnchecked();
-        final int len = players.size();
-
-        java.util.Objects.checkFromIndexSize(0, len, raw.length);
-        for (int i = 0; i < len; ++i) {
-            if (chunkMap.playerIsCloseEnoughForSpawning(raw[i], chunkPos, 16384.0D)) { // Spigot (reducedRange = false)
-                return true;
-            }
-        }
-
-        return false;
+        ca.spottedleaf.moonrise.common.misc.NearbyPlayers.TrackedChunk nearbyPlayers =
+            (levelChunk).chunkAndHolder.holder.newChunkHolder.holderData.nearbyPlayers;
+
+        if (nearbyPlayers == null) return false;
+        ReferenceList<ServerPlayer> list = nearbyPlayers.getPlayers(ca.spottedleaf.moonrise.common.misc.NearbyPlayers.NearbyMapType.SPAWN_RANGE);
+        return list != null &&
+            !list.isEmpty();
     }
+    // Canvas end
     // Paper end - chunk tick iteration optimisations
 
-
     public ServerChunkCache(
         ServerLevel level,
         LevelStorageSource.LevelStorageAccess levelStorageAccess,
@@ -279,6 +_,12 @@
     public LevelChunk getChunkAtIfLoadedImmediately(int x, int z) {
         return this.fullChunks.get(ChunkPos.asLong(x, z));
     }
+    // Canvas start
+
+    @Nullable
+    public LevelChunk getChunkAtIfLoadedImmediately(long chunkKey) {
+        return this.fullChunks.get(chunkKey);
+    }
     // Paper end
 
     @Override
@@ -325,6 +_,13 @@
         // Paper end - rewrite chunk system
     }
 
+    // Canvas start
+    @Nullable
+    public LevelChunk getChunkNow(ChunkPos pos) {
+        return getChunkNow(pos.x, pos.z);
+    }
+
+    // Canvas end
     @Nullable
     @Override
     public LevelChunk getChunkNow(int chunkX, int chunkZ) {
@@ -441,8 +_,7 @@
 
     public boolean isPositionTicking(long chunkPos) {
         // Paper start - rewrite chunk system
-        final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder newChunkHolder = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getChunkTaskScheduler().chunkHolderManager.getChunkHolder(chunkPos);
-        return newChunkHolder != null && newChunkHolder.isTickingReady();
+        return ((ChunkSystemServerLevel)this.level).moonrise$getChunkTaskScheduler().chunkHolderManager.blockTickingChunkHolders.contains(chunkPos); // Canvas - faster impl
         // Paper end - rewrite chunk system
     }
 
@@ -484,7 +_,12 @@
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("purge");
         if (this.level.tickRateManager().runsNormally() || !tickChunks || this.level.spigotConfig.unloadFrozenChunks) { // Spigot
+            // Canvas start
+            if (this.ticksSinceLastPurgeStaleTicketsCall++ > Config.INSTANCE.ticksBetweenPurgeStaleTickets) {
             this.distanceManager.purgeStaleTickets();
+                this.ticksSinceLastPurgeStaleTicketsCall = 0;
+            }
+            // Canvas end
         }
 
         this.runDistanceManagerUpdates();
@@ -503,79 +_,116 @@
 
     private void tickChunks() {
         long gameTime = this.level.getGameTime();
-        long l = gameTime - this.lastInhabitedUpdate;
+        ServerRegions.WorldTickData tickData = ServerRegions.getTickData(this.level); // Canvas - Threaded Regions
+        long l = 1L; // Canvas - Threaded Regions
         this.lastInhabitedUpdate = gameTime;
         if (!this.level.isDebug()) {
             ProfilerFiller profilerFiller = Profiler.get();
             profilerFiller.push("pollingChunks");
             if (this.level.tickRateManager().runsNormally()) {
-                List<LevelChunk> list = this.tickingChunks;
+                // List<LevelChunk> list = tickData.temporaryChunkTickList; // Canvas - Threaded Regions - optimize chunk collect
 
                 try {
                     profilerFiller.push("filteringTickingChunks");
-                    this.collectTickingChunks(list);
+                    LevelChunk[] chunks = this.collectTickingChunks(tickData); // Canvas - optimize chunk collect
                     profilerFiller.popPush("shuffleChunks");
                     // Paper start - chunk tick iteration optimisation
                     this.shuffleRandom.setSeed(this.level.random.nextLong());
-                    if (!this.level.paperConfig().entities.spawning.perPlayerMobSpawns) Util.shuffle(list, this.shuffleRandom); // Paper - Optional per player mob spawns; do not need this when per-player is enabled
+                    // if (!this.level.paperConfig().entities.spawning.perPlayerMobSpawns) Util.shuffle(list, this.shuffleRandom); // Paper - Optional per player mob spawns; do not need this when per-player is enabled // Canvas - optimize chunk collect
                     // Paper end - chunk tick iteration optimisation
-                    this.tickChunks(profilerFiller, l, list);
+                    this.tickChunks(profilerFiller, l, chunks);
                     profilerFiller.pop();
                 } finally {
-                    list.clear();
+                    // list.clear(); // Canvas - optimize chunk collect
                 }
             }
 
             this.broadcastChangedChunks(profilerFiller);
             profilerFiller.pop();
+            // Canvas start - async mob spawning
+            if (Config.INSTANCE.entities.enableAsyncSpawning) {
+                for (ServerPlayer player : tickData.getLocalPlayers()) { // Canvas - Threaded Regions
+                    // Paper start - per player mob spawning backoff
+                    for (int ii = 0; ii < ServerPlayer.MOBCATEGORY_TOTAL_ENUMS; ii++) {
+                        player.mobCounts[ii] = 0;
+                        int newBackoff = player.mobBackoffCounts[ii] - 1; // TODO make configurable bleed // TODO use nonlinear algorithm?
+                        if (newBackoff < 0) {
+                            newBackoff = 0;
+                        }
+                        player.mobBackoffCounts[ii] = newBackoff;
+                    }
+                    // Paper end - per player mob spawning backoff
+                }
+                if (tickData.firstRunSpawnCounts) {
+                    tickData.firstRunSpawnCounts = false;
+                    tickData.spawnCountsReady.set(true);
+                }
+                if (tickData.spawnCountsReady.getAndSet(false)) {
+                    net.minecraft.server.MinecraftServer.getServer().mobSpawnExecutor.submit(() -> {
+                        int mapped = distanceManager.getNaturalSpawnChunkCount();
+                        tickData.setLastSpawnState(NaturalSpawner.createState(mapped, tickData.entityTickList, this::getFullChunk, null, true)); // Canvas - Threaded Regions
+                        tickData.spawnCountsReady.set(true);
+                    });
+                }
+            }
+            // Canvas end
         }
     }
 
     private void broadcastChangedChunks(ProfilerFiller profiler) {
         profiler.push("broadcast");
 
-        for (ChunkHolder chunkHolder : this.chunkHoldersToBroadcast) {
+        for (ChunkHolder chunkHolder : ServerRegions.getTickData(this.level).getChunkHoldersToBroadcast()) { // Canvas - Threaded Regions
             LevelChunk tickingChunk = chunkHolder.getChunkToSend(); // Paper - rewrite chunk system
             if (tickingChunk != null) {
                 chunkHolder.broadcastChanges(tickingChunk);
             }
         }
 
-        this.chunkHoldersToBroadcast.clear();
+        ServerRegions.getTickData(this.level).getChunkHoldersToBroadcast().clear(); // Canvas - Threaded Regions
         profiler.pop();
     }
-
-    private void collectTickingChunks(List<LevelChunk> output) {
-        // Paper start - chunk tick iteration optimisation
-        final ca.spottedleaf.moonrise.common.list.ReferenceList<net.minecraft.server.level.ServerChunkCache.ChunkAndHolder> tickingChunks =
-            ((ca.spottedleaf.moonrise.patches.chunk_tick_iteration.ChunkTickServerLevel)this.level).moonrise$getPlayerTickingChunks();
-
-        final ServerChunkCache.ChunkAndHolder[] raw = tickingChunks.getRawDataUnchecked();
-        final int size = tickingChunks.size();
-
-        final ChunkMap chunkMap = this.chunkMap;
-
-        for (int i = 0; i < size; ++i) {
+    public volatile int lastTickingChunksCount = 0; // Canvas - last ticking chunks count
+
+    // Canvas start - optimize chunk collect
+    // Note: return value can have null entries.
+    private LevelChunk[] collectTickingChunks(ServerRegions.WorldTickData tickData) {
+        final NearbyPlayers nearbyPlayers = tickData.getNearbyPlayers();
+        final ServerChunkCache.ChunkAndHolder[] raw = tickData.getEntityTickingChunks().getRawDataUnchecked();
+
+        LevelChunk[] collected = new LevelChunk[raw.length];
+        int count = 0;
+
+        for (int i = 0, len = raw.length; i < len; ++i) {
             final ServerChunkCache.ChunkAndHolder chunkAndHolder = raw[i];
-            final LevelChunk levelChunk = chunkAndHolder.chunk();
-
-            if (!this.isChunkNearPlayer(chunkMap, levelChunk.getPos(), levelChunk)) {
-                continue;
-            }
-
-            output.add(levelChunk);
+            if (chunkAndHolder == null) continue;
+
+            final LevelChunk chunk = chunkAndHolder.chunk();
+            final NearbyPlayers.TrackedChunk trackedChunk = nearbyPlayers.getChunk(chunk.getPos());
+
+            if (trackedChunk == null) continue;
+
+            final ReferenceList<ServerPlayer> players = trackedChunk.getPlayers(NearbyPlayers.NearbyMapType.SPAWN_RANGE);
+            if (players == null || players.isEmpty()) continue;
+
+            collected[count++] = chunk;
         }
-        // Paper end - chunk tick iteration optimisation
+
+        this.lastTickingChunksCount = count;
+        return collected;
     }
+    // Canvas end
 
-    private void tickChunks(ProfilerFiller profiler, long timeInhabited, List<LevelChunk> chunks) {
+    private void tickChunks(ProfilerFiller profiler, long timeInhabited, LevelChunk[] chunks) { // Canvas - optimize chunk collect
         profiler.popPush("naturalSpawnCount");
         int naturalSpawnChunkCount = this.distanceManager.getNaturalSpawnChunkCount();
         // Paper start - Optional per player mob spawns
         NaturalSpawner.SpawnState spawnState;
+        final ServerRegions.WorldTickData tickData = ServerRegions.getTickData(this.level); // Canvas - Threaded Regions
         if ((this.spawnFriendlies || this.spawnEnemies) && this.level.paperConfig().entities.spawning.perPlayerMobSpawns) { // don't count mobs when animals and monsters are disabled
+            if (!Config.INSTANCE.entities.enableAsyncSpawning) { // Canvas - async mob spawning
             // re-set mob counts
-            for (ServerPlayer player : this.level.players) {
+            for (ServerPlayer player : this.level.getLocalPlayers()) { // Canvas - Threaded Regions
                 // Paper start - per player mob spawning backoff
                 for (int ii = 0; ii < ServerPlayer.MOBCATEGORY_TOTAL_ENUMS; ii++) {
                     player.mobCounts[ii] = 0;
@@ -588,36 +_,40 @@
                 }
                 // Paper end - per player mob spawning backoff
             }
-            spawnState = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, null, true);
+            tickData.setLastSpawnState(NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, null, true)); // Canvas - Threaded Regions
+            } // Canvas - async mob spawning
         } else {
-            spawnState = NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, !this.level.paperConfig().entities.spawning.perPlayerMobSpawns ? new LocalMobCapCalculator(this.chunkMap) : null, false);
+            tickData.setLastSpawnState(NaturalSpawner.createState(naturalSpawnChunkCount, this.level.getAllEntities(), this::getFullChunk, !this.level.paperConfig().entities.spawning.perPlayerMobSpawns ? new LocalMobCapCalculator(this.chunkMap) : null, false)); // Canvas - Threaded Regions
+            tickData.spawnCountsReady.set(true); // Canvas - async mob spawning
         }
         // Paper end - Optional per player mob spawns
-        this.lastSpawnState = spawnState;
+        // this.lastSpawnState = spawnercreature_d; // Canvas - async mob spawning
         profiler.popPush("spawnAndTick");
-        boolean _boolean = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && !this.level.players().isEmpty(); // CraftBukkit
+        boolean _boolean = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && !this.level.getLocalPlayers().isEmpty(); // CraftBukkit // Canvas - Threaded Regions
         int _int = this.level.getGameRules().getInt(GameRules.RULE_RANDOMTICKING);
         List<MobCategory> filteredSpawningCategories;
         if (_boolean && (this.spawnEnemies || this.spawnFriendlies)) {
             // Paper start - PlayerNaturallySpawnCreaturesEvent
-            for (ServerPlayer entityPlayer : this.level.players()) {
+            for (ServerPlayer entityPlayer : tickData.getLocalPlayers()) { // Canvas - Threaded Regions
                 int chunkRange = Math.min(level.spigotConfig.mobSpawnRange, entityPlayer.getBukkitEntity().getViewDistance());
                 chunkRange = Math.min(chunkRange, 8);
                 entityPlayer.playerNaturallySpawnedEvent = new com.destroystokyo.paper.event.entity.PlayerNaturallySpawnCreaturesEvent(entityPlayer.getBukkitEntity(), (byte) chunkRange);
                 entityPlayer.playerNaturallySpawnedEvent.callEvent();
             }
             // Paper end - PlayerNaturallySpawnCreaturesEvent
-            boolean flag = this.level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) != 0L && this.level.getLevelData().getGameTime() % this.level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) == 0L; // CraftBukkit
-            filteredSpawningCategories = NaturalSpawner.getFilteredSpawningCategories(spawnState, this.spawnFriendlies, this.spawnEnemies, flag, this.level); // CraftBukkit
+            boolean flag = this.level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) != 0L && this.level.getRedstoneGameTime() % this.level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) == 0L; // CraftBukkit // Canvas - Threaded Regions
+            filteredSpawningCategories = NaturalSpawner.getFilteredSpawningCategories(tickData.getLastSpawnState(), this.spawnFriendlies, this.spawnEnemies, flag, this.level); // CraftBukkit // Canvas - Threaded Regions
         } else {
             filteredSpawningCategories = List.of();
         }
 
         for (LevelChunk levelChunk : chunks) {
+            if (levelChunk == null) continue; // Canvas - optimize chunk collect
             ChunkPos pos = levelChunk.getPos();
             levelChunk.incrementInhabitedTime(timeInhabited);
-            if (!filteredSpawningCategories.isEmpty() && this.level.getWorldBorder().isWithinBounds(pos) && this.chunkMap.anyPlayerCloseEnoughForSpawning(pos, true)) { // Spigot
-                NaturalSpawner.spawnForChunk(this.level, levelChunk, spawnState, filteredSpawningCategories);
+
+            if (!filteredSpawningCategories.isEmpty() && this.level.getWorldBorder().isWithinBounds(pos) && (!Config.INSTANCE.entities.enableAsyncSpawning || tickData.spawnCountsReady.get()) && this.chunkMap.anyPlayerCloseEnoughForSpawning(pos, true)) { // Spigot // Canvas - async mob spawning
+                NaturalSpawner.spawnForChunk(this.level, levelChunk, tickData.getLastSpawnState(), filteredSpawningCategories); // Canvas - Threaded Regions
             }
 
             if (true) { // Paper - rewrite chunk system
@@ -672,19 +_,26 @@
         int sectionPosX = SectionPos.blockToSectionCoord(pos.getX());
         int sectionPosZ = SectionPos.blockToSectionCoord(pos.getZ());
         ChunkHolder visibleChunkIfPresent = this.getVisibleChunkIfPresent(ChunkPos.asLong(sectionPosX, sectionPosZ));
-        if (visibleChunkIfPresent != null && visibleChunkIfPresent.blockChanged(pos)) {
-            this.chunkHoldersToBroadcast.add(visibleChunkIfPresent);
+        if (visibleChunkIfPresent != null) { visibleChunkIfPresent.blockChanged(pos); // Canvas - Threaded Regions
+            ServerRegions.getTickData(this.level).getChunkHoldersToBroadcast().add(visibleChunkIfPresent); // Canvas - Threaded Regions
         }
     }
 
     @Override
     public void onLightUpdate(LightLayer type, SectionPos pos) {
-        this.mainThreadProcessor.execute(() -> {
+        Runnable run = () -> { // Canvas - Threaded Regions
             ChunkHolder visibleChunkIfPresent = this.getVisibleChunkIfPresent(pos.chunk().toLong());
             if (visibleChunkIfPresent != null && visibleChunkIfPresent.sectionLightChanged(type, pos.y())) {
-                this.chunkHoldersToBroadcast.add(visibleChunkIfPresent);
+                ServerRegions.getTickData(this.level).getChunkHoldersToBroadcast().add(visibleChunkIfPresent); // Canvas - Threaded Regions
             }
-        });
+        // Canvas start - Threaded Regions
+        };
+        if (Config.INSTANCE.ticking.enableThreadedRegionizing) {
+            MinecraftServer.getThreadedServer().taskQueue.queueChunkTask(
+                this.level, pos.getX(), pos.getZ(), run
+            );
+        } else this.mainThreadProcessor.execute(run);
+        // Canvas end
     }
 
     public <T> void addRegionTicket(TicketType<T> type, ChunkPos pos, int distance, T value) {
@@ -700,6 +_,16 @@
         this.distanceManager.updateChunkForced(pos, add);
     }
 
+    // Canvas start - Threaded Regions
+    public void updateRegionTicket(ChunkPos pos, boolean add, TicketType<ChunkPos> ticketType) {
+        if (add) {
+            this.distanceManager.moonrise$getChunkHolderManager().addTicketAtLevel(ticketType, pos, ChunkMap.FORCED_TICKET_LEVEL, pos);
+        } else {
+            this.distanceManager.moonrise$getChunkHolderManager().removeTicketAtLevel(ticketType, pos, ChunkMap.FORCED_TICKET_LEVEL, pos);
+        }
+    }
+
+    // Canvas end
     public void move(ServerPlayer player) {
         if (!player.isRemoved()) {
             this.chunkMap.move(player);
@@ -766,7 +_,10 @@
     @Nullable
     @VisibleForDebug
     public NaturalSpawner.SpawnState getLastSpawnState() {
-        return this.lastSpawnState;
+        // Canvas start - Threaded Regions
+        ServerRegions.WorldTickData data = ServerRegions.getTickData(this.level);
+        return data == null ? null : data.getLastSpawnState();
+        // Canvas end
     }
 
     public void removeTicketsOnClosing() {
@@ -775,7 +_,7 @@
 
     public void onChunkReadyToSend(ChunkHolder chunkHolder) {
         if (chunkHolder.hasChangesToBroadcast()) {
-            this.chunkHoldersToBroadcast.add(chunkHolder);
+            ServerRegions.getTickData(this.level).getChunkHoldersToBroadcast().add(chunkHolder); // Canvas - Threaded Regions
         }
     }
 
@@ -818,16 +_,74 @@
             super.doRunTask(task);
         }
 
+        // Canvas start
+        @Override
+        public void execute(final Runnable runnable) {
+            ServerLevel level = ServerChunkCache.this.level;
+            if (level.isTicking()) {
+                level.pushTask(runnable);
+            } else {
+                super.execute(runnable);
+            }
+        }
+
+        public static Set<Thread> entityOverride = new ConcurrentSet<>();
+
+        public int size() {
+            return this.pendingRunnables.size();
+        }
+
         @Override
         public boolean pollTask() {
+            return pollTask(true);
+        }
+
+        public boolean pollTask(boolean flag) {
             // Paper start - rewrite chunk system
             final ServerChunkCache serverChunkCache = ServerChunkCache.this;
-            if (serverChunkCache.runDistanceManagerUpdates()) {
+            final ServerLevel serverLevel = serverChunkCache.level;
+            Thread current = Thread.currentThread();
+            if (current == MinecraftServer.getServer().serverThread) {
+                // we don't want to process chunk tasks on main.
+                // wake the world regardless, we may actually need it.
+                serverLevel.wake();
+                // return us having no tasks, since technically we don't on this thread
+                // we return this early because we cannot have main run distance manager updates
+                // this ensures that ticket updates arent processed on main, since if it is, then
+                // we could cause parallelism issues with plugins requesting chunks that are waiting for load
+                return false;
+            }
+            if (flag && serverChunkCache.runDistanceManagerUpdates()) {
                 return true;
             } else {
-                return super.pollTask() | ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)serverChunkCache.level).moonrise$getChunkTaskScheduler().executeMainThreadTask();
+                try {
+                    entityOverride.add(current);
+                    if (Config.INSTANCE.ticking.enableThreadedRegionizing) {
+                        // poll our own tasks.
+                        ServerRegions.WorldTickData thisData = ServerRegions.getTickData(serverLevel);
+                        if (thisData.region != null) {
+                            // we are on a region, execute our chunk task.
+                            // unlike Folia, we still can have tasks be submitted to the
+                            // main thread executor, so we run 'super' poll aswell.
+                            return super.pollTask() | thisData.getTaskQueueData().executeChunkTask();
+                        }
+                    }
+                    // not regionized OR we are on global
+                    serverLevel.taskQueueRegionData.drainGlobalChunkTasks();
+                    return ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)serverChunkCache.level).moonrise$getChunkTaskScheduler().executeMainThreadTask() | super.pollTask();
+                } finally {
+                    entityOverride.remove(current);
+                }
+        // Canvas end
             }
             // Paper end - rewrite chunk system
+        }
+    }
+
+    private void tryWake(BooleanSupplier whileTrue) {
+        while (whileTrue.getAsBoolean()) {
+            // wake the world regardless, we may actually need it.
+            ServerChunkCache.this.level.wake();
         }
     }
 }
