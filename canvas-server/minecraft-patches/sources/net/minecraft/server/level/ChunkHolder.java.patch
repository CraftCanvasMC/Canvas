--- a/net/minecraft/server/level/ChunkHolder.java
+++ b/net/minecraft/server/level/ChunkHolder.java
@@ -5,12 +_,11 @@
 import java.util.BitSet;
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
-import java.util.concurrent.CompletionStage;
 import java.util.concurrent.Executor;
 import java.util.function.IntConsumer;
 import java.util.function.IntSupplier;
 import javax.annotation.Nullable;
-import net.minecraft.Util;
+import it.unimi.dsi.fastutil.shorts.ShortSets;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.network.protocol.Packet;
@@ -44,7 +_,7 @@
     // Paper - rewrite chunk system
 
     // Paper start - rewrite chunk system
-    private ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder newChunkHolder;
+    public ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder newChunkHolder; // Canvas - private -> public
 
     private static final ServerPlayer[] EMPTY_PLAYER_ARRAY = new ServerPlayer[0];
     private final ca.spottedleaf.moonrise.common.list.ReferenceList<ServerPlayer> playersSentChunkTo = new ca.spottedleaf.moonrise.common.list.ReferenceList<>(EMPTY_PLAYER_ARRAY);
@@ -93,6 +_,7 @@
         final ServerPlayer[] raw = this.playersSentChunkTo.getRawDataUnchecked();
         for (int i = 0, len = this.playersSentChunkTo.size(); i < len; ++i) {
             final ServerPlayer player = raw[i];
+            if (player == null) continue; // Canvas - caution ref lists
             if (onlyOnWatchDistanceEdge && !((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.getChunkMap().level).moonrise$getPlayerChunkLoader().isChunkSent(player, this.pos.x, this.pos.z, onlyOnWatchDistanceEdge)) {
                 continue;
             }
@@ -227,16 +_,18 @@
         if (tickingChunk == null) {
             return false;
         } else {
+            synchronized (broadcastSectionLock) { // Canvas
             boolean flag = this.hasChangedSections;
             int sectionIndex = this.levelHeightAccessor.getSectionIndex(pos.getY());
             if (sectionIndex < 0 || sectionIndex >= this.changedBlocksPerSection.length) return false; // CraftBukkit - SPIGOT-6086, SPIGOT-6296
             if (this.changedBlocksPerSection[sectionIndex] == null) {
                 this.hasChangedSections = true;
-                this.changedBlocksPerSection[sectionIndex] = new ShortOpenHashSet();
+                this.changedBlocksPerSection[sectionIndex] = ShortSets.synchronize(new ShortOpenHashSet()); // Canvas - synchronize
             }
 
             this.changedBlocksPerSection[sectionIndex].add(SectionPos.sectionRelativePos(pos));
             return !flag;
+            } // Canvas
         }
     }
 
@@ -272,6 +_,7 @@
         return this.hasChangedSections || !this.skyChangedLightSectionFilter.isEmpty() || !this.blockChangedLightSectionFilter.isEmpty();
     }
 
+    private final Object broadcastSectionLock = new Object(); // Canvas - lock
     public void broadcastChanges(LevelChunk chunk) {
         if (this.hasChangesToBroadcast()) {
             Level level = chunk.getLevel();
@@ -289,6 +_,7 @@
             }
 
             if (this.hasChangedSections) {
+                synchronized (broadcastSectionLock) { // Canvas
                 List<ServerPlayer> players = this.moonrise$getPlayers(false); // Paper - rewrite chunk system
 
                 for (int i = 0; i < this.changedBlocksPerSection.length; i++) {
@@ -318,6 +_,7 @@
                 }
 
                 this.hasChangedSections = false;
+                } // Canvas
             }
         }
     }
