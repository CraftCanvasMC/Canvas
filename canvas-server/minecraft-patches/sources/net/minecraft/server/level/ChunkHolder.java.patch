--- a/net/minecraft/server/level/ChunkHolder.java
+++ b/net/minecraft/server/level/ChunkHolder.java
@@ -11,6 +_,7 @@
 import java.util.function.IntSupplier;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
+import it.unimi.dsi.fastutil.shorts.ShortSets;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.network.protocol.Packet;
@@ -44,7 +_,7 @@
     // Paper - rewrite chunk system
 
     // Paper start - rewrite chunk system
-    private ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder newChunkHolder;
+    public ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder newChunkHolder; // Canvas - private -> public
 
     private static final ServerPlayer[] EMPTY_PLAYER_ARRAY = new ServerPlayer[0];
     private final ca.spottedleaf.moonrise.common.list.ReferenceList<ServerPlayer> playersSentChunkTo = new ca.spottedleaf.moonrise.common.list.ReferenceList<>(EMPTY_PLAYER_ARRAY);
@@ -93,6 +_,7 @@
         final ServerPlayer[] raw = this.playersSentChunkTo.getRawDataUnchecked();
         for (int i = 0, len = this.playersSentChunkTo.size(); i < len; ++i) {
             final ServerPlayer player = raw[i];
+            if (player == null) continue; // Canvas - caution ref lists
             if (onlyOnWatchDistanceEdge && !((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.getChunkMap().level).moonrise$getPlayerChunkLoader().isChunkSent(player, this.pos.x, this.pos.z, onlyOnWatchDistanceEdge)) {
                 continue;
             }
@@ -227,16 +_,18 @@
         if (tickingChunk == null) {
             return false;
         } else {
+            synchronized (broadcastSectionLock) { // Canvas
             boolean flag = this.hasChangedSections;
             int sectionIndex = this.levelHeightAccessor.getSectionIndex(pos.getY());
             if (sectionIndex < 0 || sectionIndex >= this.changedBlocksPerSection.length) return false; // CraftBukkit - SPIGOT-6086, SPIGOT-6296
             if (this.changedBlocksPerSection[sectionIndex] == null) {
                 this.hasChangedSections = true;
-                this.changedBlocksPerSection[sectionIndex] = new ShortOpenHashSet();
+                this.changedBlocksPerSection[sectionIndex] = ShortSets.synchronize(new ShortOpenHashSet()); // Canvas - synchronize
             }
 
             this.changedBlocksPerSection[sectionIndex].add(SectionPos.sectionRelativePos(pos));
             return !flag;
+            } // Canvas
         }
     }
 
@@ -253,6 +_,7 @@
                 int minLightSection = this.lightEngine.getMinLightSection();
                 int maxLightSection = this.lightEngine.getMaxLightSection();
                 if (y >= minLightSection && y <= maxLightSection) {
+                    synchronized (this.broadcastSectionLock) { // Canvas - Threaded Regions
                     BitSet bitSet = lightLayer == LightLayer.SKY ? this.skyChangedLightSectionFilter : this.blockChangedLightSectionFilter;
                     int i = y - minLightSection;
                     if (!bitSet.get(i)) {
@@ -261,6 +_,7 @@
                     } else {
                         return false;
                     }
+                    } // Canvas - Threaded Regions
                 } else {
                     return false;
                 }
@@ -269,14 +_,19 @@
     }
 
     public boolean hasChangesToBroadcast() {
+        synchronized (this.broadcastSectionLock) { // Canvas - Threaded Regions
         return this.hasChangedSections || !this.skyChangedLightSectionFilter.isEmpty() || !this.blockChangedLightSectionFilter.isEmpty();
+        } // Canvas - Threaded Regions
     }
 
+    private final Object broadcastSectionLock = new Object(); // Canvas - lock
     public void broadcastChanges(LevelChunk chunk) {
+        synchronized (broadcastSectionLock) { // Canvas
         if (this.hasChangesToBroadcast()) {
             Level level = chunk.getLevel();
+            List<ServerPlayer> players = this.newChunkHolder.world.players; // this.moonrise$getPlayers(true); // Paper - rewrite chunk system // Canvas - if we do both of these don't run this twice, kinda redundant
             if (!this.skyChangedLightSectionFilter.isEmpty() || !this.blockChangedLightSectionFilter.isEmpty()) {
-                List<ServerPlayer> players = this.moonrise$getPlayers(true); // Paper - rewrite chunk system
+                // Canvas - move up
                 if (!players.isEmpty()) {
                     ClientboundLightUpdatePacket clientboundLightUpdatePacket = new ClientboundLightUpdatePacket(
                         chunk.getPos(), this.lightEngine, this.skyChangedLightSectionFilter, this.blockChangedLightSectionFilter
@@ -288,8 +_,8 @@
                 this.blockChangedLightSectionFilter.clear();
             }
 
-            if (this.hasChangedSections) {
-                List<ServerPlayer> players = this.moonrise$getPlayers(false); // Paper - rewrite chunk system
+            if (true) { // Canvas - always assume changed
+                // Canvas - move up
 
                 for (int i = 0; i < this.changedBlocksPerSection.length; i++) {
                     ShortSet set = this.changedBlocksPerSection[i];
@@ -320,6 +_,7 @@
                 this.hasChangedSections = false;
             }
         }
+        } // Canvas
     }
 
     private void broadcastBlockEntityIfNeeded(List<ServerPlayer> players, Level level, BlockPos pos, BlockState state) {
