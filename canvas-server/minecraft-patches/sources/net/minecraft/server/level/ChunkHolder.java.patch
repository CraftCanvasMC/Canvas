--- a/net/minecraft/server/level/ChunkHolder.java
+++ b/net/minecraft/server/level/ChunkHolder.java
@@ -1,15 +_,19 @@
 package net.minecraft.server.level;
 
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.util.fastutil.ConcurrentShortHashSet;
 import it.unimi.dsi.fastutil.shorts.ShortOpenHashSet;
 import it.unimi.dsi.fastutil.shorts.ShortSet;
 import java.util.BitSet;
 import java.util.List;
+import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionStage;
 import java.util.concurrent.Executor;
 import java.util.function.IntConsumer;
 import java.util.function.IntSupplier;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.shorts.ShortSets;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
@@ -232,7 +_,7 @@
             if (sectionIndex < 0 || sectionIndex >= this.changedBlocksPerSection.length) return false; // CraftBukkit - SPIGOT-6086, SPIGOT-6296
             if (this.changedBlocksPerSection[sectionIndex] == null) {
                 this.hasChangedSections = true;
-                this.changedBlocksPerSection[sectionIndex] = new ShortOpenHashSet();
+                this.changedBlocksPerSection[sectionIndex] = new ConcurrentShortHashSet(); // Canvas - concurrent
             }
 
             this.changedBlocksPerSection[sectionIndex].add(SectionPos.sectionRelativePos(pos));
@@ -272,6 +_,7 @@
         return this.hasChangedSections || !this.skyChangedLightSectionFilter.isEmpty() || !this.blockChangedLightSectionFilter.isEmpty();
     }
 
+    private final Object broadcastSectionLock = new Object(); // Canvas
     public void broadcastChanges(LevelChunk chunk) {
         if (this.hasChangesToBroadcast()) {
             Level level = chunk.getLevel();
@@ -305,6 +_,7 @@
                                 this.broadcastBlockEntityIfNeeded(players, level, blockPos, blockState);
                             } else {
                                 LevelChunkSection section = chunk.getSection(i);
+                                synchronized (broadcastSectionLock) { // Canvas
                                 ClientboundSectionBlocksUpdatePacket clientboundSectionBlocksUpdatePacket = new ClientboundSectionBlocksUpdatePacket(
                                     sectionPos, set, section
                                 );
@@ -312,6 +_,7 @@
                                 clientboundSectionBlocksUpdatePacket.runUpdates(
                                     (blockPos1, blockState1) -> this.broadcastBlockEntityIfNeeded(players, level, blockPos1, blockState1)
                                 );
+                                } // Canvas
                             }
                         }
                     }
