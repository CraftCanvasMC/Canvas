--- a/net/minecraft/server/level/ChunkHolder.java
+++ b/net/minecraft/server/level/ChunkHolder.java
@@ -1,5 +_,6 @@
 package net.minecraft.server.level;
 
+import io.canvasmc.canvas.Config;
 import it.unimi.dsi.fastutil.shorts.ShortOpenHashSet;
 import it.unimi.dsi.fastutil.shorts.ShortSet;
 import java.util.BitSet;
@@ -10,6 +_,7 @@
 import java.util.function.IntConsumer;
 import java.util.function.IntSupplier;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.shorts.ShortSets;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
@@ -272,6 +_,7 @@
         return this.hasChangedSections || !this.skyChangedLightSectionFilter.isEmpty() || !this.blockChangedLightSectionFilter.isEmpty();
     }
 
+    private final Object broadcastSectionLock = new Object(); // Canvas
     public void broadcastChanges(LevelChunk chunk) {
         if (this.hasChangesToBroadcast()) {
             Level level = chunk.getLevel();
@@ -305,13 +_,24 @@
                                 this.broadcastBlockEntityIfNeeded(players, level, blockPos, blockState);
                             } else {
                                 LevelChunkSection section = chunk.getSection(i);
+                                Runnable run = () -> { // Canvas
                                 ClientboundSectionBlocksUpdatePacket clientboundSectionBlocksUpdatePacket = new ClientboundSectionBlocksUpdatePacket(
-                                    sectionPos, set, section
+                                    sectionPos, ShortSets.synchronize(set), section // Canvas
                                 );
                                 this.broadcast(players, clientboundSectionBlocksUpdatePacket);
                                 clientboundSectionBlocksUpdatePacket.runUpdates(
                                     (blockPos1, blockState1) -> this.broadcastBlockEntityIfNeeded(players, level, blockPos1, blockState1)
                                 );
+                                // Canvas start
+                                };
+                                if (Config.INSTANCE.wrapBroadcastSynchronized) {
+                                    synchronized (broadcastSectionLock) {
+                                        run.run();
+                                    }
+                                } else {
+                                    run.run();
+                                }
+                                // Canvas end
                             }
                         }
                     }
