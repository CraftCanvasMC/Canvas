--- a/net/minecraft/server/ServerTickRateManager.java
+++ b/net/minecraft/server/ServerTickRateManager.java
@@ -1,5 +_,7 @@
 package net.minecraft.server;
 
+import io.canvasmc.canvas.server.level.MinecraftServerWorld;
+import io.canvasmc.canvas.server.level.TickRateManagerInstance;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.game.ClientboundTickingStatePacket;
 import net.minecraft.network.protocol.game.ClientboundTickingStepPacket;
@@ -13,9 +_,9 @@
     private long sprintTimeSpend = 0L;
     private long scheduledCurrentSprintTicks = 0L;
     private boolean previousIsFrozen = false;
-    private final MinecraftServer server;
+    private final TickRateManagerInstance server; // Canvas
 
-    public ServerTickRateManager(MinecraftServer server) {
+    public ServerTickRateManager(TickRateManagerInstance server) { // Canvas
         this.server = server;
     }
 
@@ -30,11 +_,11 @@
     }
 
     private void updateStateToClients() {
-        this.server.getPlayerList().broadcastAll(ClientboundTickingStatePacket.from(this));
+        this.server.broadcastPacketsToPlayers(ClientboundTickingStatePacket.from(this)); // Canvas
     }
 
     private void updateStepTicks() {
-        this.server.getPlayerList().broadcastAll(ClientboundTickingStepPacket.from(this));
+        this.server.broadcastPacketsToPlayers(ClientboundTickingStepPacket.from(this)); // Canvas
     }
 
     public boolean stepGameIfPaused(int ticks) {
@@ -110,11 +_,23 @@
     public void setTickRate(float tickRate) {
         super.setTickRate(tickRate);
         this.server.onTickRateChanged();
-        this.updateStateToClients();
+        if (this.server instanceof MinecraftServerWorld) this.updateStateToClients();
     }
 
     public void updateJoiningPlayer(ServerPlayer player) {
         player.connection.send(ClientboundTickingStatePacket.from(this));
         player.connection.send(ClientboundTickingStepPacket.from(this));
     }
+    // Canvas start
+
+    private boolean unlocked = false;
+
+    public void toggleUnlockTickRate(boolean unlocked) {
+        this.unlocked = unlocked;
+    }
+
+    public boolean isUnlockedTickRate() {
+        return unlocked;
+    }
+    // Canvas end
 }
