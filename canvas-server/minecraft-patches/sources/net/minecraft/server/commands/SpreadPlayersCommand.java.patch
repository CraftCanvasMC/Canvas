--- a/net/minecraft/server/commands/SpreadPlayersCommand.java
+++ b/net/minecraft/server/commands/SpreadPlayersCommand.java
@@ -1,5 +_,6 @@
 package net.minecraft.server.commands;
 
+import ca.spottedleaf.concurrentutil.util.Priority;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.brigadier.CommandDispatcher;
@@ -9,29 +_,59 @@
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType;
 import com.mojang.brigadier.exceptions.Dynamic4CommandExceptionType;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Collection;
 import java.util.Locale;
 import java.util.Map;
+import java.util.Objects;
 import java.util.Set;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.function.Function;
+import io.canvasmc.canvas.util.AsyncChunkLoadUtil;
+import net.minecraft.commands.CommandSource;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
 import net.minecraft.commands.arguments.EntityArgument;
 import net.minecraft.commands.arguments.coordinates.Vec2Argument;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
+import net.minecraft.core.SectionPos;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.ComponentUtils;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.TickTask;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.server.rcon.RconConsoleSource;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.chunk.status.ChunkStatus;
+import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.scores.Team;
+import javax.annotation.Nullable;
 
 public class SpreadPlayersCommand {
+    // Canvas start
+    private static final ThreadPoolExecutor EXECUTOR = new ThreadPoolExecutor(
+        1, 1,
+        10L, TimeUnit.SECONDS,
+        new LinkedBlockingQueue<>(8)
+    );
+    // Canvas end
     private static final int MAX_ITERATION_COUNT = 10000;
     private static final Dynamic4CommandExceptionType ERROR_FAILED_TO_SPREAD_TEAMS = new Dynamic4CommandExceptionType(
         (teamCount, x, z, suggestedSpread) -> Component.translatableEscape("commands.spreadplayers.failed.teams", teamCount, x, z, suggestedSpread)
@@ -102,6 +_,10 @@
     private static int spreadPlayers(
         CommandSourceStack source, Vec2 center, float spreadDistance, float maxRange, int maxHeight, boolean respectTeams, Collection<? extends Entity> targets
     ) throws CommandSyntaxException {
+        // Canvas start
+        final CommandSource output = source.source;
+        if (!(output instanceof Player) && !(output instanceof MinecraftServer) && !(output instanceof RconConsoleSource)) {
+        // Canvas end
         ServerLevel level = source.getLevel();
         int minY = level.getMinY();
         if (maxHeight < minY) {
@@ -115,6 +_,53 @@
             SpreadPlayersCommand.Position[] positions = createInitialPositions(
                 randomSource, respectTeams ? getNumberOfTeams(targets) : targets.size(), d, d1, d2, d3
             );
+            ConcurrentLinkedQueue<Entity> queue = new ConcurrentLinkedQueue<>(targets);
+            int scheduled = 0;
+            int sent = 0;
+            for (final Position position : positions) {
+                int chunkX = SectionPos.blockToSectionCoord(position.getX());
+                int chunkZ = SectionPos.blockToSectionCoord(position.getZ());
+                @Nullable LevelChunk chunk = level.getChunkIfLoaded(chunkX, chunkZ);
+                if (chunk == null) {
+                    ServerPlayer entity = (ServerPlayer) Objects.requireNonNull(queue.poll());
+                    entity.sendSystemMessage(Component.literal("Teleporting via spreadplayers command, please wait..."));
+                    level.moonrise$getChunkTaskScheduler().scheduleChunkLoad(
+                        chunkX, chunkZ, true, ChunkStatus.FULL, true, Priority.BLOCKING, (_) -> {
+                            try {
+                                spreadPosition(center, spreadDistance, level, randomSource, d, d1, d2, d3, maxHeight, position, respectTeams);
+                            } catch (CommandSyntaxException e) {
+                                throw new RuntimeException(e);
+                            }
+                            setEntityPosition(
+                                level, new Position[]{position}, maxHeight, entity, position, 0.0D
+                            );
+                            entity.setFrozenMovement(false);
+                        }
+                    );
+                    scheduled++;
+                    entity.setFrozenMovement(true);
+                } else {
+                    spreadPosition(center, spreadDistance, level, randomSource, d, d1, d2, d3, maxHeight, position, respectTeams);
+                    setEntityPosition(
+                        level, new Position[]{position}, maxHeight, Objects.requireNonNull(queue.poll()), position, 0.0D
+                    );
+                    sent++;
+                }
+            }
+            if (true) {
+                source.sendSuccess("Prepared and/or scheduled teleports for spreadplayers command. " + scheduled + " scheduled, " + sent + " sent.");
+                source.sendSuccess(
+                    () -> Component.translatable(
+                        "commands.spreadplayers.success." + (respectTeams ? "teams" : "entities"),
+                        positions.length,
+                        center.x,
+                        center.y,
+                        String.format(Locale.ROOT, "%.2f", -1.0)
+                    ),
+                    true
+                );
+                return positions.length;
+            }
             spreadPositions(center, spreadDistance, level, randomSource, d, d1, d2, d3, maxHeight, positions, respectTeams);
             double d4 = setPlayerPositions(targets, level, positions, maxHeight, respectTeams);
             source.sendSuccess(
@@ -129,6 +_,95 @@
             );
             return positions.length;
         }
+        // Canvas start
+        }
+        int retV = 0;
+        ServerLevel serverWorld = source.getLevel();
+        int i = serverWorld.getMinY();
+        if (maxHeight < i) {
+            throw ERROR_INVALID_MAX_HEIGHT.create(maxHeight, i);
+        } else {
+            RandomSource random = RandomSource.create();
+            double d = center.x - maxRange;
+            double e = center.y - maxRange;
+            double f = center.x + maxRange;
+            double g = center.y + maxRange;
+            SpreadPlayersCommand.Position[] piles = createInitialPositions(random, respectTeams ? getNumberOfTeams(targets) : targets.size(), d, e, f, g);
+            EXECUTOR.execute(() -> {
+                try {
+                    vmp$spread(center, spreadDistance, serverWorld, random, d, e, f, g, maxHeight, piles, respectTeams);
+                } catch (CommandSyntaxException ex) {
+                    source.getServer().schedule(new TickTask(0, () -> {
+                        source.sendFailure(ComponentUtils.fromMessage(ex.getRawMessage()));
+                    }));
+                } catch (Throwable t) {
+                    source.getServer().execute(() -> {
+                        source.sendFailure(Component.literal("An error occurred while spreading players, check console for details"));
+                        t.printStackTrace();
+                    });
+                }
+                double h = vmp$getMinDistance(targets, serverWorld, piles, maxHeight, respectTeams);
+                source.getServer().execute(() -> {
+                    source.sendSuccess(
+                        () -> Component.translatable(
+                            "commands.spreadplayers.success." + (respectTeams ? "teams" : "entities"), piles.length, center.x, center.y, String.format(Locale.ROOT, "%.2f", h)
+                        ),
+                        true
+                    );
+                });
+            });
+            retV = piles.length;
+        }
+        return retV;
+        // Canvas end
+    }
+
+    private static void spreadPosition(
+        Vec2 center,
+        double spreadDistance,
+        ServerLevel level,
+        RandomSource random,
+        double minX,
+        double minZ,
+        double maxX,
+        double maxZ,
+        int maxHeight,
+        SpreadPlayersCommand.Position position,
+        boolean respectTeams
+    ) throws CommandSyntaxException {
+        boolean flag = true;
+        double d = Float.MAX_VALUE;
+
+        int i;
+        for (i = 0; i < 10000 && flag; i++) {
+            flag = false;
+            d = Float.MAX_VALUE;
+
+            for (int i1 = 0; i1 < 1; i1++) {
+                if (position.clamp(minX, minZ, maxX, maxZ)) {
+                    flag = true;
+                }
+            }
+
+            if (!flag) {
+                if (!position.isSafe(level, maxHeight)) {
+                    position.randomize(random, minX, minZ, maxX, maxZ);
+                    flag = true;
+                }
+            }
+        }
+
+        if (d == Float.MAX_VALUE) {
+            d = 0.0;
+        }
+
+        if (i >= 10000) {
+            if (respectTeams) {
+                throw ERROR_FAILED_TO_SPREAD_TEAMS.create(1, center.x, center.y, String.format(Locale.ROOT, "%.2f", d));
+            } else {
+                throw ERROR_FAILED_TO_SPREAD_ENTITIES.create(1, center.x, center.y, String.format(Locale.ROOT, "%.2f", d));
+            }
+        }
     }
 
     private static int getNumberOfTeams(Collection<? extends Entity> entities) {
@@ -246,32 +_,186 @@
                 position = positions[i++];
             }
 
-            entity.teleportTo(
-                level,
-                Mth.floor(position.x) + 0.5,
-                position.getSpawnY(level, maxHeight),
-                Mth.floor(position.z) + 0.5,
-                Set.of(),
-                entity.getYRot(),
-                entity.getXRot(),
-                true
-                , org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.COMMAND // CraftBukkit - handle teleport reason
-            );
-            double d1 = Double.MAX_VALUE;
-
-            for (SpreadPlayersCommand.Position position1 : positions) {
-                if (position != position1) {
-                    double d2 = position.dist(position1);
-                    d1 = Math.min(d2, d1);
-                }
-            }
-
-            d += d1;
+            d = setEntityPosition(level, positions, maxHeight, entity, position, d);
         }
 
         return targets.size() < 2 ? 0.0 : d / targets.size();
     }
 
+    private static double setEntityPosition(ServerLevel level, Position[] positions, int maxHeight, Entity entity, Position position, double d) {
+        entity.teleportTo(
+            level,
+            Mth.floor(position.x) + 0.5,
+            position.getSpawnY(level, maxHeight),
+            Mth.floor(position.z) + 0.5,
+            Set.of(),
+            entity.getYRot(),
+            entity.getXRot(),
+            true
+            , org.bukkit.event.player.PlayerTeleportEvent.TeleportCause.COMMAND
+        );
+        double d1 = Double.MAX_VALUE;
+
+        for (Position position1 : positions) {
+            if (position != position1) {
+                double d2 = position.dist(position1);
+                d1 = Math.min(d2, d1);
+            }
+        }
+
+        d += d1;
+        return d;
+    }
+
+    // Canvas start
+    private static void vmp$spread(
+        Vec2 center,
+        double spreadDistance,
+        ServerLevel world,
+        RandomSource random,
+        double minX,
+        double minZ,
+        double maxX,
+        double maxZ,
+        int maxY,
+        SpreadPlayersCommand.Position[] piles,
+        boolean respectTeams
+    ) throws CommandSyntaxException {
+        boolean bl = true;
+        double d = Float.MAX_VALUE;
+
+        int i;
+        for (i = 0; i < 10000 && bl; ++i) {
+            bl = false;
+            d = Float.MAX_VALUE;
+
+            for (int j = 0; j < piles.length; ++j) {
+                SpreadPlayersCommand.Position pile = piles[j];
+                int k = 0;
+                SpreadPlayersCommand.Position pile2 = new SpreadPlayersCommand.Position();
+
+                for (int l = 0; l < piles.length; ++l) {
+                    if (j != l) {
+                        SpreadPlayersCommand.Position pile3 = piles[l];
+                        double e = (pile).dist(pile3);
+                        d = Math.min(e, d);
+                        if (e < spreadDistance) {
+                            ++k;
+                            (pile2).setX((pile2).getX() + ((pile3).getX() - (pile).getX()));
+                            (pile2).setZ((pile2).getZ() + ((pile3).getZ() - (pile).getZ()));
+                        }
+                    }
+                }
+
+                if (k > 0) {
+                    (pile2).setX((pile2).getX() / k);
+                    (pile2).setZ((pile2).getZ() / k);
+                    double f = (pile2).getLength();
+                    if (f > 0.0) {
+                        (pile2).normalize();
+                        pile.moveAway(pile2);
+                    } else {
+                        pile.randomize(random, minX, minZ, maxX, maxZ);
+                    }
+
+                    bl = true;
+                }
+
+                if (pile.clamp(minX, minZ, maxX, maxZ)) {
+                    bl = true;
+                }
+            }
+
+            if (!bl) {
+                List<CompletableFuture<Void>> futures = new ArrayList<>(piles.length);
+                AtomicBoolean result = new AtomicBoolean(false);
+                for (SpreadPlayersCommand.Position pile2 : piles) {
+                    ChunkPos pos = new ChunkPos(BlockPos.containing((pile2).getX(), 0.0, (pile2).getZ()));
+                    final CompletableFuture<Void> future =
+                        CompletableFuture.supplyAsync(() -> AsyncChunkLoadUtil.scheduleChunkLoad(world, pos), world.getServer())
+                            .thenCompose(Function.identity())
+                            .whenCompleteAsync((unused, throwable) -> {
+                                if (!pile2.isSafe(world, maxY)) {
+                                    pile2.randomize(random, minX, minZ, maxX, maxZ);
+                                    result.set(true);
+                                }
+                            }, world.getServer())
+                            .exceptionally(throwable -> null)
+                            .thenRun(() -> {
+                            });
+                    futures.add(future);
+                }
+                CompletableFuture.allOf(futures.toArray(CompletableFuture[]::new)).join();
+                bl = result.get();
+            }
+        }
+
+        if (d == Float.MAX_VALUE) {
+            d = 0.0;
+        }
+
+        if (i >= 10000) {
+            if (respectTeams) {
+                throw ERROR_FAILED_TO_SPREAD_TEAMS.create(piles.length, center.x, center.y, String.format(Locale.ROOT, "%.2f", d));
+            } else {
+                throw ERROR_FAILED_TO_SPREAD_ENTITIES.create(piles.length, center.x, center.y, String.format(Locale.ROOT, "%.2f", d));
+            }
+        }
+    }
+
+    private static double vmp$getMinDistance(
+        Collection<? extends Entity> entities, ServerLevel world, SpreadPlayersCommand.Position[] piles, int maxY, boolean respectTeams
+    ) {
+        double d = 0.0;
+        int i = 0;
+        Map<Team, SpreadPlayersCommand.Position> map = Maps.newHashMap();
+
+        List<CompletableFuture<Void>> futures = new ArrayList<>(piles.length);
+
+        for (Entity entity : entities) {
+            if (!entity.isAlive()) continue;
+            SpreadPlayersCommand.Position pile;
+            if (respectTeams) {
+                Team abstractTeam = entity instanceof Player ? entity.getTeam() : null;
+                if (!map.containsKey(abstractTeam)) {
+                    map.put(abstractTeam, piles[i++]);
+                }
+
+                pile = map.get(abstractTeam);
+            } else {
+                pile = piles[i++];
+            }
+
+            ChunkPos pos = new ChunkPos(BlockPos.containing((pile).getX(), 0.0, (pile).getZ()));
+            final CompletableFuture<Void> future =
+                CompletableFuture.supplyAsync(() -> AsyncChunkLoadUtil.scheduleChunkLoad(world, pos), world.getServer())
+                    .thenCompose(Function.identity())
+                    .whenCompleteAsync((unused, throwable) -> {
+                        entity.teleportTo(world, Math.floor((pile).getX()) + 0.5, pile.getSpawnY(world, maxY), Math.floor((pile).getZ()) + 0.5, Set.of(), entity.getYRot(), entity.getXRot(), true);
+                    }, world.getServer())
+                    .exceptionally(throwable -> null)
+                    .thenRun(() -> {
+                    });
+            futures.add(future);
+
+            double e = Double.MAX_VALUE;
+
+            for (SpreadPlayersCommand.Position pile2 : piles) {
+                if (pile != pile2) {
+                    double f = (pile).dist(pile2);
+                    e = Math.min(f, e);
+                }
+            }
+
+            d += e;
+        }
+
+        CompletableFuture.allOf(futures.toArray(CompletableFuture[]::new)).join();
+
+        return entities.size() < 2 ? 0.0 : d / (double) entities.size();
+    }
+
+    // Canvas end
     private static SpreadPlayersCommand.Position[] createInitialPositions(RandomSource random, int count, double minX, double minZ, double maxX, double maxZ) {
         SpreadPlayersCommand.Position[] positions = new SpreadPlayersCommand.Position[count];
 
@@ -287,7 +_,25 @@
     static class Position {
         double x;
         double z;
-
+        // Canvas start
+
+        public double getX() {
+            return x;
+        }
+
+        public double getZ() {
+            return z;
+        }
+
+        public void setX(final double x) {
+            this.x = x;
+        }
+
+        public void setZ(final double z) {
+            this.z = z;
+        }
+
+        // Canvas end
         double dist(SpreadPlayersCommand.Position other) {
             double d = this.x - other.x;
             double d1 = this.z - other.z;
@@ -332,6 +_,10 @@
 
         public int getSpawnY(BlockGetter level, int y) {
             BlockPos.MutableBlockPos mutableBlockPos = new BlockPos.MutableBlockPos(this.x, (double)(y + 1), this.z);
+            if (true) {
+                BlockPos max = ((ServerLevel) level).getHeightmapPos(Heightmap.Types.MOTION_BLOCKING, mutableBlockPos);
+                return max.getY();
+            }
             boolean isAir = level.getBlockState(mutableBlockPos).isAir();
             mutableBlockPos.move(Direction.DOWN);
             boolean isAir1 = level.getBlockState(mutableBlockPos).isAir();
@@ -352,8 +_,7 @@
 
         public boolean isSafe(BlockGetter level, int y) {
             BlockPos blockPos = BlockPos.containing(this.x, this.getSpawnY(level, y) - 1, this.z);
-            BlockState blockState = level.getBlockState(blockPos);
-            return blockPos.getY() < y && !blockState.liquid() && !blockState.is(BlockTags.FIRE);
+            return blockPos.getY() < y; // Canvas
         }
 
         public void randomize(RandomSource random, double minX, double minZ, double maxX, double maxZ) {
