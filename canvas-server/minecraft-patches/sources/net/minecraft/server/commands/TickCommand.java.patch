--- a/net/minecraft/server/commands/TickCommand.java
+++ b/net/minecraft/server/commands/TickCommand.java
@@ -1,23 +_,161 @@
 package net.minecraft.server.commands;
 
 import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.Message;
 import com.mojang.brigadier.arguments.FloatArgumentType;
 import com.mojang.brigadier.arguments.IntegerArgumentType;
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.List;
 import java.util.Locale;
+import java.util.function.Consumer;
+import java.util.stream.Collectors;
+import com.mojang.brigadier.arguments.StringArgumentType;
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.command.ThreadedTickDiagnosis;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
 import net.minecraft.commands.SharedSuggestionProvider;
 import net.minecraft.commands.arguments.TimeArgument;
+import net.minecraft.core.registries.Registries;
 import net.minecraft.network.chat.Component;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.ServerTickRateManager;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.TimeUtil;
+import org.jetbrains.annotations.NotNull;
 
 public class TickCommand {
     private static final float MAX_TICKRATE = 10000.0F;
     private static final String DEFAULT_TICKRATE = String.valueOf(20);
+    // Canvas start
+    private static final String UNCAPPED_TICKRATE = String.valueOf(-1);
+    private static final String[] RATE_SUGGESTIONS = new String[]{DEFAULT_TICKRATE, UNCAPPED_TICKRATE};
 
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
+        if (Config.INSTANCE.enableCanvasTickCommand) {
+            dispatcher.register(
+                Commands.literal("threadedtick")
+                    .requires(source -> source.hasPermission(3, "canvas.world.command.threadedtick"))
+                    .then(Commands.literal("diagnosis").executes(context -> {
+                        CommandSourceStack commandSourceStack = context.getSource();
+                        ThreadedTickDiagnosis.execute(commandSourceStack.getBukkitSender());
+                        return 1;
+                    }))
+                    .then(
+                        Commands.argument("threadstate", StringArgumentType.word())
+                            .suggests((_, builder) -> SharedSuggestionProvider.suggest(getThreadStates(), builder))
+                            .then(Commands.literal("rate")
+                                .then(Commands.argument("rate", FloatArgumentType.floatArg(-1.0F, 10000.0F))
+                                    .suggests((_, suggestionsBuilder) -> SharedSuggestionProvider.suggest(RATE_SUGGESTIONS, suggestionsBuilder)).executes(context -> {
+                                        float rate = FloatArgumentType.getFloat(context, "rate");
+                                        execute(StringArgumentType.getString(context, "threadstate"), (serverTickRateManager) -> {
+                                            if (rate == -1) {
+                                                serverTickRateManager.toggleUnlockTickRate(true);
+                                            } else if (rate > 0) {
+                                                serverTickRateManager.setTickRate(rate);
+                                            }
+                                        });
+                                        if (rate == -1) {
+                                            context.getSource().sendSuccess(() -> Component.literal("Toggled unbound tickrate."), true);
+                                        } else if (rate > 0) {
+                                            String string = String.format(Locale.ROOT, "%.1f", rate);
+                                            context.getSource().sendSuccess(() -> Component.translatable("commands.tick.rate.success", string), true);
+                                        }
+                                        return 1;
+                                    })
+                                )
+                            )
+                            .then(Commands.literal("unbind").executes(context -> {
+                                execute(StringArgumentType.getString(context, "threadstate"), (serverTickRateManager) -> {
+                                    serverTickRateManager.toggleUnlockTickRate(true);
+                                });
+                                context.getSource().sendSuccess(() -> Component.literal("Toggled unbound tickrate on thread(s)."), true);
+                                return 1;
+                            }))
+                            .then(Commands.literal("rebind").executes(context -> {
+                                execute(StringArgumentType.getString(context, "threadstate"), (serverTickRateManager) -> {
+                                    serverTickRateManager.toggleUnlockTickRate(false);
+                                });
+                                context.getSource().sendSuccess(() -> Component.literal("Rebound tickrate to thread(s)."), true);
+                                return 1;
+                            }))
+                            .then(Commands.literal("unfreeze").executes(context -> {
+                                boolean frozen = false;
+                                execute(StringArgumentType.getString(context, "threadstate"), (serverTickRateManager) -> {
+                                    serverTickRateManager.setFrozen(frozen);
+                                    context.getSource().sendSuccess(() -> Component.translatable("commands.tick.status.running"), true);
+                                });
+                                return 1;
+                            }))
+                            .then(Commands.literal("freeze").executes(context -> {
+                                boolean frozen = true;
+                                execute(StringArgumentType.getString(context, "threadstate"), (serverTickRateManager) -> {
+                                    if (serverTickRateManager.isSprinting()) {
+                                        serverTickRateManager.stopSprinting();
+                                    }
+
+                                    if (serverTickRateManager.isSteppingForward()) {
+                                        serverTickRateManager.stopStepping();
+                                    }
+
+                                    serverTickRateManager.setFrozen(frozen);
+                                    context.getSource().sendSuccess(() -> Component.translatable("commands.tick.status.frozen"), true);
+                                });
+                                return 1;
+                            }))
+                    )
+            );
+        }
+        tickCommand(dispatcher);
+    }
+
+    public static void execute(@NotNull String state, Consumer<ServerTickRateManager> action) throws CommandSyntaxException {
+        if (state.equalsIgnoreCase("global")) {
+            action.accept(MinecraftServer.getServer().tickRateManager());
+            for (final ServerLevel level : MinecraftServer.getThreadedServer().getAllLevels()) {
+                action.accept((ServerTickRateManager) level.tickRateManager());
+            }
+        } else if (state.equalsIgnoreCase("main")) {
+            action.accept(MinecraftServer.getServer().tickRateManager());
+        } else {
+            if (!state.contains(":")) {
+                Message message = Component.literal("State isn't valid or known: " + state);
+                throw new CommandSyntaxException(new SimpleCommandExceptionType(message), message);
+            }
+            ResourceLocation location = ResourceLocation.parse(state);
+            ServerLevel level = MinecraftServer.getServer().getLevel(ResourceKey.create(Registries.DIMENSION, location));
+            if (level == null) {
+                Message message = Component.literal("Couldn't build level: " + state);
+                throw new CommandSyntaxException(new SimpleCommandExceptionType(message), message);
+            }
+            action.accept((ServerTickRateManager) level.tickRateManager());
+        }
+    }
+
+    private static String[] getThreadStates() {
+        List<String> states = new ArrayList<>();
+        states.add("global");
+        states.add("main");
+        states.addAll(MinecraftServer.getThreadedServer().getAllLevels()
+            .stream()
+            .map(ServerLevel::dimension)
+            .map(ResourceKey::location)
+            .map(ResourceLocation::toString).collect(Collectors.toSet()));
+        return states.toArray(new String[0]);
+    }
+
+    /**
+     * @deprecated Use threadedtick command instead of this. This runs on a global
+     * state, while threadedtick can be more powerful for specific contexts.
+     */
+    @Deprecated(forRemoval = true)
+    private static void tickCommand(CommandDispatcher<CommandSourceStack> dispatcher) {
+        // Canvas end
         dispatcher.register(
             Commands.literal("tick")
                 .requires(commandSourceStack -> commandSourceStack.hasPermission(3))
