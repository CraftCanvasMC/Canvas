--- a/net/minecraft/server/commands/LocateCommand.java
+++ b/net/minecraft/server/commands/LocateCommand.java
@@ -8,6 +_,7 @@
 import com.mojang.logging.LogUtils;
 import java.time.Duration;
 import java.util.Optional;
+import io.papermc.paper.util.MCUtil;
 import net.minecraft.ChatFormatting;
 import net.minecraft.Util;
 import net.minecraft.commands.CommandBuildContext;
@@ -103,44 +_,76 @@
     }
 
     private static int locateStructure(CommandSourceStack source, ResourceOrTagKeyArgument.Result<Structure> structure) throws CommandSyntaxException {
+        // Canvas start - async locate command
+        LOGGER.info("Starting locate call off-main, please wait...");
+        MCUtil.scheduleAsyncTask(() -> {
         Registry<Structure> registry = source.getLevel().registryAccess().lookupOrThrow(Registries.STRUCTURE);
-        HolderSet<Structure> holderSet = (HolderSet<Structure>)getHolders(structure, registry)
-            .orElseThrow(() -> ERROR_STRUCTURE_INVALID.create(structure.asPrintable()));
-        BlockPos blockPos = BlockPos.containing(source.getPosition());
+            HolderSet<Structure> holderSet;
+            try {
+                holderSet = getHolders(structure, registry)
+                    .orElseThrow(() -> ERROR_STRUCTURE_INVALID.create(structure.asPrintable()));
+            } catch (CommandSyntaxException e) {
+                source.sendFailure(Component.literal(e.getMessage()));
+                return;
+            }
+            BlockPos blockPos = BlockPos.containing(source.getPosition());
         ServerLevel level = source.getLevel();
         Stopwatch stopwatch = Stopwatch.createStarted(Util.TICKER);
         Pair<BlockPos, Holder<Structure>> pair = level.getChunkSource().getGenerator().findNearestMapStructure(level, holderSet, blockPos, 100, false);
         stopwatch.stop();
         if (pair == null) {
-            throw ERROR_STRUCTURE_NOT_FOUND.create(structure.asPrintable());
+            try {
+                throw ERROR_STRUCTURE_NOT_FOUND.create(structure.asPrintable());
+            } catch (CommandSyntaxException e) {
+                source.sendFailure(Component.literal(e.getMessage()));
+            }
         } else {
-            return showLocateResult(source, structure, blockPos, pair, "commands.locate.structure.success", false, stopwatch.elapsed());
+            showLocateResult(source, structure, blockPos, pair, "commands.locate.structure.success", false, stopwatch.elapsed());
         }
+        });
+        return 0;
     }
 
     private static int locateBiome(CommandSourceStack source, ResourceOrTagArgument.Result<Biome> biome) throws CommandSyntaxException {
+        LOGGER.info("Starting locate call off-main, please wait...");
+        MCUtil.scheduleAsyncTask(() -> {
         BlockPos blockPos = BlockPos.containing(source.getPosition());
         Stopwatch stopwatch = Stopwatch.createStarted(Util.TICKER);
         Pair<BlockPos, Holder<Biome>> pair = source.getLevel().findClosestBiome3d(biome, blockPos, 6400, 32, 64);
         stopwatch.stop();
         if (pair == null) {
-            throw ERROR_BIOME_NOT_FOUND.create(biome.asPrintable());
+            try {
+                throw ERROR_BIOME_NOT_FOUND.create(biome.asPrintable());
+            } catch (CommandSyntaxException e) {
+                source.sendFailure(Component.literal(e.getMessage()));
+            }
         } else {
-            return showLocateResult(source, biome, blockPos, pair, "commands.locate.biome.success", true, stopwatch.elapsed());
+            showLocateResult(source, biome, blockPos, pair, "commands.locate.biome.success", true, stopwatch.elapsed());
         }
+        });
+        return 0;
     }
 
     private static int locatePoi(CommandSourceStack source, ResourceOrTagArgument.Result<PoiType> poiType) throws CommandSyntaxException {
+        LOGGER.info("Starting locate call off-main, please wait...");
+        MCUtil.scheduleAsyncTask(() -> {
         BlockPos blockPos = BlockPos.containing(source.getPosition());
         ServerLevel level = source.getLevel();
         Stopwatch stopwatch = Stopwatch.createStarted(Util.TICKER);
         Optional<Pair<Holder<PoiType>, BlockPos>> optional = level.getPoiManager().findClosestWithType(poiType, blockPos, 256, PoiManager.Occupancy.ANY);
         stopwatch.stop();
         if (optional.isEmpty()) {
-            throw ERROR_POI_NOT_FOUND.create(poiType.asPrintable());
+            try {
+                throw ERROR_POI_NOT_FOUND.create(poiType.asPrintable());
+            } catch (CommandSyntaxException e) {
+                source.sendFailure(Component.literal(e.getMessage()));
+            }
         } else {
-            return showLocateResult(source, poiType, blockPos, optional.get().swap(), "commands.locate.poi.success", false, stopwatch.elapsed());
+            showLocateResult(source, poiType, blockPos, optional.get().swap(), "commands.locate.poi.success", false, stopwatch.elapsed());
         }
+        });
+        return 0;
+        // Canvas end
     }
 
     public static int showLocateResult(
@@ -196,6 +_,7 @@
             );
         source.sendSuccess(() -> Component.translatable(translationKey, elementName, component, i), false);
         LOGGER.info("Locating element " + elementName + " took " + duration.toMillis() + " ms");
+        LOGGER.info("Located element on Thread:'{}'", Thread.currentThread().getName()); // Canvas - debug log
         return i;
     }
 
