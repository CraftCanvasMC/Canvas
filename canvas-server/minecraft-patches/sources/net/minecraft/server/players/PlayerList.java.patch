--- a/net/minecraft/server/players/PlayerList.java
+++ b/net/minecraft/server/players/PlayerList.java
@@ -1,5 +_,6 @@
 package net.minecraft.server.players;
 
+import ca.spottedleaf.concurrentutil.util.Priority;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -11,15 +_,22 @@
 import java.nio.file.Path;
 import java.text.SimpleDateFormat;
 import java.time.Instant;
+import java.util.ArrayList;
 import java.util.EnumSet;
 import java.util.List;
 import java.util.Map;
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.server.level.distance.WorldSpecificViewDistancePersistentState;
+import io.canvasmc.canvas.server.network.ConnectionHandlePhases;
+import io.canvasmc.canvas.server.network.PlayerJoinThread;
+import io.papermc.paper.adventure.PaperAdventure;
 import net.minecraft.ChatFormatting;
 import net.minecraft.FileUtil;
 import net.minecraft.commands.CommandSourceStack;
@@ -273,7 +_,7 @@
                 !_boolean,
                 _boolean2,
                 player.createCommonSpawnInfo(serverLevel),
-                this.server.enforceSecureProfile()
+                Config.INSTANCE.networking.noChatReports.enable || this.server.enforceSecureProfile() // Canvas
             )
         );
         player.getBukkitEntity().sendSupportedChannels(); // CraftBukkit
@@ -341,7 +_,7 @@
         // CraftBukkit start - sendAll above replaced with this loop
         ClientboundPlayerInfoUpdatePacket packet = ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(List.of(player)); // Paper - Add Listing API for Player
 
-        final List<ServerPlayer> onlinePlayers = Lists.newArrayListWithExpectedSize(this.players.size() - 1); // Paper - Use single player info update packet on join
+        final List<ServerPlayer> onlinePlayers = new ArrayList<>(); // Paper - Use single player info update packet on join // Canvas - don't use expected size
         for (int i = 0; i < this.players.size(); ++i) {
             ServerPlayer entityplayer1 = (ServerPlayer) this.players.get(i);
 
@@ -407,6 +_,10 @@
                     serverLevel.getLightEngine(), (java.util.BitSet)null, (java.util.BitSet) null, true) // Paper - Anti-Xray
             );
         }
+        // Canvas start - async player joining
+        PlayerJoinThread.getInstance().setPhase(player.connection.connection, ConnectionHandlePhases.PLAY);
+        serverLevel.notifyNewConnection(player.connection.connection);
+        // Canvas end
         // Paper end - Send empty chunk
     }
 
@@ -481,7 +_,7 @@
         return optional;
     }
 
-    protected void save(ServerPlayer player) {
+    public void save(ServerPlayer player) { // Canvas - protected -> public
         if (!player.getBukkitEntity().isPersistent()) return; // CraftBukkit
         player.lastSave = MinecraftServer.currentTick; // Paper - Incremental chunk and player saving
         this.playerIo.save(player);
@@ -884,6 +_,7 @@
     }
 
     public void tick() {
+        if (true) return; // Canvas - moved to level threads
         if (++this.sendAllPlayerInfoIn > 600) {
             // CraftBukkit start
             for (int i = 0; i < this.players.size(); ++i) {
@@ -1324,6 +_,11 @@
     }
 
     public boolean verifyChatTrusted(PlayerChatMessage message) { // Paper - private -> public
+        // Canvas start - no chat reports
+        if (Config.INSTANCE.networking.noChatReports.enable) {
+            return true;
+        }
+        // Canvas end
         return message.hasSignature() && !message.hasExpiredServer(Instant.now());
     }
 
@@ -1369,25 +_,29 @@
     }
 
     public void setViewDistance(int viewDistance) {
+        // Canvas start - world specific view distance
         this.viewDistance = viewDistance;
-        //this.broadcastAll(new ClientboundSetChunkCacheRadiusPacket(viewDistance)); // Paper - rewrite chunk system
 
-        for (ServerLevel serverLevel : this.server.getAllLevels()) {
-            if (serverLevel != null) {
-                serverLevel.getChunkSource().setViewDistance(viewDistance);
+        for (ServerLevel w : server.getAllLevels()) {
+            WorldSpecificViewDistancePersistentState state = WorldSpecificViewDistancePersistentState.getFrom(w);
+            if (state.getLocalViewDistance() == 0) {
+                w.getChunkSource().setViewDistance(viewDistance);
             }
         }
+        // Canvas end - world specific view distance
     }
 
     public void setSimulationDistance(int simulationDistance) {
+        // Canvas start - world specific view distance
         this.simulationDistance = simulationDistance;
-        //this.broadcastAll(new ClientboundSetSimulationDistancePacket(simulationDistance));  // Paper - rewrite chunk system
 
-        for (ServerLevel serverLevel : this.server.getAllLevels()) {
-            if (serverLevel != null) {
-                serverLevel.getChunkSource().setSimulationDistance(simulationDistance);
+        for (ServerLevel w : server.getAllLevels()) {
+            WorldSpecificViewDistancePersistentState state = WorldSpecificViewDistancePersistentState.getFrom(w);
+            if (state.getLocalSimulationDistance() == 0) {
+                w.getChunkSource().setSimulationDistance(simulationDistance);
             }
         }
+        // Canvas end
     }
 
     public List<ServerPlayer> getPlayers() {
