--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -18,7 +_,15 @@
 import java.util.List;
 import java.util.Locale;
 import java.util.Optional;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.locks.LockSupport;
 import javax.annotation.Nullable;
+
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.server.MultiWatchdogThread;
+import io.canvasmc.canvas.server.ThreadedServer;
+import io.canvasmc.canvas.server.chunk.AsyncPlayerChunkLoader;
+import io.canvasmc.canvas.server.network.PlayerJoinThread;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.DefaultUncaughtExceptionHandlerWithName;
 import net.minecraft.SharedConstants;
@@ -45,6 +_,7 @@
 import net.minecraft.server.rcon.thread.QueryThreadGs4;
 import net.minecraft.server.rcon.thread.RconThread;
 import net.minecraft.util.Mth;
+import net.minecraft.util.TimeUtil;
 import net.minecraft.util.debugchart.DebugSampleSubscriptionTracker;
 import net.minecraft.util.debugchart.RemoteDebugSampleType;
 import net.minecraft.util.debugchart.RemoteSampleLogger;
@@ -229,7 +_,7 @@
         }
         this.getPlayerList().loadAndSaveFiles(); // Must be after convertNames
         // Paper end - fix converting txt to json file
-        org.spigotmc.WatchdogThread.doStart(org.spigotmc.SpigotConfig.timeoutTime, org.spigotmc.SpigotConfig.restartOnCrash); // Paper - start watchdog thread
+        MultiWatchdogThread.doStart(org.spigotmc.SpigotConfig.timeoutTime, org.spigotmc.SpigotConfig.restartOnCrash); // Paper - start watchdog thread // Canvas - rewrite watchdog
         thread.start(); // Paper - Enhance console tab completions for brigadier commands; start console thread after MinecraftServer.console & PaperConfig are initialized
         io.papermc.paper.command.PaperCommands.registerCommands(this); // Paper - setup /paper command
         this.server.spark.registerCommandBeforePlugins(this.server); // Paper - spark
@@ -279,6 +_,7 @@
         // Paper end - Unix domain socket support
 
         this.initializeKeyPair();
+        new PlayerJoinThread("AsyncPlayerJoinThread", "player join thread"); // Canvas - init join thread
         LOGGER.info("Starting Minecraft server on {}:{}", this.getLocalIp().isEmpty() ? "*" : this.getLocalIp(), this.getPort());
 
         try {
@@ -359,10 +_,41 @@
                 TpsDebugDimensions.values().length, this.debugSampleSubscriptionTracker, RemoteDebugSampleType.TICK_TIME
             );
             long nanos = Util.getNanos();
+            // Canvas start - start player chunk loader
+            // we start the chunk loader early in case we need to run any tasks plugins might want during enable, init, etc.
+            // and to also handle the case of new worlds being created, where we need to run chunk tasks, which requires this
+            // thread to be active, because if not we stall the server, and it never finishes boot.
+            // we start here specifically because if we do it before 'debugSampleSubscriptionTracker' is instantiated, we crash
+            //noinspection resource
+            AsyncPlayerChunkLoader chunkLoader = new AsyncPlayerChunkLoader("AsyncChunkLoader", "async player chunk loader");
+            chunkLoader.start((self) -> (hasTimeLeft, _) -> self.tick(hasTimeLeft), () -> true); // no dependencyResolution, start immediately
+            // Canvas end
             SkullBlockEntity.setup(this.services, this);
             GameProfileCache.setUsesAuthentication(this.usesAuthentication());
             LOGGER.info("Preparing level \"{}\"", this.getLevelIdName());
             this.loadLevel(this.storageSource.getLevelId()); // CraftBukkit
+            // Canvas start - Threaded Dimensions - prepare context
+            for (final ServerLevel level : this.levels.values()) {
+                ThreadedServer.LEVEL_SPINNER.apply(level);
+            }
+
+            CompletableFuture<Void> preparedContextFuture = CompletableFuture.allOf(
+                this.levels.values().stream()
+                    .map(value -> CompletableFuture.runAsync(() -> {
+                        while (!value.prepared) {
+                            // Park for 1 millisecond to wait for prepared level threaded context
+                            LockSupport.parkNanos("waiting for prepared context", TimeUtil.NANOSECONDS_PER_MILLISECOND);
+                        }
+                    }))
+                    .toArray(CompletableFuture[]::new)
+            );
+
+            try {
+                preparedContextFuture.get();
+            } catch (Throwable e) {
+                throw new RuntimeException("An unexpected error occurred when waiting for levels to prepare threaded context", e);
+            }
+            // Canvas end
             long l = Util.getNanos() - nanos;
             String string = String.format(Locale.ROOT, "%.3fs", l / 1.0E9);
             LOGGER.info("Done preparing level \"{}\" ({})", this.getLevelIdName(), string); // Paper - Improve startup message, add total time
@@ -653,6 +_,14 @@
 
     @Override
     public boolean enforceSecureProfile() {
+        /* // Canvas start - no chat reports
+        If option is enabled on server - it does the exact opposite of what this option is
+        designed to enforce, so there's no reason to have it enabled.
+         */
+        if (Config.INSTANCE.noChatReports.enable) {
+            return false;
+        }
+        // Canvas end
         DedicatedServerProperties properties = this.getProperties();
         // Paper start - Add setting for proxy online mode status
         return properties.enforceSecureProfile
