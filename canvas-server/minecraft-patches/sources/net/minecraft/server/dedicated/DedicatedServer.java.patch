--- a/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,24 +_,26 @@
 package net.minecraft.server.dedicated;
 
-import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
-import java.io.BufferedReader;
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.io.Writer;
 import java.net.InetAddress;
 import java.net.Proxy;
 import java.net.URI;
-import java.nio.charset.StandardCharsets;
 import java.nio.file.Files;
 import java.nio.file.Path;
-import java.util.Collections;
 import java.util.List;
 import java.util.Locale;
 import java.util.Optional;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.locks.LockSupport;
 import javax.annotation.Nullable;
+
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.server.ThreadedServer;
+import io.canvasmc.canvas.server.chunk.AsyncPlayerChunkLoader;
+import io.canvasmc.canvas.server.network.PlayerJoinThread;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.DefaultUncaughtExceptionHandlerWithName;
 import net.minecraft.SharedConstants;
@@ -45,6 +_,7 @@
 import net.minecraft.server.rcon.thread.QueryThreadGs4;
 import net.minecraft.server.rcon.thread.RconThread;
 import net.minecraft.util.Mth;
+import net.minecraft.util.TimeUtil;
 import net.minecraft.util.debugchart.DebugSampleSubscriptionTracker;
 import net.minecraft.util.debugchart.RemoteDebugSampleType;
 import net.minecraft.util.debugchart.RemoteSampleLogger;
@@ -279,6 +_,7 @@
         // Paper end - Unix domain socket support
 
         this.initializeKeyPair();
+        if (Config.INSTANCE.asyncPlayerJoining) new PlayerJoinThread("AsyncPlayerJoinThread", "player join thread"); // Canvas - open join thread
         LOGGER.info("Starting Minecraft server on {}:{}", this.getLocalIp().isEmpty() ? "*" : this.getLocalIp(), this.getPort());
 
         try {
@@ -361,8 +_,35 @@
             long nanos = Util.getNanos();
             SkullBlockEntity.setup(this.services, this);
             GameProfileCache.setUsesAuthentication(this.usesAuthentication());
+            // Canvas start - start player chunk loader
+            //noinspection resource
+            AsyncPlayerChunkLoader chunkLoader = new AsyncPlayerChunkLoader("AsyncChunkLoader", "async player chunk loader");
+            chunkLoader.start((self) -> (hasTimeLeft, _) -> self.tick(hasTimeLeft), false);
+            // Canvas end
             LOGGER.info("Preparing level \"{}\"", this.getLevelIdName());
             this.loadLevel(this.storageSource.getLevelId()); // CraftBukkit
+            // Canvas start - Threaded Dimensions - prepare context
+            for (final ServerLevel level : this.levels.values()) {
+                ThreadedServer.LEVEL_SPINNER.apply(level);
+            }
+
+            CompletableFuture<Void> preparedContextFuture = CompletableFuture.allOf(
+                this.levels.values().stream()
+                    .map(value -> CompletableFuture.runAsync(() -> {
+                        while (!value.prepared) {
+                            // Park for 1 millisecond to wait for prepared level threaded context
+                            LockSupport.parkNanos("waiting for prepared context", TimeUtil.NANOSECONDS_PER_MILLISECOND);
+                        }
+                    }))
+                    .toArray(CompletableFuture[]::new)
+            );
+
+            try {
+                preparedContextFuture.get();
+            } catch (Throwable e) {
+                throw new RuntimeException("An unexpected error occurred when waiting for levels to prepare threaded context", e);
+            }
+            // Canvas end
             long l = Util.getNanos() - nanos;
             String string = String.format(Locale.ROOT, "%.3fs", l / 1.0E9);
             LOGGER.info("Done preparing level \"{}\" ({})", this.getLevelIdName(), string); // Paper - Improve startup message, add total time
@@ -653,6 +_,14 @@
 
     @Override
     public boolean enforceSecureProfile() {
+        /* // Canvas start - no chat reports
+        If option is enabled on server - it does the exact opposite of what this option is
+        designed to enforce, so there's no reason to have it enabled.
+         */
+        if (Config.INSTANCE.noChatReports.enable) {
+            return false;
+        }
+        // Canvas end
         DedicatedServerProperties properties = this.getProperties();
         // Paper start - Add setting for proxy online mode status
         return properties.enforceSecureProfile
