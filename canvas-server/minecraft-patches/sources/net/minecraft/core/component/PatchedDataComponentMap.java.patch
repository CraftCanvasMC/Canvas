--- a/net/minecraft/core/component/PatchedDataComponentMap.java
+++ b/net/minecraft/core/component/PatchedDataComponentMap.java
@@ -7,16 +_,18 @@
 import java.util.ArrayList;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.Map.Entry;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 
 public final class PatchedDataComponentMap implements DataComponentMap {
     private final DataComponentMap prototype;
-    private Reference2ObjectMap<DataComponentType<?>, Optional<?>> patch;
+    private ConcurrentHashMap<DataComponentType<?>, Optional<?>> patch;
     private boolean copyOnWrite;
 
     public PatchedDataComponentMap(DataComponentMap prototype) {
@@ -25,7 +_,7 @@
 
     private PatchedDataComponentMap(DataComponentMap prototype, Reference2ObjectMap<DataComponentType<?>, Optional<?>> patch, boolean copyOnWtite) {
         this.prototype = prototype;
-        this.patch = patch;
+        this.patch = new ConcurrentHashMap<>(patch); // Canvas - concurrent
         this.copyOnWrite = copyOnWtite;
     }
 
@@ -136,7 +_,7 @@
 
     private void ensureMapOwnership() {
         if (this.copyOnWrite) {
-            this.patch = new Reference2ObjectArrayMap<>(this.patch);
+            this.patch = new ConcurrentHashMap<>(this.patch); // Canvas - concurrent
             this.copyOnWrite = false;
         }
     }
@@ -148,9 +_,7 @@
         } else {
             Set<DataComponentType<?>> set = new ReferenceArraySet<>(this.prototype.keySet());
 
-            for (it.unimi.dsi.fastutil.objects.Reference2ObjectMap.Entry<DataComponentType<?>, Optional<?>> entry : Reference2ObjectMaps.fastIterable(
-                this.patch
-            )) {
+            for (Map.Entry<DataComponentType<?>, Optional<?>> entry : this.patch.entrySet()) { // Canvas - concurrent
                 Optional<?> optional = entry.getValue();
                 if (optional.isPresent()) {
                     set.add(entry.getKey());
@@ -170,9 +_,7 @@
         } else {
             List<TypedDataComponent<?>> list = new ArrayList<>(this.patch.size() + this.prototype.size());
 
-            for (it.unimi.dsi.fastutil.objects.Reference2ObjectMap.Entry<DataComponentType<?>, Optional<?>> entry : Reference2ObjectMaps.fastIterable(
-                this.patch
-            )) {
+            for (Map.Entry<DataComponentType<?>, Optional<?>> entry : this.patch.entrySet()) { // Canvas - conurrent
                 if (entry.getValue().isPresent()) {
                     list.add(TypedDataComponent.createUnchecked(entry.getKey(), entry.getValue().get()));
                 }
@@ -192,7 +_,7 @@
     public int size() {
         int size = this.prototype.size();
 
-        for (it.unimi.dsi.fastutil.objects.Reference2ObjectMap.Entry<DataComponentType<?>, Optional<?>> entry : Reference2ObjectMaps.fastIterable(this.patch)) {
+        for (Map.Entry<DataComponentType<?>, Optional<?>> entry : this.patch.entrySet()) { // Canvas - concurrent
             boolean isPresent = entry.getValue().isPresent();
             boolean hasDataComponentType = this.prototype.has(entry.getKey());
             if (isPresent != hasDataComponentType) {
@@ -208,13 +_,13 @@
             return DataComponentPatch.EMPTY;
         } else {
             this.copyOnWrite = true;
-            return new DataComponentPatch(this.patch);
+            return new DataComponentPatch(Reference2ObjectMaps.synchronize(new Reference2ObjectArrayMap<>(this.patch)));
         }
     }
 
     public PatchedDataComponentMap copy() {
         this.copyOnWrite = true;
-        return new PatchedDataComponentMap(this.prototype, this.patch, true);
+        return new PatchedDataComponentMap(this.prototype, new Reference2ObjectArrayMap<>(this.patch), true);
     }
 
     public DataComponentMap toImmutableMap() {
