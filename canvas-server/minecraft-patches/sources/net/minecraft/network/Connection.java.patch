--- a/net/minecraft/network/Connection.java
+++ b/net/minecraft/network/Connection.java
@@ -38,6 +_,7 @@
 import java.util.Objects;
 import java.util.Queue;
 import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
@@ -59,6 +_,7 @@
 import net.minecraft.network.protocol.status.ClientStatusPacketListener;
 import net.minecraft.network.protocol.status.StatusProtocols;
 import net.minecraft.server.RunningOnDifferentThreadException;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.Mth;
 import net.minecraft.util.debugchart.LocalSampleLogger;
 import org.apache.commons.lang3.Validate;
@@ -231,6 +_,23 @@
         }
         if (net.minecraft.server.MinecraftServer.getServer().isDebugging()) io.papermc.paper.util.TraceUtil.printStackTrace(exception); // Spigot // Paper
     }
+    // Canvas start - threaded connections
+    private AtomicReference<ServerLevel> holdingLevel = new AtomicReference<>(null);
+
+    public void transferToLevel(ServerLevel level) {
+        if (holdingLevel.get() != null) {
+            // Player was on a diff world before, remove from previous context
+            level.removeConnection(this);
+        }
+        holdingLevel.set(level);
+        level.notifyNewConnection(this);
+    }
+
+    @Nullable
+    public ServerLevel getHoldingLevel() {
+        return holdingLevel.get();
+    }
+    // Canvas end
 
     @Override
     protected void channelRead0(ChannelHandlerContext context, Packet<?> packet) {
