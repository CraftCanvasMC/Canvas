--- a/net/minecraft/network/FriendlyByteBuf.java
+++ b/net/minecraft/network/FriendlyByteBuf.java
@@ -8,6 +_,7 @@
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.DynamicOps;
 import com.mojang.serialization.JsonOps;
+import io.canvasmc.canvas.Config;
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 import io.netty.buffer.ByteBufInputStream;
@@ -54,6 +_,7 @@
 import net.minecraft.nbt.Tag;
 import net.minecraft.network.codec.StreamDecoder;
 import net.minecraft.network.codec.StreamEncoder;
+import net.minecraft.network.protocol.status.ServerStatus;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.util.Crypt;
@@ -101,7 +_,28 @@
         return this;
     }
 
+    @SuppressWarnings({ "unchecked", "rawtypes" }) // Canvas - no chat reports
     public <T> T readJsonWithCodec(Codec<T> codec) {
+        // Canvas start - no chat reports
+        if (Config.INSTANCE.noChatReports.enable) {
+            if (codec == ServerStatus.CODEC) {
+                JsonElement jsonElement = GsonHelper.fromJson(GSON, this.readUtf(), JsonElement.class);
+                DataResult dataResult = codec.parse(JsonOps.INSTANCE, jsonElement);
+                Object result;
+                try {
+                    result = dataResult.getOrThrow(string -> new DecoderException("Failed to decode json: " + string));
+                } catch (Throwable e) {
+                    throw new RuntimeException("Unable to decode json!", e);
+                }
+
+                if (jsonElement.getAsJsonObject().has("preventsChatReports")) {
+                    ((ServerStatus) result).setPreventsChatReports(jsonElement.getAsJsonObject().get("preventsChatReports").getAsBoolean());
+                }
+
+                return (T) (result);
+            }
+        }
+        // Canvas end
         JsonElement jsonElement = GsonHelper.fromJson(GSON, this.readUtf(), JsonElement.class);
         DataResult<T> dataResult = codec.parse(JsonOps.INSTANCE, jsonElement);
         return dataResult.getOrThrow(exception -> new DecoderException("Failed to decode json: " + exception));
@@ -113,6 +_,19 @@
     }
     public <T> void writeJsonWithCodec(Codec<T> codec, T value, int maxLength) {
         // Paper end - Adventure; add max length parameter
+        // Canvas start - no chat reports
+        if (Config.INSTANCE.noChatReports.enable) {
+            if (Config.INSTANCE.noChatReports.addQueryData && codec == ServerStatus.CODEC) {
+                DataResult<JsonElement> dataResult = codec.encodeStart(JsonOps.INSTANCE, value);
+                JsonElement element = dataResult.getOrThrow(string -> new EncoderException("Failed to encode: " + string + " " + value));
+
+                element.getAsJsonObject().addProperty("preventsChatReports", true);
+
+                this.writeUtf(GSON.toJson(element));
+                return;
+            }
+        }
+        // Canvas end
         DataResult<JsonElement> dataResult = codec.encodeStart(JsonOps.INSTANCE, value);
         this.writeUtf(GSON.toJson(dataResult.getOrThrow(exception -> new EncoderException("Failed to encode: " + exception + " " + value))), maxLength); // Paper - Adventure; add max length parameter
     }
