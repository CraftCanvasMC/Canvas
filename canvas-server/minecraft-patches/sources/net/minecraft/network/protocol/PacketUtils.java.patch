--- a/net/minecraft/network/protocol/PacketUtils.java
+++ b/net/minecraft/network/protocol/PacketUtils.java
@@ -2,25 +_,32 @@
 
 import com.mojang.logging.LogUtils;
 import javax.annotation.Nullable;
+
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
 import net.minecraft.network.PacketListener;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.RunningOnDifferentThreadException;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.network.ServerConfigurationPacketListenerImpl;
+import net.minecraft.server.network.ServerGamePacketListenerImpl;
+import net.minecraft.server.network.ServerLoginPacketListenerImpl;
 import net.minecraft.util.thread.BlockableEventLoop;
 import org.slf4j.Logger;
 
 public class PacketUtils {
     private static final Logger LOGGER = LogUtils.getLogger();
 
-    public static <T extends PacketListener> void ensureRunningOnSameThread(Packet<T> packet, T processor, ServerLevel level) throws RunningOnDifferentThreadException {
-        ensureRunningOnSameThread(packet, processor, level.getServer());
+    // Canvas start
+    public static <T extends PacketListener> void ensureRunningOnSameThread(Packet<T> packet, T processor, ServerLevel executor) throws RunningOnDifferentThreadException {
+        ensureRunningOnSameThread(packet, processor, executor.getServer());
     }
 
     public static <T extends PacketListener> void ensureRunningOnSameThread(Packet<T> packet, T processor, BlockableEventLoop<?> executor) throws RunningOnDifferentThreadException {
-        if (!executor.isSameThread()) {
-            executor.executeIfPossible(() -> {
+        if (!ca.spottedleaf.moonrise.common.util.TickThread.isTickThread()) {
+            Runnable run = () -> {
+    // Canvas end
                 packetProcessing.push(processor); // Paper - detailed watchdog information
                 try { // Paper - detailed watchdog information
                 if (processor instanceof net.minecraft.server.network.ServerCommonPacketListenerImpl serverCommonPacketListener && serverCommonPacketListener.processedDisconnect) return; // Paper - Don't handle sync packets for kicked players
@@ -43,7 +_,25 @@
                     packetProcessing.pop();
                 }
                 // Paper end - detailed watchdog information
-            });
+            // Canvas start
+            };
+            if (processor instanceof ServerGamePacketListenerImpl gamePacketListener) {
+                // check if removed. if the player is removed, the bukkit task
+                // scheduler will NOT process the tick, so as fallback, run on world
+                gamePacketListener.player.serverLevel().wake();
+                gamePacketListener.player.connection.connection.schedulePacket(run);
+            } else if (processor instanceof ServerConfigurationPacketListenerImpl configurationPacketListener) {
+                // push to main
+                MinecraftServer.getServer().connectionPool.connect(configurationPacketListener.connection);
+                configurationPacketListener.player.serverLevel().wake();
+                configurationPacketListener.connection.schedulePacket(run);
+            } else if (processor instanceof ServerLoginPacketListenerImpl) {
+                // push on main
+                MinecraftServer.getServer().executeIfPossible(run);
+            } else {
+                throw new UnsupportedOperationException("Unknown listener: " + processor);
+            }
+            // Canvas end
             throw RunningOnDifferentThreadException.RUNNING_ON_DIFFERENT_THREAD;
         }
     }
