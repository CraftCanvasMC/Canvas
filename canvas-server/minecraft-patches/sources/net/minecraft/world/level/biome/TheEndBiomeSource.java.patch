--- a/net/minecraft/world/level/biome/TheEndBiomeSource.java
+++ b/net/minecraft/world/level/biome/TheEndBiomeSource.java
@@ -3,11 +_,13 @@
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.stream.Stream;
+import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import net.minecraft.core.Holder;
 import net.minecraft.core.HolderGetter;
 import net.minecraft.core.QuartPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.resources.RegistryOps;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.levelgen.DensityFunction;
 
 public class TheEndBiomeSource extends BiomeSource {
@@ -26,6 +_,32 @@
     private final Holder<Biome> midlands;
     private final Holder<Biome> islands;
     private final Holder<Biome> barrens;
+    // Canvas start
+    private Holder<Biome> getBiomeForNoiseGenVanilla(int x, int y, int z, Climate.Sampler noise) {
+        int i = QuartPos.toBlock(x);
+        int j = QuartPos.toBlock(y);
+        int k = QuartPos.toBlock(z);
+        int l = SectionPos.blockToSectionCoord(i);
+        int m = SectionPos.blockToSectionCoord(k);
+        if ((long)l * (long)l + (long)m * (long)m <= 4096L) {
+            return this.end;
+        } else {
+            int n = (SectionPos.blockToSectionCoord(i) * 2 + 1) * 8;
+            int o = (SectionPos.blockToSectionCoord(k) * 2 + 1) * 8;
+            double d = noise.erosion().compute(new DensityFunction.SinglePointContext(n, j, o));
+            if (d > 0.25D) {
+                return this.highlands;
+            } else if (d >= -0.0625D) {
+                return this.midlands;
+            } else {
+                return d < -0.21875D ? this.islands : this.barrens;
+            }
+        }
+    }
+
+    private final ThreadLocal<Long2ObjectLinkedOpenHashMap<Holder<Biome>>> cache = ThreadLocal.withInitial(Long2ObjectLinkedOpenHashMap::new);
+    private final int cacheCapacity = 1024;
+    // Canvas end
 
     public static TheEndBiomeSource create(HolderGetter<Biome> biomeGetter) {
         return new TheEndBiomeSource(
@@ -56,25 +_,23 @@
     }
 
     @Override
-    public Holder<Biome> getNoiseBiome(int x, int y, int z, Climate.Sampler sampler) {
-        int blockPosX = QuartPos.toBlock(x);
-        int blockPosY = QuartPos.toBlock(y);
-        int blockPosZ = QuartPos.toBlock(z);
-        int sectionPosX = SectionPos.blockToSectionCoord(blockPosX);
-        int sectionPosZ = SectionPos.blockToSectionCoord(blockPosZ);
-        if ((long)sectionPosX * sectionPosX + (long)sectionPosZ * sectionPosZ <= 4096L) {
-            return this.end;
+    // Canvas start
+    public Holder<Biome> getNoiseBiome(int biomeX, int biomeY, int biomeZ, Climate.Sampler multiNoiseSampler) {
+        final long key = ChunkPos.asLong(biomeX, biomeZ);
+        final Long2ObjectLinkedOpenHashMap<Holder<Biome>> cacheThreadLocal = cache.get();
+        final Holder<Biome> biome = cacheThreadLocal.get(key);
+        if (biome != null) {
+            return biome;
         } else {
-            int i = (SectionPos.blockToSectionCoord(blockPosX) * 2 + 1) * 8;
-            int i1 = (SectionPos.blockToSectionCoord(blockPosZ) * 2 + 1) * 8;
-            double d = sampler.erosion().compute(new DensityFunction.SinglePointContext(i, blockPosY, i1));
-            if (d > 0.25) {
-                return this.highlands;
-            } else if (d >= -0.0625) {
-                return this.midlands;
-            } else {
-                return d < -0.21875 ? this.islands : this.barrens;
+            final Holder<Biome> gennedBiome = getBiomeForNoiseGenVanilla(biomeX, biomeY, biomeZ, multiNoiseSampler);
+            cacheThreadLocal.put(key, gennedBiome);
+            if (cacheThreadLocal.size() > cacheCapacity) {
+                for (int i = 0; i < cacheCapacity / 16; i ++) {
+                    cacheThreadLocal.removeFirst();
+                }
             }
+            return gennedBiome;
         }
+    // Canvas end
     }
 }
