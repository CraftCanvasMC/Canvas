--- a/net/minecraft/world/level/GameRules.java
+++ b/net/minecraft/world/level/GameRules.java
@@ -19,6 +_,8 @@
 import java.util.function.Supplier;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.util.TPSCalculator;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
 import net.minecraft.nbt.CompoundTag;
@@ -320,8 +_,31 @@
     }
 
     public int getInt(GameRules.Key<GameRules.IntegerValue> key) {
-        return this.getRule(key).get();
-    }
+    // Canvas start
+        return lagCompensation(this.getRule(key).get(), key);
+    }
+
+    private ServerLevel level;
+
+    private int lagCompensation(int original, GameRules.Key<GameRules.IntegerValue> rule) {
+        ServerLevel level = getOrCacheLevel();
+        if (!Config.INSTANCE.lagCompensation.enabled || !Config.INSTANCE.lagCompensation.randomTickSpeedAcceleration) return original;
+        if (!(rule == GameRules.RULE_RANDOMTICKING)) return original;
+        return (int) (original * TPSCalculator.MAX_TPS / (float) level.tpsCalculator.getMostAccurateTPS());
+    }
+
+    private ServerLevel getOrCacheLevel() {
+        if (level == null) {
+            for (final ServerLevel level : MinecraftServer.getServer().getAllLevels()) {
+                if (level.getGameRules() == this) {
+                    this.level = (level);
+                    break;
+                }
+            }
+        }
+        return level;
+    }
+    // Canvas end
 
     public static class BooleanValue extends GameRules.Value<GameRules.BooleanValue> {
         private boolean value;
