--- a/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/BeehiveBlockEntity.java
@@ -5,9 +_,13 @@
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import io.netty.buffer.ByteBuf;
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Queue;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -80,7 +_,7 @@
     private static final int MIN_TICKS_BEFORE_REENTERING_HIVE = 400;
     private static final int MIN_OCCUPATION_TICKS_NECTAR = 2400;
     public static final int MIN_OCCUPATION_TICKS_NECTARLESS = 600;
-    private List<BeehiveBlockEntity.BeeData> stored = Lists.newArrayList();
+    private Queue<BeeData> stored = new ConcurrentLinkedQueue<>(); // Canvas - concurrent
     @Nullable
     public BlockPos savedFlowerPos;
     public int maxBees = MAX_OCCUPANTS; // CraftBukkit - allow setting max amount of bees a hive can hold
@@ -177,7 +_,7 @@
 
     // Purpur start - Stored Bee API
     public List<BeeData> getStored() {
-        return stored;
+        return new ArrayList<>(stored.stream().toList()); // Canvas
     }
     // Purpur end - Stored Bee API
 
@@ -338,7 +_,7 @@
         return this.savedFlowerPos != null;
     }
 
-    private static void tickOccupants(Level level, BlockPos pos, BlockState state, List<BeehiveBlockEntity.BeeData> data, @Nullable BlockPos savedFlowerPos) {
+    private static void tickOccupants(Level level, BlockPos pos, BlockState state, Queue<BeehiveBlockEntity.BeeData> data, @Nullable BlockPos savedFlowerPos) { // Canvas - use queue
         boolean flag = false;
         Iterator<BeehiveBlockEntity.BeeData> iterator = data.iterator();
 
@@ -380,7 +_,7 @@
     @Override
     protected void loadAdditional(CompoundTag tag, HolderLookup.Provider registries) {
         super.loadAdditional(tag, registries);
-        this.stored = Lists.newArrayList(); // CraftBukkit - SPIGOT-7790: create new copy (may be modified in physics event triggered by honey change)
+        this.stored = new ConcurrentLinkedQueue<>(); // CraftBukkit - SPIGOT-7790: create new copy (may be modified in physics event triggered by honey change) // Canvas
         if (tag.contains("bees")) {
             BeehiveBlockEntity.Occupant.LIST_CODEC
                 .parse(NbtOps.INSTANCE, tag.get("bees"))
@@ -409,7 +_,7 @@
     @Override
     protected void applyImplicitComponents(BlockEntity.DataComponentInput componentInput) {
         super.applyImplicitComponents(componentInput);
-        this.stored = Lists.newArrayList(); // CraftBukkit - SPIGOT-7790: create new copy (may be modified in physics event triggered by honey change)
+        this.stored = new ConcurrentLinkedQueue<>(); // CraftBukkit - SPIGOT-7790: create new copy (may be modified in physics event triggered by honey change) // Canvas
         List<BeehiveBlockEntity.Occupant> list = componentInput.getOrDefault(DataComponents.BEES, List.of());
         list.forEach(this::storeBee);
     }
