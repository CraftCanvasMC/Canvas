--- a/net/minecraft/world/level/block/state/BlockBehaviour.java
+++ b/net/minecraft/world/level/block/state/BlockBehaviour.java
@@ -3,6 +_,8 @@
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.util.TPSCalculator;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectArrayMap;
 import java.util.Arrays;
 import java.util.Collections;
@@ -27,6 +_,7 @@
 import net.minecraft.resources.DependantName;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.tags.TagKey;
 import net.minecraft.util.Mth;
@@ -346,13 +_,21 @@
     protected void tick(BlockState state, ServerLevel level, BlockPos pos, RandomSource random) {
     }
 
+    // Canvas start
+    private float lagCompensation(float original, Player player) {
+        if (!Config.INSTANCE.lagCompensation.enabled || !Config.INSTANCE.lagCompensation.blockBreakingAcceleration) return original;
+        if (player.level().isClientSide) return original;
+        return original * TPSCalculator.MAX_TPS / (float) ((ServerLevel) player.level()).tpsCalculator.getMostAccurateTPS();
+    }
+
+    // Canvas end
     protected float getDestroyProgress(BlockState state, Player player, BlockGetter level, BlockPos pos) {
         float destroySpeed = state.getDestroySpeed(level, pos);
         if (destroySpeed == -1.0F) {
-            return 0.0F;
+            return lagCompensation(0.0F, player); // Canvas
         } else {
             int i = player.hasCorrectToolForDrops(state) ? 30 : 100;
-            return player.getDestroySpeed(state) / destroySpeed / i;
+            return lagCompensation(player.getDestroySpeed(state) / destroySpeed / i, player); // Canvas
         }
     }
 
@@ -883,7 +_,11 @@
         }
 
         public void entityInside(Level level, BlockPos pos, Entity entity) {
-            this.getBlock().entityInside(this.asState(), level, pos, entity);
+            // Canvas start - ensure not air
+            BlockState state = this.asState();
+            if (state.isAir()) return;
+            this.getBlock().entityInside(state, level, pos, entity);
+            // Canvas end
         }
 
         public VoxelShape getEntityInsideCollisionShape(Level level, BlockPos pos) {
