--- a/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -2,6 +_,7 @@
 
 import java.util.Optional;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.entity.SleepingBlockEntity;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.HolderLookup;
@@ -28,15 +_,53 @@
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.CampfireBlock;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.gameevent.GameEvent;
 
-public class CampfireBlockEntity extends BlockEntity implements Clearable {
+public class CampfireBlockEntity extends BlockEntity implements Clearable, SleepingBlockEntity { // Canvas
     private static final int BURN_COOL_SPEED = 2;
     private static final int NUM_SLOTS = 4;
     private final NonNullList<ItemStack> items = NonNullList.withSize(4, ItemStack.EMPTY);
     public final int[] cookingProgress = new int[4];
     public final int[] cookingTime = new int[4];
     public final boolean[] stopCooking = new boolean[4]; // Paper - Add more Campfire API
+    // Canvas start
+    private LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper = null;
+    private TickingBlockEntity sleepingTicker = null;
+
+    @Override
+    public LevelChunk.RebindableTickingBlockEntityWrapper lithium$getTickWrapper() {
+        return tickWrapper;
+    }
+
+    @Override
+    public void lithium$setTickWrapper(LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper) {
+        this.tickWrapper = tickWrapper;
+        this.lithium$setSleepingTicker(null);
+    }
+
+    @Override
+    public TickingBlockEntity lithium$getSleepingTicker() {
+        return sleepingTicker;
+    }
+
+    @Override
+    public void lithium$setSleepingTicker(TickingBlockEntity sleepingTicker) {
+        this.sleepingTicker = sleepingTicker;
+    }
+
+    private static void trySleepLit(CampfireBlockEntity campfireBlockEntity, boolean bl) {
+        if (!bl) {
+            campfireBlockEntity.lithium$startSleeping();
+        }
+    }
+
+    private static void trySleepUnlit(CampfireBlockEntity campfire, boolean hadProgress) {
+        if (!hadProgress) {
+            campfire.lithium$startSleeping();
+        }
+    }
+    // Canvas end
 
     public CampfireBlockEntity(BlockPos pos, BlockState blockState) {
         super(BlockEntityType.CAMPFIRE, pos, blockState);
@@ -62,8 +_,14 @@
                     SingleRecipeInput singleRecipeInput = new SingleRecipeInput(itemStack);
                     // Paper start - add recipe to cook events
                     final var optionalCookingRecipe = check.getRecipeFor(singleRecipeInput, level);
+                    // Canvas start
+                    final boolean finalFlag = flag;
                     ItemStack itemStack1 = optionalCookingRecipe
-                        .map(recipe -> recipe.value().assemble(singleRecipeInput, level.registryAccess()))
+                        .map(recipe -> {
+                            trySleepLit(campfire, finalFlag); // Canvas
+                            return recipe.value().assemble(singleRecipeInput, level.registryAccess());
+                        })
+                    // Canvas end
                         .orElse(itemStack);
                     // Paper end - add recipe to cook events
                     if (itemStack1.isItemEnabled(level.enabledFeatures())) {
@@ -79,6 +_,7 @@
                         );
 
                         if (!blockCookEvent.callEvent()) {
+                            trySleepLit(campfire, flag); // Canvas
                             return;
                         }
 
@@ -104,6 +_,7 @@
         if (flag) {
             setChanged(level, pos, state);
         }
+        trySleepLit(campfire, flag); // Canvas
     }
 
     public static void cooldownTick(Level level, BlockPos pos, BlockState state, CampfireBlockEntity blockEntity) {
@@ -119,6 +_,7 @@
         if (flag) {
             setChanged(level, pos, state);
         }
+        trySleepUnlit(blockEntity, flag); // Canvas
     }
 
     public static void particleTick(Level level, BlockPos pos, BlockState state, CampfireBlockEntity blockEntity) {
@@ -175,6 +_,7 @@
             System.arraycopy(cookingState, 0, this.stopCooking, 0, Math.min(this.stopCooking.length, abyte.length));
         }
         // Paper end - Add more Campfire API
+        this.wakeUpNow(); // Canvas
     }
 
     @Override
@@ -224,6 +_,7 @@
                 this.cookingTime[i] = event.getTotalCookTime(); // i -> event.getTotalCookTime()
                 // CraftBukkit end
                 this.cookingProgress[i] = 0;
+                this.wakeUpNow(); // Canvas
                 this.items.set(i, stack.consumeAndReturn(1, entity));
                 level.gameEvent(GameEvent.BLOCK_CHANGE, this.getBlockPos(), GameEvent.Context.of(entity, this.getBlockState()));
                 this.markUpdated();
