--- a/net/minecraft/world/level/LocalMobCapCalculator.java
+++ b/net/minecraft/world/level/LocalMobCapCalculator.java
@@ -10,18 +_,27 @@
 import net.minecraft.server.level.ChunkMap;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.entity.MobCategory;
+import org.jetbrains.annotations.NotNull;
 
 public class LocalMobCapCalculator {
     private final Long2ObjectMap<List<ServerPlayer>> playersNearChunk = new Long2ObjectOpenHashMap<>();
-    private final Map<ServerPlayer, LocalMobCapCalculator.MobCounts> playerMobCounts = Maps.newHashMap();
+    private final Map<ServerPlayer, LocalMobCapCalculator.MobCounts> playerMobCounts = Maps.newConcurrentMap(); // Canvas
     private final ChunkMap chunkMap;
 
     public LocalMobCapCalculator(ChunkMap chunkMap) {
         this.chunkMap = chunkMap;
     }
 
-    private List<ServerPlayer> getPlayersNear(ChunkPos pos) {
-        return this.playersNearChunk.computeIfAbsent(pos.toLong(), key -> this.chunkMap.getPlayersCloseForSpawning(pos));
+    // Canvas start
+    private synchronized @NotNull List<ServerPlayer> getPlayersNear(ChunkPos pos) {
+        List<ServerPlayer> retVal = this.playersNearChunk.get(pos.toLong());
+        if (retVal == null) {
+            List<ServerPlayer> newVal = this.chunkMap.getPlayersCloseForSpawning(pos);
+            this.playersNearChunk.put(pos.toLong(), newVal);
+            return newVal;
+        }
+        return retVal;
+    // Canvas end
     }
 
     public void addMob(ChunkPos pos, MobCategory category) {
@@ -42,14 +_,14 @@
     }
 
     static class MobCounts {
-        private final Object2IntMap<MobCategory> counts = new Object2IntOpenHashMap<>(MobCategory.values().length);
+        private final int[] spawnGroupDensities = new int[MobCategory.values().length]; // Canvas
 
         public void add(MobCategory category) {
-            this.counts.computeInt(category, (key, value) -> value == null ? 1 : value + 1);
+            this.spawnGroupDensities[category.ordinal()] ++; // Canvas
         }
 
         public boolean canSpawn(MobCategory category) {
-            return this.counts.getOrDefault(category, 0) < category.getMaxInstancesPerChunk();
+            return this.spawnGroupDensities[category.ordinal()] < category.getMaxInstancesPerChunk(); // Canvas
         }
     }
 }
