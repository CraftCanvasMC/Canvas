--- a/net/minecraft/world/level/NaturalSpawner.java
+++ b/net/minecraft/world/level/NaturalSpawner.java
@@ -1,6 +_,7 @@
 package net.minecraft.world.level;
 
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.Config;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMaps;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
@@ -157,14 +_,26 @@
         return list;
     }
 
+    private static int maxCapPerPlayer = -1; // Canvas
     public static void spawnForChunk(ServerLevel level, LevelChunk chunk, NaturalSpawner.SpawnState spawnState, List<MobCategory> categories) {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("spawner");
 
+        if (maxCapPerPlayer < 0) {
+            maxCapPerPlayer = 0;
+            for (final MobCategory value : MobCategory.values()) {
+                maxCapPerPlayer += value.getMaxInstancesPerChunk();
+            }
+        }
         for (MobCategory mobCategory : categories) {
             // Paper start - Optional per player mob spawns
             final boolean canSpawn;
             int maxSpawns = Integer.MAX_VALUE;
+            // Canvas start - optimize spawning
+            if (Config.INSTANCE.enableAsyncSpawning) {
+                canSpawn = spawnState.canSpawnForCategoryLocal(mobCategory, chunk.getPos());
+            } else
+            // Canvas end
             if (level.paperConfig().entities.spawning.perPlayerMobSpawns) {
                 // Copied from getFilteredSpawningCategories
                 int limit = mobCategory.getMaxInstancesPerChunk();
@@ -221,7 +_,11 @@
         // Paper end - Optional per player mob spawns
         BlockPos randomPosWithin = getRandomPosWithin(level, chunk);
         if (randomPosWithin.getY() >= level.getMinY() + 1) {
-            spawnCategoryForPosition(category, level, chunk, randomPosWithin, filter, callback, maxSpawns, trackEntity); // Paper - Optional per player mob spawns
+            // Canvas start
+            level.getServer().mobSpawnExecutor.submit(() -> {
+                spawnCategoryForPosition(category, level, chunk, randomPosWithin, filter, callback, maxSpawns, trackEntity);
+            }); // Paper - Optional per player mob spawns
+            // Canvas end
         }
     }
 
@@ -649,6 +_,12 @@
         }
 
         boolean canSpawnForCategoryLocal(MobCategory category, ChunkPos chunkPos) {
+            // Canvas start
+            if (this.localMobCapCalculator == null) {
+                LOGGER.warn("Local mob cap calculator was null! Report to Canvas.");
+                return false;
+            }
+            // Canvas end
             return this.localMobCapCalculator.canSpawn(category, chunkPos);
         }
     }
