--- a/net/minecraft/world/level/NaturalSpawner.java
+++ b/net/minecraft/world/level/NaturalSpawner.java
@@ -18,6 +_,7 @@
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.tags.BiomeTags;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.util.Mth;
@@ -137,7 +_,7 @@
             int limit = mobCategory.getMaxInstancesPerChunk();
             SpawnCategory spawnCategory = CraftSpawnCategory.toBukkit(mobCategory);
             if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {
-                spawnThisTick = level.ticksPerSpawnCategory.getLong(spawnCategory) != 0 && worlddata.getGameTime() % level.ticksPerSpawnCategory.getLong(spawnCategory) == 0;
+                spawnThisTick = level.ticksPerSpawnCategory.getLong(spawnCategory) != 0 && level.getRedstoneGameTime() % level.ticksPerSpawnCategory.getLong(spawnCategory) == 0; // Canvas - Threaded Regions
                 limit = level.getWorld().getSpawnLimit(spawnCategory);
             }
 
@@ -157,10 +_,17 @@
         return list;
     }
 
+    private static int maxCapPerPlayer = -1; // Canvas
     public static void spawnForChunk(ServerLevel level, LevelChunk chunk, NaturalSpawner.SpawnState spawnState, List<MobCategory> categories) {
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("spawner");
 
+        if (maxCapPerPlayer < 0) {
+            maxCapPerPlayer = 0;
+            for (final MobCategory value : MobCategory.values()) {
+                maxCapPerPlayer += value.getMaxInstancesPerChunk();
+            }
+        }
         for (MobCategory mobCategory : categories) {
             // Paper start - Optional per player mob spawns
             final boolean canSpawn;
@@ -180,7 +_,11 @@
                 if (inRange != null) {
                     final net.minecraft.server.level.ServerPlayer[] backingSet = inRange.getRawDataUnchecked();
                     for (int k = 0, len = inRange.size(); k < len; k++) {
-                        minDiff = Math.min(limit - level.getChunkSource().chunkMap.getMobCountNear(backingSet[k], mobCategory), minDiff);
+                        // Canvas start - caution ref lists
+                        ServerPlayer player = backingSet[k];
+                        if (player == null) continue;
+                        minDiff = Math.min(limit - level.getChunkSource().chunkMap.getMobCountNear(player, mobCategory), minDiff);
+                        // Canvas end
                     }
                 }
 
@@ -649,6 +_,12 @@
         }
 
         boolean canSpawnForCategoryLocal(MobCategory category, ChunkPos chunkPos) {
+            // Canvas start
+            if (this.localMobCapCalculator == null) {
+                LOGGER.warn("Local mob cap calculator was null! Report to Canvas.");
+                return false;
+            }
+            // Canvas end
             return this.localMobCapCalculator.canSpawn(category, chunkPos);
         }
     }
