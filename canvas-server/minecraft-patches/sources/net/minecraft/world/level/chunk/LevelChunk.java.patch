--- a/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/net/minecraft/world/level/chunk/LevelChunk.java
@@ -3,14 +_,18 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Maps;
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.entity.SleepingBlockEntity;
+import io.canvasmc.canvas.region.ServerRegions;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
-import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import java.util.Collections;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.function.Consumer;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
+import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -58,6 +_,13 @@
         @Override
         public void tick() {
         }
+        // Canvas start
+
+        @Override
+        public BlockEntity getTileEntity() {
+            return null;
+        }
+        // Canvas end
 
         @Override
         public boolean isRemoved() {
@@ -95,7 +_,8 @@
     // Paper end
     // Paper start - rewrite chunk system
     private boolean postProcessingDone;
-    private net.minecraft.server.level.ServerChunkCache.ChunkAndHolder chunkAndHolder;
+    public net.minecraft.server.level.ServerChunkCache.ChunkAndHolder chunkAndHolder; // Canvas - private -> public
+    public volatile boolean heightMapPrimed = false; // Canvas
 
     @Override
     public final boolean moonrise$isPostProcessingDone() {
@@ -120,6 +_,8 @@
     private final int maxSection;
     private final boolean debug;
     private final BlockState defaultBlockState;
+    public int ticksSinceLastPrecipitationCall = 0; // Canvas
+    public int ticksSinceLastRandomTickCall = 0; // Canvas
 
     @Override
     public final BlockState moonrise$getBlock(final int x, final int y, final int z) {
@@ -144,7 +_,7 @@
     ) {
         super(pos, data, level, net.minecraft.server.MinecraftServer.getServer().registryAccess().lookupOrThrow(Registries.BIOME), inhabitedTime, sections, blendingData); // Paper - Anti-Xray - The world isn't ready yet, use server singleton for registry
         this.level = (ServerLevel) level; // CraftBukkit - type
-        this.gameEventListenerRegistrySections = new Int2ObjectOpenHashMap<>();
+        this.gameEventListenerRegistrySections = Int2ObjectMaps.synchronize(new Int2ObjectOpenHashMap<>()); // Canvas - synchronized
 
         for (Heightmap.Types types : Heightmap.Types.values()) {
             if (ChunkStatus.FULL.heightmapsAfter().contains(types)) {
@@ -267,11 +_,18 @@
     public BlockState getBlockStateFinal(final int x, final int y, final int z) {
         // Copied and modified from below
         final int sectionIndex = this.getSectionIndex(y);
-        if (sectionIndex < 0 || sectionIndex >= this.sections.length
-            || this.sections[sectionIndex].nonEmptyBlockCount == 0) {
-            return Blocks.AIR.defaultBlockState();
-        }
-        return this.sections[sectionIndex].states.get((y & 15) << 8 | (z & 15) << 4 | x & 15);
+        // Canvas start - optimize block state lookup
+        if (sectionIndex < 0 || sectionIndex >= this.sections.length) {
+            return Blocks.AIR.defaultBlockState();
+        }
+
+        final LevelChunkSection section = this.sections[sectionIndex];
+        if (section.nonEmptyBlockCount == 0) {
+            return Blocks.AIR.defaultBlockState();
+        }
+
+        return section.states.get((y & 15) << 8 | (z & 15) << 4 | (x & 15));
+        // Canvas end
     }
     @Override
     public BlockState getBlockState(BlockPos pos) {
@@ -395,7 +_,7 @@
                 }
 
                 boolean hasBlockEntity = blockState.hasBlockEntity();
-                if (!this.level.isClientSide && !this.level.isBlockPlaceCancelled) { // Paper - prevent calling cleanup logic when undoing a block place upon a cancelled BlockPlaceEvent
+                if (!this.level.isClientSide && !this.level.isBlockPlaceCancelled.get()) { // Paper - prevent calling cleanup logic when undoing a block place upon a cancelled BlockPlaceEvent // Canvas - threadlocal
                     blockState.onRemove(this.level, pos, state, isMoving);
                 } else if (!blockState.is(block) && hasBlockEntity) {
                     this.removeBlockEntity(pos);
@@ -404,7 +_,7 @@
                 if (!section.getBlockState(i, i1, i2).is(block)) {
                     return null;
                 } else {
-                    if (!this.level.isClientSide && doPlace && (!this.level.captureBlockStates || block instanceof net.minecraft.world.level.block.BaseEntityBlock)) { // CraftBukkit - Don't place while processing the BlockPlaceEvent, unless it's a BlockContainer. Prevents blocks such as TNT from activating when cancelled.
+                    if (!this.level.isClientSide && doPlace && (!this.level.captureBlockStates.get() || block instanceof net.minecraft.world.level.block.BaseEntityBlock)) { // CraftBukkit - Don't place while processing the BlockPlaceEvent, unless it's a BlockContainer. Prevents blocks such as TNT from activating when cancelled. // Canvas - threadlocal
                         state.onPlace(this.level, pos, blockState, isMoving);
                     }
 
@@ -459,7 +_,7 @@
     @Nullable
     public BlockEntity getBlockEntity(BlockPos pos, LevelChunk.EntityCreationType creationType) {
         // CraftBukkit start
-        BlockEntity blockEntity = this.level.capturedTileEntities.get(pos);
+        BlockEntity blockEntity = this.level.capturedTileEntities.get().get(pos); // Canvas - threadlocal
         if (blockEntity == null) {
             blockEntity = this.blockEntities.get(pos);
         }
@@ -534,6 +_,7 @@
 
                 if (blockState.getBlock() != blockState1.getBlock()) {
                     LOGGER.warn("Block state mismatch on block entity {} in position {}, {} != {}, updating", blockEntity, blockPos, blockState, blockState1);
+                    new Throwable().printStackTrace(); // Canvas - print stacktrace for mismatch
                 }
 
                 blockEntity.setBlockState(blockState);
@@ -620,7 +_,7 @@
 
     // CraftBukkit start
     public void loadCallback() {
-        if (this.loadedTicketLevel) { LOGGER.error("Double calling chunk load!", new Throwable()); } // Paper
+        if (this.loadedTicketLevel) { return; } // Paper // Canvas - shhhhh
         // Paper start
         this.loadedTicketLevel = true;
         // Paper end
@@ -646,13 +_,13 @@
 
                 org.bukkit.World world = this.level.getWorld();
                 if (world != null) {
-                    this.level.populating = true;
+                    this.level.populating.set(true); // Canvas - threadlocal
                     try {
                         for (org.bukkit.generator.BlockPopulator populator : world.getPopulators()) {
                             populator.populate(world, random, bukkitChunk);
                         }
                     } finally {
-                        this.level.populating = false;
+                        this.level.populating.set(false); // Canvas - threadlocal
                     }
                 }
                 server.getPluginManager().callEvent(new org.bukkit.event.world.ChunkPopulateEvent(bukkitChunk));
@@ -661,7 +_,7 @@
     }
 
     public void unloadCallback() {
-        if (!this.loadedTicketLevel) { LOGGER.error("Double calling chunk unload!", new Throwable()); } // Paper
+        if (!this.loadedTicketLevel) { return; } // Paper // Canvas - shhhhh
         org.bukkit.Server server = this.level.getCraftServer();
         org.bukkit.craftbukkit.event.CraftEventFactory.callEntitiesUnloadEvent(this.level, this.chunkPos, ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getChunkTaskScheduler().chunkHolderManager.getChunkHolder(this.locX, this.locZ).getEntityChunk().getAllEntities()); // Paper - rewrite chunk system
         org.bukkit.Chunk bukkitChunk = new org.bukkit.craftbukkit.CraftChunk(this);
@@ -678,7 +_,7 @@
     @Override
     public boolean isUnsaved() {
         // Paper start - rewrite chunk system
-        final long gameTime = this.level.getGameTime();
+        final long gameTime = this.level.getRedstoneGameTime(); // Canvas - Threaded Regions
         if (((ca.spottedleaf.moonrise.patches.chunk_system.ticks.ChunkSystemLevelChunkTicks)this.blockTicks).moonrise$isDirty(gameTime)
             || ((ca.spottedleaf.moonrise.patches.chunk_system.ticks.ChunkSystemLevelChunkTicks)this.fluidTicks).moonrise$isDirty(gameTime)) {
             return true;
@@ -758,7 +_,7 @@
                     BlockPos blockPos = ProtoChunk.unpackOffsetCoordinates(_short, this.getSectionYFromSectionIndex(i), pos);
                     BlockState blockState = this.getBlockState(blockPos);
                     FluidState fluidState = blockState.getFluidState();
-                    if (!fluidState.isEmpty()) {
+                    if (!Config.INSTANCE.chunks.generation.disableFluidTickingInPostProcessGenerationStep && !fluidState.isEmpty()) { // Canvas - disable fluid ticking on post process gen
                         fluidState.tick(level, blockPos, blockState);
                     }
 
@@ -792,7 +_,8 @@
                 blockEntity = ((EntityBlock)blockState.getBlock()).newBlockEntity(pos, blockState);
             } else {
                 blockEntity = null;
-                LOGGER.warn("Tried to load a DUMMY block entity @ {} but found not block entity block {} at location", pos, blockState);
+                LOGGER.warn("Tried to load a DUMMY block entity @ {} but found not block entity block {} at location", pos, blockState, new Throwable()); // Canvas - print calltrace
+                return null; // Canvas - just return, dont send extra logs.
             }
         } else {
             blockEntity = BlockEntity.loadStatic(pos, blockState, tag, this.level.registryAccess());
@@ -875,12 +_,22 @@
                     (pos, ticker1) -> {
                         TickingBlockEntity tickingBlockEntity = this.createTicker(blockEntity, ticker);
                         if (ticker1 != null) {
+                            // Canvas start
+                            if (blockEntity instanceof SleepingBlockEntity sleepingBlockEntity) {
+                                sleepingBlockEntity.lithium$setTickWrapper(ticker1);
+                            }
+                            // Canvas end
                             ticker1.rebind(tickingBlockEntity);
                             return (LevelChunk.RebindableTickingBlockEntityWrapper)ticker1;
                         } else if (this.isInLevel()) {
                             LevelChunk.RebindableTickingBlockEntityWrapper rebindableTickingBlockEntityWrapper = new LevelChunk.RebindableTickingBlockEntityWrapper(
                                 tickingBlockEntity
                             );
+                            // Canvas start
+                            if (blockEntity instanceof SleepingBlockEntity sleepingBlockEntity) {
+                                sleepingBlockEntity.lithium$setTickWrapper(rebindableTickingBlockEntityWrapper);
+                            }
+                            // Canvas end
                             this.level.addBlockEntityTicker(rebindableTickingBlockEntityWrapper);
                             return rebindableTickingBlockEntityWrapper;
                         } else {
@@ -904,6 +_,19 @@
             this.blockEntity = blockEntity;
             this.ticker = ticker;
         }
+        // Canvas start
+
+        private <T extends BlockEntity> void lagCompensation(Runnable original) {
+            original.run();
+            if (!Config.INSTANCE.lagCompensation.enabled) return;
+            if (!Config.INSTANCE.lagCompensation.blockEntityAcceleration) return;
+            if (LevelChunk.this.level.isClientSide()) return;
+
+            for (int i = 0; i < ServerRegions.getTickData((ServerLevel) this.blockEntity.getLevel()).tpsCalculator.applicableMissedTicks(); i++) { // Canvas - Threaded Regions
+                original.run();
+            }
+        }
+        // Canvas end
 
         @Override
         public void tick() {
@@ -915,7 +_,11 @@
                         profilerFiller.push(this::getType);
                         BlockState blockState = LevelChunk.this.getBlockState(blockPos);
                         if (this.blockEntity.getType().isValid(blockState)) {
-                            this.ticker.tick(LevelChunk.this.level, this.blockEntity.getBlockPos(), blockState, this.blockEntity);
+                            // Canvas start
+                            lagCompensation(() -> {
+                                this.ticker.tick(LevelChunk.this.level, this.blockEntity.getBlockPos(), blockState, this.blockEntity);
+                            });
+                            // Canvas end
                             this.loggedInvalidBlockState = false;
                         // Paper start - Remove the Block Entity if it's invalid
                         } else {
@@ -959,6 +_,13 @@
         public String toString() {
             return "Level ticker for " + this.getType() + "@" + this.getPos();
         }
+        // Canvas start - Threaded Regions
+
+        @Override
+        public BlockEntity getTileEntity() {
+            return this.blockEntity;
+        }
+        // Canvas end
     }
 
     public static enum EntityCreationType {
@@ -972,14 +_,14 @@
         void run(LevelChunk chunk);
     }
 
-    static class RebindableTickingBlockEntityWrapper implements TickingBlockEntity {
-        private TickingBlockEntity ticker;
+    public static class RebindableTickingBlockEntityWrapper implements TickingBlockEntity { // Canvas - package-private -> public
+        public TickingBlockEntity ticker; // Canvas - private -> public
 
         RebindableTickingBlockEntityWrapper(TickingBlockEntity ticker) {
             this.ticker = ticker;
         }
 
-        void rebind(TickingBlockEntity ticker) {
+        public void rebind(TickingBlockEntity ticker) { // Canvas - package-private -> public
             this.ticker = ticker;
         }
 
@@ -1007,6 +_,13 @@
         public String toString() {
             return this.ticker + " <wrapped>";
         }
+        // Canvas start - Threaded Regions
+
+        @Override
+        public BlockEntity getTileEntity() {
+            return this.ticker == null ? null : this.ticker.getTileEntity();
+        }
+        // Canvas end
     }
 
     @FunctionalInterface
