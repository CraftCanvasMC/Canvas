--- a/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -30,7 +_,7 @@
     public final IdMap<T> registry;
     private final T @org.jetbrains.annotations.Nullable [] presetValues; // Paper - Anti-Xray - Add preset values
     public volatile PalettedContainer.Data<T> data; // Paper - optimise collisions - public
-    private final PalettedContainer.Strategy strategy;
+    public final PalettedContainer.Strategy strategy; // Canvas - private -> public
     //private final ThreadingDetector threadingDetector = new ThreadingDetector("PalettedContainer"); // Paper - unused
 
     public void acquire() {
@@ -168,6 +_,11 @@
         this.registry = registry;
         this.data = this.createOrReuseData(null, 0);
         this.data.palette.idFor(palette);
+        // Canvas start
+        if (palette != null) {
+            this.data.palette.valueFor(0);
+        } else throw new RuntimeException("Attempted to build PalettedContainer with a null palette!");
+        // Canvas end
         this.updateData(this.data); // Paper - optimise palette reads
     }
 
@@ -222,7 +_,7 @@
         return this.getAndSet(this.strategy.getIndex(x, y, z), state);
     }
 
-    private T getAndSet(int index, T state) {
+    private synchronized T getAndSet(int index, T state) { // Canvas - why isn't this synchronized too?
         // Paper start - optimise palette reads
         final int paletteIdx = this.data.palette.idFor(state);
         final PalettedContainer.Data<T> data = this.data;
@@ -392,6 +_,12 @@
     public boolean maybeHas(Predicate<T> predicate) {
         return this.data.palette.maybeHas(predicate);
     }
+    // Canvas start - maybeHasOrCatch
+
+    public boolean maybeHasOrCatch(Predicate<T> predicate, @org.jetbrains.annotations.NotNull T defaultValue) {
+        return this.data.palette.maybeHasOrCatch(predicate, defaultValue);
+    }
+    // Canvas end
 
     @Override
     public PalettedContainer<T> copy() {
@@ -432,7 +_,7 @@
 
         private final PalettedContainer.Configuration<T> configuration;
         private final BitStorage storage;
-        private final Palette<T> palette;
+        public final Palette<T> palette; // Canvas - private -> public
 
         private T[] moonrise$palette;
 
