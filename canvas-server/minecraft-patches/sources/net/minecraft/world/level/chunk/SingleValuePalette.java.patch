--- a/net/minecraft/world/level/chunk/SingleValuePalette.java
+++ b/net/minecraft/world/level/chunk/SingleValuePalette.java
@@ -11,7 +_,7 @@
 public class SingleValuePalette<T> implements Palette<T>, ca.spottedleaf.moonrise.patches.fast_palette.FastPalette<T> { // Paper - optimise palette reads
     private final IdMap<T> registry;
     @Nullable
-    private T value;
+    private volatile T value;
     private final PaletteResize<T> resizeHandler;
 
     // Paper start - optimise palette reads
@@ -44,6 +_,7 @@
         if (this.value != null && this.value != state) {
             return this.resizeHandler.onResize(1, state);
         } else {
+            if (state == null) throw new RuntimeException("Attempted to place null state into SingleValuePalette"); // Canvas
             this.value = state;
             // Paper start - optimise palette reads
             if (this.rawPalette != null) {
@@ -62,6 +_,19 @@
             return filter.test(this.value);
         }
     }
+    // Canvas start - maybeHasOrCatch
+
+    @Override
+    public boolean maybeHasOrCatch(final Predicate<T> filter, final T defaultValue) {
+        if (this.value == null) {
+            if (defaultValue == null) throw new IllegalArgumentException("Default value for 'maybeHasOrCatch' cannot be null!");
+            this.value = defaultValue;
+            return maybeHas(filter);
+        } else {
+            return filter.test(this.value);
+        }
+    }
+    // Canvas end
 
     @Override
     public T valueFor(int id) {
