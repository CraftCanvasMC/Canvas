--- a/net/minecraft/world/level/chunk/ChunkAccess.java
+++ b/net/minecraft/world/level/chunk/ChunkAccess.java
@@ -3,6 +_,7 @@
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.CanvasBootstrap;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
@@ -15,11 +_,13 @@
 import java.util.Map;
 import java.util.Set;
 import java.util.Map.Entry;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.BiConsumer;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.shorts.ShortLists;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -78,8 +_,8 @@
     // Paper - rewrite chunk system
     private final Map<Structure, StructureStart> structureStarts = Maps.newHashMap();
     private final Map<Structure, LongSet> structuresRefences = Maps.newHashMap();
-    protected final Map<BlockPos, CompoundTag> pendingBlockEntities = Maps.newHashMap();
-    public final Map<BlockPos, BlockEntity> blockEntities = new Object2ObjectOpenHashMap<>();
+    protected final Map<BlockPos, CompoundTag> pendingBlockEntities = Maps.newConcurrentMap(); // canvas
+    public final Map<BlockPos, BlockEntity> blockEntities = new ConcurrentHashMap<>(); // Canvas
     protected final LevelHeightAccessor levelHeightAccessor;
     protected final LevelChunkSection[] sections;
     // CraftBukkit start - SPIGOT-6814: move to IChunkAccess to account for 1.17 to 1.18 chunk upgrading.
@@ -253,13 +_,19 @@
     public int getHeight(Heightmap.Types type, int x, int z) {
         Heightmap heightmap = this.heightmaps.get(type);
         if (heightmap == null) {
-            if (SharedConstants.IS_RUNNING_IN_IDE && this instanceof LevelChunk) {
+            if ((SharedConstants.IS_RUNNING_IN_IDE || CanvasBootstrap.RUNNING_IN_IDE) && this instanceof LevelChunk) { // Canvas - ide
                 LOGGER.error("Unprimed heightmap: " + type + " " + x + " " + z);
             }
 
             Heightmap.primeHeightmaps(this, EnumSet.of(type));
             heightmap = this.heightmaps.get(type);
         }
+        // Canvas start
+        if (this instanceof LevelChunk levelChunk && !levelChunk.heightMapPrimed) {
+            levelChunk.heightMapPrimed = true;
+            Heightmap.primeHeightmaps(this, EnumSet.allOf(Heightmap.Types.class));
+        }
+        // Canvas end
 
         return heightmap.getFirstAvailable(x & 15, z & 15) - 1;
     }
@@ -459,7 +_,7 @@
 
     public static ShortList getOrCreateOffsetList(ShortList[] packedPositions, int index) {
         if (packedPositions[index] == null) {
-            packedPositions[index] = new ShortArrayList();
+            packedPositions[index] = ShortLists.synchronize(new ShortArrayList()); // Canvas
         }
 
         return packedPositions[index];
