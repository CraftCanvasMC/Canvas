--- a/net/minecraft/world/level/chunk/storage/IOWorker.java
+++ b/net/minecraft/world/level/chunk/storage/IOWorker.java
@@ -1,11 +_,14 @@
 package net.minecraft.world.level.chunk.storage;
 
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.Config;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import java.io.IOException;
 import java.nio.file.Path;
 import java.util.BitSet;
+import java.util.Iterator;
 import java.util.LinkedHashMap;
+import java.util.Map;
 import java.util.Optional;
 import java.util.SequencedMap;
 import java.util.Map.Entry;
@@ -212,7 +_,38 @@
         });
     }
 
+    // Canvas start - chunkio optimizations - c2me
+
+    private void checkHardLimit() {
+        if (this.pendingWrites.size() >= Config.INSTANCE.chunkGeneration.chunkDataCacheLimit) {
+            LOGGER.warn("Chunk data cache size exceeded hard limit ({} >= {}), forcing writes to disk (you can increase chunkDataCacheLimit in c2me.toml)", this.pendingWrites.size(), Config.INSTANCE.chunkGeneration.chunkDataCacheLimit);
+            while (this.pendingWrites.size() >= Config.INSTANCE.chunkGeneration.chunkDataCacheSoftLimit * 0.75) { // using chunkDataCacheSoftLimit is intentional
+                writeResult0();
+            }
+        }
+    }
+
+    private void writeResult0() {
+        // TODO [VanillaCopy] writeResult
+        Iterator<Entry<ChunkPos, PendingStore>> iterator = this.pendingWrites.entrySet().iterator();
+        if (iterator.hasNext()) {
+            Map.Entry<ChunkPos, IOWorker.PendingStore> entry = iterator.next();
+            iterator.remove();
+            this.runStore(entry.getKey(), entry.getValue());
+        }
+    }
+
     private void storePendingChunk() {
+        if (!this.pendingWrites.isEmpty()) {
+            checkHardLimit();
+            if (this.pendingWrites.size() >= Config.INSTANCE.chunkGeneration.chunkDataCacheSoftLimit) {
+                int writeFrequency = Math.min(1, (this.pendingWrites.size() - (int) Config.INSTANCE.chunkGeneration.chunkDataCacheSoftLimit) / 16);
+                for (int i = 0; i < writeFrequency; i++) {
+                    writeResult0();
+                }
+            }
+        }
+    // Canvas end
         Entry<ChunkPos, IOWorker.PendingStore> entry = this.pendingWrites.pollFirstEntry();
         if (entry != null) {
             this.runStore(entry.getKey(), entry.getValue());
