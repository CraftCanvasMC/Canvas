--- a/net/minecraft/world/level/chunk/LinearPalette.java
+++ b/net/minecraft/world/level/chunk/LinearPalette.java
@@ -12,7 +_,7 @@
     private final T[] values;
     private final PaletteResize<T> resizeHandler;
     private final int bits;
-    private int size;
+    private volatile int size; // Canvas - volatile
 
     // Paper start - optimise palette reads
     @Override
@@ -49,8 +_,11 @@
 
     @Override
     public int idFor(T state) {
-        for (int i = 0; i < this.size; i++) {
-            if (this.values[i] == state) {
+        // Canvas start - threadsafe
+        final T[] values = this.values;
+        for (int i = 0; i < values.length; i++) {
+            if (values[i] == state) {
+        // Canvas end
                 return i;
             }
         }
@@ -67,8 +_,14 @@
 
     @Override
     public boolean maybeHas(Predicate<T> filter) {
-        for (int i = 0; i < this.size; i++) {
-            if (filter.test(this.values[i])) {
+        // Canvas start - threadsafe
+        final T[] values = this.values;
+        final int currentSize = this.size;
+
+        for (int i = 0; i < currentSize; i++) {
+            T value = values[i];
+            if (value != null && filter.test(value)) {
+        // Canvas end
                 return true;
             }
         }
@@ -77,7 +_,7 @@
     }
 
     @Override
-    public T valueFor(int id) {
+    public synchronized T valueFor(int id) { // Canvas - synchronize
         if (id >= 0 && id < this.size) {
             return this.values[id];
         } else {
