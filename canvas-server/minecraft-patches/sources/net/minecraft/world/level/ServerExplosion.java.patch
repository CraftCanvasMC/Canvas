--- a/net/minecraft/world/level/ServerExplosion.java
+++ b/net/minecraft/world/level/ServerExplosion.java
@@ -1,5 +_,7 @@
 package net.minecraft.world.level;
 
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.region.ServerRegions;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import java.util.ArrayList;
 import java.util.HashMap;
@@ -20,6 +_,7 @@
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.LivingEntity;
 import net.minecraft.world.entity.ai.attributes.Attributes;
+import net.minecraft.world.entity.boss.enderdragon.EndCrystal;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.item.PrimedTnt;
 import net.minecraft.world.entity.player.Player;
@@ -42,6 +_,8 @@
 import org.bukkit.event.entity.EntityExplodeEvent;
 import org.bukkit.Location;
 import org.bukkit.event.block.BlockExplodeEvent;
+import org.bukkit.event.entity.EntityRemoveEvent;
+import org.bukkit.event.entity.ExplosionPrimeEvent;
 // CraftBukkit end
 
 public class ServerExplosion implements Explosion {
@@ -53,9 +_,9 @@
     private final ServerLevel level;
     private final Vec3 center;
     @Nullable
-    private final Entity source;
+    public final Entity source; // Canvas - private -> public
     private final float radius;
-    private final DamageSource damageSource;
+    public final DamageSource damageSource; // Canvas - private -> public
     private final ExplosionDamageCalculator damageCalculator;
     private final Map<Player, Vec3> hitPlayers = new HashMap<>();
     // CraftBukkit - add field
@@ -521,6 +_,19 @@
                                         dragonPart.hurtServer(this.level, this.damageSource, this.damageCalculator.getEntityDamageAmount(this, entity, f1));
                                     }
                                 }
+                            // Canvas start
+                            } else if (Config.INSTANCE.blocks.chainEndCrystalExplosions && entity instanceof EndCrystal endCrystal) {
+                                this.level.scheduleForPostNextTick(() -> {
+                                    DamageSource damageSource1 = damageSource.getEntity() != null ? endCrystal.damageSources().explosion(endCrystal, damageSource.getEntity()) : null;
+                                    ExplosionPrimeEvent event = CraftEventFactory.callExplosionPrimeEvent(endCrystal, endCrystal.getExplosionPower(), endCrystal.hasExplosionFire());
+                                    if (event.isCancelled()) {
+                                        return;
+                                    }
+
+                                    endCrystal.remove(Entity.RemovalReason.KILLED, EntityRemoveEvent.Cause.EXPLODE);
+                                    level.explode(endCrystal, damageSource1, null, endCrystal.getX(), endCrystal.getY(), endCrystal.getZ(), event.getRadius(), event.getFire(), endCrystal.getExplosionEffect());
+                                });
+                            // Canvas end
                             } else {
                                 entity.hurtServer(this.level, this.damageSource, this.damageCalculator.getEntityDamageAmount(this, entity, f1));
                             }
@@ -567,6 +_,11 @@
     }
 
     private void interactWithBlocks(List<BlockPos> blocks) {
+        // Canvas start
+        if (Config.INSTANCE.blocks.tnt.explosionNoBlockDamage) {
+            blocks.clear();
+        }
+        // Canvas end
         List<ServerExplosion.StackCollector> list = new ArrayList<>();
         Util.shuffle(blocks, this.level.random);
 
@@ -791,16 +_,16 @@
             return this.getSeenFraction(vec3d, entity, this.directMappedBlockCache, this.mutablePos); // Paper - collision optimisations
         }
         CacheKey key = new CacheKey(this, entity.getBoundingBox());
-        Float blockDensity = this.level.explosionDensityCache.get(key);
+        Float blockDensity = ServerRegions.getTickData(level).explosionDensityCache.get(key); // Canvas - Threaded Regions
         if (blockDensity == null) {
             blockDensity = this.getSeenFraction(vec3d, entity, this.directMappedBlockCache, this.mutablePos); // Paper - collision optimisations
-            this.level.explosionDensityCache.put(key, blockDensity);
+            ServerRegions.getTickData(level).explosionDensityCache.put(key, blockDensity); // Canvas - Threaded Regions
         }
 
         return blockDensity;
     }
 
-    static class CacheKey {
+    public static class CacheKey { // Canvas - public
         private final Level world;
         private final double posX, posY, posZ;
         private final double minX, minY, minZ;
