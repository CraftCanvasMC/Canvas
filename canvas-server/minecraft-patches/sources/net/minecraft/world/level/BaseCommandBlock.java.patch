--- a/net/minecraft/world/level/BaseCommandBlock.java
+++ b/net/minecraft/world/level/BaseCommandBlock.java
@@ -3,6 +_,9 @@
 import java.text.SimpleDateFormat;
 import java.util.Date;
 import javax.annotation.Nullable;
+import com.mojang.brigadier.CommandDispatcher;
+import com.mojang.brigadier.ParseResults;
+import io.canvasmc.canvas.Config;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -32,6 +_,8 @@
     private String command = "";
     @Nullable
     private Component customName;
+    private String lastExecutedCommand; // Canvas
+    private ParseResults<CommandSourceStack> parseResultsCache; // Canvas
     // CraftBukkit start
     @Override
     public abstract org.bukkit.command.CommandSender getBukkitSender(CommandSourceStack wrapper);
@@ -131,7 +_,36 @@
                             this.successCount++;
                         }
                     });
+                    // Canvas start
+                    if (Config.INSTANCE.cacheCommandBlockParseResults) {
+                        // Prepare the command cache first
+                        String commandCache = this.command;
+                        com.google.common.base.Joiner joiner = com.google.common.base.Joiner.on(" ");
+                        if (commandCache.startsWith("/")) {
+                            commandCache = commandCache.substring(1);
+                        }
+                        // Ensure the event is still called
+                        org.bukkit.event.server.ServerCommandEvent event = new org.bukkit.event.server.ServerCommandEvent(commandSourceStack.getBukkitSender(), commandCache);
+                        org.bukkit.Bukkit.getPluginManager().callEvent(event);
+                        if (!event.isCancelled()) {
+                            commandCache = event.getCommand();
+                            String[] args = commandCache.split(" ");
+                            // Dont try and run empty commands
+                            if (args.length != 0) {
+                                String newCommand = joiner.join(args);
+                                // We cache if we need to
+                                if (!newCommand.equals(lastExecutedCommand) || parseResultsCache == null) {
+                                    // Re-compile cache
+                                    MinecraftServer.LOGGER.info("Recompiling parse results cache for command block at ({}, {}, {})", this.getPosition().x, this.getPosition().y, this.getPosition().z);
+                                    this.cache(server.getCommands().getDispatcher(), commandSourceStack, newCommand);
+                                }
+                                server.getCommands().performCommand(parseResultsCache, newCommand);
+                            }
+                        }
+                    } else {
                     server.getCommands().dispatchServerCommand(commandSourceStack, this.command); // CraftBukkit
+                    }
+                    // Canvas end
                 } catch (Throwable var6) {
                     CrashReport crashReport = CrashReport.forThrowable(var6, "Executing command block");
                     CrashReportCategory crashReportCategory = crashReport.addCategory("Command to be executed");
@@ -150,6 +_,13 @@
             return true;
         }
     }
+    // Canvas start
+
+    private void cache(CommandDispatcher<CommandSourceStack> dispatcher, CommandSourceStack commandSourceStack, String commandCache) {
+        this.parseResultsCache = dispatcher.parse(commandCache, commandSourceStack);
+        this.lastExecutedCommand = commandCache;
+    }
+    // Canvas end
 
     public Component getName() {
         return this.customName != null ? this.customName : DEFAULT_NAME;
