--- a/net/minecraft/world/level/StructureManager.java
+++ b/net/minecraft/world/level/StructureManager.java
@@ -16,8 +_,11 @@
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.registries.Registries;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.WorldGenRegion;
 import net.minecraft.tags.TagKey;
+import net.minecraft.world.level.chunk.ChunkAccess;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.StructureAccess;
 import net.minecraft.world.level.chunk.status.ChunkStatus;
 import net.minecraft.world.level.levelgen.WorldOptions;
@@ -79,8 +_,18 @@
     public void fillStartsForStructure(Structure structure, LongSet structureRefs, Consumer<StructureStart> startConsumer) {
         for (long l : structureRefs) {
             SectionPos sectionPos = SectionPos.of(new ChunkPos(l), this.level.getMinSectionY());
+            // Canvas start - prevent syncload
+            ChunkAccess chunkAccess;
+            if (this.level instanceof ServerLevel serverLevel) {
+                @Nullable ChunkAccess possiblyLoaded = serverLevel.getChunk(sectionPos.x(), sectionPos.z(), ChunkStatus.STRUCTURE_STARTS, false);
+                if (possiblyLoaded == null) continue;
+                else chunkAccess = possiblyLoaded;
+            } else {
+                chunkAccess = this.level.getChunk(sectionPos.x(), sectionPos.z(), ChunkStatus.STRUCTURE_STARTS);
+            }
+            // Canvas end
             StructureStart startForStructure = this.getStartForStructure(
-                sectionPos, structure, this.level.getChunk(sectionPos.x(), sectionPos.z(), ChunkStatus.STRUCTURE_STARTS)
+                sectionPos, structure, chunkAccess // Canvas - prevent syncload
             );
             if (startForStructure != null && startForStructure.isValid()) {
                 startConsumer.accept(startForStructure);
