--- a/net/minecraft/world/level/Level.java
+++ b/net/minecraft/world/level/Level.java
@@ -1,17 +_,25 @@
 package net.minecraft.world.level;
 
 import com.google.common.collect.Lists;
+import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;
 import com.mojang.serialization.Codec;
 import java.io.IOException;
 import java.util.Collection;
-import java.util.Iterator;
+import java.util.Collections;
 import java.util.List;
+import java.util.Set;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.server.level.MinecraftServerWorld;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
+import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
+import it.unimi.dsi.fastutil.objects.ObjectLists;
+import it.unimi.dsi.fastutil.objects.ObjectSets;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
-import net.minecraft.ReportedException;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -24,26 +_,23 @@
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
-import io.papermc.paper.util.MCUtil;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.ServerTickRateManager;
 import net.minecraft.server.level.FullChunkStatus;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
-import net.minecraft.util.AbortableIterationConsumer;
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.StringRepresentable;
 import net.minecraft.util.profiling.Profiler;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.TickRateManager;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.DamageSources;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.boss.EnderDragonPart;
-import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.alchemy.PotionBrewing;
@@ -103,7 +_,7 @@
 import org.bukkit.event.block.BlockPhysicsEvent;
 // CraftBukkit end
 
-public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemLevel, ca.spottedleaf.moonrise.patches.chunk_system.world.ChunkSystemEntityGetter { // Paper - rewrite chunk system // Paper - optimise collisions
+public abstract class Level extends MinecraftServerWorld implements LevelAccessor, AutoCloseable, ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemLevel, ca.spottedleaf.moonrise.patches.chunk_system.world.ChunkSystemEntityGetter { // Paper - rewrite chunk system // Paper - optimise collisions // Canvas - Multithreaded Dimension Ticking
     public static final Codec<ResourceKey<Level>> RESOURCE_KEY_CODEC = ResourceKey.codec(Registries.DIMENSION);
     public static final ResourceKey<Level> OVERWORLD = ResourceKey.create(Registries.DIMENSION, ResourceLocation.withDefaultNamespace("overworld"));
     public static final ResourceKey<Level> NETHER = ResourceKey.create(Registries.DIMENSION, ResourceLocation.withDefaultNamespace("the_nether"));
@@ -115,9 +_,9 @@
     public static final int TICKS_PER_DAY = 24000;
     public static final int MAX_ENTITY_SPAWN_Y = 20000000;
     public static final int MIN_ENTITY_SPAWN_Y = -20000000;
-    public final List<TickingBlockEntity> blockEntityTickers = Lists.newArrayList(); // Paper - public
+    public final List<TickingBlockEntity> blockEntityTickers = ObjectLists.synchronize(new ObjectArrayList<>()); // Paper - public // Canvas - syncrhonize && fastutil
     protected final NeighborUpdater neighborUpdater;
-    private final List<TickingBlockEntity> pendingBlockEntityTickers = Lists.newArrayList();
+    private final Set<TickingBlockEntity> pendingBlockEntityTickers = ObjectSets.synchronize(new ObjectLinkedOpenHashSet<>()); // Canvas - fastutil
     private boolean tickingBlockEntities;
     public final Thread thread;
     private final boolean isDebug;
@@ -146,11 +_,11 @@
     public boolean pvpMode;
     public org.bukkit.generator.ChunkGenerator generator;
 
-    public boolean preventPoiUpdated = false; // CraftBukkit - SPIGOT-5710
-    public boolean captureBlockStates = false;
-    public boolean captureTreeGeneration = false;
+    public final AtomicBoolean preventPoiUpdated = new AtomicBoolean(false); // CraftBukkit - SPIGOT-5710 // Canvas - atomic
+    public final AtomicBoolean captureBlockStates = new AtomicBoolean(false); // Canvas - atomic
+    public final AtomicBoolean captureTreeGeneration = new AtomicBoolean(false);
     public boolean isBlockPlaceCancelled = false; // Paper - prevent calling cleanup logic when undoing a block place upon a cancelled BlockPlaceEvent
-    public Map<BlockPos, org.bukkit.craftbukkit.block.CraftBlockState> capturedBlockStates = new java.util.LinkedHashMap<>(); // Paper
+    public Map<BlockPos, org.bukkit.craftbukkit.block.CraftBlockState> capturedBlockStates = new ConcurrentLinkedHashMap.Builder<BlockPos, org.bukkit.craftbukkit.block.CraftBlockState>().maximumWeightedCapacity(Integer.MAX_VALUE).build(); // Paper // Canvas - concurrentlinked
     public Map<BlockPos, BlockEntity> capturedTileEntities = new java.util.LinkedHashMap<>(); // Paper - Retain block place order when capturing blockstates
     public List<net.minecraft.world.entity.item.ItemEntity> captureDrops;
     public final it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap<SpawnCategory> ticksPerSpawnCategory = new it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap<>();
@@ -479,7 +_,11 @@
 
             if ((chunkDiff | chunkYDiff) != 0) {
                 if (chunkDiff != 0) {
-                    lastChunk = level.getChunk(newChunkX, newChunkZ).getSections();
+                    // Canvas start - prevent syncload
+                    @Nullable LevelChunk chunk = level.getChunkIfLoaded(newChunkX, newChunkZ);
+                    if (chunk == null) return miss(clipContext);
+                    lastChunk = chunk.getSections();
+                    // Canvas end
                 }
                 final int sectionY = newChunkY - minSection;
                 lastSection = sectionY >= 0 && sectionY < lastChunk.length ? lastChunk[sectionY].states : null;
@@ -886,6 +_,7 @@
         io.papermc.paper.configuration.WorldConfiguration> paperWorldConfigCreator, // Paper - create paper world config
         java.util.concurrent.Executor executor // Paper - Anti-Xray
     ) {
+        super(dimension.location().toString(), "level thread " + dimension.location()); // Canvas
         // Paper start - getblock optimisations - cache world height/sections
         final DimensionType dimType = dimensionTypeRegistration.value();
         this.minY = dimType.minY();
@@ -1081,7 +_,7 @@
     @Nullable
     public final BlockState getBlockStateIfLoaded(BlockPos pos) {
         // CraftBukkit start - tree generation
-        if (this.captureTreeGeneration) {
+        if (this.captureTreeGeneration.get()) { // Canvas - atomic
             CraftBlockState previous = this.capturedBlockStates.get(pos);
             if (previous != null) {
                 return previous.getHandle();
@@ -1145,7 +_,7 @@
     @Override
     public boolean setBlock(BlockPos pos, BlockState state, int flags, int recursionLeft) {
         // CraftBukkit start - tree generation
-        if (this.captureTreeGeneration) {
+        if (this.captureTreeGeneration.get()) { // Canvas - atomic
             // Paper start - Protect Bedrock and End Portal/Frames from being destroyed
             BlockState type = getBlockState(pos);
             if (!type.isDestroyable()) return false;
@@ -1169,7 +_,7 @@
             Block block = state.getBlock();
             // CraftBukkit start - capture blockstates
             boolean captured = false;
-            if (this.captureBlockStates && !this.capturedBlockStates.containsKey(pos)) {
+            if (this.captureBlockStates.get() && !this.capturedBlockStates.containsKey(pos)) { // Canvas - atomic
                 CraftBlockState blockstate = (CraftBlockState) world.getBlockAt(pos.getX(), pos.getY(), pos.getZ()).getState(); // Paper - use CB getState to get a suitable snapshot
                 blockstate.setFlag(flags); // Paper - set flag
                 this.capturedBlockStates.put(pos.immutable(), blockstate);
@@ -1182,7 +_,7 @@
 
             if (blockState == null) {
                 // CraftBukkit start - remove blockstate if failed (or the same)
-                if (this.captureBlockStates && captured) {
+                if (this.captureBlockStates.get() && captured) { // Canvas - atomic
                     this.capturedBlockStates.remove(pos);
                 }
                 // CraftBukkit end
@@ -1220,7 +_,7 @@
                 */
 
                 // CraftBukkit start
-                if (!this.captureBlockStates) { // Don't notify clients or update physics while capturing blockstates
+                if (!this.captureBlockStates.get() || true) { // Don't notify clients or update physics while capturing blockstates // Canvas - atomic // - always update physics
                     // Modularize client and physic updates
                     // Spigot start
                     try {
@@ -1238,7 +_,7 @@
     }
 
     // CraftBukkit start - Split off from above in order to directly send client and physic updates
-    public void notifyAndUpdatePhysics(BlockPos blockposition, LevelChunk chunk, BlockState oldBlock, BlockState newBlock, BlockState actualBlock, int i, int j) {
+    public synchronized void notifyAndUpdatePhysics(BlockPos blockposition, LevelChunk chunk, BlockState oldBlock, BlockState newBlock, BlockState actualBlock, int i, int j) { // Canvas - synchronize
         BlockState iblockdata = newBlock;
         BlockState iblockdata1 = oldBlock;
         BlockState iblockdata2 = actualBlock;
@@ -1279,7 +_,7 @@
             }
 
             // CraftBukkit start - SPIGOT-5710
-            if (!this.preventPoiUpdated) {
+            if (!this.preventPoiUpdated.get()) { // Canvas - atomic
                 this.onBlockStateChange(blockposition, iblockdata1, iblockdata2);
             }
             // CraftBukkit end
@@ -1395,7 +_,7 @@
     @Override
     public BlockState getBlockState(BlockPos pos) {
         // CraftBukkit start - tree generation
-        if (this.captureTreeGeneration) {
+        if (this.captureTreeGeneration.get()) { // Canvas - atomic
             CraftBlockState previous = this.capturedBlockStates.get(pos); // Paper
             if (previous != null) {
                 return previous.getHandle();
@@ -1503,8 +_,7 @@
         (this.tickingBlockEntities ? this.pendingBlockEntityTickers : this.blockEntityTickers).add(ticker);
     }
 
-    protected void tickBlockEntities() {
-        ProfilerFiller profilerFiller = Profiler.get();
+    protected void tickBlockEntities(ProfilerFiller profilerFiller) { // Canvas - reduce the amt of times we run Profiler.get for no reason
         profilerFiller.push("blockEntities");
         this.tickingBlockEntities = true;
         if (!this.pendingBlockEntityTickers.isEmpty()) {
@@ -1522,9 +_,10 @@
             this.tileTickPosition = (this.tileTickPosition < this.blockEntityTickers.size()) ? this.tileTickPosition : 0;
             TickingBlockEntity tickingBlockEntity = this.blockEntityTickers.get(this.tileTickPosition);
             // Spigot end
+            if (tickingBlockEntity == null) continue; // Canvas - NPE
             if (tickingBlockEntity.isRemoved()) {
                 toRemove.add(tickingBlockEntity); // Paper - Fix MC-117075; use removeAll
-            } else if (runsNormally && this.shouldTickBlocksAt(tickingBlockEntity.getPos())) {
+            } else if (runsNormally && this.shouldTickBlockPosFilterNull(this, tickingBlockEntity.getPos())) { // Canvas
                 tickingBlockEntity.tick();
                 // Paper start - rewrite chunk system
                 if ((++tickedEntities & 7) == 0) {
@@ -1539,6 +_,15 @@
         profilerFiller.pop();
         this.spigotConfig.currentPrimedTnt = 0; // Spigot
     }
+    // Canvas start
+
+    private boolean shouldTickBlockPosFilterNull(Level instance, BlockPos pos) {
+        if (pos == null) {
+            return false;
+        }
+        return instance.shouldTickBlocksAt(pos);
+    }
+    // Canvas end
 
     public <T extends Entity> void guardEntityTick(Consumer<T> consumerEntity, T entity) {
         try {
@@ -1714,7 +_,7 @@
         BlockPos blockPos = blockEntity.getBlockPos();
         if (!this.isOutsideBuildHeight(blockPos)) {
             // CraftBukkit start
-            if (this.captureBlockStates) {
+            if (this.captureBlockStates.get()) { // Canvas - atomic
                 this.capturedTileEntities.put(blockPos.immutable(), blockEntity);
                 return;
             }
@@ -1783,8 +_,14 @@
     }
 
     @Override
-    public void close() throws IOException {
-        this.getChunkSource().close();
+    // Canvas start - Multithreaded Dimension Ticking
+    public void close() {
+        try {
+            this.getChunkSource().close();
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    // Canvas end
     }
 
     @Nullable
@@ -1950,7 +_,7 @@
         return this.levelData;
     }
 
-    public abstract TickRateManager tickRateManager();
+    public abstract ServerTickRateManager tickRateManager(); // Canvas
 
     public float getThunderLevel(float partialTick) {
         return Mth.lerp(partialTick, this.oThunderLevel, this.thunderLevel) * this.getRainLevel(partialTick);
