--- a/net/minecraft/world/level/Level.java
+++ b/net/minecraft/world/level/Level.java
@@ -4,14 +_,21 @@
 import com.mojang.serialization.Codec;
 import java.io.IOException;
 import java.util.Collection;
-import java.util.Iterator;
+import java.util.LinkedHashMap;
 import java.util.List;
+import java.util.Set;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.region.ServerRegions;
+import io.canvasmc.canvas.server.level.MinecraftServerWorld;
+import io.canvasmc.canvas.util.ThreadLocalRandomSource;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
+import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
+import it.unimi.dsi.fastutil.objects.ObjectLists;
+import it.unimi.dsi.fastutil.objects.ObjectSets;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
-import net.minecraft.ReportedException;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -24,26 +_,24 @@
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
-import io.papermc.paper.util.MCUtil;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.FullChunkStatus;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
-import net.minecraft.util.AbortableIterationConsumer;
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.StringRepresentable;
 import net.minecraft.util.profiling.Profiler;
 import net.minecraft.util.profiling.ProfilerFiller;
 import net.minecraft.world.DifficultyInstance;
-import net.minecraft.world.TickRateManager;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.DamageSources;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.boss.EnderDragonPart;
-import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
+import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.alchemy.PotionBrewing;
@@ -83,7 +_,6 @@
 import net.minecraft.world.scores.Scoreboard;
 
 // CraftBukkit start
-import java.util.HashMap;
 import java.util.Map;
 import net.minecraft.network.protocol.game.ClientboundSetBorderCenterPacket;
 import net.minecraft.network.protocol.game.ClientboundSetBorderLerpSizePacket;
@@ -103,7 +_,7 @@
 import org.bukkit.event.block.BlockPhysicsEvent;
 // CraftBukkit end
 
-public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemLevel, ca.spottedleaf.moonrise.patches.chunk_system.world.ChunkSystemEntityGetter { // Paper - rewrite chunk system // Paper - optimise collisions
+public abstract class Level extends MinecraftServerWorld implements LevelAccessor, AutoCloseable, ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemLevel, ca.spottedleaf.moonrise.patches.chunk_system.world.ChunkSystemEntityGetter { // Paper - rewrite chunk system // Paper - optimise collisions // Canvas - Multithreaded Dimension Ticking
     public static final Codec<ResourceKey<Level>> RESOURCE_KEY_CODEC = ResourceKey.codec(Registries.DIMENSION);
     public static final ResourceKey<Level> OVERWORLD = ResourceKey.create(Registries.DIMENSION, ResourceLocation.withDefaultNamespace("overworld"));
     public static final ResourceKey<Level> NETHER = ResourceKey.create(Registries.DIMENSION, ResourceLocation.withDefaultNamespace("the_nether"));
@@ -115,9 +_,9 @@
     public static final int TICKS_PER_DAY = 24000;
     public static final int MAX_ENTITY_SPAWN_Y = 20000000;
     public static final int MIN_ENTITY_SPAWN_Y = -20000000;
-    public final List<TickingBlockEntity> blockEntityTickers = Lists.newArrayList(); // Paper - public
-    protected final NeighborUpdater neighborUpdater;
-    private final List<TickingBlockEntity> pendingBlockEntityTickers = Lists.newArrayList();
+    public final List<TickingBlockEntity> blockEntityTickers = ObjectLists.synchronize(new ObjectArrayList<>()); // Paper - public // Canvas - syncrhonize && fastutil
+    public final ThreadLocal<NeighborUpdater> neighborUpdater = ThreadLocal.withInitial(() -> new CollectingNeighborUpdater(this, MinecraftServer.getServer().getMaxChainedNeighborUpdates())); // Canvas - protected -> public // threadlocal
+    private final Set<TickingBlockEntity> pendingBlockEntityTickers = ObjectSets.synchronize(new ObjectLinkedOpenHashSet<>()); // Canvas - fastutil
     private boolean tickingBlockEntities;
     public final Thread thread;
     private final boolean isDebug;
@@ -128,7 +_,7 @@
     public float rainLevel;
     protected float oThunderLevel;
     public float thunderLevel;
-    public final RandomSource random = new ca.spottedleaf.moonrise.common.util.ThreadUnsafeRandom(net.minecraft.world.level.levelgen.RandomSupport.generateUniqueSeed()); // Paper - replace random
+    public final RandomSource random = ThreadLocalRandomSource.INSTANCE; // Paper - replace random // Canvas - threadsafe
     @Deprecated
     private final RandomSource threadSafeRandom = RandomSource.createThreadSafe();
     private final Holder<DimensionType> dimensionTypeRegistration;
@@ -140,27 +_,35 @@
     private final RegistryAccess registryAccess;
     private final DamageSources damageSources;
     private long subTickCount;
+    // Canvas start - Threaded Regions
+    public List<ServerPlayer> getLocalPlayers() {
+        return ServerRegions.getTickData(this.level()).getLocalPlayers();
+    }
+    public List<ServerPlayer> getLocalPlayers(ChunkPos pos) {
+        return ServerRegions.getTickData(this.level()).getLocalPlayers(pos);
+    }
+    // Canvas end
 
     // CraftBukkit start Added the following
     private final CraftWorld world;
     public boolean pvpMode;
     public org.bukkit.generator.ChunkGenerator generator;
 
-    public boolean preventPoiUpdated = false; // CraftBukkit - SPIGOT-5710
-    public boolean captureBlockStates = false;
-    public boolean captureTreeGeneration = false;
-    public boolean isBlockPlaceCancelled = false; // Paper - prevent calling cleanup logic when undoing a block place upon a cancelled BlockPlaceEvent
-    public Map<BlockPos, org.bukkit.craftbukkit.block.CraftBlockState> capturedBlockStates = new java.util.LinkedHashMap<>(); // Paper
-    public Map<BlockPos, BlockEntity> capturedTileEntities = new java.util.LinkedHashMap<>(); // Paper - Retain block place order when capturing blockstates
-    public List<net.minecraft.world.entity.item.ItemEntity> captureDrops;
+    public final ThreadLocal<Boolean> preventPoiUpdated = ThreadLocal.withInitial(() -> false); // CraftBukkit - SPIGOT-5710 // Canvas - threadlocal
+    public final ThreadLocal<Boolean> captureBlockStates = ThreadLocal.withInitial(() -> false); // Canvas - threadlocal
+    public final ThreadLocal<Boolean> captureTreeGeneration = ThreadLocal.withInitial(() -> false); // Canvas - threadlocal
+    public final ThreadLocal<Boolean> isBlockPlaceCancelled = ThreadLocal.withInitial(() -> false); // Paper - prevent calling cleanup logic when undoing a block place upon a cancelled BlockPlaceEvent // Canvas - threadlocal
+    public final ThreadLocal<Map<BlockPos, CraftBlockState>> capturedBlockStates = ThreadLocal.withInitial(() -> new LinkedHashMap<>()); // Paper // Canvas - threadlocal
+    public final ThreadLocal<Map<BlockPos, BlockEntity>> capturedTileEntities = ThreadLocal.withInitial(() -> new LinkedHashMap<>()); // Paper - Retain block place order when capturing blockstates // Canvas - threadlocal
+    public final ThreadLocal<List<ItemEntity>> captureDrops = new ThreadLocal<List<ItemEntity>>(); // Canvas - threadlocal
     public final it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap<SpawnCategory> ticksPerSpawnCategory = new it.unimi.dsi.fastutil.objects.Object2LongOpenHashMap<>();
-    // Paper start
+    /* // Paper start // Canvas - Threaded Regions
     public int wakeupInactiveRemainingAnimals;
     public int wakeupInactiveRemainingFlying;
     public int wakeupInactiveRemainingMonsters;
     public int wakeupInactiveRemainingVillagers;
-    // Paper end
-    public boolean populating;
+    */ // Paper end // Canvas - Threaded Regions
+    public final ThreadLocal<Boolean> populating = ThreadLocal.withInitial(() -> false); // Canvas - threadlocal
     public final org.spigotmc.SpigotWorldConfig spigotConfig; // Spigot
     // Paper start - add paper world config
     private final io.papermc.paper.configuration.WorldConfiguration paperConfig;
@@ -175,8 +_,8 @@
     private org.spigotmc.TickLimiter entityLimiter;
     private org.spigotmc.TickLimiter tileLimiter;
     private int tileTickPosition;
-    public final Map<ServerExplosion.CacheKey, Float> explosionDensityCache = new HashMap<>(); // Paper - Optimize explosions
-    public java.util.ArrayDeque<net.minecraft.world.level.block.RedstoneTorchBlock.Toggle> redstoneUpdateInfos; // Paper - Faster redstone torch rapid clock removal; Move from Map in BlockRedstoneTorch to here
+    // public final Map<ServerExplosion.CacheKey, Float> explosionDensityCache = new HashMap<>(); // Paper - Optimize explosions // Canvas - Threaded Regions
+    // public java.util.ArrayDeque<net.minecraft.world.level.block.RedstoneTorchBlock.Toggle> redstoneUpdateInfos; // Paper - Faster redstone torch rapid clock removal; Move from Map in BlockRedstoneTorch to here // Canvas - Threaded Regions
 
     // Purpur start - Add adjustable breeding cooldown to config
     private com.google.common.cache.Cache<BreedingCooldownPair, Object> playerBreedingCooldowns;
@@ -479,7 +_,11 @@
 
             if ((chunkDiff | chunkYDiff) != 0) {
                 if (chunkDiff != 0) {
-                    lastChunk = level.getChunk(newChunkX, newChunkZ).getSections();
+                    // Canvas start - prevent syncload
+                    @Nullable LevelChunk chunk = level.getChunkIfLoaded(newChunkX, newChunkZ);
+                    if (chunk == null) return miss(clipContext);
+                    lastChunk = chunk.getSections();
+                    // Canvas end
                 }
                 final int sectionY = newChunkY - minSection;
                 lastSection = sectionY >= 0 && sectionY < lastChunk.length ? lastChunk[sectionY].states : null;
@@ -886,6 +_,7 @@
         io.papermc.paper.configuration.WorldConfiguration> paperWorldConfigCreator, // Paper - create paper world config
         java.util.concurrent.Executor executor // Paper - Anti-Xray
     ) {
+        super(dimension.location().toString(), "level thread " + dimension.location()); // Canvas
         // Paper start - getblock optimisations - cache world height/sections
         final DimensionType dimType = dimensionTypeRegistration.value();
         this.minY = dimType.minY();
@@ -934,7 +_,7 @@
         this.thread = Thread.currentThread();
         this.biomeManager = new BiomeManager(this, biomeZoomSeed);
         this.isDebug = isDebug;
-        this.neighborUpdater = new CollectingNeighborUpdater(this, maxChainedNeighborUpdates);
+        // Canvas - threadlocal neighbor updator
         this.registryAccess = registryAccess;
         this.damageSources = new DamageSources(registryAccess);
 
@@ -1081,8 +_,8 @@
     @Nullable
     public final BlockState getBlockStateIfLoaded(BlockPos pos) {
         // CraftBukkit start - tree generation
-        if (this.captureTreeGeneration) {
-            CraftBlockState previous = this.capturedBlockStates.get(pos);
+        if (this.captureTreeGeneration.get()) { // Canvas - threadlocal
+            CraftBlockState previous = this.capturedBlockStates.get().get(pos); // Canvas - threadlocal
             if (previous != null) {
                 return previous.getHandle();
             }
@@ -1145,15 +_,15 @@
     @Override
     public boolean setBlock(BlockPos pos, BlockState state, int flags, int recursionLeft) {
         // CraftBukkit start - tree generation
-        if (this.captureTreeGeneration) {
+        if (this.captureTreeGeneration.get()) { // Canvas - threadlocal
             // Paper start - Protect Bedrock and End Portal/Frames from being destroyed
             BlockState type = getBlockState(pos);
             if (!type.isDestroyable()) return false;
             // Paper end - Protect Bedrock and End Portal/Frames from being destroyed
-            CraftBlockState blockstate = this.capturedBlockStates.get(pos);
+            CraftBlockState blockstate = this.capturedBlockStates.get().get(pos); // Canvas - threadlocal
             if (blockstate == null) {
                 blockstate = CapturedBlockState.getTreeBlockState(this, pos, flags);
-                this.capturedBlockStates.put(pos.immutable(), blockstate);
+                this.capturedBlockStates.get().put(pos.immutable(), blockstate); // Canvas - threadlocal
             }
             blockstate.setData(state);
             blockstate.setFlag(flags);
@@ -1169,10 +_,10 @@
             Block block = state.getBlock();
             // CraftBukkit start - capture blockstates
             boolean captured = false;
-            if (this.captureBlockStates && !this.capturedBlockStates.containsKey(pos)) {
+            if (this.captureBlockStates.get() && !this.capturedBlockStates.get().containsKey(pos)) { // Canvas - threadlocal
                 CraftBlockState blockstate = (CraftBlockState) world.getBlockAt(pos.getX(), pos.getY(), pos.getZ()).getState(); // Paper - use CB getState to get a suitable snapshot
                 blockstate.setFlag(flags); // Paper - set flag
-                this.capturedBlockStates.put(pos.immutable(), blockstate);
+                this.capturedBlockStates.get().put(pos.immutable(), blockstate); // Canvas - threadlocal
                 captured = true;
             }
             // CraftBukkit end
@@ -1182,8 +_,8 @@
 
             if (blockState == null) {
                 // CraftBukkit start - remove blockstate if failed (or the same)
-                if (this.captureBlockStates && captured) {
-                    this.capturedBlockStates.remove(pos);
+                if (this.captureBlockStates.get() && captured) { // Canvas - threadlocal
+                    this.capturedBlockStates.get().remove(pos); // Canvas - threadlocal
                 }
                 // CraftBukkit end
                 return false;
@@ -1220,7 +_,7 @@
                 */
 
                 // CraftBukkit start
-                if (!this.captureBlockStates) { // Don't notify clients or update physics while capturing blockstates
+                if (!this.captureBlockStates.get()) { // Don't notify clients or update physics while capturing blockstates // Canvas - threadlocal
                     // Modularize client and physic updates
                     // Spigot start
                     try {
@@ -1279,7 +_,7 @@
             }
 
             // CraftBukkit start - SPIGOT-5710
-            if (!this.preventPoiUpdated) {
+            if (!this.preventPoiUpdated.get()) { // Canvas - threadlocal
                 this.onBlockStateChange(blockposition, iblockdata1, iblockdata2);
             }
             // CraftBukkit end
@@ -1368,7 +_,7 @@
 
     @Override
     public void neighborShapeChanged(Direction direction, BlockPos pos, BlockPos neighborPos, BlockState neighborState, int flags, int recursionLeft) {
-        this.neighborUpdater.shapeUpdate(direction, neighborState, pos, neighborPos, flags, recursionLeft);
+        this.neighborUpdater.get().shapeUpdate(direction, neighborState, pos, neighborPos, flags, recursionLeft); // Canvas - threadlocal
     }
 
     @Override
@@ -1395,8 +_,8 @@
     @Override
     public BlockState getBlockState(BlockPos pos) {
         // CraftBukkit start - tree generation
-        if (this.captureTreeGeneration) {
-            CraftBlockState previous = this.capturedBlockStates.get(pos); // Paper
+        if (this.captureTreeGeneration.get()) { // Canvas - threadlocal
+            CraftBlockState previous = this.capturedBlockStates.get().get(pos); // Paper // Canvas - threadlocal
             if (previous != null) {
                 return previous.getHandle();
             }
@@ -1500,17 +_,17 @@
     }
 
     public void addBlockEntityTicker(TickingBlockEntity ticker) {
-        (this.tickingBlockEntities ? this.pendingBlockEntityTickers : this.blockEntityTickers).add(ticker);
+        ServerRegions.getTickData((ServerLevel) this).addBlockEntityTicker(ticker); // Canvas - Threaded Regions
     }
 
-    protected void tickBlockEntities() {
-        ProfilerFiller profilerFiller = Profiler.get();
+    protected void tickBlockEntities(ProfilerFiller profilerFiller) { // Canvas - reduce the amt of times we run Profiler.get for no reason
         profilerFiller.push("blockEntities");
-        this.tickingBlockEntities = true;
-        if (!this.pendingBlockEntityTickers.isEmpty()) {
-            this.blockEntityTickers.addAll(this.pendingBlockEntityTickers);
-            this.pendingBlockEntityTickers.clear();
-        }
+        // Canvas start - Threaded Regions
+        ServerRegions.WorldTickData worldTickData = ServerRegions.getTickData((ServerLevel) this);
+        worldTickData.setTickingBlockEntities(true);
+        worldTickData.pushPendingTickingBlockEntities();
+        List<TickingBlockEntity> blockEntityTickers = worldTickData.getBlockEntityTickers();
+        // Canvas end
 
         // Spigot start
         boolean runsNormally = this.tickRateManager().runsNormally();
@@ -1518,13 +_,13 @@
         int tickedEntities = 0; // Paper - rewrite chunk system
         var toRemove = new it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<TickingBlockEntity>(); // Paper - Fix MC-117075; use removeAll
         toRemove.add(null); // Paper - Fix MC-117075
-        for (tileTickPosition = 0; tileTickPosition < this.blockEntityTickers.size(); tileTickPosition++) { // Paper - Disable tick limiters
-            this.tileTickPosition = (this.tileTickPosition < this.blockEntityTickers.size()) ? this.tileTickPosition : 0;
-            TickingBlockEntity tickingBlockEntity = this.blockEntityTickers.get(this.tileTickPosition);
+        for (int i = 0; i < blockEntityTickers.size(); i++) { // Paper - Disable tick limiters // Canvas - Threaded Regions
+            TickingBlockEntity tickingBlockEntity = blockEntityTickers.get(i); // Canvas - Threaded Regions
             // Spigot end
+            if (tickingBlockEntity == null) continue; // Canvas - NPE
             if (tickingBlockEntity.isRemoved()) {
                 toRemove.add(tickingBlockEntity); // Paper - Fix MC-117075; use removeAll
-            } else if (runsNormally && this.shouldTickBlocksAt(tickingBlockEntity.getPos())) {
+            } else if (runsNormally && this.shouldTickBlockPosFilterNull(this, tickingBlockEntity.getPos())) { // Canvas
                 tickingBlockEntity.tick();
                 // Paper start - rewrite chunk system
                 if ((++tickedEntities & 7) == 0) {
@@ -1533,12 +_,21 @@
                 // Paper end - rewrite chunk system
             }
         }
-        this.blockEntityTickers.removeAll(toRemove); // Paper - Fix MC-117075
+        blockEntityTickers.removeAll(toRemove); // Paper - Fix MC-117075 // Canvas - Threaded Regions
 
-        this.tickingBlockEntities = false;
+        worldTickData.setTickingBlockEntities(false); // Canvas - Threaded Regions
         profilerFiller.pop();
-        this.spigotConfig.currentPrimedTnt = 0; // Spigot
-    }
+        worldTickData.currentPrimedTnt = 0; // Spigot // Canvas - Threaded Regions
+    }
+    // Canvas start
+
+    private boolean shouldTickBlockPosFilterNull(Level instance, BlockPos pos) {
+        if (pos == null) {
+            return false;
+        }
+        return instance.shouldTickBlocksAt(pos);
+    }
+    // Canvas end
 
     public <T extends Entity> void guardEntityTick(Consumer<T> consumerEntity, T entity) {
         try {
@@ -1696,7 +_,7 @@
     public BlockEntity getBlockEntity(BlockPos pos, boolean validate) {
         // Paper start - Perf: Optimize capturedTileEntities lookup
         net.minecraft.world.level.block.entity.BlockEntity blockEntity;
-        if (!this.capturedTileEntities.isEmpty() && (blockEntity = this.capturedTileEntities.get(pos)) != null) {
+        if (!this.capturedTileEntities.get().isEmpty() && (blockEntity = this.capturedTileEntities.get().get(pos)) != null) { // Canvas - threadlocal
             return blockEntity;
         }
         // Paper end - Perf: Optimize capturedTileEntities lookup
@@ -1714,8 +_,8 @@
         BlockPos blockPos = blockEntity.getBlockPos();
         if (!this.isOutsideBuildHeight(blockPos)) {
             // CraftBukkit start
-            if (this.captureBlockStates) {
-                this.capturedTileEntities.put(blockPos.immutable(), blockEntity);
+            if (this.captureBlockStates.get()) { // Canvas - threadlocal
+                this.capturedTileEntities.get().put(blockPos.immutable(), blockEntity); // Canvas - threadlocal
                 return;
             }
             // CraftBukkit end
@@ -1783,8 +_,14 @@
     }
 
     @Override
-    public void close() throws IOException {
-        this.getChunkSource().close();
+    // Canvas start - Multithreaded Dimension Ticking
+    public void close() {
+        try {
+            this.getChunkSource().close();
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    // Canvas end
     }
 
     @Nullable
@@ -1923,6 +_,12 @@
     public void disconnect() {
     }
 
+    // Canvas start - Threaded Regions
+    public long getRedstoneGameTime() {
+        return ServerRegions.getTickData((ServerLevel) this).getRedstoneGameTime();
+    }
+
+    // Canvas end
     public long getGameTime() {
         return this.levelData.getGameTime();
     }
@@ -1950,7 +_,7 @@
         return this.levelData;
     }
 
-    public abstract TickRateManager tickRateManager();
+    // public abstract TickRateManager tickRateManager(); // Canvas - clashes with super
 
     public float getThunderLevel(float partialTick) {
         return Mth.lerp(partialTick, this.oThunderLevel, this.thunderLevel) * this.getRainLevel(partialTick);
