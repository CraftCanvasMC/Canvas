--- a/net/minecraft/world/level/levelgen/Aquifer.java
+++ b/net/minecraft/world/level/levelgen/Aquifer.java
@@ -2,6 +_,7 @@
 
 import java.util.Arrays;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.util.RandomUtils;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.util.Mth;
@@ -85,6 +_,15 @@
         private final int minGridZ;
         private final int gridSizeX;
         private final int gridSizeZ;
+        // Canvas start
+        private int c2me$dist1;
+        private int c2me$dist2;
+        private int c2me$dist3;
+        private long c2me$pos1;
+        private long c2me$pos2;
+        private long c2me$pos3;
+        private double c2me$mutableDoubleThingy;
+        // Canvas end
         private static final int[][] SURFACE_SAMPLING_OFFSETS_IN_CHUNKS = new int[][]{
             {0, 0}, {-2, -1}, {-1, -1}, {0, -1}, {1, -1}, {-3, 0}, {-2, 0}, {-1, 0}, {1, 0}, {-2, 1}, {-1, 1}, {0, 1}, {1, 1}
         };
@@ -120,6 +_,35 @@
             this.aquiferCache = new Aquifer.FluidStatus[i4];
             this.aquiferLocationCache = new long[i4];
             Arrays.fill(this.aquiferLocationCache, Long.MAX_VALUE);
+            // preload position cache
+            if (this.aquiferLocationCache.length % (this.gridSizeX * this.gridSizeZ) != 0) {
+                throw new AssertionError("Array length");
+            }
+
+            int sizeY = this.aquiferLocationCache.length / (this.gridSizeX * this.gridSizeZ);
+
+            final RandomSource random = RandomUtils.getRandom(this.positionalRandomFactory);
+            // index: y, z, x
+            for (int y = 0; y < sizeY; y++) {
+                for (int z = 0; z < this.gridSizeZ; z++) {
+                    for (int x = 0; x < this.gridSizeX; x++) {
+                        final int x1 = x + this.minGridX;
+                        final int y1 = y + this.minGridY;
+                        final int z1 = z + this.minGridZ;
+                        RandomUtils.derive(this.positionalRandomFactory, random, x1, y1, z1);
+                        int x2 = x1 * 16 + random.nextInt(10);
+                        int y2 = y1 * 12 + random.nextInt(9);
+                        int z2 = z1 * 16 + random.nextInt(10);
+                        int index = this.getIndex(x1, y1, z1);
+                        this.aquiferLocationCache[index] = BlockPos.asLong(x2, y2, z2);
+                    }
+                }
+            }
+            for (long blockPosition : this.aquiferLocationCache) {
+                if (blockPosition == Long.MAX_VALUE) {
+                    throw new AssertionError("Array initialization");
+                }
+            }
         }
 
         private int getIndex(int gridX, int gridY, int gridZ) {
@@ -132,6 +_,7 @@
         @Nullable
         @Override
         public BlockState computeSubstance(DensityFunction.FunctionContext context, double substance) {
+            /* // Canvas start - replace
             int i = context.blockX();
             int i1 = context.blockY();
             int i2 = context.blockZ();
@@ -266,6 +_,24 @@
                     }
                 }
             }
+            */
+            int i = context.blockX();
+            int j = context.blockY();
+            int k = context.blockZ();
+            if (substance > 0.0) {
+                this.shouldScheduleFluidUpdate = false;
+                return null;
+            } else {
+                Aquifer.FluidStatus fluidLevel = this.globalFluidPicker.computeFluid(i, j, k);
+                if (fluidLevel.at(j).is(Blocks.LAVA)) {
+                    this.shouldScheduleFluidUpdate = false;
+                    return Blocks.LAVA.defaultBlockState();
+                } else {
+                    aquiferExtracted$refreshDistPosIdx(i, j, k);
+                    return aquiferExtracted$applyPost(context, substance, j, i, k);
+                }
+            }
+            // Canvas end
         }
 
         @Override
@@ -278,64 +_,27 @@
             return 1.0 - Math.abs(secondDistance - firstDistance) / 25.0;
         }
 
+        // Canvas start
         private double calculatePressure(
-            DensityFunction.FunctionContext context, MutableDouble substance, Aquifer.FluidStatus firstFluid, Aquifer.FluidStatus secondFluid
+            DensityFunction.FunctionContext context, MutableDouble substance, Aquifer.FluidStatus fluidLevel, Aquifer.FluidStatus fluidLevel2 // Canvas - rename args
         ) {
             int i = context.blockY();
-            BlockState blockState = firstFluid.at(i);
-            BlockState blockState1 = secondFluid.at(i);
-            if ((!blockState.is(Blocks.LAVA) || !blockState1.is(Blocks.WATER)) && (!blockState.is(Blocks.WATER) || !blockState1.is(Blocks.LAVA))) {
-                int abs = Math.abs(firstFluid.fluidLevel - secondFluid.fluidLevel);
+            BlockState blockState = fluidLevel.at(i);
+            BlockState blockState2 = fluidLevel2.at(i);
+            if ((!blockState.is(Blocks.LAVA) || !blockState2.is(Blocks.WATER)) && (!blockState.is(Blocks.WATER) || !blockState2.is(Blocks.LAVA))) {
+                int abs = Math.abs(fluidLevel.fluidLevel - fluidLevel2.fluidLevel);
                 if (abs == 0) {
                     return 0.0;
                 } else {
-                    double d = 0.5 * (firstFluid.fluidLevel + secondFluid.fluidLevel);
-                    double d1 = i + 0.5 - d;
-                    double d2 = abs / 2.0;
-                    double d3 = 0.0;
-                    double d4 = 2.5;
-                    double d5 = 1.5;
-                    double d6 = 3.0;
-                    double d7 = 10.0;
-                    double d8 = 3.0;
-                    double d9 = d2 - Math.abs(d1);
-                    double d11;
-                    if (d1 > 0.0) {
-                        double d10 = 0.0 + d9;
-                        if (d10 > 0.0) {
-                            d11 = d10 / 1.5;
-                        } else {
-                            d11 = d10 / 2.5;
-                        }
-                    } else {
-                        double d10 = 3.0 + d9;
-                        if (d10 > 0.0) {
-                            d11 = d10 / 3.0;
-                        } else {
-                            d11 = d10 / 10.0;
-                        }
-                    }
-
-                    double d10x = 2.0;
-                    double d12;
-                    if (!(d11 < -2.0) && !(d11 > 2.0)) {
-                        double value = substance.getValue();
-                        if (Double.isNaN(value)) {
-                            double d13 = this.barrierNoise.compute(context);
-                            substance.setValue(d13);
-                            d12 = d13;
-                        } else {
-                            d12 = value;
-                        }
-                    } else {
-                        d12 = 0.0;
-                    }
-
-                    return 2.0 * (d12 + d11);
+                    double d = 0.5 * (double)(fluidLevel.fluidLevel + fluidLevel2.fluidLevel);
+                    final double q = aquiferExtracted$getQ(i, d, abs);
+
+                    return aquiferExtracted$postCalculateDensity(context, substance, q);
                 }
             } else {
                 return 2.0;
             }
+        // Canvas end
         }
 
         private int gridX(int x) {
@@ -350,23 +_,25 @@
             return Math.floorDiv(z, 16);
         }
 
-        private Aquifer.FluidStatus getAquiferStatus(long packedPos) {
-            int x = BlockPos.getX(packedPos);
-            int y = BlockPos.getY(packedPos);
-            int z = BlockPos.getZ(packedPos);
-            int i = this.gridX(x);
-            int i1 = this.gridY(y);
-            int i2 = this.gridZ(z);
-            int index = this.getIndex(i, i1, i2);
-            Aquifer.FluidStatus fluidStatus = this.aquiferCache[index];
-            if (fluidStatus != null) {
-                return fluidStatus;
+        // Canvas start - optimize
+        private Aquifer.FluidStatus getAquiferStatus(long pos) {
+            int i = BlockPos.getX(pos);
+            int j = BlockPos.getY(pos);
+            int k = BlockPos.getZ(pos);
+            int l = i >> 4; // C2ME - inline: floorDiv(i, 16)
+            int m = Math.floorDiv(j, 12); // C2ME - inline
+            int n = k >> 4; // C2ME - inline: floorDiv(k, 16)
+            int o = this.getIndex(l, m, n);
+            Aquifer.FluidStatus fluidLevel = this.aquiferCache[o];
+            if (fluidLevel != null) {
+                return fluidLevel;
             } else {
-                Aquifer.FluidStatus fluidStatus1 = this.computeFluid(x, y, z);
-                this.aquiferCache[index] = fluidStatus1;
-                return fluidStatus1;
+                Aquifer.FluidStatus fluidLevel2 = this.computeFluid(i, j, k);
+                this.aquiferCache[o] = fluidLevel2;
+                return fluidLevel2;
             }
         }
+        // Canvas end
 
         private Aquifer.FluidStatus computeFluid(int x, int y, int z) {
             Aquifer.FluidStatus fluidStatus = this.globalFluidPicker.computeFluid(x, y, z);
@@ -407,21 +_,19 @@
         }
 
         private int computeSurfaceLevel(int x, int y, int z, Aquifer.FluidStatus fluidStatus, int maxSurfaceLevel, boolean fluidPresent) {
-            DensityFunction.SinglePointContext singlePointContext = new DensityFunction.SinglePointContext(x, y, z);
+            // Canvas start
+            DensityFunction.SinglePointContext unblendedNoisePos = new DensityFunction.SinglePointContext(x, y, z);
             double d;
             double d1;
-            if (OverworldBiomeBuilder.isDeepDarkRegion(this.erosion, this.depth, singlePointContext)) {
+            if (OverworldBiomeBuilder.isDeepDarkRegion(this.erosion, this.depth, unblendedNoisePos)) {
                 d = -1.0;
                 d1 = -1.0;
             } else {
                 int i = maxSurfaceLevel + 8 - y;
-                int i1 = 64;
-                double d2 = fluidPresent ? Mth.clampedMap((double)i, 0.0, 64.0, 1.0, 0.0) : 0.0;
-                double d3 = Mth.clamp(this.fluidLevelFloodednessNoise.compute(singlePointContext), -1.0, 1.0);
-                double d4 = Mth.map(d2, 1.0, 0.0, -0.3, 0.8);
-                double d5 = Mth.map(d2, 1.0, 0.0, -0.8, 0.4);
-                d = d3 - d5;
-                d1 = d3 - d4;
+                double f = fluidPresent ? Mth.clampedLerp(1.0, 0.0, ((double) i) / 64.0) : 0.0; // inline
+                double g = Mth.clamp(this.fluidLevelFloodednessNoise.compute(unblendedNoisePos), -1.0, 1.0);
+                d = g + 0.8 + (f - 1.0) * 1.2; // inline
+                d1 = g + 0.3 + (f - 1.0) * 1.1; // inline
             }
 
             int i;
@@ -434,6 +_,7 @@
             }
 
             return i;
+            // Canvas end
         }
 
         private int computeRandomizedFluidSurfaceLevel(int x, int y, int z, int maxSurfaceLevel) {
@@ -466,5 +_,185 @@
 
             return blockState;
         }
+        // Canvas start
+
+        private @org.jetbrains.annotations.Nullable BlockState aquiferExtracted$applyPost(DensityFunction.FunctionContext pos, double density, int j, int i, int k) {
+            Aquifer.FluidStatus fluidLevel2 = this.getAquiferStatus(this.c2me$pos1);
+            double d = similarity(this.c2me$dist1, this.c2me$dist2);
+            BlockState blockState = fluidLevel2.at(j);
+            if (d <= 0.0) {
+                this.shouldScheduleFluidUpdate = d >= FLOWING_UPDATE_SIMULARITY;
+                return blockState;
+            } else if (blockState.is(Blocks.WATER) && this.globalFluidPicker.computeFluid(i, j - 1, k).at(j - 1).is(Blocks.LAVA)) {
+                this.shouldScheduleFluidUpdate = true;
+                return blockState;
+            } else {
+//            MutableDouble mutableDouble = new MutableDouble(Double.NaN); // 234MB/s alloc rate at 480 cps
+                this.c2me$mutableDoubleThingy = Double.NaN;
+                Aquifer.FluidStatus fluidLevel3 = this.getAquiferStatus(this.c2me$pos2);
+                double e = d * this.c2me$calculateDensityModified(pos, fluidLevel2, fluidLevel3);
+                if (density + e > 0.0) {
+                    this.shouldScheduleFluidUpdate = false;
+                    return null;
+                } else {
+                    return aquiferExtracted$getFinalBlockState(pos, density, d, fluidLevel2, fluidLevel3, blockState);
+                }
+            }
+        }
+
+        private BlockState aquiferExtracted$getFinalBlockState(DensityFunction.FunctionContext pos, double density, double d, Aquifer.FluidStatus fluidLevel2, Aquifer.FluidStatus fluidLevel3, BlockState blockState) {
+            Aquifer.FluidStatus fluidLevel4 = this.getAquiferStatus(this.c2me$pos3);
+            double f = similarity(this.c2me$dist1, this.c2me$dist3);
+            if (aquiferExtracted$extractedCheckFG(pos, density, d, fluidLevel2, f, fluidLevel4)) return null;
+
+            double g = similarity(this.c2me$dist2, this.c2me$dist3);
+            if (aquiferExtracted$extractedCheckFG(pos, density, d, fluidLevel3, g, fluidLevel4)) return null;
+
+            this.shouldScheduleFluidUpdate = true;
+            return blockState;
+        }
+
+        private boolean aquiferExtracted$extractedCheckFG(DensityFunction.FunctionContext pos, double density, double d, Aquifer.FluidStatus fluidLevel2, double f, Aquifer.FluidStatus fluidLevel4) {
+            if (f > 0.0) {
+                double g = d * f * this.c2me$calculateDensityModified(pos, fluidLevel2, fluidLevel4);
+                if (density + g > 0.0) {
+                    this.shouldScheduleFluidUpdate = false;
+                    return true;
+                }
+            }
+            return false;
+        }
+
+        private void aquiferExtracted$refreshDistPosIdx(int x, int y, int z) {
+            int gx = (x - 5) >> 4;
+            int gy = Math.floorDiv(y + 1, 12);
+            int gz = (z - 5) >> 4;
+            int dist1 = Integer.MAX_VALUE;
+            int dist2 = Integer.MAX_VALUE;
+            int dist3 = Integer.MAX_VALUE;
+            long pos1 = 0;
+            long pos2 = 0;
+            long pos3 = 0;
+
+            for (int offY = -1; offY <= 1; ++offY) {
+                for (int offZ = 0; offZ <= 1; ++offZ) {
+                    for (int offX = 0; offX <= 1; ++offX) {
+                        int posIdx = this.getIndex(gx + offX, gy + offY, gz + offZ);
+
+                        long position = this.aquiferLocationCache[posIdx];
+
+                        int dx = BlockPos.getX(position) - x;
+                        int dy = BlockPos.getY(position) - y;
+                        int dz = BlockPos.getZ(position) - z;
+                        int dist = dx * dx + dy * dy + dz * dz;
+
+                        // unexplainable branch prediction magic
+                        if (dist3 >= dist) {
+                            pos3 = position;
+                            dist3 = dist;
+                        }
+                        if (dist2 >= dist) {
+                            pos3 = pos2;
+                            dist3 = dist2;
+                            pos2 = position;
+                            dist2 = dist;
+                        }
+                        if (dist1 >= dist) {
+                            pos2 = pos1;
+                            dist2 = dist1;
+                            pos1 = position;
+                            dist1 = dist;
+                        }
+                    }
+                }
+            }
+
+            this.c2me$dist1 = dist1;
+            this.c2me$dist2 = dist2;
+            this.c2me$dist3 = dist3;
+            this.c2me$pos1 = pos1;
+            this.c2me$pos2 = pos2;
+            this.c2me$pos3 = pos3;
+        }
+
+        private double c2me$calculateDensityModified(
+            DensityFunction.FunctionContext pos, Aquifer.FluidStatus fluidLevel, Aquifer.FluidStatus fluidLevel2
+        ) {
+            int i = pos.blockY();
+            BlockState blockState = fluidLevel.at(i);
+            BlockState blockState2 = fluidLevel2.at(i);
+            if ((!blockState.is(Blocks.LAVA) || !blockState2.is(Blocks.WATER)) && (!blockState.is(Blocks.WATER) || !blockState2.is(Blocks.LAVA))) {
+                int j = Math.abs(fluidLevel.fluidLevel - fluidLevel2.fluidLevel);
+                if (j == 0) {
+                    return 0.0;
+                } else {
+                    double d = 0.5 * (double)(fluidLevel.fluidLevel + fluidLevel2.fluidLevel);
+                    final double q = aquiferExtracted$getQ(i, d, j);
+
+                    return aquiferExtracted$postCalculateDensityModified(pos, q);
+                }
+            } else {
+                return 2.0;
+            }
+        }
+
+        private double aquiferExtracted$postCalculateDensity(DensityFunction.FunctionContext pos, MutableDouble mutableDouble, double q) {
+            double r;
+            if (!(q < -2.0) && !(q > 2.0)) {
+                double s = mutableDouble.getValue();
+                if (Double.isNaN(s)) {
+                    double t = this.barrierNoise.compute(pos);
+                    mutableDouble.setValue(t);
+                    r = t;
+                } else {
+                    r = s;
+                }
+            } else {
+                r = 0.0;
+            }
+
+            return 2.0 * (r + q);
+        }
+
+        private double aquiferExtracted$postCalculateDensityModified(DensityFunction.FunctionContext pos, double q) {
+            double r;
+            if (!(q < -2.0) && !(q > 2.0)) {
+                double s = this.c2me$mutableDoubleThingy;
+                if (Double.isNaN(s)) {
+                    double t = this.barrierNoise.compute(pos);
+                    this.c2me$mutableDoubleThingy = t;
+                    r = t;
+                } else {
+                    r = s;
+                }
+            } else {
+                r = 0.0;
+            }
+
+            return 2.0 * (r + q);
+        }
+
+        private static double aquiferExtracted$getQ(double i, double d, double j) {
+            double e = i + 0.5 - d;
+            double f = j / 2.0;
+            double o = f - Math.abs(e);
+            double q;
+            if (e > 0.0) {
+                if (o > 0.0) {
+                    q = o / 1.5;
+                } else {
+                    q = o / 2.5;
+                }
+            } else {
+                double p = 3.0 + o;
+                if (p > 0.0) {
+                    q = p / 3.0;
+                } else {
+                    q = p / 10.0;
+                }
+            }
+            return q;
+        }
+        // Canvas end
     }
 }
