--- a/net/minecraft/world/level/levelgen/structure/structures/DesertPyramidPiece.java
+++ b/net/minecraft/world/level/levelgen/structure/structures/DesertPyramidPiece.java
@@ -1,7 +_,11 @@
 package net.minecraft.world.level.levelgen.structure.structures;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
+import java.util.Set;
+import java.util.concurrent.atomic.AtomicReferenceArray;
+import com.google.common.collect.Sets;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
@@ -23,29 +_,45 @@
 public class DesertPyramidPiece extends ScatteredFeaturePiece {
     public static final int WIDTH = 21;
     public static final int DEPTH = 21;
-    private final boolean[] hasPlacedChest = new boolean[4];
-    private final List<BlockPos> potentialSuspiciousSandWorldPositions = new ArrayList<>();
+    private final AtomicReferenceArray<Boolean> hasPlacedChestAtomic = new AtomicReferenceArray<>(new Boolean[4]); // Canvas
+    private final Set<BlockPos> potentialSuspiciousSandWorldPositions = Sets.newConcurrentHashSet(); // Canvas
     private BlockPos randomCollapsedRoofPos = BlockPos.ZERO;
+    // Canvas start
+    private void onInit() {
+        for(int i = 0; i < this.hasPlacedChestAtomic.length(); ++i) {
+            if (this.hasPlacedChestAtomic.get(i) == null) {
+                this.hasPlacedChestAtomic.set(i, false);
+            }
+        }
+
+    }
+    // Canvas end
 
     public DesertPyramidPiece(RandomSource random, int x, int z) {
         super(StructurePieceType.DESERT_PYRAMID_PIECE, x, 64, z, 21, 15, 21, getRandomHorizontalDirection(random));
+        onInit(); // Canvas
     }
 
     public DesertPyramidPiece(CompoundTag tag) {
         super(StructurePieceType.DESERT_PYRAMID_PIECE, tag);
-        this.hasPlacedChest[0] = tag.getBoolean("hasPlacedChest0");
-        this.hasPlacedChest[1] = tag.getBoolean("hasPlacedChest1");
-        this.hasPlacedChest[2] = tag.getBoolean("hasPlacedChest2");
-        this.hasPlacedChest[3] = tag.getBoolean("hasPlacedChest3");
+        // Canvas start
+        this.hasPlacedChestAtomic.set(0, tag.getBoolean("hasPlacedChest0"));
+        this.hasPlacedChestAtomic.set(1, tag.getBoolean("hasPlacedChest1"));
+        this.hasPlacedChestAtomic.set(2, tag.getBoolean("hasPlacedChest2"));
+        this.hasPlacedChestAtomic.set(3, tag.getBoolean("hasPlacedChest3"));
+        onInit();
+        // Canvas end
     }
 
     @Override
     protected void addAdditionalSaveData(StructurePieceSerializationContext context, CompoundTag tag) {
         super.addAdditionalSaveData(context, tag);
-        tag.putBoolean("hasPlacedChest0", this.hasPlacedChest[0]);
-        tag.putBoolean("hasPlacedChest1", this.hasPlacedChest[1]);
-        tag.putBoolean("hasPlacedChest2", this.hasPlacedChest[2]);
-        tag.putBoolean("hasPlacedChest3", this.hasPlacedChest[3]);
+        // Canvas start
+        tag.putBoolean("hasPlacedChest0", this.hasPlacedChestAtomic.get(0));
+        tag.putBoolean("hasPlacedChest1", this.hasPlacedChestAtomic.get(1));
+        tag.putBoolean("hasPlacedChest2", this.hasPlacedChestAtomic.get(2));
+        tag.putBoolean("hasPlacedChest3", this.hasPlacedChestAtomic.get(3));
+        // Canvas end
     }
 
     @Override
@@ -287,12 +_,12 @@
             this.placeBlock(level, Blocks.CUT_SANDSTONE.defaultBlockState(), 10, -11, 13, box);
 
             for (Direction direction : Direction.Plane.HORIZONTAL) {
-                if (!this.hasPlacedChest[direction.get2DDataValue()]) {
+                if (!this.hasPlacedChestAtomic.get(direction.get2DDataValue())) { // Canvas
                     int i4 = direction.getStepX() * 2;
                     int i5 = direction.getStepZ() * 2;
-                    this.hasPlacedChest[direction.get2DDataValue()] = this.createChest(
+                    this.hasPlacedChestAtomic.set(direction.get2DDataValue(), this.createChest( // Canvas
                         level, box, random, 10 + i4, -11, 10 + i5, BuiltInLootTables.DESERT_PYRAMID
-                    );
+                    )); // Canvas
                 }
             }
 
@@ -419,7 +_,7 @@
         this.randomCollapsedRoofPos = new BlockPos(this.getWorldX(i1, randomInt), this.getWorldY(y), this.getWorldZ(i1, randomInt));
     }
 
-    public List<BlockPos> getPotentialSuspiciousSandWorldPositions() {
+    public Set<BlockPos> getPotentialSuspiciousSandWorldPositions() {
         return this.potentialSuspiciousSandWorldPositions;
     }
 
