--- a/net/minecraft/world/level/levelgen/SurfaceRules.java
+++ b/net/minecraft/world/level/levelgen/SurfaceRules.java
@@ -13,6 +_,7 @@
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.Config;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.Registry;
@@ -185,7 +_,7 @@
 
                 @Override
                 protected boolean compute() {
-                    return this.context.biome.get().is(BiomeConditionSource.this.biomeNameTest);
+                    return this.context.biome.is(BiomeConditionSource.this.biomeNameTest); // Canvas
                 }
             }
 
@@ -281,7 +_,7 @@
         private int minSurfaceLevel;
         long lastUpdateY = -9223372036854775807L;
         final BlockPos.MutableBlockPos pos = new BlockPos.MutableBlockPos();
-        Supplier<Holder<Biome>> biome;
+        Holder<Biome> biome; // Canvas
         public int blockY;
         int waterHeight;
         int stoneDepthBelow;
@@ -314,7 +_,10 @@
 
         protected void updateY(int stoneDepthAbove, int stoneDepthBelow, int waterHeight, int blockX, int blockY, int blockZ) {
             this.lastUpdateY++;
-            this.biome = Suppliers.memoize(() -> this.biomeGetter.apply(this.pos.set(blockX, blockY, blockZ)));
+            // Canvas start
+            this.pos.set(blockX, blockY, blockZ);
+            this.biome = this.biomeGetter.apply(this.pos);
+            // Canvas end
             this.blockY = blockY;
             this.waterHeight = waterHeight;
             this.stoneDepthBelow = stoneDepthBelow;
@@ -390,13 +_,29 @@
             }
         }
 
-        static class SteepMaterialCondition extends SurfaceRules.LazyXZCondition {
+        public static class SteepMaterialCondition extends SurfaceRules.LazyXZCondition { // Canvas - package-private -> public
             SteepMaterialCondition(SurfaceRules.Context context) {
                 super(context);
             }
 
             @Override
             protected boolean compute() {
+                // Canvas start - MC-258859
+                if (Config.INSTANCE.chunks.generation.mc258859) {
+                    int x = this.context.blockX & 15;
+                    int z = this.context.blockZ & 15;
+                    ChunkAccess chunk = this.context.chunk;
+                    int south = chunk.getHeight(Heightmap.Types.WORLD_SURFACE_WG, x, Math.max(z - 1, 0));
+                    int north = chunk.getHeight(Heightmap.Types.WORLD_SURFACE_WG, x, Math.min(z + 1, 15));
+                    if (Math.abs(north - south) >= 4) {
+                        return true;
+                    } else {
+                        int west = chunk.getHeight(Heightmap.Types.WORLD_SURFACE_WG, Math.max(x - 1, 0), z);
+                        int east = chunk.getHeight(Heightmap.Types.WORLD_SURFACE_WG, Math.min(x + 1, 15), z);
+                        return Math.abs(west - east) >= 4;
+                    }
+                }
+                // Canvas end
                 int i = this.context.blockX & 15;
                 int i1 = this.context.blockZ & 15;
                 int max = Math.max(i1 - 1, 0);
@@ -425,7 +_,7 @@
             protected boolean compute() {
                 return this.context
                     .biome
-                    .get()
+                    // .get() // Canvas
                     .value()
                     .coldEnoughToSnow(this.context.pos.set(this.context.blockX, this.context.blockY, this.context.blockZ), this.context.getSeaLevel());
             }
