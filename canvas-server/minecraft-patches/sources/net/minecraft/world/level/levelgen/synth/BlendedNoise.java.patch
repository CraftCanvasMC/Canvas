--- a/net/minecraft/world/level/levelgen/synth/BlendedNoise.java
+++ b/net/minecraft/world/level/levelgen/synth/BlendedNoise.java
@@ -4,8 +_,12 @@
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.lang.foreign.Arena;
+import java.lang.foreign.MemorySegment;
 import java.util.Locale;
 import java.util.stream.IntStream;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.util.BindingsTemplate;
 import net.minecraft.util.KeyDispatchDataCodec;
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
@@ -25,17 +_,24 @@
             .apply(instance, BlendedNoise::createUnseeded)
     );
     public static final KeyDispatchDataCodec<BlendedNoise> CODEC = KeyDispatchDataCodec.of(DATA_CODEC);
-    private final PerlinNoise minLimitNoise;
-    private final PerlinNoise maxLimitNoise;
-    private final PerlinNoise mainNoise;
-    private final double xzMultiplier;
-    private final double yMultiplier;
-    private final double xzFactor;
-    private final double yFactor;
-    private final double smearScaleMultiplier;
-    private final double maxValue;
-    private final double xzScale;
-    private final double yScale;
+    // Canvas start - AT
+    public final PerlinNoise minLimitNoise;
+    public final PerlinNoise maxLimitNoise;
+    public final PerlinNoise mainNoise;
+    public final double xzMultiplier;
+    public final double yMultiplier;
+    public final double xzFactor;
+    public final double yFactor;
+    public final double smearScaleMultiplier;
+    public final double maxValue;
+    public final double xzScale;
+    public final double yScale;
+    // Canvas end
+    // Canvas start
+    private final Arena c2me$arena = Arena.ofAuto();
+    private MemorySegment c2me$samplerData = null;
+    private long c2me$samplerDataPtr;
+    // Canvas end
 
     public static BlendedNoise createUnseeded(double xzScale, double yScale, double xzFactor, double yFactor, double smearScaleMultiplier) {
         return new BlendedNoise(new XoroshiroRandomSource(0L), xzScale, yScale, xzFactor, yFactor, smearScaleMultiplier);
@@ -62,6 +_,12 @@
         this.xzMultiplier = 684.412 * this.xzScale;
         this.yMultiplier = 684.412 * this.yScale;
         this.maxValue = minLimitNoise.maxBrokenValue(this.yMultiplier);
+        // Canvas start
+        if (Config.INSTANCE.chunks.nativeAccelerationEnabled) {
+            this.c2me$samplerData = BindingsTemplate.interpolated_noise_sampler$create(this.c2me$arena, this);
+            this.c2me$samplerDataPtr = this.c2me$samplerData.address();
+        }
+        // Canvas end
     }
 
     @VisibleForTesting
