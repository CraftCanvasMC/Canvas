--- a/net/minecraft/world/level/levelgen/RandomState.java
+++ b/net/minecraft/world/level/levelgen/RandomState.java
@@ -3,6 +_,11 @@
 import java.util.HashMap;
 import java.util.Map;
 import java.util.concurrent.ConcurrentHashMap;
+import com.google.common.base.Stopwatch;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.dfc.common.gen.BytecodeGen;
+import it.unimi.dsi.fastutil.objects.Reference2ReferenceMap;
+import it.unimi.dsi.fastutil.objects.Reference2ReferenceOpenHashMap;
 import net.minecraft.core.Holder;
 import net.minecraft.core.HolderGetter;
 import net.minecraft.core.registries.Registries;
@@ -16,8 +_,8 @@
 public final class RandomState {
     final PositionalRandomFactory random;
     private final HolderGetter<NormalNoise.NoiseParameters> noises;
-    private final NoiseRouter router;
-    private final Climate.Sampler sampler;
+    private NoiseRouter router; // Canvas - mutable
+    private Climate.Sampler sampler; // Canvas - mutable
     private final SurfaceSystem surfaceSystem;
     private final PositionalRandomFactory aquiferRandom;
     private final PositionalRandomFactory oreRandom;
@@ -122,6 +_,40 @@
             this.router.ridges().mapAll(visitor),
             settings.spawnTarget()
         );
+        // Canvas start - dfc
+        if (Config.INSTANCE.chunkGeneration.enableDensityFunctionCompiler) {
+            Stopwatch stopwatch = Stopwatch.createStarted();
+            Reference2ReferenceMap<DensityFunction, DensityFunction> tempCache = new Reference2ReferenceOpenHashMap<>();
+            this.router = new NoiseRouter(
+                BytecodeGen.compile(this.router.barrierNoise(), tempCache),
+                BytecodeGen.compile(this.router.fluidLevelFloodednessNoise(), tempCache),
+                BytecodeGen.compile(this.router.fluidLevelSpreadNoise(), tempCache),
+                BytecodeGen.compile(this.router.lavaNoise(), tempCache),
+                BytecodeGen.compile(this.router.temperature(), tempCache),
+                BytecodeGen.compile(this.router.vegetation(), tempCache),
+                BytecodeGen.compile(this.router.continents(), tempCache),
+                BytecodeGen.compile(this.router.erosion(), tempCache),
+                BytecodeGen.compile(this.router.depth(), tempCache),
+                BytecodeGen.compile(this.router.ridges(), tempCache),
+                BytecodeGen.compile(this.router.initialDensityWithoutJaggedness(), tempCache),
+                BytecodeGen.compile(this.router.finalDensity(), tempCache),
+                BytecodeGen.compile(this.router.veinToggle(), tempCache),
+                BytecodeGen.compile(this.router.veinRidged(), tempCache),
+                BytecodeGen.compile(this.router.veinGap(), tempCache)
+            );
+            this.sampler = new Climate.Sampler(
+                BytecodeGen.compile(this.sampler.temperature(), tempCache),
+                BytecodeGen.compile(this.sampler.humidity(), tempCache),
+                BytecodeGen.compile(this.sampler.continentalness(), tempCache),
+                BytecodeGen.compile(this.sampler.erosion(), tempCache),
+                BytecodeGen.compile(this.sampler.depth(), tempCache),
+                BytecodeGen.compile(this.sampler.weirdness(), tempCache),
+                this.sampler.spawnTarget()
+            );
+            stopwatch.stop();
+            System.out.printf("Density function compilation finished in %s%n", stopwatch);
+        }
+        // Canvas end
     }
 
     public NormalNoise getOrCreateNoise(ResourceKey<NormalNoise.NoiseParameters> resourceKey) {
