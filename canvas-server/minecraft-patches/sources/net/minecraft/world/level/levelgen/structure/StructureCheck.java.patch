--- a/net/minecraft/world/level/levelgen/structure/StructureCheck.java
+++ b/net/minecraft/world/level/levelgen/structure/StructureCheck.java
@@ -10,6 +_,7 @@
 import it.unimi.dsi.fastutil.objects.Object2IntMaps;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.Map;
 import javax.annotation.Nullable;
 import net.minecraft.core.Registry;
@@ -46,6 +_,7 @@
     private final LevelHeightAccessor heightAccessor;
     private final BiomeSource biomeSource;
     private final long seed;
+    private Object mapMutex = new Object(); // Canvas
     private final DataFixer fixerUpper;
     // Paper start - rewrite chunk system
     // make sure to purge entries from the maps to prevent memory leaks
@@ -235,15 +_,12 @@
     }
 
     private void storeFullResults(long chunkPos, Object2IntMap<Structure> structureChunks) {
-        // Paper start - rewrite chunk system
+        // Canvas start
         this.loadedChunksSafe.put(chunkPos, deduplicateEmptyMap(structureChunks));
-        // once we insert into loadedChunks, we don't really need to be very careful about removing everything
-        // from this map, as everything that checks this map uses loadedChunks first
-        // so, one way or another it's a race condition that doesn't matter
-        for (ca.spottedleaf.moonrise.common.map.SynchronisedLong2BooleanMap value : this.featureChecksSafe.values()) {
-            value.remove(chunkPos);
+        synchronized(this.mapMutex) {
+            this.featureChecksSafe.values().forEach((long2BooleanMap) -> long2BooleanMap.remove(chunkPos));
         }
-        // Paper end - rewrite chunk system
+        // Canvas end
     }
 
     public void incrementReference(ChunkPos pos, Structure structure) {
