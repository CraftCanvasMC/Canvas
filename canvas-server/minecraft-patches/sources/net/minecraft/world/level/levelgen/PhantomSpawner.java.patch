--- a/net/minecraft/world/level/levelgen/PhantomSpawner.java
+++ b/net/minecraft/world/level/levelgen/PhantomSpawner.java
@@ -1,5 +_,6 @@
 package net.minecraft.world.level.levelgen;
 
+import io.canvasmc.canvas.region.ServerRegions;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
@@ -19,7 +_,7 @@
 import net.minecraft.world.level.material.FluidState;
 
 public class PhantomSpawner implements CustomSpawner {
-    private int nextTick;
+    // private int nextTick; // Canvas - Threaded Regions
 
     @Override
     public int tick(ServerLevel level, boolean spawnEnemies, boolean spawnFriendlies) {
@@ -34,21 +_,22 @@
             }
             // Paper end - Ability to control player's insomnia and phantoms
             RandomSource randomSource = level.random;
-            this.nextTick--;
-            if (this.nextTick > 0) {
+            ServerRegions.WorldTickData tickData = ServerRegions.getTickData(level); // Canvas - Threaded Regions
+            tickData.phantomSpawnerNextTick--; // Canvas - Threaded Regions
+            if (tickData.phantomSpawnerNextTick > 0) { // Canvas - Threaded Regions
                 return 0;
             } else {
                 // Paper start - Ability to control player's insomnia and phantoms
                 int spawnAttemptMinSeconds = level.paperConfig().entities.behavior.phantomsSpawnAttemptMinSeconds;
                 int spawnAttemptMaxSeconds = level.paperConfig().entities.behavior.phantomsSpawnAttemptMaxSeconds;
-                this.nextTick += (spawnAttemptMinSeconds + randomSource.nextInt(spawnAttemptMaxSeconds - spawnAttemptMinSeconds + 1)) * 20;
+                tickData.phantomSpawnerNextTick += (spawnAttemptMinSeconds + randomSource.nextInt(spawnAttemptMaxSeconds - spawnAttemptMinSeconds + 1)) * 20; // Canvas - Threaded Regions
                 // Paper end - Ability to control player's insomnia and phantoms
                 if (level.getSkyDarken() < level.purpurConfig.phantomSpawnMinSkyDarkness && level.dimensionType().hasSkyLight()) { // Purpur - Add phantom spawning options
                     return 0;
                 } else {
                     int i = 0;
 
-                    for (ServerPlayer serverPlayer : level.players()) {
+                    for (ServerPlayer serverPlayer : level.getLocalPlayers()) { // Canvas - Threaded Regions
                         if (!serverPlayer.isSpectator() && (!level.paperConfig().entities.behavior.phantomsDoNotSpawnOnCreativePlayers || !serverPlayer.isCreative())) { // Paper - Add phantom creative and insomniac controls
                             BlockPos blockPos = serverPlayer.blockPosition();
                             if (!level.dimensionType().hasSkyLight() || (!level.purpurConfig.phantomSpawnOnlyAboveSeaLevel || blockPos.getY() >= level.getSeaLevel()) && (!level.purpurConfig.phantomSpawnOnlyWithVisibleSky || level.canSeeSky(blockPos))) { // Purpur - Add phantom spawning options
