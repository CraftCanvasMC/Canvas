--- a/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -10,9 +_,12 @@
 import java.util.OptionalInt;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.Executor;
+import java.util.concurrent.Executors;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.Config;
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
@@ -45,6 +_,7 @@
 import net.minecraft.world.level.levelgen.carver.CarvingContext;
 import net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver;
 import org.apache.commons.lang3.mutable.MutableObject;
+import org.jetbrains.annotations.NotNull;
 
 public final class NoiseBasedChunkGenerator extends ChunkGenerator {
     public static final MapCodec<NoiseBasedChunkGenerator> CODEC = RecordCodecBuilder.mapCodec(
@@ -54,6 +_,7 @@
             )
             .apply(instance, instance.stable(NoiseBasedChunkGenerator::new))
     );
+    public static final Executor EXECUTOR = Config.INSTANCE.chunks.runNoiseFillAsync ? Executors.newThreadPerTaskExecutor(Thread.ofVirtual().name("wgen_fill").factory()) : Runnable::run; // Canvas - optimize noise
     private static final BlockState AIR = Blocks.AIR.defaultBlockState();
     public final Holder<NoiseGeneratorSettings> settings;
     private final Supplier<Aquifer.FluidPicker> globalFluidPicker;
@@ -65,11 +_,13 @@
     }
 
     private static Aquifer.FluidPicker createFluidPicker(NoiseGeneratorSettings settings) {
-        Aquifer.FluidStatus fluidStatus = new Aquifer.FluidStatus(-54, Blocks.LAVA.defaultBlockState());
-        int seaLevel = settings.seaLevel();
-        Aquifer.FluidStatus fluidStatus1 = new Aquifer.FluidStatus(seaLevel, settings.defaultFluid());
-        Aquifer.FluidStatus fluidStatus2 = new Aquifer.FluidStatus(DimensionType.MIN_Y * 2, Blocks.AIR.defaultBlockState());
-        return (x, y, z) -> y < Math.min(-54, seaLevel) ? fluidStatus : fluidStatus1;
+        // Canvas start - optimize
+        Aquifer.FluidStatus fluidLevel = new Aquifer.FluidStatus(-54, Blocks.LAVA.defaultBlockState());
+        int i = settings.seaLevel();
+        Aquifer.FluidStatus fluidLevel2 = new Aquifer.FluidStatus(i, settings.defaultFluid());
+        final int min = Math.min(-54, i);
+        return (j, k, lx) -> k < min ? fluidLevel : fluidLevel2;
+        // Canvas end
     }
 
     @Override
@@ -77,7 +_,7 @@
         return CompletableFuture.supplyAsync(() -> {
             this.doCreateBiomes(blender, randomState, structureManager, chunk);
             return chunk;
-        }, Runnable::run); // Paper - rewrite chunk system
+        }, EXECUTOR); // Paper - rewrite chunk system // Canvas - optimize noise
     }
 
     private void doCreateBiomes(Blender blender, RandomState random, StructureManager structureManager, ChunkAccess chunk) {
@@ -293,31 +_,33 @@
     @Override
     public CompletableFuture<ChunkAccess> fillFromNoise(Blender blender, RandomState randomState, StructureManager structureManager, ChunkAccess chunk) {
         NoiseSettings noiseSettings = this.settings.value().noiseSettings().clampToHeightAccessor(chunk.getHeightAccessorForGeneration());
+        // Canvas start - optimize noise generation - don't waste memory on lambda?
         int minY = noiseSettings.minY();
-        int i = Mth.floorDiv(minY, noiseSettings.getCellHeight());
-        int i1 = Mth.floorDiv(noiseSettings.height(), noiseSettings.getCellHeight());
-        return i1 <= 0 ? CompletableFuture.completedFuture(chunk) : CompletableFuture.supplyAsync(() -> {
-            int sectionIndex = chunk.getSectionIndex(i1 * noiseSettings.getCellHeight() - 1 + minY);
-            int sectionIndex1 = chunk.getSectionIndex(minY);
-            Set<LevelChunkSection> set = Sets.newHashSet();
-
-            for (int i2 = sectionIndex; i2 >= sectionIndex1; i2--) {
-                LevelChunkSection section = chunk.getSection(i2);
-                section.acquire();
-                set.add(section);
-            }
-
-            ChunkAccess var20;
-            try {
-                var20 = this.doFill(blender, structureManager, randomState, chunk, i, i1);
-            } finally {
-                for (LevelChunkSection levelChunkSection1 : set) {
-                    levelChunkSection1.release();
-                }
-            }
-
-            return var20;
-        }, Runnable::run); // Paper - rewrite chunk system
+        int minYDiv = Mth.floorDiv(minY, noiseSettings.getCellHeight());
+        int cellHeightDiv = Mth.floorDiv(noiseSettings.height(), noiseSettings.getCellHeight());
+
+        if (cellHeightDiv <= 0) {
+            return CompletableFuture.completedFuture(chunk);
+        }
+
+        try {
+            int startIndex = chunk.getSectionIndex(cellHeightDiv * noiseSettings.getCellHeight() - 1 + minY);
+            int minYIndex = chunk.getSectionIndex(minY);
+            LevelChunkSection[] sections = chunk.getSections();
+
+            for (int i = startIndex; i >= minYIndex; --i) {
+                sections[i].acquire();
+            }
+
+            ChunkAccess access = this.doFill(blender, structureManager, randomState, chunk, minYDiv, cellHeightDiv);
+            for (int i = startIndex; i >= minYIndex; --i) {
+                sections[i].release();
+            }
+            return CompletableFuture.completedFuture(access);
+        } catch (Throwable throwable) {
+            throw new RuntimeException("unexpected error when running wgen/fill-noise", throwable);
+        }
+        // Canvas end
     }
 
     private ChunkAccess doFill(Blender blender, StructureManager structureManager, RandomState random, ChunkAccess chunk, int minCellY, int cellCountY) {
@@ -375,7 +_,7 @@
 
                                 interpolatedState = this.debugPreliminarySurfaceLevel(noiseChunk, i10, i7, i13, interpolatedState);
                                 if (interpolatedState != AIR && !SharedConstants.debugVoidTerrain(chunk.getPos())) {
-                                    section.setBlockState(i11, i8, i14, interpolatedState, false);
+                                    optimizedBlockSetOp(section, i11, i8, i14, interpolatedState, false); // Canvas - optimize noise
                                     heightmapUnprimed.update(i11, i7, i14, interpolatedState);
                                     heightmapUnprimed1.update(i11, i7, i14, interpolatedState);
                                     if (aquifer.shouldScheduleFluidUpdate() && !interpolatedState.getFluidState().isEmpty()) {
@@ -395,6 +_,26 @@
         noiseChunk.stopInterpolation();
         return chunk;
     }
+    // Canvas start - optimize noise gen
+
+    private void optimizedBlockSetOp(@NotNull LevelChunkSection chunkSection, int chunkSectionBlockPosX, int chunkSectionBlockPosY, int chunkSectionBlockPosZ, @NotNull BlockState blockState, boolean lock) {
+        chunkSection.nonEmptyBlockCount += 1;
+
+        if (!blockState.getFluidState().isEmpty()) {
+            chunkSection.tickingFluidCount += 1;
+        }
+
+        if (blockState.isRandomlyTicking()) {
+            chunkSection.tickingBlockCount += 1;
+        }
+
+        var blockStateId = chunkSection.states.data.palette.idFor(blockState);
+        chunkSection.states.data.storage().set(
+            chunkSection.states.strategy.getIndex(chunkSectionBlockPosX, chunkSectionBlockPosY,
+                chunkSectionBlockPosZ
+            ), blockStateId);
+    }
+    // Canvas end
 
     private BlockState debugPreliminarySurfaceLevel(NoiseChunk chunk, int x, int y, int z, BlockState state) {
         return state;
