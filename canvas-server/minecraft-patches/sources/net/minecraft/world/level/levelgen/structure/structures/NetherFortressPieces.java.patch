--- a/net/minecraft/world/level/levelgen/structure/structures/NetherFortressPieces.java
+++ b/net/minecraft/world/level/levelgen/structure/structures/NetherFortressPieces.java
@@ -1,20 +_,20 @@
 package net.minecraft.world.level.levelgen.structure.structures;
 
 import com.google.common.collect.Lists;
+import java.util.Collections;
 import java.util.List;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.util.chunk.XPieceDataExtension;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.util.RandomSource;
-import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.StructureManager;
 import net.minecraft.world.level.WorldGenLevel;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.FenceBlock;
 import net.minecraft.world.level.block.StairBlock;
-import net.minecraft.world.level.block.entity.SpawnerBlockEntity;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkGenerator;
 import net.minecraft.world.level.levelgen.structure.BoundingBox;
@@ -733,7 +_,7 @@
         private static final int WIDTH = 5;
         private static final int HEIGHT = 7;
         private static final int DEPTH = 5;
-        private boolean isNeedingChest;
+        private volatile boolean isNeedingChest; // Canvas - volatile
 
         public CastleSmallCorridorLeftTurnPiece(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
             super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_LEFT_TURN, genDepth, box);
@@ -872,7 +_,7 @@
         private static final int WIDTH = 5;
         private static final int HEIGHT = 7;
         private static final int DEPTH = 5;
-        private boolean isNeedingChest;
+        private volatile boolean isNeedingChest; // Canvas - volatile
 
         public CastleSmallCorridorRightTurnPiece(int genDepth, RandomSource random, BoundingBox box, Direction orientation) {
             super(StructurePieceType.NETHER_FORTRESS_CASTLE_SMALL_CORRIDOR_RIGHT_TURN, genDepth, box);
@@ -1151,7 +_,7 @@
         private static final int WIDTH = 7;
         private static final int HEIGHT = 8;
         private static final int DEPTH = 9;
-        private boolean hasPlacedSpawner;
+        private volatile boolean hasPlacedSpawner; // Canvas - volatile
 
         public MonsterThrone(int genDepth, BoundingBox box, Direction orientation) {
             super(StructurePieceType.NETHER_FORTRESS_MONSTER_THRONE, genDepth, box);
@@ -1283,7 +_,7 @@
         }
     }
 
-    abstract static class NetherBridgePiece extends StructurePiece {
+    public abstract static class NetherBridgePiece extends StructurePiece { // Canvas - public
         protected NetherBridgePiece(StructurePieceType type, int genDepth, BoundingBox boundingBox) {
             super(type, genDepth, boundingBox);
         }
@@ -1301,7 +_,7 @@
             int i = 0;
 
             for (NetherFortressPieces.PieceWeight pieceWeight : weights) {
-                if (pieceWeight.maxPlaceCount > 0 && pieceWeight.placeCount < pieceWeight.maxPlaceCount) {
+                if (pieceWeight.maxPlaceCount > 0 && pieceWeight.placeCount.get() < pieceWeight.maxPlaceCount) { // Canvas
                     flag = true;
                 }
 
@@ -1341,7 +_,7 @@
                             pieceWeight, pieces, random, x, y, z, orientation, genDepth
                         );
                         if (netherBridgePiece != null) {
-                            pieceWeight.placeCount++;
+                            pieceWeight.placeCount.set(pieceWeight.placeCount.get() + 1); // Canvas
                             startPiece.previousPiece = pieceWeight;
                             if (!pieceWeight.isValid()) {
                                 weights.remove(pieceWeight);
@@ -1576,7 +_,7 @@
     static class PieceWeight {
         public final Class<? extends NetherFortressPieces.NetherBridgePiece> pieceClass;
         public final int weight;
-        public int placeCount;
+        public final ThreadLocal<Integer> placeCount = ThreadLocal.withInitial(() -> 0); // Canvas
         public final int maxPlaceCount;
         public final boolean allowInRow;
 
@@ -1592,11 +_,11 @@
         }
 
         public boolean doPlace(int genDepth) {
-            return this.maxPlaceCount == 0 || this.placeCount < this.maxPlaceCount;
+            return this.maxPlaceCount == 0 || this.placeCount.get() < this.maxPlaceCount; // Canvas
         }
 
         public boolean isValid() {
-            return this.maxPlaceCount == 0 || this.placeCount < this.maxPlaceCount;
+            return this.maxPlaceCount == 0 || this.placeCount.get() < this.maxPlaceCount; // Canvas
         }
     }
 
@@ -1746,24 +_,24 @@
     }
 
     public static class StartPiece extends NetherFortressPieces.BridgeCrossing {
-        public NetherFortressPieces.PieceWeight previousPiece;
+        public volatile NetherFortressPieces.PieceWeight previousPiece; // Canvas - volatile
         public List<NetherFortressPieces.PieceWeight> availableBridgePieces;
         public List<NetherFortressPieces.PieceWeight> availableCastlePieces;
         public final List<StructurePiece> pendingChildren = Lists.newArrayList();
 
         public StartPiece(RandomSource random, int x, int z) {
             super(x, z, getRandomHorizontalDirection(random));
-            this.availableBridgePieces = Lists.newArrayList();
+            this.availableBridgePieces = Collections.synchronizedList(Lists.newArrayList()); // Canvas
 
             for (NetherFortressPieces.PieceWeight pieceWeight : NetherFortressPieces.BRIDGE_PIECE_WEIGHTS) {
-                pieceWeight.placeCount = 0;
+                pieceWeight.placeCount.remove(); // Canvas
                 this.availableBridgePieces.add(pieceWeight);
             }
 
-            this.availableCastlePieces = Lists.newArrayList();
+            this.availableCastlePieces = Collections.synchronizedList(Lists.newArrayList()); // Canvas
 
             for (NetherFortressPieces.PieceWeight pieceWeight : NetherFortressPieces.CASTLE_PIECE_WEIGHTS) {
-                pieceWeight.placeCount = 0;
+                pieceWeight.placeCount.remove(); // Canvas
                 this.availableCastlePieces.add(pieceWeight);
             }
         }
