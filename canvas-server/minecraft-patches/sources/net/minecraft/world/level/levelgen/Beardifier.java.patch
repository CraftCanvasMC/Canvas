--- a/net/minecraft/world/level/levelgen/Beardifier.java
+++ b/net/minecraft/world/level/levelgen/Beardifier.java
@@ -1,6 +_,7 @@
 package net.minecraft.world.level.levelgen;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.collect.Iterators;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectList;
 import it.unimi.dsi.fastutil.objects.ObjectListIterator;
@@ -29,6 +_,17 @@
     });
     private final ObjectListIterator<Beardifier.Rigid> pieceIterator;
     private final ObjectListIterator<JigsawJunction> junctionIterator;
+    // Canvas start
+    private Beardifier.Rigid[] c2me$pieceArray;
+    private JigsawJunction[] c2me$junctionArray;
+
+    private void c2me$initArrays() {
+        this.c2me$pieceArray = Iterators.toArray(this.pieceIterator, Beardifier.Rigid.class);
+        this.pieceIterator.back(Integer.MAX_VALUE);
+        this.c2me$junctionArray = Iterators.toArray(this.junctionIterator, JigsawJunction.class);
+        this.junctionIterator.back(Integer.MAX_VALUE);
+    }
+    // Canvas end
 
     public static Beardifier forStructuresInChunk(StructureManager structureManager, ChunkPos chunkPos) {
         int minBlockX = chunkPos.getMinBlockX();
@@ -78,47 +_,41 @@
 
     @Override
     public double compute(DensityFunction.FunctionContext context) {
+        // Canvas start - optimize impl
+        if (this.c2me$pieceArray == null || this.c2me$junctionArray == null) {
+            this.c2me$initArrays();
+        }
         int i = context.blockX();
-        int i1 = context.blockY();
-        int i2 = context.blockZ();
+        int j = context.blockY();
+        int k = context.blockZ();
         double d = 0.0;
 
-        while (this.pieceIterator.hasNext()) {
-            Beardifier.Rigid rigid = this.pieceIterator.next();
-            BoundingBox boundingBox = rigid.box();
-            int groundLevelDelta = rigid.groundLevelDelta();
-            int max = Math.max(0, Math.max(boundingBox.minX() - i, i - boundingBox.maxX()));
-            int max1 = Math.max(0, Math.max(boundingBox.minZ() - i2, i2 - boundingBox.maxZ()));
-            int i3 = boundingBox.minY() + groundLevelDelta;
-            int i4 = i1 - i3;
-
-            int i5 = switch (rigid.terrainAdjustment()) {
-                case NONE -> 0;
-                case BURY, BEARD_THIN -> i4;
-                case BEARD_BOX -> Math.max(0, Math.max(i3 - i1, i1 - boundingBox.maxY()));
-                case ENCAPSULATE -> Math.max(0, Math.max(boundingBox.minY() - i1, i1 - boundingBox.maxY()));
-            };
-
-            d += switch (rigid.terrainAdjustment()) {
+        for (Beardifier.Rigid piece : this.c2me$pieceArray) {
+            BoundingBox blockBox = piece.box();
+            int l = piece.groundLevelDelta();
+            int m = Math.max(0, Math.max(blockBox.minX() - i, i - blockBox.maxX()));
+            int n = Math.max(0, Math.max(blockBox.minZ() - k, k - blockBox.maxZ()));
+            int o = blockBox.minY() + l;
+            int p = j - o;
+
+            d += switch (piece.terrainAdjustment()) { // 2 switch statement merged
                 case NONE -> 0.0;
-                case BURY -> getBuryContribution(max, i5 / 2.0, max1);
-                case BEARD_THIN, BEARD_BOX -> getBeardContribution(max, i5, max1, i4) * 0.8;
-                case ENCAPSULATE -> getBuryContribution(max / 2.0, i5 / 2.0, max1 / 2.0) * 0.8;
+                case BURY -> getBuryContribution(m, (double)p / 2.0, n);
+                case BEARD_THIN -> getBeardContribution(m, p, n, p) * 0.8;
+                case BEARD_BOX -> getBeardContribution(m, Math.max(0, Math.max(o - j, j - blockBox.maxY())), n, p) * 0.8;
+                case ENCAPSULATE -> getBuryContribution((double)m / 2.0, (double)Math.max(0, Math.max(blockBox.minY() - j, j - blockBox.maxY())) / 2.0, (double)n / 2.0) * 0.8;
             };
         }
 
-        this.pieceIterator.back(Integer.MAX_VALUE);
-
-        while (this.junctionIterator.hasNext()) {
-            JigsawJunction jigsawJunction = this.junctionIterator.next();
-            int i6 = i - jigsawJunction.getSourceX();
-            int groundLevelDelta = i1 - jigsawJunction.getSourceGroundY();
-            int max = i2 - jigsawJunction.getSourceZ();
-            d += getBeardContribution(i6, groundLevelDelta, max, groundLevelDelta) * 0.4;
+        for (JigsawJunction jigsawJunction : this.c2me$junctionArray) {
+            int r = i - jigsawJunction.getSourceX();
+            int l = j - jigsawJunction.getSourceGroundY();
+            int m = k - jigsawJunction.getSourceZ();
+            d += getBeardContribution(r, l, m, l) * 0.4;
         }
 
-        this.junctionIterator.back(Integer.MAX_VALUE);
         return d;
+        // Canvas end
     }
 
     @Override
@@ -132,8 +_,14 @@
     }
 
     private static double getBuryContribution(double x, double y, double z) {
-        double len = Mth.length(x, y, z);
-        return Mth.clampedMap(len, 0.0, 6.0, 1.0, 0.0);
+        // Canvas start - optimize impl
+        double d = Math.sqrt(x * x + y * y + z * z);
+        if (d > 6.0) {
+            return 0.0;
+        } else {
+            return 1.0 - d / 6.0;
+        }
+        // Canvas end
     }
 
     private static double getBeardContribution(int x, int y, int z, int height) {
