--- a/net/minecraft/world/level/LevelReader.java
+++ b/net/minecraft/world/level/LevelReader.java
@@ -1,5 +_,6 @@
 package net.minecraft.world.level;
 
+import java.util.concurrent.CompletableFuture;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
@@ -10,6 +_,9 @@
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.SectionPos;
 import net.minecraft.resources.ResourceKey;
+import net.minecraft.server.level.ChunkHolder;
+import net.minecraft.server.level.ChunkResult;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.flag.FeatureFlagSet;
@@ -17,6 +_,7 @@
 import net.minecraft.world.level.biome.BiomeManager;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkAccess;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.status.ChunkStatus;
 import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.levelgen.Heightmap;
@@ -70,10 +_,26 @@
 
     @Override
     default Holder<Biome> getNoiseBiome(int x, int y, int z) {
-        ChunkAccess chunk = this.getChunk(QuartPos.toSection(x), QuartPos.toSection(z), ChunkStatus.BIOMES, false);
+        ChunkAccess chunk = this.canvas$fasterChunkAccess(this, QuartPos.toSection(x), QuartPos.toSection(z), ChunkStatus.BIOMES, false); // Canvas
         return chunk != null ? chunk.getNoiseBiome(x, y, z) : this.getUncachedNoiseBiome(x, y, z);
     }
+    // Canvas start
 
+    private @Nullable ChunkAccess canvas$fasterChunkAccess(LevelReader instance, int x, int z, ChunkStatus chunkStatus, boolean create) {
+        if (!create && instance instanceof ServerLevel world) {
+            final ChunkHolder holder = (world.getChunkSource().chunkMap).getVisibleChunkIfPresent(ChunkPos.asLong(x, z));
+            if (holder != null) {
+                final CompletableFuture<ChunkResult<LevelChunk>> future = holder.getFullChunkFuture();
+                final ChunkResult<LevelChunk> either = future.getNow(null);
+                if (either != null) {
+                    final LevelChunk chunk = either.orElse(null);
+                    if (chunk != null) return chunk;
+                }
+            }
+        }
+        return instance.getChunk(x, z, chunkStatus, create);
+    }
+    // Canvas end
     Holder<Biome> getUncachedNoiseBiome(int x, int y, int z);
 
     boolean isClientSide();
