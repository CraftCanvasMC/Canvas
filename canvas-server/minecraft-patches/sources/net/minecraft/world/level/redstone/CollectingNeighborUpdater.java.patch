--- a/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
+++ b/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
@@ -14,16 +_,18 @@
 import org.slf4j.Logger;
 
 public class CollectingNeighborUpdater implements NeighborUpdater {
+    public static final java.util.Map<Level, List<CollectingNeighborUpdater>> COLLECTED_COLLECTING_NEIGHBOR_UPDATERS = new java.util.concurrent.ConcurrentHashMap<>(); // Canvas - debug neighbors
     private static final Logger LOGGER = LogUtils.getLogger();
     private final Level level;
     private final int maxChainedNeighborUpdates;
-    private final ArrayDeque<CollectingNeighborUpdater.NeighborUpdates> stack = new ArrayDeque<>();
-    private final List<CollectingNeighborUpdater.NeighborUpdates> addedThisLayer = new ArrayList<>();
+    public final ArrayDeque<CollectingNeighborUpdater.NeighborUpdates> stack = new ArrayDeque<>(); // Canvas - private -> public
+    public final List<CollectingNeighborUpdater.NeighborUpdates> addedThisLayer = new ArrayList<>(); // Canvas - private -> public
     private int count = 0;
 
     public CollectingNeighborUpdater(Level level, int maxChainedNeighborUpdates) {
         this.level = level;
         this.maxChainedNeighborUpdates = maxChainedNeighborUpdates;
+        COLLECTED_COLLECTING_NEIGHBOR_UPDATERS.computeIfAbsent(level, (_) -> new java.util.concurrent.CopyOnWriteArrayList<>()).add(this); // Canvas - debug neighbors
     }
 
     @Override
@@ -89,7 +_,7 @@
         }
     }
 
-    record FullNeighborUpdate(BlockState state, BlockPos pos, Block block, @Nullable Orientation orientation, boolean movedByPiston)
+    public record FullNeighborUpdate(BlockState state, BlockPos pos, Block block, @Nullable Orientation orientation, boolean movedByPiston) // Canvas - public
         implements CollectingNeighborUpdater.NeighborUpdates {
         @Override
         public boolean runNext(Level level) {
@@ -98,9 +_,9 @@
         }
     }
 
-    static final class MultiNeighborUpdate implements CollectingNeighborUpdater.NeighborUpdates {
+    public static final class MultiNeighborUpdate implements CollectingNeighborUpdater.NeighborUpdates { // Canvas - public
         private final BlockPos sourcePos;
-        private final Block sourceBlock;
+        public final Block sourceBlock; // Canvas - private -> public
         @Nullable
         private Orientation orientation;
         @Nullable
@@ -121,7 +_,7 @@
         public boolean runNext(Level level) {
             Direction direction = NeighborUpdater.UPDATE_ORDER[this.idx++];
             BlockPos blockPos = this.sourcePos.relative(direction);
-            BlockState blockState = level.getBlockState(blockPos);
+            BlockState blockState = level.getBlockStateIfLoaded(blockPos); if (blockState != null) { // Canvas
             Orientation orientation = null;
             if (level.enabledFeatures().contains(FeatureFlags.REDSTONE_EXPERIMENTS)) {
                 if (this.orientation == null) {
@@ -134,6 +_,7 @@
             }
 
             NeighborUpdater.executeUpdate(level, blockState, blockPos, this.sourceBlock, orientation, false, this.sourcePos); // Paper - Add source block to BlockPhysicsEvent
+            } // Canvas
             if (this.idx < NeighborUpdater.UPDATE_ORDER.length && NeighborUpdater.UPDATE_ORDER[this.idx] == this.skipDirection) {
                 this.idx++;
             }
@@ -142,23 +_,24 @@
         }
     }
 
-    interface NeighborUpdates {
+    public interface NeighborUpdates { // Canvas - public
         boolean runNext(Level level);
     }
 
-    record ShapeUpdate(Direction direction, BlockState neighborState, BlockPos pos, BlockPos neighborPos, int updateFlags, int updateLimit)
+    public record ShapeUpdate(Direction direction, BlockState neighborState, BlockPos pos, BlockPos neighborPos, int updateFlags, int updateLimit) // Canvas - public
         implements CollectingNeighborUpdater.NeighborUpdates {
         @Override
         public boolean runNext(Level level) {
+            if (level.getChunkIfLoaded(this.pos) == null) return false; // Canvas
             NeighborUpdater.executeShapeUpdate(level, this.direction, this.pos, this.neighborPos, this.neighborState, this.updateFlags, this.updateLimit);
             return false;
         }
     }
 
-    record SimpleNeighborUpdate(BlockPos pos, Block block, @Nullable Orientation orientation) implements CollectingNeighborUpdater.NeighborUpdates {
+    public record SimpleNeighborUpdate(BlockPos pos, Block block, @Nullable Orientation orientation) implements CollectingNeighborUpdater.NeighborUpdates { // Canvas - public
         @Override
         public boolean runNext(Level level) {
-            BlockState blockState = level.getBlockState(this.pos);
+            BlockState blockState = level.getBlockStateIfLoaded(this.pos); if (blockState == null) return false; // Canvas
             NeighborUpdater.executeUpdate(level, blockState, this.pos, this.block, this.orientation, false);
             return false;
         }
