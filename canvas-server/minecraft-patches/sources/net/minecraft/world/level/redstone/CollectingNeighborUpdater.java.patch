--- a/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
+++ b/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
@@ -14,16 +_,18 @@
 import org.slf4j.Logger;
 
 public class CollectingNeighborUpdater implements NeighborUpdater {
+    public static final java.util.Map<Level, List<CollectingNeighborUpdater>> COLLECTED_COLLECTING_NEIGHBOR_UPDATERS = new java.util.concurrent.ConcurrentHashMap<>(); // Canvas - debug neighbors
     private static final Logger LOGGER = LogUtils.getLogger();
     private final Level level;
     private final int maxChainedNeighborUpdates;
-    private final ArrayDeque<CollectingNeighborUpdater.NeighborUpdates> stack = new ArrayDeque<>();
-    private final List<CollectingNeighborUpdater.NeighborUpdates> addedThisLayer = new ArrayList<>();
+    public final ArrayDeque<CollectingNeighborUpdater.NeighborUpdates> stack = new ArrayDeque<>(); // Canvas - private -> public
+    public final List<CollectingNeighborUpdater.NeighborUpdates> addedThisLayer = new ArrayList<>(); // Canvas - private -> public
     private int count = 0;
 
     public CollectingNeighborUpdater(Level level, int maxChainedNeighborUpdates) {
         this.level = level;
         this.maxChainedNeighborUpdates = maxChainedNeighborUpdates;
+        COLLECTED_COLLECTING_NEIGHBOR_UPDATERS.computeIfAbsent(level, (_) -> new java.util.concurrent.CopyOnWriteArrayList<>()).add(this); // Canvas - debug neighbors
     }
 
     @Override
@@ -89,7 +_,7 @@
         }
     }
 
-    record FullNeighborUpdate(BlockState state, BlockPos pos, Block block, @Nullable Orientation orientation, boolean movedByPiston)
+    public record FullNeighborUpdate(BlockState state, BlockPos pos, Block block, @Nullable Orientation orientation, boolean movedByPiston) // Canvas - public
         implements CollectingNeighborUpdater.NeighborUpdates {
         @Override
         public boolean runNext(Level level) {
@@ -98,9 +_,9 @@
         }
     }
 
-    static final class MultiNeighborUpdate implements CollectingNeighborUpdater.NeighborUpdates {
+    public static final class MultiNeighborUpdate implements CollectingNeighborUpdater.NeighborUpdates { // Canvas - public
         private final BlockPos sourcePos;
-        private final Block sourceBlock;
+        public final Block sourceBlock; // Canvas - private -> public
         @Nullable
         private Orientation orientation;
         @Nullable
@@ -142,11 +_,11 @@
         }
     }
 
-    interface NeighborUpdates {
+    public interface NeighborUpdates { // Canvas - public
         boolean runNext(Level level);
     }
 
-    record ShapeUpdate(Direction direction, BlockState neighborState, BlockPos pos, BlockPos neighborPos, int updateFlags, int updateLimit)
+    public record ShapeUpdate(Direction direction, BlockState neighborState, BlockPos pos, BlockPos neighborPos, int updateFlags, int updateLimit) // Canvas - public
         implements CollectingNeighborUpdater.NeighborUpdates {
         @Override
         public boolean runNext(Level level) {
@@ -155,7 +_,7 @@
         }
     }
 
-    record SimpleNeighborUpdate(BlockPos pos, Block block, @Nullable Orientation orientation) implements CollectingNeighborUpdater.NeighborUpdates {
+    public record SimpleNeighborUpdate(BlockPos pos, Block block, @Nullable Orientation orientation) implements CollectingNeighborUpdater.NeighborUpdates { // Canvas - public
         @Override
         public boolean runNext(Level level) {
             BlockState blockState = level.getBlockState(this.pos);
