--- a/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
+++ b/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
@@ -3,7 +_,11 @@
 import com.mojang.logging.LogUtils;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
+import java.util.Deque;
 import java.util.List;
+import java.util.NoSuchElementException;
+import java.util.concurrent.ConcurrentLinkedDeque;
+import java.util.concurrent.atomic.AtomicInteger;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -17,7 +_,7 @@
     private static final Logger LOGGER = LogUtils.getLogger();
     private final Level level;
     private final int maxChainedNeighborUpdates;
-    private final ArrayDeque<CollectingNeighborUpdater.NeighborUpdates> stack = new ArrayDeque<>();
+    private final Deque<NeighborUpdates> stack = new ConcurrentLinkedDeque<>(); // Canvas - fix CME/NPE
     private final List<CollectingNeighborUpdater.NeighborUpdates> addedThisLayer = new ArrayList<>();
     private int count = 0;
 
@@ -57,33 +_,55 @@
                 this.stack.push(updates);
             }
         } else if (this.count - 1 == this.maxChainedNeighborUpdates) {
-            LOGGER.error("Too many chained neighbor updates. Skipping the rest. First skipped position: " + pos.toShortString());
+            LOGGER.error("Too many chained neighbor updates. Skipping the rest. First skipped position: {}", pos.toShortString(), new Throwable()); // Canvas - debug chained neighbor updates
         }
 
         if (!flag) {
             this.runUpdates();
         }
     }
+    // Canvas start
+
+    private Deque<NeighborUpdates> cloneAndClear() {
+        final Deque<NeighborUpdates> neighborUpdates = new ConcurrentLinkedDeque<>(this.stack);
+        this.stack.clear();
+        return neighborUpdates;
+    }
+    // Canvas end
 
     private void runUpdates() {
         try {
-            while (!this.stack.isEmpty() || !this.addedThisLayer.isEmpty()) {
+            Deque<NeighborUpdates> updates = cloneAndClear(); // Canvas - leave less room for tasks to be submitted during processing
+            while (!updates.isEmpty() || !this.addedThisLayer.isEmpty()) { // Canvas - leave less room for tasks to be submitted during processing
                 for (int i = this.addedThisLayer.size() - 1; i >= 0; i--) {
-                    this.stack.push(this.addedThisLayer.get(i));
+                    // Canvas start
+                    try {
+                        NeighborUpdates nu = this.addedThisLayer.get(i);
+                        if (nu == null) continue;
+                        updates.push(nu); // Canvas - leave less room for tasks to be submitted during processing
+                    } catch (NullPointerException ignored) {
+                    }
+                    // Canvas end
                 }
 
                 this.addedThisLayer.clear();
-                CollectingNeighborUpdater.NeighborUpdates neighborUpdates = this.stack.peek();
+                CollectingNeighborUpdater.NeighborUpdates neighborUpdates = updates.peek(); // Canvas - leave less room for tasks to be submitted during processing
 
+                if (neighborUpdates == null) continue; // Canvas - ensure not null
                 while (this.addedThisLayer.isEmpty()) {
                     if (!neighborUpdates.runNext(this.level)) {
-                        this.stack.pop();
+                        // Canvas start
+                        try {
+                        updates.pop(); // Canvas - leave less room for tasks to be submitted during processing
                         break;
+                        } catch (java.util.NoSuchElementException ignored) {
+                        }
+                        // Canvas end
                     }
                 }
             }
         } finally {
-            this.stack.clear();
+            // this.stack.clear(); // Canvas - leave less room for tasks to be submitted during processing
             this.addedThisLayer.clear();
             this.count = 0;
         }
@@ -105,21 +_,31 @@
         private Orientation orientation;
         @Nullable
         private final Direction skipDirection;
-        private int idx = 0;
+        private final AtomicInteger idx = new AtomicInteger(); // Canvas - atomic
 
         MultiNeighborUpdate(BlockPos sourcePos, Block sourceBlock, @Nullable Orientation orientation, @Nullable Direction skipDirection) {
             this.sourcePos = sourcePos;
             this.sourceBlock = sourceBlock;
             this.orientation = orientation;
+            // Canvas start - atomic
             this.skipDirection = skipDirection;
-            if (NeighborUpdater.UPDATE_ORDER[this.idx] == skipDirection) {
-                this.idx++;
+            if (NeighborUpdater.UPDATE_ORDER[this.idx.get()] == skipDirection) {
+            // Canvas end
+                this.idx.getAndIncrement();
             }
         }
 
         @Override
         public boolean runNext(Level level) {
-            Direction direction = NeighborUpdater.UPDATE_ORDER[this.idx++];
+            // Canvas start
+            int currentIndex = this.idx.getAndIncrement();
+
+            if (currentIndex >= NeighborUpdater.UPDATE_ORDER.length) {
+                return false; // Prevent out-of-bounds access
+            }
+
+            Direction direction = NeighborUpdater.UPDATE_ORDER[currentIndex];
+            // Canvas end
             BlockPos blockPos = this.sourcePos.relative(direction);
             BlockState blockState = level.getBlockState(blockPos);
             Orientation orientation = null;
@@ -134,11 +_,13 @@
             }
 
             NeighborUpdater.executeUpdate(level, blockState, blockPos, this.sourceBlock, orientation, false, this.sourcePos); // Paper - Add source block to BlockPhysicsEvent
-            if (this.idx < NeighborUpdater.UPDATE_ORDER.length && NeighborUpdater.UPDATE_ORDER[this.idx] == this.skipDirection) {
-                this.idx++;
+            // Canvas start - atomic
+            if (this.idx.get() < NeighborUpdater.UPDATE_ORDER.length && NeighborUpdater.UPDATE_ORDER[this.idx.get()] == this.skipDirection) {
+                this.idx.getAndIncrement();
+            // Canvas end
             }
 
-            return this.idx < NeighborUpdater.UPDATE_ORDER.length;
+            return this.idx.get() < NeighborUpdater.UPDATE_ORDER.length; // Canvas - atomic
         }
     }
 
