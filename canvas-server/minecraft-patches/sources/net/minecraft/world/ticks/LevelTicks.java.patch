--- a/net/minecraft/world/ticks/LevelTicks.java
+++ b/net/minecraft/world/ticks/LevelTicks.java
@@ -1,9 +_,13 @@
 package net.minecraft.world.ticks;
 
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.region.ServerRegions;
+import io.papermc.paper.threadedregions.ThreadedRegionizer;
 import it.unimi.dsi.fastutil.longs.Long2LongMap;
 import it.unimi.dsi.fastutil.longs.Long2LongMaps;
 import it.unimi.dsi.fastutil.longs.Long2LongOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMaps;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2LongMap.Entry;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
@@ -16,6 +_,7 @@
 import java.util.PriorityQueue;
 import java.util.Queue;
 import java.util.Set;
+import java.util.concurrent.locks.ReentrantLock;
 import java.util.function.BiConsumer;
 import java.util.function.LongPredicate;
 import java.util.function.Predicate;
@@ -32,7 +_,7 @@
     private static final Comparator<LevelChunkTicks<?>> CONTAINER_DRAIN_ORDER = (levelChunkTicks, levelChunkTicks1) -> ScheduledTick.INTRA_TICK_DRAIN_ORDER
         .compare(levelChunkTicks.peek(), levelChunkTicks1.peek());
     private final LongPredicate tickCheck;
-    private final Long2ObjectMap<LevelChunkTicks<T>> allContainers = new Long2ObjectOpenHashMap<>();
+    public final Long2ObjectMap<LevelChunkTicks<T>> allContainers = Long2ObjectMaps.synchronize(new Long2ObjectOpenHashMap<>()); // Canvas - synchronize - private -> public
     private final Long2LongMap nextTickForContainer = Util.make(new Long2LongOpenHashMap(), map -> map.defaultReturnValue(Long.MAX_VALUE));
     private final Queue<LevelChunkTicks<T>> containersToTick = new PriorityQueue<>(CONTAINER_DRAIN_ORDER);
     private final Queue<ScheduledTick<T>> toRunThisTick = new ArrayDeque<>();
@@ -43,12 +_,115 @@
             this.updateContainerScheduling(scheduledTick);
         }
     };
-
-    public LevelTicks(LongPredicate tickCheck) {
+    public int ticksSinceLastBlockTickCall; // Canvas - ticks between config
+    public int ticksSinceLastFluidTickCall; // Canvas - ticks between config
+
+    // Canvas start - Threaded Regions
+    public final net.minecraft.server.level.ServerLevel world;
+    public final boolean isBlock;
+    public final boolean isWorldRegion;
+    // we lock down for concurrency purposes, if we don't, we can crash anytime which very bad
+    private final ReentrantLock lock = new ReentrantLock();
+
+    public void merge(final LevelTicks<T> into, final long tickOffset) {
+        // note: containersToTick, toRunThisTick, alreadyRunThisTick, toRunThisTickSet
+        // are all transient state, only ever non-empty during tick. But merging regions occurs while there
+        // is no tick happening, so we assume they are empty.
+        for (final java.util.Iterator<Long2ObjectMap.Entry<LevelChunkTicks<T>>> iterator =
+             (this.allContainers).long2ObjectEntrySet().iterator();
+             iterator.hasNext();) {
+            final Long2ObjectMap.Entry<LevelChunkTicks<T>> entry = iterator.next();
+            final LevelChunkTicks<T> tickContainer = entry.getValue();
+            tickContainer.offsetTicks(tickOffset);
+            into.allContainers.put(entry.getLongKey(), tickContainer);
+        }
+        for (final java.util.Iterator<Long2LongMap.Entry> iterator = ((Long2LongOpenHashMap)this.nextTickForContainer).long2LongEntrySet().fastIterator();
+             iterator.hasNext();) {
+            final Long2LongMap.Entry entry = iterator.next();
+            into.nextTickForContainer.put(entry.getLongKey(), entry.getLongValue() + tickOffset);
+        }
+    }
+
+    public void split(final int chunkToRegionShift,
+                      final it.unimi.dsi.fastutil.longs.Long2ReferenceOpenHashMap<LevelTicks<T>> regionToData) {
+        for (final java.util.Iterator<Long2ObjectMap.Entry<LevelChunkTicks<T>>> iterator =
+             (this.allContainers).long2ObjectEntrySet().iterator();
+             iterator.hasNext();) {
+            final Long2ObjectMap.Entry<LevelChunkTicks<T>> entry = iterator.next();
+
+            final long chunkKey = entry.getLongKey();
+            final int chunkX = ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkX(chunkKey);
+            final int chunkZ = ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkZ(chunkKey);
+
+            final long regionSectionKey = ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkKey(
+                chunkX >> chunkToRegionShift, chunkZ >> chunkToRegionShift
+            );
+            // Should always be non-null, since containers are removed on unload.
+            LevelTicks<T> poss = regionToData.get(regionSectionKey);
+            if (poss == null) continue;
+            poss.allContainers.put(chunkKey, entry.getValue());
+        }
+        for (final java.util.Iterator<Long2LongMap.Entry> iterator = ((Long2LongOpenHashMap)this.nextTickForContainer).long2LongEntrySet().fastIterator();
+             iterator.hasNext();) {
+            final Long2LongMap.Entry entry = iterator.next();
+            final long chunkKey = entry.getLongKey();
+            final int chunkX = ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkX(chunkKey);
+            final int chunkZ = ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkZ(chunkKey);
+
+            final long regionSectionKey = ca.spottedleaf.moonrise.common.util.CoordinateUtils.getChunkKey(
+                chunkX >> chunkToRegionShift, chunkZ >> chunkToRegionShift
+            );
+
+            // Should always be non-null, since containers are removed on unload.
+            LevelTicks<T> poss = regionToData.get(regionSectionKey);
+            if (poss == null) continue;
+            poss.nextTickForContainer.put(chunkKey, entry.getLongValue());
+        }
+    }
+
+    public LevelTicks(LongPredicate tickCheck, net.minecraft.server.level.ServerLevel world, boolean isBlock, boolean isWorldRegion) {
+        this.world = world;
+        this.isBlock = isBlock;
+        this.isWorldRegion = isWorldRegion;
+        // Canvas end
         this.tickCheck = tickCheck;
     }
 
+    private volatile boolean checkRegionized = true;
     public void addContainer(ChunkPos chunkPos, LevelChunkTicks<T> chunkTicks) {
+        // Canvas start - Threaded Regions
+        if (Config.INSTANCE.ticking.enableThreadedRegionizing && checkRegionized) {
+            // we must ensure we are regionized properly
+            if (this.isWorldRegion) {
+                // we are on a world data, HELL NO
+                ThreadedRegionizer.ThreadedRegion<ServerRegions.TickRegionData, ServerRegions.TickRegionSectionData> region = this.world.regioniser.getRegionAtUnsynchronised(chunkPos.x, chunkPos.z);
+                if (region == null) {
+                    throw new RuntimeException("Cannot add container to a chunk where a region does not exist!");
+                }
+                //noinspection unchecked
+                LevelTicks<T> regionized = (LevelTicks<T>) (this.isBlock ? region.getData().tickData.getBlockLevelTicks() : region.getData().tickData.getFluidLevelTicks());
+                regionized.checkRegionized = false;
+                regionized.addContainer(chunkPos, chunkTicks);
+                regionized.checkRegionized = true;
+                return;
+            } else {
+                ServerRegions.WorldTickData data = ServerRegions.getTickData(this.world);
+                int chunkX = chunkPos.x;
+                int chunkZ = chunkPos.z;
+                ThreadedRegionizer.ThreadedRegion<ServerRegions.TickRegionData, ServerRegions.TickRegionSectionData> runningRegion = data.region;
+                ThreadedRegionizer.ThreadedRegion<ServerRegions.TickRegionData, ServerRegions.TickRegionSectionData> correctRegion = this.world.regioniser.getRegionAtUnsynchronised(chunkX, chunkZ);
+                if (runningRegion != correctRegion) {
+                    LevelTicks<T> regionized = (LevelTicks<T>) (this.isBlock ? correctRegion.getData().tickData.getBlockLevelTicks() : correctRegion.getData().tickData.getFluidLevelTicks());
+                    regionized.checkRegionized = false;
+                    regionized.addContainer(chunkPos, chunkTicks);
+                    regionized.checkRegionized = true;
+                    return; // if we are the same, we are regionized correctly, no need to return then
+                }
+            }
+        }
+        try { lock.lock(); // Canvas - lock
+        if (this.isWorldRegion && Config.INSTANCE.ticking.enableThreadedRegionizing) throw new RuntimeException("Cannot add container to world region while regionized!");
+        // Canvas end
         long packedChunkPos = chunkPos.toLong();
         this.allContainers.put(packedChunkPos, chunkTicks);
         ScheduledTick<T> scheduledTick = chunkTicks.peek();
@@ -56,30 +_,111 @@
             this.nextTickForContainer.put(packedChunkPos, scheduledTick.triggerTick());
         }
 
-        chunkTicks.setOnTickAdded(this.chunkScheduleUpdater);
+        // Canvas start - Threaded Regions
+        // at this point, we should be properly regionized (if applicable)
+        // so we poll the tick data HERE, as we cannot trust when 'onTickAdded' is called and where
+        final boolean isBlock = this.isBlock;
+        final net.minecraft.server.level.ServerLevel world = this.world;
+        ServerRegions.WorldTickData worldData = ServerRegions.getTickData(world);
+        // make sure the lambda contains no reference to this LevelTicks
+        chunkTicks.setOnTickAdded((LevelChunkTicks<T> levelChunkTicks, ScheduledTick<T> tick) -> {
+            if (tick.equals(levelChunkTicks.peek())) {
+                ((LevelTicks<T>)(isBlock ? worldData.getBlockLevelTicks() : worldData.getFluidLevelTicks())).updateContainerScheduling(tick);
+            }
+        });
+        // Canvas end
+        } finally { lock.unlock(); } // Canvas - lock
     }
 
     public void removeContainer(ChunkPos chunkPos) {
+        // Canvas start - Threaded Regions
+        if (Config.INSTANCE.ticking.enableThreadedRegionizing && checkRegionized) {
+            // we must ensure we are regionized properly
+            if (this.isWorldRegion) {
+                // we are on a world data, HELL NO
+                ThreadedRegionizer.ThreadedRegion<ServerRegions.TickRegionData, ServerRegions.TickRegionSectionData> region = this.world.regioniser.getRegionAtUnsynchronised(chunkPos.x, chunkPos.z);
+                if (region == null) {
+                    throw new RuntimeException("Cannot remove container from a chunk where a region does not exist!");
+                }
+                //noinspection unchecked
+                LevelTicks<T> regionized = (LevelTicks<T>) (this.isBlock ? region.getData().tickData.getBlockLevelTicks() : region.getData().tickData.getFluidLevelTicks());
+                regionized.checkRegionized = false;
+                regionized.removeContainer(chunkPos);
+                regionized.checkRegionized = true;
+                return;
+            } else {
+                ServerRegions.WorldTickData data = ServerRegions.getTickData(this.world);
+                int chunkX = chunkPos.x;
+                int chunkZ = chunkPos.z;
+                ThreadedRegionizer.ThreadedRegion<ServerRegions.TickRegionData, ServerRegions.TickRegionSectionData> runningRegion = data.region;
+                ThreadedRegionizer.ThreadedRegion<ServerRegions.TickRegionData, ServerRegions.TickRegionSectionData> correctRegion = this.world.regioniser.getRegionAtUnsynchronised(chunkX, chunkZ);
+                if (runningRegion != correctRegion) {
+                    LevelTicks<T> regionized = (LevelTicks<T>) (this.isBlock ? correctRegion.getData().tickData.getBlockLevelTicks() : correctRegion.getData().tickData.getFluidLevelTicks());
+                    regionized.checkRegionized = false;
+                    regionized.removeContainer(chunkPos);
+                    regionized.checkRegionized = true;
+                    return; // if we are the same, we are regionized correctly, no need to return then
+                }
+            }
+        }
+        try { lock.lock(); // Canvas - lock
+        // Canvas end
         long packedChunkPos = chunkPos.toLong();
         LevelChunkTicks<T> levelChunkTicks = this.allContainers.remove(packedChunkPos);
         this.nextTickForContainer.remove(packedChunkPos);
         if (levelChunkTicks != null) {
             levelChunkTicks.setOnTickAdded(null);
         }
+        } finally { lock.unlock(); } // Canvas - lock
     }
 
     @Override
     public void schedule(ScheduledTick<T> tick) {
         long packedChunkPos = ChunkPos.asLong(tick.pos());
+        // Canvas start - Threaded Regions
+        if (Config.INSTANCE.ticking.enableThreadedRegionizing && checkRegionized) {
+            // we must ensure we are regionized properly
+            ChunkPos pos = new ChunkPos(tick.pos());
+            if (this.isWorldRegion) {
+                // we are on a world data, HELL NO
+                ThreadedRegionizer.ThreadedRegion<ServerRegions.TickRegionData, ServerRegions.TickRegionSectionData> region = this.world.regioniser.getRegionAtUnsynchronised(pos.x, pos.z);
+                if (region == null) {
+                    throw new RuntimeException("Cannot schedule to a container from a chunk where a region does not exist!");
+                }
+                //noinspection unchecked
+                LevelTicks<T> regionized = (LevelTicks<T>) (this.isBlock ? region.getData().tickData.getBlockLevelTicks() : region.getData().tickData.getFluidLevelTicks());
+                regionized.checkRegionized = false;
+                regionized.schedule(tick);
+                regionized.checkRegionized = true;
+                return;
+            } else {
+                ServerRegions.WorldTickData data = ServerRegions.getTickData(this.world);
+                int chunkX = pos.x;
+                int chunkZ = pos.z;
+                ThreadedRegionizer.ThreadedRegion<ServerRegions.TickRegionData, ServerRegions.TickRegionSectionData> runningRegion = data.region;
+                ThreadedRegionizer.ThreadedRegion<ServerRegions.TickRegionData, ServerRegions.TickRegionSectionData> correctRegion = this.world.regioniser.getRegionAtUnsynchronised(chunkX, chunkZ);
+                if (runningRegion != correctRegion) {
+                    LevelTicks<T> regionized = (LevelTicks<T>) (this.isBlock ? correctRegion.getData().tickData.getBlockLevelTicks() : correctRegion.getData().tickData.getFluidLevelTicks());
+                    regionized.checkRegionized = false;
+                    regionized.schedule(tick);
+                    regionized.checkRegionized = true;
+                    return; // if we are the same, we are regionized correctly, no need to return then
+                }
+            }
+        }
+        try { lock.lock(); // Canvas - lock
+        // Canvas end
         LevelChunkTicks<T> levelChunkTicks = this.allContainers.get(packedChunkPos);
         if (levelChunkTicks == null) {
             Util.logAndPauseIfInIde("Trying to schedule tick in not loaded position " + tick.pos());
         } else {
             levelChunkTicks.schedule(tick);
         }
+        } finally { lock.unlock(); } // Canvas - lock
     }
 
     public void tick(long gameTime, int maxAllowedTicks, BiConsumer<BlockPos, T> ticker) {
+        try { lock.lock(); // Canvas - lock
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("collect");
         this.collectTicks(gameTime, maxAllowedTicks, profilerFiller);
@@ -89,6 +_,7 @@
         profilerFiller.popPush("cleanup");
         this.cleanupAfterTick();
         profilerFiller.pop();
+        } finally { lock.unlock(); } // Canvas - lock
     }
 
     private void collectTicks(long gameTime, int maxAllowedTicks, ProfilerFiller profiler) {
@@ -148,7 +_,9 @@
     }
 
     private void updateContainerScheduling(ScheduledTick<T> tick) {
+        try { lock.lock(); // Canvas - lock
         this.nextTickForContainer.put(ChunkPos.asLong(tick.pos()), tick.triggerTick());
+        } finally { lock.unlock(); } // Canvas - lock
     }
 
     private void drainFromCurrentContainer(Queue<LevelChunkTicks<T>> containersToTick, LevelChunkTicks<T> levelChunkTicks, long gameTime, int maxAllowedTicks) {
@@ -199,14 +_,18 @@
 
     @Override
     public boolean hasScheduledTick(BlockPos pos, T type) {
+        try { lock.lock(); // Canvas - lock
         LevelChunkTicks<T> levelChunkTicks = this.allContainers.get(ChunkPos.asLong(pos));
         return levelChunkTicks != null && levelChunkTicks.hasScheduledTick(pos, type);
+        } finally { lock.unlock(); } // Canvas - lock
     }
 
     @Override
     public boolean willTickThisTick(BlockPos pos, T type) {
+        try { lock.lock(); // Canvas - lock
         this.calculateTickSetIfNeeded();
         return this.toRunThisTickSet.contains(ScheduledTick.probe(type, pos));
+        } finally { lock.unlock(); } // Canvas - lock
     }
 
     private void calculateTickSetIfNeeded() {
@@ -233,6 +_,7 @@
     }
 
     public void clearArea(BoundingBox area) {
+        try { lock.lock(); // Canvas - lock
         Predicate<ScheduledTick<T>> predicate = scheduledTick -> area.isInside(scheduledTick.pos());
         this.forContainersInArea(area, (pos, container) -> {
             ScheduledTick<T> scheduledTick = container.peek();
@@ -248,6 +_,7 @@
         });
         this.alreadyRunThisTick.removeIf(predicate);
         this.toRunThisTick.removeIf(predicate);
+        } finally { lock.unlock(); } // Canvas - lock
     }
 
     public void copyArea(BoundingBox area, Vec3i offset) {
@@ -255,6 +_,7 @@
     }
 
     public void copyAreaFrom(LevelTicks<T> levelTicks, BoundingBox area, Vec3i offset) {
+        try { lock.lock(); // Canvas - lock
         List<ScheduledTick<T>> list = new ArrayList<>();
         Predicate<ScheduledTick<T>> predicate = scheduledTick -> area.isInside(scheduledTick.pos());
         levelTicks.alreadyRunThisTick.stream().filter(predicate).forEach(list::add);
@@ -274,11 +_,14 @@
                 )
             )
         );
+        } finally { lock.unlock(); } // Canvas - lock
     }
 
     @Override
     public int count() {
+        try { lock.lock(); // Canvas - lock
         return this.allContainers.values().stream().mapToInt(TickAccess::count).sum();
+        } finally { lock.unlock(); } // Canvas - lock
     }
 
     @FunctionalInterface
