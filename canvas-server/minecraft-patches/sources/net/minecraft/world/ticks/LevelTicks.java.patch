--- a/net/minecraft/world/ticks/LevelTicks.java
+++ b/net/minecraft/world/ticks/LevelTicks.java
@@ -1,9 +_,11 @@
 package net.minecraft.world.ticks;
 
+import com.google.common.collect.Sets;
 import it.unimi.dsi.fastutil.longs.Long2LongMap;
 import it.unimi.dsi.fastutil.longs.Long2LongMaps;
 import it.unimi.dsi.fastutil.longs.Long2LongOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+import it.unimi.dsi.fastutil.longs.Long2ObjectMaps;
 import it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.Long2LongMap.Entry;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
@@ -11,11 +_,17 @@
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Comparator;
+import java.util.Iterator;
 import java.util.List;
 import java.util.LongSummaryStatistics;
+import java.util.Map;
 import java.util.PriorityQueue;
 import java.util.Queue;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.PriorityBlockingQueue;
+import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.BiConsumer;
 import java.util.function.LongPredicate;
 import java.util.function.Predicate;
@@ -32,17 +_,29 @@
     private static final Comparator<LevelChunkTicks<?>> CONTAINER_DRAIN_ORDER = (levelChunkTicks, levelChunkTicks1) -> ScheduledTick.INTRA_TICK_DRAIN_ORDER
         .compare(levelChunkTicks.peek(), levelChunkTicks1.peek());
     private final LongPredicate tickCheck;
-    private final Long2ObjectMap<LevelChunkTicks<T>> allContainers = new Long2ObjectOpenHashMap<>();
-    private final Long2LongMap nextTickForContainer = Util.make(new Long2LongOpenHashMap(), map -> map.defaultReturnValue(Long.MAX_VALUE));
-    private final Queue<LevelChunkTicks<T>> containersToTick = new PriorityQueue<>(CONTAINER_DRAIN_ORDER);
-    private final Queue<ScheduledTick<T>> toRunThisTick = new ArrayDeque<>();
+    // Canvas start - threadsafe
+    // LevelTicks can be accessed ANYWHERE. these *must* be threadsafe
+    // if it's not, crashes occur EVERYWHERE...
+    private final Long2ObjectMap<LevelChunkTicks<T>> allContainers = Long2ObjectMaps.synchronize(new Long2ObjectOpenHashMap<>());
+    // shockingly, we don't actually need to implement code for a
+    // custom default return value we don't fetch anything that doesn't
+    // already exist, so we can easily swap to a ConcurrentHashMap
+    private final Map<Long, Long> nextTickForContainer = new ConcurrentHashMap<>(); // Util.make(, map -> map.defaultReturnValue(Long.MAX_VALUE));
+    private final Queue<LevelChunkTicks<T>> containersToTick = new PriorityBlockingQueue<>(11, CONTAINER_DRAIN_ORDER);
+    private final Queue<ScheduledTick<T>> toRunThisTick = new ConcurrentLinkedQueue<>();
+    private final AtomicInteger toRunThisTickCount = new AtomicInteger(0);
     private final List<ScheduledTick<T>> alreadyRunThisTick = new ArrayList<>();
-    private final Set<ScheduledTick<?>> toRunThisTickSet = new ObjectOpenCustomHashSet<>(ScheduledTick.UNIQUE_TICK_HASH);
+    private final Set<ScheduledTick<?>> toRunThisTickSet = Sets.newConcurrentHashSet();
+    // Canvas end
     private final BiConsumer<LevelChunkTicks<T>, ScheduledTick<T>> chunkScheduleUpdater = (levelChunkTicks, scheduledTick) -> {
         if (scheduledTick.equals(levelChunkTicks.peek())) {
             this.updateContainerScheduling(scheduledTick);
         }
     };
+    // Canvas start - tick delay config
+    public int ticksSinceLastFluidTickCall = 0;
+    public int ticksSinceLastBlockTickCall = 0;
+    // Canvas end
 
     public LevelTicks(LongPredicate tickCheck) {
         this.tickCheck = tickCheck;
@@ -84,7 +_,7 @@
         profilerFiller.push("collect");
         this.collectTicks(gameTime, maxAllowedTicks, profilerFiller);
         profilerFiller.popPush("run");
-        profilerFiller.incrementCounter("ticksToRun", this.toRunThisTick.size());
+        profilerFiller.incrementCounter("ticksToRun", this.toRunThisTickCount.get()); // Canvas
         this.runCollectedTicks(ticker);
         profilerFiller.popPush("cleanup");
         this.cleanupAfterTick();
@@ -99,12 +_,15 @@
     }
 
     private void sortContainersToTick(long gameTime) {
-        ObjectIterator<Entry> objectIterator = Long2LongMaps.fastIterator(this.nextTickForContainer);
-
+        // Canvas start - concurrent
+        // this is really the only thing that is incompatible with Long2Long and ConcurrentHashMap
+        // so we rewrite this to be compatible.
+        Iterator<Map.Entry<Long, Long>> objectIterator = this.nextTickForContainer.entrySet().iterator();
         while (objectIterator.hasNext()) {
-            Entry entry = objectIterator.next();
-            long longKey = entry.getLongKey();
-            long longValue = entry.getLongValue();
+            Map.Entry<Long, Long> entry = objectIterator.next();
+            long longKey = entry.getKey();
+            long longValue = entry.getValue();
+        // Canvas end
             if (longValue <= gameTime) {
                 LevelChunkTicks<T> levelChunkTicks = this.allContainers.get(longKey);
                 if (levelChunkTicks == null) {
@@ -172,15 +_,17 @@
 
     private void scheduleForThisTick(ScheduledTick<T> tick) {
         this.toRunThisTick.add(tick);
+        this.toRunThisTickCount.incrementAndGet(); // Canvas
     }
 
     private boolean canScheduleMoreTicks(int maxAllowedTicks) {
-        return this.toRunThisTick.size() < maxAllowedTicks;
+        return this.toRunThisTickCount.get() < maxAllowedTicks; // Canvas
     }
 
     private void runCollectedTicks(BiConsumer<BlockPos, T> ticker) {
         while (!this.toRunThisTick.isEmpty()) {
             ScheduledTick<T> scheduledTick = this.toRunThisTick.poll();
+            this.toRunThisTickCount.decrementAndGet(); // Canvas
             if (!this.toRunThisTickSet.isEmpty()) {
                 this.toRunThisTickSet.remove(scheduledTick);
             }
@@ -192,6 +_,7 @@
 
     private void cleanupAfterTick() {
         this.toRunThisTick.clear();
+        this.toRunThisTickCount.set(0); // Canvas
         this.containersToTick.clear();
         this.alreadyRunThisTick.clear();
         this.toRunThisTickSet.clear();
