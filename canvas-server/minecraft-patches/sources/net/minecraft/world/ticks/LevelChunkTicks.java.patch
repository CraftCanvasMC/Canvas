--- a/net/minecraft/world/ticks/LevelChunkTicks.java
+++ b/net/minecraft/world/ticks/LevelChunkTicks.java
@@ -1,5 +_,6 @@
 package net.minecraft.world.ticks;
 
+import com.google.common.collect.Queues;
 import it.unimi.dsi.fastutil.objects.ObjectOpenCustomHashSet;
 import java.util.ArrayList;
 import java.util.Iterator;
@@ -13,15 +_,19 @@
 import java.util.function.Predicate;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ObjectSets;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.ListTag;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.world.level.ChunkPos;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
 public class LevelChunkTicks<T> implements SerializableTickContainer<T>, TickContainerAccess<T>, ca.spottedleaf.moonrise.patches.chunk_system.ticks.ChunkSystemLevelChunkTicks { // Paper - rewrite chunk system
-    private final Queue<ScheduledTick<T>> tickQueue = new PriorityQueue<>(ScheduledTick.DRAIN_ORDER);
+    private final Queue<ScheduledTick<T>> tickQueue = Queues.synchronizedQueue(new PriorityQueue<>(ScheduledTick.DRAIN_ORDER)); // Canvas - synchronized
     @Nullable
     private List<SavedTick<T>> pendingTicks;
-    private final Set<ScheduledTick<?>> ticksPerPosition = new ObjectOpenCustomHashSet<>(ScheduledTick.UNIQUE_TICK_HASH);
+    private final Set<ScheduledTick<?>> ticksPerPosition = ObjectSets.synchronize(new ObjectOpenCustomHashSet<>(ScheduledTick.UNIQUE_TICK_HASH)); // Canvas
     @Nullable
     private BiConsumer<LevelChunkTicks<T>, ScheduledTick<T>> onTickAdded;
 
@@ -48,6 +_,22 @@
         this.dirty = false;
     }
     // Paper end - rewrite chunk system
+    // Canvas start - Threaded Regions
+
+    public void offsetTicks(final long offset) {
+        if (offset == 0 || this.tickQueue.isEmpty()) {
+            return;
+        }
+        final ScheduledTick<T>[] queue = this.tickQueue.toArray(new ScheduledTick[0]);
+        this.tickQueue.clear();
+        for (final ScheduledTick<T> entry : queue) {
+            final ScheduledTick<T> newEntry = new ScheduledTick<>(
+                entry.type(), entry.pos(), entry.triggerTick() + offset, entry.subTickOrder()
+            );
+            this.tickQueue.add(newEntry);
+        }
+    }
+    // Canvas end
 
     public LevelChunkTicks() {
     }
@@ -71,9 +_,17 @@
 
     @Nullable
     public ScheduledTick<T> poll() {
-        ScheduledTick<T> scheduledTick = this.tickQueue.poll();
-        if (scheduledTick != null) {
-            this.ticksPerPosition.remove(scheduledTick); this.dirty = true; // Paper - rewrite chunk system
+        // Canvas start
+        ScheduledTick<T> scheduledTick = null;
+        try {
+            scheduledTick = this.tickQueue.poll();
+            if (scheduledTick != null) {
+                this.ticksPerPosition.remove(scheduledTick); this.dirty = true; // Paper - rewrite chunk system
+            }
+        } catch (Exception e) {
+            MinecraftServer.LOGGER.error("Encountered caught exception when polling chunk ticks, blocking and returning null.", e);
+            return null;
+        // Canvas end
         }
 
         return scheduledTick;
@@ -87,6 +_,7 @@
     }
 
     private void scheduleUnchecked(ScheduledTick<T> tick) {
+        if (tick == null) return; // Canvas
         this.tickQueue.add(tick);
         if (this.onTickAdded != null) {
             this.onTickAdded.accept(this, tick);
@@ -99,15 +_,12 @@
     }
 
     public void removeIf(Predicate<ScheduledTick<T>> predicate) {
-        Iterator<ScheduledTick<T>> iterator = this.tickQueue.iterator();
-
-        while (iterator.hasNext()) {
-            ScheduledTick<T> scheduledTick = iterator.next();
+        this.tickQueue.forEach(scheduledTick -> { // Canvas - threadsafe
             if (predicate.test(scheduledTick)) {
-                iterator.remove(); this.dirty = true; // Paper - rewrite chunk system
+                this.tickQueue.remove(scheduledTick); this.dirty = true; // Paper - rewrite chunk system // Canvas - threadsafe
                 this.ticksPerPosition.remove(scheduledTick);
             }
-        }
+        }); // Canvas - threadsafe
     }
 
     public Stream<ScheduledTick<T>> getAll() {
@@ -126,9 +_,10 @@
             list.addAll(this.pendingTicks);
         }
 
-        for (ScheduledTick<T> scheduledTick : this.tickQueue) {
+        this.tickQueue.forEach(scheduledTick -> { // Canvas - threadsafe
+            if (scheduledTick == null) return; // Canvas - NPE
             list.add(scheduledTick.toSavedTick(gametime));
-        }
+        }); // Canvas - threadsafe
 
         return list;
     }
