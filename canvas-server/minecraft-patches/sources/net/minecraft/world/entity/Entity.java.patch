--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -1,21 +_,32 @@
 package net.minecraft.world.entity;
 
+import ca.spottedleaf.concurrentutil.util.Priority;
+import ca.spottedleaf.moonrise.patches.chunk_system.level.entity.ChunkEntitySlices;
+import ca.spottedleaf.moonrise.patches.chunk_system.level.entity.EntityLookup;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.google.common.collect.ImmutableList.Builder;
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.entity.EntityStatusLock;
+import io.canvasmc.canvas.region.ServerRegions;
+import io.canvasmc.canvas.util.ConcurrentSet;
+import io.canvasmc.canvas.util.ThreadLocalRandomSource;
+import io.papermc.paper.threadedregions.ThreadedRegionizer;
 import it.unimi.dsi.fastutil.floats.FloatArraySet;
 import it.unimi.dsi.fastutil.floats.FloatArrays;
 import it.unimi.dsi.fastutil.floats.FloatSet;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
 import it.unimi.dsi.fastutil.longs.LongSet;
+import it.unimi.dsi.fastutil.longs.LongSets;
 import it.unimi.dsi.fastutil.objects.Object2DoubleArrayMap;
 import it.unimi.dsi.fastutil.objects.Object2DoubleMap;
 import it.unimi.dsi.fastutil.objects.ReferenceArraySet;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Locale;
@@ -23,11 +_,16 @@
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicInteger;
+import java.util.concurrent.atomic.AtomicReference;
+import java.util.concurrent.locks.ReentrantLock;
 import java.util.function.BiConsumer;
 import java.util.function.Predicate;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.Object2DoubleMaps;
 import net.minecraft.BlockUtil;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -44,11 +_,13 @@
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.particles.BlockParticleOption;
 import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.DoubleTag;
 import net.minecraft.nbt.FloatTag;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.nbt.StringTag;
+import net.minecraft.network.Connection;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.chat.HoverEvent;
 import net.minecraft.network.chat.MutableComponent;
@@ -110,13 +_,17 @@
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.border.WorldBorder;
+import net.minecraft.world.level.chunk.LevelChunk;
+import net.minecraft.world.level.chunk.status.ChunkStatus;
 import net.minecraft.world.level.entity.EntityAccess;
 import net.minecraft.world.level.entity.EntityInLevelCallback;
 import net.minecraft.world.level.gameevent.DynamicGameEventListener;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.levelgen.Heightmap;
+import net.minecraft.world.level.levelgen.ThreadSafeLegacyRandomSource;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.FluidState;
+import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.level.material.PushReaction;
 import net.minecraft.world.level.portal.PortalShape;
 import net.minecraft.world.level.portal.TeleportTransition;
@@ -133,6 +_,7 @@
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.ScoreHolder;
 import net.minecraft.world.scores.Team;
+import org.agrona.collections.ObjectHashSet;
 import org.slf4j.Logger;
 
 public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess, ScoreHolder, ca.spottedleaf.moonrise.patches.chunk_system.entity.ChunkSystemEntity, ca.spottedleaf.moonrise.patches.entity_tracker.EntityTrackerEntity {  // Paper - rewrite chunk system // Paper - optimise entity tracker
@@ -145,7 +_,7 @@
     }
 
     // Paper start - Share random for entities to make them more random
-    public static RandomSource SHARED_RANDOM = new RandomRandomSource();
+    public static RandomSource SHARED_RANDOM = ThreadLocalRandomSource.INSTANCE; // Canvas - threadsafe
     // Paper start - replace random
     private static final class RandomRandomSource extends ca.spottedleaf.moonrise.common.util.ThreadUnsafeRandom {
         public RandomRandomSource() {
@@ -175,7 +_,7 @@
     public org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason spawnReason; // Paper - Entity#getEntitySpawnReason
 
     public boolean collisionLoadChunks = false; // Paper
-    private @Nullable org.bukkit.craftbukkit.entity.CraftEntity bukkitEntity;
+    private volatile @Nullable org.bukkit.craftbukkit.entity.CraftEntity bukkitEntity; // Canvas - volatile
 
     public org.bukkit.craftbukkit.entity.CraftEntity getBukkitEntity() {
         if (this.bukkitEntity == null) {
@@ -260,9 +_,9 @@
     public int tickCount;
     private int remainingFireTicks = -this.getFireImmuneTicks();
     public boolean wasTouchingWater;
-    protected Object2DoubleMap<TagKey<Fluid>> fluidHeight = new Object2DoubleArrayMap<>(2);
+    protected Object2DoubleMap<TagKey<Fluid>> fluidHeight = Object2DoubleMaps.synchronize(new Object2DoubleArrayMap<>(2)); // Canvas - synchronize
     protected boolean wasEyeInWater;
-    private final Set<TagKey<Fluid>> fluidOnEyes = new HashSet<>();
+    private final Set<TagKey<Fluid>> fluidOnEyes = new ObjectHashSet<>(); // Canvas - agrona
     public int invulnerableTime;
     protected boolean firstTick = true;
     protected final SynchedEntityData entityData;
@@ -293,7 +_,7 @@
     protected UUID uuid; // Purpur - Add toggle for RNG manipulation
     protected String stringUUID; // Purpur - Add toggle for RNG manipulation
     private boolean hasGlowingTag;
-    private final Set<String> tags = new io.papermc.paper.util.SizeLimitedSet<>(new it.unimi.dsi.fastutil.objects.ObjectOpenHashSet<>(), MAX_ENTITY_TAG_COUNT); // Paper - fully limit tag size - replace set impl
+    private final Set<String> tags = new io.papermc.paper.util.SizeLimitedSet<>(Sets.newConcurrentHashSet(), MAX_ENTITY_TAG_COUNT); // Paper - fully limit tag size - replace set impl // Canvas - concurrent
     private final double[] pistonDeltas = new double[]{0.0, 0.0, 0.0};
     private long pistonDeltasGameTime;
     protected EntityDimensions dimensions;
@@ -306,10 +_,13 @@
     private int lastCrystalSoundPlayTick;
     public boolean hasVisualFire;
     @Nullable
+    // Canvas start
     private BlockState inBlockState = null;
-    private final List<Entity.Movement> movementThisTick = new ArrayList<>();
-    private final Set<BlockState> blocksInside = new ReferenceArraySet<>();
-    private final LongSet visitedBlocks = new LongOpenHashSet();
+    private final List<Entity.Movement> movementThisTick = Collections.synchronizedList(new ArrayList<>());
+    private final Set<BlockState> blocksInside = Sets.newConcurrentHashSet();
+    private final LongSet visitedBlocks = LongSets.synchronize(new LongOpenHashSet());
+    private final ReentrantLock inBlockAndMovementLock = new ReentrantLock(); // Canvas - Threaded Regions
+    // Canvas end
     // CraftBukkit start
     public boolean forceDrops;
     public boolean persist = true;
@@ -345,6 +_,31 @@
     public boolean isTemporarilyActive;
     public long activatedImmunityTick = Integer.MIN_VALUE;
     public @Nullable Boolean immuneToFire = null; // Purpur - Fire immune API
+    // Canvas start
+
+    public ResourceLocation getTypeLocation() {
+        EntityType<?> entityType = this.getType();
+        if (entityType.isCachedResource()) {
+            return entityType.cachedLocation();
+        }
+        entityType.cacheResource(BuiltInRegistries.ENTITY_TYPE.getKey(entityType));
+        return entityType.cachedLocation();
+    }
+
+    public Config.Entities.EntityMask getMask() {
+        EntityType<?> entityType = this.getType();
+        if (entityType.isCachedMask()) {
+            return entityType.getMask();
+        }
+        for (final Config.Entities.EntityMask entityMask : Config.INSTANCE.entities.entityMasks) {
+            if (entityMask.type.equals(getTypeLocation().toString())) {
+                entityType.cacheMask(entityMask);
+                break;
+            }
+        }
+        return entityType.getMask();
+    }
+    // Canvas end
 
     public void inactiveTick() {
     }
@@ -382,6 +_,10 @@
     private int sectionY = Integer.MIN_VALUE;
     private int sectionZ = Integer.MIN_VALUE;
     private boolean updatingSectionStatus;
+    // Canvas start - threadsafe entity status changes
+    public static final Set<Entity> locked = new ConcurrentSet<>();
+    public final EntityStatusLock statusLock = new EntityStatusLock(this);
+    // Canvas end
 
     @Override
     public final boolean moonrise$isHardColliding() {
@@ -549,6 +_,20 @@
     }
     // Purpur end - copied from Mob - API for any mob to burn daylight
 
+    // Canvas start - Threaded Regions
+    public void updateTicks(long fromTickOffset, long fromRedstoneTimeOffset) {
+        if (this.activatedTick != Integer.MIN_VALUE) {
+            this.activatedTick += fromTickOffset;
+        }
+        if (this.activatedImmunityTick != Integer.MIN_VALUE) {
+            this.activatedImmunityTick += fromTickOffset;
+        }
+        if (this.pistonDeltasGameTime != Long.MIN_VALUE) {
+            this.pistonDeltasGameTime += fromRedstoneTimeOffset;
+        }
+    }
+
+    // Canvas end
     public Entity(EntityType<?> entityType, Level level) {
         this.type = entityType;
         this.level = level;
@@ -684,7 +_,7 @@
     public void resendPossiblyDesyncedEntityData(net.minecraft.server.level.ServerPlayer player) {
         if (player.getBukkitEntity().canSee(this.getBukkitEntity())) {
             ServerLevel world = (net.minecraft.server.level.ServerLevel)this.level();
-            net.minecraft.server.level.ChunkMap.TrackedEntity tracker = world == null ? null : world.getChunkSource().chunkMap.entityMap.get(this.getId());
+            net.minecraft.server.level.ChunkMap.TrackedEntity tracker = this.moonrise$getTrackedEntity(); // Canvas - Threaded Regions
             if (tracker == null) {
                 return;
             }
@@ -860,7 +_,9 @@
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("entityBaseTick");
         if (firstTick && this instanceof net.minecraft.world.entity.NeutralMob neutralMob) neutralMob.tickInitialPersistentAnger(level); // Paper - Prevent entity loading causing async lookups
+        this.inBlockAndMovementLock.lock(); // Canvas - Threaded Regions
         this.inBlockState = null;
+        this.inBlockAndMovementLock.unlock(); // Canvas - Threaded Regions
         if (this.isPassenger() && this.getVehicle().isRemoved()) {
             this.stopRiding();
         }
@@ -1133,8 +_,8 @@
         } else {
             this.wasOnFire = this.isOnFire();
             if (type == MoverType.PISTON) {
-                this.activatedTick = Math.max(this.activatedTick, MinecraftServer.currentTick + 20); // Paper - EAR 2
-                this.activatedImmunityTick = Math.max(this.activatedImmunityTick, MinecraftServer.currentTick + 20);   // Paper - EAR 2
+                this.activatedTick = Math.max(this.activatedTick, ServerRegions.getCurrentTick(this.level.level()) + 20); // Paper - EAR 2 // Canvas - Threaded Regions
+                this.activatedImmunityTick = Math.max(this.activatedImmunityTick, ServerRegions.getCurrentTick(this.level.level()) + 20);   // Paper - EAR 2 // Canvas - Threaded Regions
                 movement = this.limitPistonMovement(movement);
                 if (movement.equals(Vec3.ZERO)) {
                     return;
@@ -1389,6 +_,12 @@
     }
 
     protected BlockPos getOnPos(float yOffset) {
+        // Canvas start
+        int i = Mth.floor(this.position.x);
+        int j = Mth.floor(this.position.y - (double) yOffset);
+        int k = Mth.floor(this.position.z);
+        BlockPos fallback = new BlockPos(i, j, k);
+        // Canvas end
         if (this.mainSupportingBlockPos.isPresent() && this.level().getChunkIfLoadedImmediately(this.mainSupportingBlockPos.get()) != null) { // Paper - ensure no loads
             BlockPos blockPos = this.mainSupportingBlockPos.get();
             if (!(yOffset > 1.0E-5F)) {
@@ -1402,10 +_,7 @@
                     : blockPos;
             }
         } else {
-            int floor = Mth.floor(this.position.x);
-            int floor1 = Mth.floor(this.position.y - yOffset);
-            int floor2 = Mth.floor(this.position.z);
-            return new BlockPos(floor, floor1, floor2);
+            return fallback; // Canvas
         }
     }
 
@@ -1433,7 +_,7 @@
         if (pos.lengthSqr() <= 1.0E-7) {
             return pos;
         } else {
-            long gameTime = this.level().getGameTime();
+            long gameTime = this.level().getRedstoneGameTime(); // Canvas - Threaded Regions
             if (gameTime != this.pistonDeltasGameTime) {
                 Arrays.fill(this.pistonDeltas, 0.0);
                 this.pistonDeltasGameTime = gameTime;
@@ -1662,7 +_,7 @@
                         return;
                     }
 
-                    BlockState blockState = this.level().getBlockState(blockPos);
+                    BlockState blockState = this.level().getBlockStateIfLoaded(blockPos); if (blockState == null) continue; // Canvas - prevent syncload
                     if (!blockState.isAir() && set.add(blockPos.asLong())) {
                         try {
                             VoxelShape entityInsideCollisionShape = blockState.getEntityInsideCollisionShape(this.level(), blockPos);
@@ -1955,11 +_,23 @@
                 && abstractBoat.getBoundingBox().minY <= eyeY
         )) {
             BlockPos blockPos = BlockPos.containing(this.getX(), eyeY, this.getZ());
-            FluidState fluidState = this.level().getFluidState(blockPos);
+            // Canvas start - prevent syncload
+            FluidState fluidState = null;
+            if (level.isOutsideBuildHeight(this.blockPosition)) {
+                fluidState = Fluids.EMPTY.defaultFluidState();
+            } else {
+                @Nullable LevelChunk chunk = this.level.getChunkIfLoaded(this.chunkPosition.x, this.chunkPosition.z);
+                if (chunk != null) {
+                    fluidState = chunk.getFluidState(blockPos);
+                }
+            }
+            if (fluidState != null) {
+            // Canvas end
             double d = blockPos.getY() + fluidState.getHeight(this.level(), blockPos);
             if (d > eyeY) {
                 fluidState.getTags().forEach(this.fluidOnEyes::add);
             }
+            }
         }
     }
 
@@ -2888,7 +_,13 @@
 
         for (int currChunkZ = minChunkZ; currChunkZ <= maxChunkZ; ++currChunkZ) {
             for (int currChunkX = minChunkX; currChunkX <= maxChunkX; ++currChunkX) {
-                final net.minecraft.world.level.chunk.LevelChunkSection[] sections = chunkSource.getChunk(currChunkX, currChunkZ, net.minecraft.world.level.chunk.status.ChunkStatus.FULL, true).getSections();
+                // Canvas start - don't call syncload
+                @Nullable net.minecraft.world.level.chunk.ChunkAccess access = chunkSource.getChunk(currChunkX, currChunkZ, net.minecraft.world.level.chunk.status.ChunkStatus.FULL, false);
+                if (access == null) {
+                    continue;
+                }
+                final net.minecraft.world.level.chunk.LevelChunkSection[] sections = access.getSections();
+                // Canvas end
 
                 for (int currChunkY = minChunkY; currChunkY <= maxChunkY; ++currChunkY) {
                     final int sectionIdx = currChunkY - minSection;
@@ -3331,6 +_,7 @@
                     TeleportTransition portalDestination = this.portalProcess.getPortalDestination(serverLevel, this);
                     if (portalDestination != null) {
                         ServerLevel level = portalDestination.newLevel();
+                        level.wake(); // Canvas - wake the thread if sleeping
                         if (this instanceof ServerPlayer // CraftBukkit - always call event for players
                             || (level != null && (level.dimension() == serverLevel.dimension() || this.canTeleport(serverLevel, level)))) { // CraftBukkit
                             this.teleport(portalDestination);
@@ -3792,6 +_,7 @@
     public Entity teleport(TeleportTransition teleportTransition) {
         // Paper start - Fix item duplication and teleport issues
         if ((!this.isAlive() || !this.valid) && (teleportTransition.newLevel() != this.level)) {
+            LOGGER.warn("Illegal Entity Teleport details: !Alive:{} !Valid:{} TeleportDest:{}", !this.isAlive(), !this.valid, (teleportTransition.newLevel() != this.level)); // Canvas - include extra debug info
             LOGGER.warn("Illegal Entity Teleport " + this + " to " + teleportTransition.newLevel() + ":" + teleportTransition.position(), new Throwable());
             return null;
         }
@@ -3870,6 +_,7 @@
     }
 
     private Entity teleportCrossDimension(ServerLevel level, TeleportTransition teleportTransition) {
+        this.level.wake(); // Canvas - wake if sleeping
         List<Entity> passengers = this.getPassengers();
         List<Entity> list = new ArrayList<>(passengers.size());
         this.ejectPassengers();
@@ -3950,7 +_,97 @@
     public void teleportSetPosition(PositionMoveRotation positionMovementRotation, Set<Relative> relatives) {
         PositionMoveRotation positionMoveRotation = PositionMoveRotation.of(this);
         PositionMoveRotation positionMoveRotation1 = PositionMoveRotation.calculateAbsolute(positionMoveRotation, positionMovementRotation, relatives);
+        // Canvas start - Threaded Regions
+        ServerLevel oldLevel = this.level.level();
+        ChunkPos position = new ChunkPos(new BlockPos(
+            (int) Math.round(positionMovementRotation.position().x), (int) Math.round(positionMovementRotation.position().y), (int) Math.round(positionMovementRotation.position().z)));
+        // syncload both of these, we need them both in regions
+        this.level.getChunk(position.x, position.z, ChunkStatus.FULL, true);
+        this.level.getChunk(chunkPosition().x, chunkPosition().z, ChunkStatus.FULL, true);
+        ThreadedRegionizer.ThreadedRegion<ServerRegions.TickRegionData, ServerRegions.TickRegionSectionData> newRegion = null;
+        ThreadedRegionizer.ThreadedRegion<ServerRegions.TickRegionData, ServerRegions.TickRegionSectionData> oldRegion = null;
+        if (Config.INSTANCE.ticking.enableThreadedRegionizing) {
+            newRegion = this.level.level().regioniser.getRegionAtUnsynchronised(position.x, position.z);
+            oldRegion = this.level.level().regioniser.getRegionAtUnsynchronised(chunkPosition.x, chunkPosition.z);
+        }
         this.setPosRaw(positionMoveRotation1.position().x, positionMoveRotation1.position().y, positionMoveRotation1.position().z);
+        if (newRegion != null && oldRegion != null) {
+            // moved to new region, move ourselves
+            if (newRegion == oldRegion) {
+                // LOGGER.info("Teleported entity across same region surrounding {}", newRegion.getCenterChunk()); // debug print
+            } else {
+                ServerRegions.WorldTickData from = oldRegion.getData().tickData;
+                ServerRegions.WorldTickData to = newRegion.getData().tickData;
+                // general entity containing and tracking
+                from.removeEntity(this, false);
+                from.trackerEntities.remove(this);
+                to.addEntity(this, false);
+                to.trackerEntities.add(this);
+                // navigating mobs
+                if (this instanceof Mob mob && from.navigatingMobs.contains(this)) {
+                    from.navigatingMobs.remove(mob);
+                    to.navigatingMobs.add(mob);
+                }
+                // entity ticking
+                if (from.entityTickList.contains(this)) {
+                    from.entityTickList.remove(this);
+                    to.entityTickList.add(this);
+                }
+                // loaded entities
+                if (from.loadedEntities.contains(this)) {
+                    from.loadedEntities.remove(this);
+                    to.loadedEntities.add(this);
+                }
+                LOGGER.info("Moved entity {} across region surrounding {} and {}", this, newRegion.getCenterChunk(), oldRegion.getCenterChunk()); // debug print
+            }
+            // we have the extra check for regions because if we disable regionizing, then they are always null
+        } else if (Config.INSTANCE.ticking.enableThreadedRegionizing) LOGGER.warn("Teleporting entity into possible unknown(null) region, A(destination):{}, B(old):{}", newRegion == null ? null : newRegion.getCenterChunk(), oldRegion == null ? null : oldRegion.getCenterChunk(), new Throwable());
+        // cleanup schedule
+        ThreadedRegionizer.ThreadedRegion<ServerRegions.TickRegionData, ServerRegions.TickRegionSectionData> threadedRegion = this.level.level().regioniser.getRegionAtSynchronised(this.chunkPosition.x, this.chunkPosition.z);
+        if (threadedRegion != null) {
+            ServerRegions.WorldTickData regionData = threadedRegion.getData().tickData;
+            Runnable run = (() -> {
+                AtomicBoolean entityTickList = new AtomicBoolean(false);
+                AtomicBoolean loadedEntities = new AtomicBoolean(false);
+                AtomicBoolean navigatingMobs = new AtomicBoolean(false);
+                for (final ServerLevel level : this.getServer().getAllLevels()) {
+                    level.regioniser.computeForAllRegions(region -> {
+                        ServerRegions.WorldTickData from = region.getData().tickData;
+                        from.removeEntity(this, false);
+                        from.trackerEntities.remove(this);
+                        if (this instanceof Mob mob && from.navigatingMobs.contains(this)) {
+                            navigatingMobs.set(true);
+                            from.navigatingMobs.remove(mob);
+                        }
+                        if (from.entityTickList.contains(this)) {
+                            entityTickList.set(true);
+                            from.entityTickList.remove(this);
+                        }
+                        if (from.loadedEntities.contains(this)) {
+                            loadedEntities.set(true);
+                            from.loadedEntities.remove(this);
+                        }
+                    });
+                }
+                // now we are completely removed from the world, there is quite literally NOTHING that ties us to anywhere, we can now add back.
+                // this is non-null, we syncloaded earlier.
+                regionData.addEntity(this);
+                regionData.trackerEntities.add(this);
+                if (navigatingMobs.get()) {
+                    regionData.navigatingMobs.add((Mob) this);
+                }
+                if (entityTickList.get()) {
+                    regionData.entityTickList.add(this);
+                }
+                if (loadedEntities.get()) {
+                    regionData.loadedEntities.add(this);
+                }
+            });
+            if (Config.INSTANCE.ticking.enableThreadedRegionizing) {
+                MinecraftServer.getThreadedServer().taskQueue.queueTickTaskQueue(this.level.level(), this.chunkPosition.x, this.chunkPosition.z, run, Priority.BLOCKING);
+            } else this.level.scheduleForPreNextTick(run);
+        }
+        // Canvas end
         this.setYRot(positionMoveRotation1.yRot());
         this.setYHeadRot(positionMoveRotation1.yRot());
         this.setXRot(positionMoveRotation1.xRot());
@@ -4735,11 +_,18 @@
     }
 
     public BlockState getInBlockState() {
+        this.inBlockAndMovementLock.lock(); // Canvas - Threaded Regions
         if (this.inBlockState == null) {
             this.inBlockState = this.level().getBlockState(this.blockPosition());
         }
 
+        // Canvas start - Threaded Regions
+        try {
         return this.inBlockState;
+        } finally {
+            this.inBlockAndMovementLock.unlock();
+        }
+        // Canvas end
     }
 
     public ChunkPos chunkPosition() {
@@ -4836,15 +_,18 @@
     }
     public final void setPosRaw(double x, double y, double z, boolean forceBoundingBoxUpdate) {
         // Paper start - rewrite chunk system
+        this.statusLock.acquire(EntityStatusLock.Status.POS_CHANGE); // Canvas - threadsafe entity status changes
         if (this.updatingSectionStatus) {
             LOGGER.error(
                 "Refusing to update position for entity " + this + " to position " + new Vec3(x, y, z)
                     + " since it is processing a section status update", new Throwable()
             );
+            this.statusLock.release(); // Canvas - threadsafe entity status changes
             return;
         }
         // Paper end - rewrite chunk system
         if (!checkPosition(this, x, y, z)) {
+            this.statusLock.release(); // Canvas - threadsafe entity status changes
             return;
         }
         // Paper end - Block invalid positions and bounding box
@@ -4867,7 +_,9 @@
             int floor2 = Mth.floor(z);
             if (floor != this.blockPosition.getX() || floor1 != this.blockPosition.getY() || floor2 != this.blockPosition.getZ()) {
                 this.blockPosition = new BlockPos(floor, floor1, floor2);
+                this.inBlockAndMovementLock.lock(); // Canvas - Threaded Regions
                 this.inBlockState = null;
+                this.inBlockAndMovementLock.unlock(); // Canvas - Threaded Regions
                 if (SectionPos.blockToSectionCoord(floor) != this.chunkPosition.x || SectionPos.blockToSectionCoord(floor2) != this.chunkPosition.z) {
                     this.chunkPosition = new ChunkPos(this.blockPosition);
                 }
@@ -4881,6 +_,7 @@
             this.setBoundingBox(this.makeBoundingBox());
         }
         // Paper end - Block invalid positions and bounding box
+        this.statusLock.release(); // Canvas - threadsafe entity status changes
     }
 
     public void checkDespawn() {
@@ -4975,6 +_,14 @@
     @Override
     public final void setRemoved(Entity.RemovalReason removalReason, org.bukkit.event.entity.EntityRemoveEvent.Cause cause) {
         // Paper start - rewrite chunk system
+        // Canvas start - threadsafe entity status changes
+        this.statusLock.acquire(EntityStatusLock.Status.REMOVED);
+        ChunkEntitySlices slices = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemLevel)this.level).moonrise$getEntityLookup().getChunk(this.chunkPosition.x, this.chunkPosition.z);
+        try {
+            if (slices != null) {
+                slices.statusLock.lock();
+            }
+        // Canvas end
         if (!((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemLevel)this.level).moonrise$getEntityLookup().canRemoveEntity((Entity)(Object)this)) {
             LOGGER.warn("Entity " + this + " is currently prevented from being removed from the world since it is processing section status updates", new Throwable());
             return;
@@ -4999,6 +_,14 @@
             // Players need to be special cased, because they are regularly removed from the world
             this.retireScheduler();
         }
+        // Canvas start - threadsafe entity status changes
+        } finally {
+            this.statusLock.release();
+            if (slices != null) {
+                slices.statusLock.unlock();
+            }
+        }
+        // Canvas end
         // Paper end - Folia schedulers
     }
 
@@ -5014,6 +_,23 @@
         // we need to force create the bukkit entity so that the scheduler can be retired...
         this.getBukkitEntity().taskScheduler.retire();
     }
+    // Canvas start - threadsafe entity status changes
+
+    public final void tickScheduler() {
+        // we lock like this to prevent the entity from being removed while we tick its scheduler
+        // if we don't, we run the risk of crashing the server
+        this.statusLock.acquire(EntityStatusLock.Status.SCHEDULER);
+        final org.bukkit.craftbukkit.entity.CraftEntity bukkit = this.getBukkitEntityRaw();
+        if (bukkit != null) {
+            if (this.isRemoved()) {
+                this.statusLock.release();
+                return; // already removed, return.
+            }
+            bukkit.taskScheduler.executeTick();
+        }
+        this.statusLock.release();
+    }
+    // Canvas end
     // Paper end - Folia schedulers
 
     @Override
