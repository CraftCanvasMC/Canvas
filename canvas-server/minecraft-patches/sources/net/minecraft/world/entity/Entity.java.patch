--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -3,17 +_,15 @@
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
-import com.google.common.collect.Sets;
 import com.google.common.collect.ImmutableList.Builder;
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.Config;
+import io.netty.util.internal.ConcurrentSet;
 import it.unimi.dsi.fastutil.floats.FloatArraySet;
 import it.unimi.dsi.fastutil.floats.FloatArrays;
 import it.unimi.dsi.fastutil.floats.FloatSet;
-import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
-import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.objects.Object2DoubleArrayMap;
 import it.unimi.dsi.fastutil.objects.Object2DoubleMap;
-import it.unimi.dsi.fastutil.objects.ReferenceArraySet;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashSet;
@@ -23,11 +_,13 @@
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.BiConsumer;
 import java.util.function.Predicate;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.Object2DoubleMaps;
 import net.minecraft.BlockUtil;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -44,6 +_,7 @@
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.particles.BlockParticleOption;
 import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.DoubleTag;
 import net.minecraft.nbt.FloatTag;
@@ -110,13 +_,16 @@
 import net.minecraft.world.level.block.SoundType;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.border.WorldBorder;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.entity.EntityAccess;
 import net.minecraft.world.level.entity.EntityInLevelCallback;
 import net.minecraft.world.level.gameevent.DynamicGameEventListener;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.levelgen.Heightmap;
+import net.minecraft.world.level.levelgen.ThreadSafeLegacyRandomSource;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.material.FluidState;
+import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.level.material.PushReaction;
 import net.minecraft.world.level.portal.PortalShape;
 import net.minecraft.world.level.portal.TeleportTransition;
@@ -145,7 +_,7 @@
     }
 
     // Paper start - Share random for entities to make them more random
-    public static RandomSource SHARED_RANDOM = new RandomRandomSource();
+    public static RandomSource SHARED_RANDOM = new ThreadSafeLegacyRandomSource(net.minecraft.world.level.levelgen.RandomSupport.generateUniqueSeed()); // Canvas - threadsafe
     // Paper start - replace random
     private static final class RandomRandomSource extends ca.spottedleaf.moonrise.common.util.ThreadUnsafeRandom {
         public RandomRandomSource() {
@@ -260,7 +_,7 @@
     public int tickCount;
     private int remainingFireTicks = -this.getFireImmuneTicks();
     public boolean wasTouchingWater;
-    protected Object2DoubleMap<TagKey<Fluid>> fluidHeight = new Object2DoubleArrayMap<>(2);
+    protected Object2DoubleMap<TagKey<Fluid>> fluidHeight = Object2DoubleMaps.synchronize(new Object2DoubleArrayMap<>(2)); // Canvas - synchronize
     protected boolean wasEyeInWater;
     private final Set<TagKey<Fluid>> fluidOnEyes = new HashSet<>();
     public int invulnerableTime;
@@ -306,15 +_,17 @@
     private int lastCrystalSoundPlayTick;
     public boolean hasVisualFire;
     @Nullable
-    private BlockState inBlockState = null;
-    private final List<Entity.Movement> movementThisTick = new ArrayList<>();
-    private final Set<BlockState> blocksInside = new ReferenceArraySet<>();
-    private final LongSet visitedBlocks = new LongOpenHashSet();
+    // Canvas start
+    private volatile BlockState inBlockState = null; // volatile
+    private final List<Entity.Movement> movementThisTick = new CopyOnWriteArrayList<>();
+    private final Set<BlockState> blocksInside = new ConcurrentSet<>();
+    private final Set<Long> visitedBlocks = new ConcurrentSet<>();
+    // Canvas end
     // CraftBukkit start
     public boolean forceDrops;
     public boolean persist = true;
     public boolean visibleByDefault = true;
-    public boolean valid;
+    public volatile boolean valid; // Canvas - volatile
     public boolean inWorld = false;
     public boolean generation;
     public int maxAirTicks = this.getDefaultMaxAirSupply(); // CraftBukkit - SPIGOT-6907: re-implement LivingEntity#setMaximumAir()
@@ -345,6 +_,31 @@
     public boolean isTemporarilyActive;
     public long activatedImmunityTick = Integer.MIN_VALUE;
     public @Nullable Boolean immuneToFire = null; // Purpur - Fire immune API
+    // Canvas start
+
+    public ResourceLocation getTypeLocation() {
+        EntityType<?> entityType = this.getType();
+        if (entityType.isCachedResource()) {
+            return entityType.cachedLocation();
+        }
+        entityType.cacheResource(BuiltInRegistries.ENTITY_TYPE.getKey(entityType));
+        return entityType.cachedLocation();
+    }
+
+    public Config.EntityMask getMask() {
+        EntityType<?> entityType = this.getType();
+        if (entityType.isCachedMask()) {
+            return entityType.getMask();
+        }
+        for (final Config.EntityMask entityMask : Config.INSTANCE.entityMasks) {
+            if (entityMask.type.equals(getTypeLocation().toString())) {
+                entityType.cacheMask(entityMask);
+                break;
+            }
+        }
+        return entityType.getMask();
+    }
+    // Canvas end
 
     public void inactiveTick() {
     }
@@ -1389,8 +_,14 @@
     }
 
     protected BlockPos getOnPos(float yOffset) {
+        // Canvas start
+        int i = Mth.floor(this.position.x);
+        int j = Mth.floor(this.position.y - (double) yOffset);
+        int k = Mth.floor(this.position.z);
+        BlockPos fallback = new BlockPos(i, j, k);
+        // Canvas end
         if (this.mainSupportingBlockPos.isPresent() && this.level().getChunkIfLoadedImmediately(this.mainSupportingBlockPos.get()) != null) { // Paper - ensure no loads
-            BlockPos blockPos = this.mainSupportingBlockPos.get();
+            BlockPos blockPos = this.mainSupportingBlockPos.orElse(fallback); // Canvas - fallback
             if (!(yOffset > 1.0E-5F)) {
                 return blockPos;
             } else {
@@ -1402,10 +_,7 @@
                     : blockPos;
             }
         } else {
-            int floor = Mth.floor(this.position.x);
-            int floor1 = Mth.floor(this.position.y - yOffset);
-            int floor2 = Mth.floor(this.position.z);
-            return new BlockPos(floor, floor1, floor2);
+            return fallback; // Canvas - fallback
         }
     }
 
@@ -1650,7 +_,8 @@
 
     private void checkInsideBlocks(List<Entity.Movement> movements, Set<BlockState> blocksInside) {
         if (this.isAffectedByBlocks()) {
-            LongSet set = this.visitedBlocks;
+            level.scheduleOnMain(() -> { // Canvas
+            Set<Long> set = this.visitedBlocks; // Canvas
 
             for (Entity.Movement movement : movements) {
                 Vec3 vec3 = movement.from();
@@ -1662,7 +_,15 @@
                         return;
                     }
 
-                    BlockState blockState = this.level().getBlockState(blockPos);
+                    // Canvas start - prevent syncload
+                    BlockState blockState;
+                    @Nullable LevelChunk possiblyLoaded = this.level.getChunkIfLoaded(this.chunkPosition.x, this.chunkPosition.z);
+                    if (possiblyLoaded != null) {
+                        blockState = possiblyLoaded.getBlockState(blockPos);
+                    } else {
+                        continue;
+                    }
+                    // Canvas end
                     if (!blockState.isAir() && set.add(blockPos.asLong())) {
                         try {
                             VoxelShape entityInsideCollisionShape = blockState.getEntityInsideCollisionShape(this.level(), blockPos);
@@ -1688,6 +_,7 @@
             }
 
             set.clear();
+            }); // Canvas
         }
     }
 
@@ -1955,11 +_,23 @@
                 && abstractBoat.getBoundingBox().minY <= eyeY
         )) {
             BlockPos blockPos = BlockPos.containing(this.getX(), eyeY, this.getZ());
-            FluidState fluidState = this.level().getFluidState(blockPos);
+            // Canvas start - prevent syncload
+            FluidState fluidState = null;
+            if (level.isOutsideBuildHeight(this.blockPosition)) {
+                fluidState = Fluids.EMPTY.defaultFluidState();
+            } else {
+                @Nullable LevelChunk chunk = this.level.getChunkIfLoaded(this.chunkPosition.x, this.chunkPosition.z);
+                if (chunk != null) {
+                    fluidState = chunk.getFluidState(blockPos);
+                }
+            }
+            if (fluidState != null) {
+            // Canvas end
             double d = blockPos.getY() + fluidState.getHeight(this.level(), blockPos);
             if (d > eyeY) {
                 fluidState.getTags().forEach(this.fluidOnEyes::add);
             }
+            }
         }
     }
 
@@ -2090,7 +_,7 @@
         this.yo = y;
         this.zo = d1;
         this.setPos(d, y, d1);
-        if (this.valid) this.level.getChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4); // CraftBukkit
+        if (false) this.level.getChunk((int) Math.floor(this.getX()) >> 4, (int) Math.floor(this.getZ()) >> 4); // CraftBukkit // Canvas - prevent syncload
     }
 
     public void moveTo(Vec3 vec) {
@@ -3870,6 +_,11 @@
     }
 
     private Entity teleportCrossDimension(ServerLevel level, TeleportTransition teleportTransition) {
+        // Canvas start
+        if (this instanceof ServerPlayer player) {
+            player.serverLevel().notifyNewConnection(player.connection.connection);
+        }
+        // Canvas end
         List<Entity> passengers = this.getPassengers();
         List<Entity> list = new ArrayList<>(passengers.size());
         this.ejectPassengers();
@@ -4739,7 +_,7 @@
             this.inBlockState = this.level().getBlockState(this.blockPosition());
         }
 
-        return this.inBlockState;
+        return this.inBlockState == null ? Blocks.AIR.defaultBlockState() : this.inBlockState; // Canvas - ensure not null
     }
 
     public ChunkPos chunkPosition() {
@@ -4835,6 +_,18 @@
         this.setPosRaw(x, y, z, false);
     }
     public final void setPosRaw(double x, double y, double z, boolean forceBoundingBoxUpdate) {
+        // Canvas start - ensure section status is caught
+        if (this.updatingSectionStatus) {
+            final double fx = x;
+            final double fy = y;
+            final double fz = z;
+            ((ServerLevel)this.level()).chunkSource.mainThreadProcessor.schedule(() -> {
+                this.setPosRaw(fx, fy, fz, forceBoundingBoxUpdate);
+            });
+            return;
+        }
+        // Canvas end
+        // Paper end - Block invalid positions and bounding box
         // Paper start - rewrite chunk system
         if (this.updatingSectionStatus) {
             LOGGER.error(
@@ -4976,7 +_,7 @@
     public final void setRemoved(Entity.RemovalReason removalReason, org.bukkit.event.entity.EntityRemoveEvent.Cause cause) {
         // Paper start - rewrite chunk system
         if (!((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemLevel)this.level).moonrise$getEntityLookup().canRemoveEntity((Entity)(Object)this)) {
-            LOGGER.warn("Entity " + this + " is currently prevented from being removed from the world since it is processing section status updates", new Throwable());
+            // LOGGER.warn("Entity " + this + " is currently prevented from being removed from the world since it is processing section status updates", new Throwable()); // Canvas
             return;
         }
         // Paper end - rewrite chunk system
@@ -4996,6 +_,12 @@
         this.onRemoval(removalReason);
         // Paper start - Folia schedulers
         if (!(this instanceof ServerPlayer) && removalReason != RemovalReason.CHANGED_DIMENSION && !alreadyRemoved) {
+            // Canvas start
+            if (this.getBukkitEntity().taskScheduler.retired) {
+                LOGGER.warn("Entity {} already retired(possibly being removed from another thread). Ignoring call.");
+                return;
+            }
+            // Canvas end
             // Players need to be special cased, because they are regularly removed from the world
             this.retireScheduler();
         }
