--- a/net/minecraft/world/entity/ai/goal/GoalSelector.java
+++ b/net/minecraft/world/entity/ai/goal/GoalSelector.java
@@ -1,6 +_,7 @@
 package net.minecraft.world.entity.ai.goal;
 
 import com.google.common.annotations.VisibleForTesting;
+import io.canvasmc.canvas.Config;
 import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
 import java.util.EnumMap;
 import java.util.EnumSet;
@@ -27,9 +_,22 @@
     private static final Goal.Flag[] GOAL_FLAG_VALUES = Goal.Flag.values(); // Paper - remove streams from GoalSelector
     private final ca.spottedleaf.moonrise.common.set.OptimizedSmallEnumSet<net.minecraft.world.entity.ai.goal.Goal.Flag> goalTypes = new ca.spottedleaf.moonrise.common.set.OptimizedSmallEnumSet<>(Goal.Flag.class); // Paper - remove streams from GoalSelector
     private int curRate; // Paper - EAR 2
+    public net.minecraft.world.entity.Mob owner = null; // Canvas
 
     public void addGoal(int priority, Goal goal) {
-        this.availableGoals.add(new WrappedGoal(priority, goal));
+        // Canvas start
+        WrappedGoal wrappedGoal = new WrappedGoal(priority, goal);
+        if (Config.COMPILED_GOAL_MASKS.containsKey(goal.getClass())) {
+            Config.Entities.GoalMask mask = Config.COMPILED_GOAL_MASKS.get(goal.getClass());
+            if (mask.disableGoal) {
+                // We don't even try adding it, server has disabled the goal.
+                return;
+            } else if (mask.goalTickDelay > 0) {
+                wrappedGoal.setTickDelay(mask.goalTickDelay);
+            }
+        }
+        this.availableGoals.add(wrappedGoal);
+        // Canvas end
     }
 
     @VisibleForTesting
@@ -99,7 +_,15 @@
 
         for (WrappedGoal wrappedGoalx : this.availableGoals) {
             // Paper start
-            if (!wrappedGoalx.isRunning() && !goalContainsAnyFlags(wrappedGoalx, this.goalTypes) && goalCanBeReplacedForAllFlags(wrappedGoalx, this.lockedFlags) && wrappedGoalx.canUse()) {
+            if (wrappedGoalx == null) continue; // Canvas - NPE
+            // we have a null check because if the
+            // goal selector is created by a plugin
+            // then most likely the plugin will not
+            // set this field, so it will throw an NPE
+            // unlike vanilla where we set this value
+            // already. by returning -1 we bypass the
+            // delay system, ensuring it works correctly
+            if (!wrappedGoalx.isRunning() && !goalContainsAnyFlags(wrappedGoalx, this.goalTypes) && goalCanBeReplacedForAllFlags(wrappedGoalx, this.lockedFlags) && wrappedGoalx.canUse(owner == null ? -1 : this.owner.tickCount)) { // Canvas
                 long flagIterator = wrappedGoalx.getFlags().getBackingSet();
                 int wrappedGoalSize = wrappedGoalx.getFlags().size();
                 for (int i = 0; i < wrappedGoalSize; ++i) {
