--- a/net/minecraft/world/entity/ai/behavior/Behavior.java
+++ b/net/minecraft/world/entity/ai/behavior/Behavior.java
@@ -2,8 +_,12 @@
 
 import java.util.Map;
 import java.util.Map.Entry;
+import it.unimi.dsi.fastutil.objects.ObjectIterator;
+import it.unimi.dsi.fastutil.objects.Reference2ObjectMap;
+import it.unimi.dsi.fastutil.objects.Reference2ObjectOpenHashMap;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.memory.MemoryStatus;
 
@@ -14,6 +_,10 @@
     private long endTimestamp;
     private final int minDuration;
     private final int maxDuration;
+    // Canvas start
+    private long cachedMemoryModCount = -1;
+    private boolean cachedHasRequiredMemoryState;
+    // Canvas end
     private final String configKey; // Paper - configurable behavior tick rate and timings
 
     public Behavior(Map<MemoryModuleType<?>, MemoryStatus> entryCondition) {
@@ -27,7 +_,7 @@
     public Behavior(Map<MemoryModuleType<?>, MemoryStatus> entryCondition, int minDuration, int maxDuration) {
         this.minDuration = minDuration;
         this.maxDuration = maxDuration;
-        this.entryCondition = entryCondition;
+        this.entryCondition = new Reference2ObjectOpenHashMap<>(entryCondition); // Canvas - use fastutil
         // Paper start - configurable behavior tick rate and timings
         String key = io.papermc.paper.util.MappingEnvironment.reobf() ? io.papermc.paper.util.ObfHelper.INSTANCE.deobfClassName(this.getClass().getName()) : this.getClass().getName();
         int lastSeparator = key.lastIndexOf('.');
@@ -103,16 +_,25 @@
         return this.getClass().getSimpleName();
     }
 
-    protected boolean hasRequiredMemories(E owner) {
-        for (Entry<MemoryModuleType<?>, MemoryStatus> entry : this.entryCondition.entrySet()) {
-            MemoryModuleType<?> memoryModuleType = entry.getKey();
-            MemoryStatus memoryStatus = entry.getValue();
-            if (!owner.getBrain().checkMemory(memoryModuleType, memoryStatus)) {
-                return false;
+    // Canvas start - optimize brain
+    public boolean hasRequiredMemories(E entity) {
+        Brain<?> brain = entity.getBrain();
+        long modCount = brain.getMemoryModCount();
+        if (this.cachedMemoryModCount == modCount) {
+            return this.cachedHasRequiredMemoryState;
+        }
+        this.cachedMemoryModCount = modCount;
+
+        ObjectIterator<Reference2ObjectMap.Entry<MemoryModuleType<?>, MemoryStatus>> fastIterator = ((Reference2ObjectOpenHashMap<MemoryModuleType<?>, MemoryStatus>) this.entryCondition).reference2ObjectEntrySet().fastIterator();
+        while (fastIterator.hasNext()) {
+            Reference2ObjectMap.Entry<MemoryModuleType<?>, MemoryStatus> entry = fastIterator.next();
+            if (!brain.checkMemory(entry.getKey(), entry.getValue())) {
+                return this.cachedHasRequiredMemoryState = false;
             }
         }
 
-        return true;
+        return this.cachedHasRequiredMemoryState = true;
+    // Canvas end
     }
 
     public static enum Status {
