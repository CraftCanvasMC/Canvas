--- a/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
+++ b/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
@@ -60,17 +_,38 @@
                                         poi -> poi.is(PoiTypes.HOME), predicate, mob.blockPosition(), 48, PoiManager.Occupancy.ANY
                                     )
                                     .collect(Collectors.toSet());
-                                Path path = AcquirePoi.findPathToPois(mob, set);
-                                if (path != null && path.canReach()) {
-                                    BlockPos target = path.getTarget();
-                                    Optional<Holder<PoiType>> type = poiManager.getType(target);
-                                    if (type.isPresent()) {
-                                        walkTarget.set(new WalkTarget(target, speedModifier, 1));
-                                        DebugPackets.sendPoiTicketCountPacket(level, target);
+                                // Canvas start - async path processing
+                                if (io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding) {
+                                    // await on path async
+                                    Path possiblePath = AcquirePoi.findPathToPois(mob, set);
+
+                                    // wait on the path to be processed
+                                    io.canvasmc.canvas.entity.pathfinding.AsyncPathProcessor.awaitProcessing(possiblePath, level, path -> {
+                                        if (path == null || !path.canReach() || mutableInt.getValue() < 5) { // read canReach check
+                                            map.long2LongEntrySet().removeIf(entry -> entry.getLongValue() < mutableLong.getValue());
+                                                    return;
+                                        }
+                                        BlockPos blockPos = path.getTarget();
+                                        Optional<Holder<PoiType>> optional2 = poiManager.getType(blockPos);
+                                        if (optional2.isPresent()) {
+                                            walkTarget.set(new WalkTarget(blockPos, speedModifier, 1));
+                                            DebugPackets.sendPoiTicketCountPacket(level, blockPos);
+                                        }
+                                    });
+                                } else {
+                                    Path path = AcquirePoi.findPathToPois(mob, set);
+                                    if (path != null && path.canReach()) {
+                                        BlockPos target = path.getTarget();
+                                        Optional<Holder<PoiType>> type = poiManager.getType(target);
+                                        if (type.isPresent()) {
+                                            walkTarget.set(new WalkTarget(target, speedModifier, 1));
+                                            DebugPackets.sendPoiTicketCountPacket(level, target);
+                                        }
+                                    } else if (mutableInt.getValue() < 5) {
+                                        map.long2LongEntrySet().removeIf(entry -> entry.getLongValue() < mutableLong.getValue());
                                     }
-                                } else if (mutableInt.getValue() < 5) {
-                                    map.long2LongEntrySet().removeIf(entry -> entry.getLongValue() < mutableLong.getValue());
                                 }
+                                // Canvas end - async path processing
 
                                 return true;
                             } else {
