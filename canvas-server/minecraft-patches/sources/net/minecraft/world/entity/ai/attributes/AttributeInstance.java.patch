--- a/net/minecraft/world/entity/ai/attributes/AttributeInstance.java
+++ b/net/minecraft/world/entity/ai/attributes/AttributeInstance.java
@@ -4,10 +_,12 @@
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.Maps;
 import it.unimi.dsi.fastutil.objects.Object2ObjectArrayMap;
+import it.unimi.dsi.fastutil.objects.Object2ObjectMaps;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Consumer;
 import javax.annotation.Nullable;
 import net.minecraft.core.Holder;
@@ -24,8 +_,8 @@
     private final Map<AttributeModifier.Operation, Map<ResourceLocation, AttributeModifier>> modifiersByOperation = Maps.newEnumMap(
         AttributeModifier.Operation.class
     );
-    private final Map<ResourceLocation, AttributeModifier> modifierById = new Object2ObjectArrayMap<>();
-    private final Map<ResourceLocation, AttributeModifier> permanentModifiers = new Object2ObjectArrayMap<>();
+    private final Map<ResourceLocation, AttributeModifier> modifierById = Object2ObjectMaps.synchronize(new Object2ObjectArrayMap<>()); // Canvas - synchronized
+    private final Map<ResourceLocation, AttributeModifier> permanentModifiers = Object2ObjectMaps.synchronize(new Object2ObjectArrayMap<>()); // Canvas - synchronized
     private double baseValue;
     private boolean dirty = true;
     private double cachedValue;
@@ -54,7 +_,7 @@
 
     @VisibleForTesting
     Map<ResourceLocation, AttributeModifier> getModifiers(AttributeModifier.Operation operation) {
-        return this.modifiersByOperation.computeIfAbsent(operation, operation1 -> new Object2ObjectOpenHashMap<>());
+        return this.modifiersByOperation.computeIfAbsent(operation, operation1 -> new ConcurrentHashMap<>()); // Canvas - concurrent
     }
 
     public Set<AttributeModifier> getModifiers() {
@@ -77,7 +_,7 @@
     private void addModifier(AttributeModifier modifier) {
         AttributeModifier attributeModifier = this.modifierById.putIfAbsent(modifier.id(), modifier);
         if (attributeModifier != null) {
-            throw new IllegalArgumentException("Modifier is already applied on this attribute!");
+            return; // Canvas - just return
         } else {
             this.getModifiers(modifier.operation()).put(modifier.id(), modifier);
             this.setDirty();
