--- a/net/minecraft/world/entity/raid/Raider.java
+++ b/net/minecraft/world/entity/raid/Raider.java
@@ -9,6 +_,7 @@
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.HolderGetter;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.syncher.EntityDataAccessor;
@@ -37,14 +_,31 @@
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.ServerLevelAccessor;
+import net.minecraft.world.level.block.entity.BannerPattern;
 import net.minecraft.world.level.pathfinder.Path;
 import net.minecraft.world.phys.Vec3;
 
 public abstract class Raider extends PatrollingMonster {
     protected static final EntityDataAccessor<Boolean> IS_CELEBRATING = SynchedEntityData.defineId(Raider.class, EntityDataSerializers.BOOLEAN);
-    static final Predicate<ItemEntity> ALLOWED_ITEMS = item -> !item.hasPickUpDelay()
-        && item.isAlive()
-        && ItemStack.matches(item.getItem(), Raid.getOminousBannerInstance(item.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)));
+    // Canvas start
+    static final Predicate<ItemEntity> ALLOWED_ITEMS = (itemEntity) -> {
+        ItemStack ominousBanner = ((ServerLevel) itemEntity.level()).ominousBanner;
+        if (ominousBanner == null) {
+            ominousBanner = Raid.getOminousBannerInstance(itemEntity.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN));
+        }
+
+        return !itemEntity.hasPickUpDelay() && itemEntity.isAlive() &&
+            ItemStack.matches(itemEntity.getItem(), ominousBanner);
+    };
+
+    private ItemStack getOminousBanner(HolderGetter<BannerPattern> bannerPatternLookup) {
+        ItemStack ominousBanner = ((ServerLevel) this.level()).ominousBanner;
+        if (ominousBanner == null) {
+            ominousBanner = Raid.getOminousBannerInstance(bannerPatternLookup);
+        }
+        return ominousBanner;
+    }
+    // Canvas end
     @Nullable
     protected Raid raid;
     private int wave;
@@ -147,7 +_,7 @@
     public boolean isCaptain() {
         ItemStack itemBySlot = this.getItemBySlot(EquipmentSlot.HEAD);
         boolean flag = !itemBySlot.isEmpty()
-            && ItemStack.matches(itemBySlot, Raid.getOminousBannerInstance(this.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)));
+            && ItemStack.matches(itemBySlot, getOminousBanner(this.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN))); // Canvas
         boolean isPatrolLeader = this.isPatrolLeader();
         return flag && isPatrolLeader;
     }
@@ -211,7 +_,7 @@
         boolean flag = this.hasActiveRaid() && this.getCurrentRaid().getLeader(this.getWave()) != null;
         if (this.hasActiveRaid()
             && !flag
-            && ItemStack.matches(item, Raid.getOminousBannerInstance(this.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)))) {
+            && ItemStack.matches(item, getOminousBanner(this.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)))) { // Canvas
             // Paper start - EntityPickupItemEvent fixes
             if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityPickupItemEvent(this, entity, 0, false).isCancelled()) {
                 return;
@@ -397,6 +_,16 @@
                 && !this.pathToBanner.isDone()
                 && !this.cannotPickUpBanner();
         }
+        // Canvas start
+
+        private ItemStack getOminousBanner(HolderGetter<BannerPattern> bannerPatternLookup) {
+            ItemStack ominousBanner = ((ServerLevel) this.mob.level()).ominousBanner;
+            if (ominousBanner == null) {
+                ominousBanner = Raid.getOminousBannerInstance(bannerPatternLookup);
+            }
+            return ominousBanner;
+        }
+        // Canvas end
 
         private boolean cannotPickUpBanner() {
             if (!this.mob.level().purpurConfig.pillagerBypassMobGriefing == !getServerLevel(this.mob).getGameRules().getBoolean(net.minecraft.world.level.GameRules.RULE_MOBGRIEFING) || !this.mob.canPickUpLoot()) return false; // Paper - respect game and entity rules for picking up items // Purpur - Add mobGriefing bypass to everything affected
@@ -407,7 +_,7 @@
             } else if (!this.mob.canBeLeader()) {
                 return true;
             } else if (ItemStack.matches(
-                this.mob.getItemBySlot(EquipmentSlot.HEAD), Raid.getOminousBannerInstance(this.mob.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN))
+                this.mob.getItemBySlot(EquipmentSlot.HEAD), getOminousBanner(this.mob.registryAccess().lookupOrThrow(Registries.BANNER_PATTERN)) // Canvas
             )) {
                 return true;
             } else {
