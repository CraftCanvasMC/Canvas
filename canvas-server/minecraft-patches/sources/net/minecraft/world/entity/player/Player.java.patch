--- a/net/minecraft/world/entity/player/Player.java
+++ b/net/minecraft/world/entity/player/Player.java
@@ -15,6 +_,7 @@
 import java.util.function.Predicate;
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.Config;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -242,6 +_,17 @@
         this.containerMenu = this.inventoryMenu;
         this.moveTo(pos.getX() + 0.5, pos.getY() + 1, pos.getZ() + 0.5, yRot, 0.0F);
         this.rotOffs = 180.0F;
+        // Canvas start
+        // we schedule the chunk load/gen as early as
+        // possible to try and reduce syncload time
+        // on join if in unloaded chunks
+        ServerLevel serverLevel = (ServerLevel) level;
+        net.minecraft.world.level.ChunkPos chunkPos = new net.minecraft.world.level.ChunkPos(this.blockPosition());
+        serverLevel.getPriorityManager().blockingOverride.add(chunkPos);
+        serverLevel.moonrise$getChunkTaskScheduler().scheduleChunkLoad(
+            chunkPos.x, chunkPos.z, net.minecraft.world.level.chunk.status.ChunkStatus.FULL, true, ca.spottedleaf.concurrentutil.util.Priority.BLOCKING, (_) -> {}
+        );
+        // Canvas end
     }
 
     public boolean blockActionRestricted(Level level, BlockPos pos, GameType gameMode) {
@@ -282,6 +_,14 @@
         builder.define(DATA_SHOULDER_LEFT, new CompoundTag());
         builder.define(DATA_SHOULDER_RIGHT, new CompoundTag());
     }
+    // Canvas start
+
+    private int lagCompensation(int original) {
+        if (!Config.INSTANCE.lagCompensation.enabled || !Config.INSTANCE.lagCompensation.sleepingAcceleration) return original;
+        if (this.level().isClientSide) return original;
+        return original + ((ServerLevel) this.level()).tpsCalculator.applicableMissedTicks();
+    }
+    // Canvas end
 
     @Override
     public void tick() {
@@ -301,24 +_,26 @@
         }
 
         if (this.isSleeping()) {
-            this.sleepCounter++;
+            lagCompensation(this.sleepCounter++); // Canvas
             // Paper start - Add PlayerDeepSleepEvent
-            if (this.sleepCounter == SLEEP_DURATION) {
+            if (lagCompensation(this.sleepCounter) == SLEEP_DURATION) { // Canvas
                 if (!new io.papermc.paper.event.player.PlayerDeepSleepEvent((org.bukkit.entity.Player) getBukkitEntity()).callEvent()) {
                     this.sleepCounter = Integer.MIN_VALUE;
                 }
             }
             // Paper end - Add PlayerDeepSleepEvent
-            if (this.sleepCounter > 100) {
+            if (lagCompensation(this.sleepCounter) > 100) { // Canvas
                 this.sleepCounter = 100;
             }
 
             if (!this.level().isClientSide && this.level().isDay()) {
                 this.stopSleepInBed(false, true);
             }
-        } else if (this.sleepCounter > 0) {
-            this.sleepCounter++;
-            if (this.sleepCounter >= 110) {
+        // Canvas start
+        } else if (lagCompensation(this.sleepCounter) > 0) {
+            lagCompensation(this.sleepCounter++);
+            if (lagCompensation(this.sleepCounter) >= 110) {
+        // Canvas end
                 this.sleepCounter = 0;
             }
         }
