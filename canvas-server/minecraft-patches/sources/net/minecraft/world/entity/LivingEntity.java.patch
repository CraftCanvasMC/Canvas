--- a/net/minecraft/world/entity/LivingEntity.java
+++ b/net/minecraft/world/entity/LivingEntity.java
@@ -11,6 +_,8 @@
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.region.ServerRegions;
 import it.unimi.dsi.fastutil.doubles.DoubleDoubleImmutablePair;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectArrayMap;
 import it.unimi.dsi.fastutil.objects.Reference2ObjectMap;
@@ -23,6 +_,7 @@
 import java.util.Optional;
 import java.util.Set;
 import java.util.Map.Entry;
+import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.function.BiConsumer;
 import java.util.function.Function;
 import java.util.function.Predicate;
@@ -213,7 +_,7 @@
     };
     private final AttributeMap attributes;
     public CombatTracker combatTracker = new CombatTracker(this);
-    public final Map<Holder<MobEffect>, MobEffectInstance> activeEffects = Maps.newHashMap();
+    public final Map<Holder<MobEffect>, MobEffectInstance> activeEffects = Maps.newConcurrentMap(); // Canvas - concurrent
     private final NonNullList<ItemStack> lastHandItemStacks = NonNullList.withSize(2, ItemStack.EMPTY);
     private final NonNullList<ItemStack> lastArmorItemStacks = NonNullList.withSize(4, ItemStack.EMPTY);
     private ItemStack lastBodyItemStack = ItemStack.EMPTY;
@@ -293,7 +_,7 @@
     protected float appliedScale = 1.0F;
     // CraftBukkit start
     public int expToDrop;
-    public ArrayList<DefaultDrop> drops = new ArrayList<>(); // Paper - Restore vanilla drops behavior
+    public List<DefaultDrop> drops = new CopyOnWriteArrayList<>(); // Paper - Restore vanilla drops behavior // Canvas
     public final org.bukkit.craftbukkit.attribute.CraftAttributeMap craftAttributes;
     public boolean collides = true;
     public Set<UUID> collidableExemptions = new HashSet<>();
@@ -559,6 +_,7 @@
             }
         }
 
+        lagCompensation(); // Canvas
         this.tickEffects();
         this.animStepO = this.animStep;
         this.yBodyRotO = this.yBodyRot;
@@ -567,6 +_,17 @@
         this.xRotO = this.getXRot();
         profilerFiller.pop();
     }
+    // Canvas start
+
+    private void lagCompensation() {
+        if (!Config.INSTANCE.lagCompensation.enabled || !Config.INSTANCE.lagCompensation.potionEffectAcceleration) return;
+        if (this.level().isClientSide()) return;
+
+        for (int i = 0; i < ServerRegions.getTickData((ServerLevel) this.level()).tpsCalculator.applicableMissedTicks(); i++) { // Canvas - Threaded Regions
+            tickEffects();
+        }
+    }
+    // Canvas end
 
     @Override
     protected float getBlockSpeedFactor() {
@@ -992,12 +_,16 @@
     }
 
     private void updateSynchronizedMobEffectParticles() {
-        List<ParticleOptions> list = this.activeEffects
-            .values()
-            .stream()
-            .filter(MobEffectInstance::isVisible)
-            .map(MobEffectInstance::getParticleOptions)
-            .toList();
+        // Canvas start - replace stream
+        List<ParticleOptions> list = new ArrayList<>();
+        for (MobEffectInstance mobEffectInstance : this.activeEffects
+            .values()) {
+            if (mobEffectInstance.isVisible()) {
+                ParticleOptions particleOptions = mobEffectInstance.getParticleOptions();
+                list.add(particleOptions);
+            }
+        }
+        // Canvas end
         this.entityData.set(DATA_EFFECT_PARTICLES, list);
         this.entityData.set(DATA_EFFECT_AMBIENCE_ID, areAllEffectsAmbient(this.activeEffects.values()));
     }
@@ -1557,7 +_,7 @@
             boolean flag2 = !flag; // CraftBukkit - Ensure to return false if damage is blocked
             if (flag2) {
                 this.lastDamageSource = damageSource;
-                this.lastDamageStamp = this.level().getGameTime();
+                this.lastDamageStamp = this.tickCount; // Canvas - use tickCount for damage source timestamps
 
                 for (MobEffectInstance mobEffectInstance : this.getActiveEffects()) {
                     mobEffectInstance.onMobHurt(level, this, damageSource, amount);
@@ -1696,7 +_,7 @@
 
     @Nullable
     public DamageSource getLastDamageSource() {
-        if (this.level().getGameTime() - this.lastDamageStamp > 40L) {
+        if (this.tickCount - this.lastDamageStamp > 40L) { // Canvas - use tickCount for damage source timestamps
             this.lastDamageSource = null;
         }
 
@@ -1988,7 +_,13 @@
         this.knockback(strength, x, z, null, io.papermc.paper.event.entity.EntityKnockbackEvent.Cause.UNKNOWN); // Paper - knockback events
     }
 
-    public void knockback(double strength, double x, double z, @Nullable Entity attacker, io.papermc.paper.event.entity.EntityKnockbackEvent.Cause eventCause) { // Paper - knockback events
+    // Canvas start
+    public void knockback(double strength, double x, double z, @Nullable Entity attacker, io.papermc.paper.event.entity.EntityKnockbackEvent.Cause eventCause) {
+        this.knockback(strength, x, z, attacker, eventCause, true);
+    }
+
+    public void knockback(double strength, double x, double z, @Nullable Entity attacker, io.papermc.paper.event.entity.EntityKnockbackEvent.Cause eventCause, boolean callEvent) { // Paper - knockback events
+    // Canvas end
         strength *= 1.0 - this.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE);
         if (true || !(strength <= 0.0)) { // CraftBukkit - Call event even when force is 0
             // this.hasImpulse = true; // CraftBukkit - Move down
@@ -2007,14 +_,25 @@
                 deltaMovement.z / 2.0 - vec3.z
             );
             Vec3 diff = finalVelocity.subtract(deltaMovement);
+            // Canvas start - allow not calling event
+            double velX = finalVelocity.x;
+            double velY = finalVelocity.y;
+            double velZ = finalVelocity.z;
+            if (callEvent) {
             io.papermc.paper.event.entity.EntityKnockbackEvent event = CraftEventFactory.callEntityKnockbackEvent((org.bukkit.craftbukkit.entity.CraftLivingEntity) this.getBukkitEntity(), attacker, attacker, eventCause, strength, diff);
             // Paper end - knockback events
             if (event.isCancelled()) {
                 return;
-            }
+            } else {
+                velX = event.getKnockback().getX();
+                velY = event.getKnockback().getY();
+                velZ = event.getKnockback().getZ();
+            }
+            }
+            // Canvas end
 
             this.hasImpulse = true;
-            this.setDeltaMovement(deltaMovement.add(event.getKnockback().getX(), event.getKnockback().getY(), event.getKnockback().getZ())); // Paper - knockback events
+            this.setDeltaMovement(deltaMovement.add(velX, velY, velZ)); // Paper - knockback events // Canvas
             // CraftBukkit end
         }
     }
@@ -2578,7 +_,7 @@
         }
 
         this.lastDamageSource = damageSource;
-        this.lastDamageStamp = this.level().getGameTime();
+        this.lastDamageStamp = this.tickCount; // Canvas - use tickCount for damage source timestamps
     }
 
     @Override
@@ -3695,7 +_,7 @@
             this.level().getEntities(EntityTypeTest.forClass(Player.class), this.getBoundingBox(), EntitySelector.pushableBy(this)).forEach(this::doPush);
         } else {
             // Paper start - don't run getEntities if we're not going to use its result
-            if (!this.isPushable()) {
+            if (Config.INSTANCE.entities.disableEntityPushing || !this.isPushable()) { // Canvas - allow disabling collisions for all entities
                 return;
             }
 
@@ -3780,6 +_,11 @@
     public void stopRiding() {
         // Paper start - Force entity dismount during teleportation
         this.stopRiding(false);
+        // Canvas start
+        if (this instanceof Mob navigatingEntity) {
+            navigatingEntity.lithium$updateNavigationRegistration();
+        }
+        // Canvas end
     }
 
     @Override
