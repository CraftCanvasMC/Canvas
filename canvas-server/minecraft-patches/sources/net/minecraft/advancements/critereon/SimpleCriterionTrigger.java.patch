--- a/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
+++ b/net/minecraft/advancements/critereon/SimpleCriterionTrigger.java
@@ -19,7 +_,7 @@
 
     @Override
     public final void addPlayerListener(PlayerAdvancements playerAdvancements, CriterionTrigger.Listener<T> listener) {
-        playerAdvancements.criterionData.computeIfAbsent(this, managerx -> Sets.newHashSet()).add(listener); // Paper - fix PlayerAdvancements leak
+        playerAdvancements.criterionData.computeIfAbsent(this, managerx -> Sets.newConcurrentHashSet()).add(listener); // Paper - fix PlayerAdvancements leak // Canvas - concurrent
     }
 
     @Override
@@ -39,6 +_,7 @@
     }
 
     protected void trigger(ServerPlayer player, Predicate<T> testTrigger) {
+        if (this.isDisabled) return; // Canvas
         PlayerAdvancements advancements = player.getAdvancements();
         Set<CriterionTrigger.Listener<T>> set = (Set) advancements.criterionData.get(this); // Paper - fix PlayerAdvancements leak
         if (set != null && !set.isEmpty()) {
@@ -75,4 +_,10 @@
 
         Optional<ContextAwarePredicate> player();
     }
+    // Canvas start
+    protected boolean isDisabled = false;
+    public void setDisabled(boolean disabled) {
+        this.isDisabled = disabled;
+    }
+    // Canvas end
 }
