--- a/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
+++ b/net/minecraft/util/CrudeIncrementalIntIdentityHashBiMap.java
@@ -52,23 +_,23 @@
 
     @Nullable
     @Override
-    public K byId(int value) {
+    public synchronized K byId(int value) {
         return value >= 0 && value < this.byId.length ? this.byId[value] : null;
     }
 
-    private int getValue(int key) {
+    private synchronized int getValue(int key) {
         return key == -1 ? -1 : this.values[key];
     }
 
-    public boolean contains(K value) {
+    public synchronized boolean contains(K value) {
         return this.getId(value) != -1;
     }
 
-    public boolean contains(int value) {
+    public synchronized boolean contains(int value) {
         return this.byId(value) != null;
     }
 
-    public int add(K object) {
+    public synchronized int add(K object) {
         int i = this.nextId();
         this.addMapping(object, i);
         return i;
@@ -106,7 +_,7 @@
         // Paper end - optimise palette reads
     }
 
-    public void addMapping(K object, int intKey) {
+    public synchronized void addMapping(K object, int intKey) {
         int max = Math.max(intKey, this.size + 1);
         if (max >= this.keys.length * 0.8F) {
             int i = this.keys.length << 1;
@@ -173,11 +_,11 @@
     }
 
     @Override
-    public Iterator<K> iterator() {
+    public synchronized Iterator<K> iterator() {
         return Iterators.filter(Iterators.forArray(this.byId), Predicates.notNull());
     }
 
-    public void clear() {
+    public synchronized void clear() {
         Arrays.fill(this.keys, null);
         Arrays.fill(this.byId, null);
         this.nextId = 0;
