--- a/net/minecraft/util/thread/BlockableEventLoop.java
+++ b/net/minecraft/util/thread/BlockableEventLoop.java
@@ -6,6 +_,7 @@
 import com.mojang.jtracy.Zone;
 import com.mojang.logging.LogUtils;
 import java.util.List;
+import java.util.NoSuchElementException;
 import java.util.Queue;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
@@ -13,8 +_,11 @@
 import java.util.function.BooleanSupplier;
 import java.util.function.Supplier;
 import javax.annotation.CheckReturnValue;
+import io.canvasmc.canvas.server.level.MinecraftServerWorld;
+import io.canvasmc.canvas.server.level.TickRateManagerInstance;
 import net.minecraft.ReportedException;
 import net.minecraft.SharedConstants;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.util.profiling.metrics.MetricCategory;
 import net.minecraft.util.profiling.metrics.MetricSampler;
 import net.minecraft.util.profiling.metrics.MetricsRegistry;
@@ -126,18 +_,42 @@
         } else if (this.blockingCount == 0 && !this.shouldRun(runnable)) {
             return false;
         } else {
-            this.doRunTask(this.pendingRunnables.remove());
+            // Canvas start - Multithreaded Dimension Ticking
+            // This can technically throw a NSE now, so we catch and ignore
+            try {
+                R a = this.pendingRunnables.remove();
+                this.doRunTask(a);
+            } catch (NoSuchElementException ignored) {
+                return false;
+            }
+            // Canvas end
             return true;
         }
     }
 
     public void managedBlock(BooleanSupplier isDone) {
         this.blockingCount++;
+        /* // Canvas start
+        if (this instanceof MinecraftServer && !Thread.currentThread().equals(getRunningThread())) {
+            throw new RuntimeException("Unable to block main thread from off-main");
+        }
+        if (this instanceof MinecraftServerWorld && !Thread.currentThread().equals(getRunningThread())) {
+            throw new RuntimeException("Unable to block level thread from off-level");
+        }
+        */ // Canvas end
 
         try {
             while (!isDone.getAsBoolean()) {
                 if (!this.pollTask()) {
+                    // Canvas start
+                    if (this instanceof TickRateManagerInstance tickRateManagerInstance && !tickRateManagerInstance.tickRateManager().isUnlockedTickRate()) {
                     this.waitForTasks();
+                    } else if (this instanceof TickRateManagerInstance tickRateManagerInstance) {
+                        // Skipping because unlocked
+                        tickRateManagerInstance.skipTickWait();
+                        break;
+                    }
+                    // Canvas end
                 }
             }
         } finally {
