--- a/net/minecraft/util/ClassInstanceMultiMap.java
+++ b/net/minecraft/util/ClassInstanceMultiMap.java
@@ -11,12 +_,14 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
+import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import net.minecraft.Util;
 
 public class ClassInstanceMultiMap<T> extends AbstractCollection<T> {
-    private final Map<Class<?>, List<T>> byClass = Maps.newHashMap();
+    private final Map<Class<?>, List<T>> byClass = new Object2ObjectLinkedOpenHashMap<>();
     private final Class<T> baseClass;
-    private final List<T> allInstances = Lists.newArrayList();
+    private final List<T> allInstances = new ObjectArrayList<>();
 
     public ClassInstanceMultiMap(Class<T> baseClass) {
         this.baseClass = baseClass;
@@ -56,13 +_,27 @@
     }
 
     public <S> Collection<S> find(Class<S> type) {
+        // Canvas start - optimize
+        List<T> cached = this.byClass.get(type);
+        if (cached != null) return (Collection<S>) cached;
+
         if (!this.baseClass.isAssignableFrom(type)) {
             throw new IllegalArgumentException("Don't know how to search for " + type);
         } else {
-            List<? extends T> list = this.byClass
-                .computeIfAbsent(type, clazz -> this.allInstances.stream().filter(clazz::isInstance).collect(Util.toMutableList()));
-            return (Collection<S>)Collections.unmodifiableCollection(list);
+            List<? extends T> list = this.byClass.computeIfAbsent(type,
+                typeClass -> {
+                    ObjectArrayList<T> ts = new ObjectArrayList<>(this.allInstances.size());
+                    for (Object _allElement : ((ObjectArrayList<T>) this.allInstances).elements()) {
+                        if (typeClass.isInstance(_allElement)) {
+                            ts.add((T) _allElement);
+                        }
+                    }
+                    return ts;
+                }
+            );
+            return (Collection<S>) list;
         }
+        // Canvas end
     }
 
     @Override
