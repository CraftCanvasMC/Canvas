--- a/net/minecraft/util/SimpleBitStorage.java
+++ b/net/minecraft/util/SimpleBitStorage.java
@@ -199,7 +_,7 @@
         0,
         5
     };
-    private final long[] data;
+    private volatile long[] data; // Canvas - volatile
     private final int bits;
     private final long mask;
     private final int size;
@@ -295,16 +_,16 @@
         final int divQ = full >>> 20;
         final int divR = (full & 0xFFFFF) * this.mulBits >>> 20;
 
-        final long[] dataArray = this.data;
-
-        final long data = dataArray[divQ];
-        final long mask = this.mask;
-
-        final long write = data & ~(mask << divR) | ((long)value & mask) << divR;
-
-        dataArray[divQ] = write;
-
-        return (int)(data >>> divR & mask);
+        // Canvas start - copy-on-write
+        synchronized (this) {
+            long[] newData = this.data.clone();
+            long mask = this.mask;
+            long oldValue = newData[divQ] >>> divR & mask;
+            newData[divQ] = newData[divQ] & ~(mask << divR) | ((long) value & mask) << divR;
+            this.data = newData;
+            return (int) oldValue;
+        }
+        // Canvas end
         // Paper end - optimise bitstorage read/write operations
     }
 
@@ -315,14 +_,14 @@
         final int divQ = full >>> 20;
         final int divR = (full & 0xFFFFF) * this.mulBits >>> 20;
 
-        final long[] dataArray = this.data;
-
-        final long data = dataArray[divQ];
-        final long mask = this.mask;
-
-        final long write = data & ~(mask << divR) | ((long)value & mask) << divR;
-
-        dataArray[divQ] = write;
+        // Canvas start - copy-on-write
+        synchronized (this) {
+            long[] newData = this.data.clone();
+            long mask = this.mask;
+            newData[divQ] = newData[divQ] & ~(mask << divR) | ((long) value & mask) << divR;
+            this.data = newData;
+        }
+        // Canvas end
         // Paper end - optimise bitstorage read/write operations
     }
 
