--- a/net/minecraft/util/CubicSpline.java
+++ b/net/minecraft/util/CubicSpline.java
@@ -8,8 +_,10 @@
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import it.unimi.dsi.fastutil.floats.FloatArrayList;
 import it.unimi.dsi.fastutil.floats.FloatList;
+import java.util.Arrays;
 import java.util.List;
 import java.util.Locale;
+import java.util.Objects;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 import org.apache.commons.lang3.mutable.MutableObject;
@@ -254,31 +_,47 @@
 
         @Override
         public float apply(C object) {
-            float f = this.coordinate.apply(object);
-            int i = findIntervalStart(this.locations, f);
-            int i1 = this.locations.length - 1;
-            if (i < 0) {
-                return linearExtend(f, this.locations, this.values.get(0).apply(object), this.derivatives, 0);
-            } else if (i == i1) {
-                return linearExtend(f, this.locations, this.values.get(i1).apply(object), this.derivatives, i1);
+            // Canvas start
+            float point = this.coordinate.apply(object);
+            int rangeForLocation = findIntervalStart(this.locations, point);
+            int last = this.locations.length - 1;
+            if (rangeForLocation < 0) {
+                return linearExtend(point, this.locations, this.values.get(0).apply(object), this.derivatives, 0);
+            } else if (rangeForLocation == last) {
+                return linearExtend(point, this.locations, this.values.get(last).apply(object), this.derivatives, last);
             } else {
-                float f1 = this.locations[i];
-                float f2 = this.locations[i + 1];
-                float f3 = (f - f1) / (f2 - f1);
-                ToFloatFunction<C> toFloatFunction = (ToFloatFunction<C>)this.values.get(i);
-                ToFloatFunction<C> toFloatFunction1 = (ToFloatFunction<C>)this.values.get(i + 1);
-                float f4 = this.derivatives[i];
-                float f5 = this.derivatives[i + 1];
-                float f6 = toFloatFunction.apply(object);
-                float f7 = toFloatFunction1.apply(object);
-                float f8 = f4 * (f2 - f1) - (f7 - f6);
-                float f9 = -f5 * (f2 - f1) + (f7 - f6);
-                return Mth.lerp(f3, f6, f7) + f3 * (1.0F - f3) * Mth.lerp(f3, f8, f9);
+                float loc0 = this.locations[rangeForLocation];
+                float loc1 = this.locations[rangeForLocation + 1];
+                float locDist = loc1 - loc0;
+                float k = (point - loc0) / locDist;
+                float n = this.values.get(rangeForLocation).apply(object);
+                float o = this.values.get(rangeForLocation + 1).apply(object);
+                float onDist = o - n;
+                float p = this.derivatives[rangeForLocation] * locDist - onDist;
+                float q = -this.derivatives[rangeForLocation + 1] * locDist + onDist;
+                return Mth.lerp(k, n, o) + k * (1.0F - k) * Mth.lerp(k, p, q);
             }
+            // Canvas end
         }
 
         private static int findIntervalStart(float[] locations, float start) {
-            return Mth.binarySearch(0, locations.length, i -> start < locations[i]) - 1;
+            // Canvas start
+            int min = 0;
+            int i = locations.length;
+
+            while (i > 0) {
+                int j = i / 2;
+                int k = min + j;
+                if (start < locations[k]) {
+                    i = j;
+                } else {
+                    min = k + 1;
+                    i -= j + 1;
+                }
+            }
+
+            return min - 1;
+            // Canvas end
         }
 
         @VisibleForTesting
@@ -313,5 +_,27 @@
                 this.derivatives
             );
         }
+        // Canvas start
+
+        @Override
+        public boolean equals(Object o) {
+            if (this == o) return true;
+            if (o == null || getClass() != o.getClass()) return false;
+            Multipoint<?, ?> that = (Multipoint<?, ?>) o;
+            return Objects.equals(coordinate, that.coordinate()) && Arrays.equals(locations, that.locations()) && Objects.equals(values, that.values()) && Arrays.equals(derivatives, that.derivatives());
+        }
+
+        @Override
+        public int hashCode() {
+            int result = 1;
+
+            result = 31 * result + Objects.hashCode(coordinate);
+            result = 31 * result + Arrays.hashCode(locations);
+            result = 31 * result + Objects.hashCode(values);
+            result = 31 * result + Arrays.hashCode(derivatives);
+
+            return result;
+        }
+        // Canvas end
     }
 }
