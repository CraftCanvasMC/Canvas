--- a/com/mojang/brigadier/tree/CommandNode.java
+++ b/com/mojang/brigadier/tree/CommandNode.java
@@ -3,6 +_,7 @@
 
 package com.mojang.brigadier.tree;
 
+import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;
 import com.mojang.brigadier.AmbiguityConsumer;
 import com.mojang.brigadier.Command;
 import com.mojang.brigadier.RedirectModifier;
@@ -24,9 +_,9 @@
 import java.util.function.Predicate;
 
 public abstract class CommandNode<S> implements Comparable<CommandNode<S>> {
-    private final Map<String, CommandNode<S>> children = new LinkedHashMap<>();
-    private final Map<String, LiteralCommandNode<S>> literals = new LinkedHashMap<>();
-    private final Map<String, ArgumentCommandNode<S, ?>> arguments = new LinkedHashMap<>();
+    private final Map<String, CommandNode<S>> children = new ConcurrentLinkedHashMap.Builder<String, CommandNode<S>>().maximumWeightedCapacity(Integer.MAX_VALUE).build(); // Canvas - concurrent
+    private final Map<String, LiteralCommandNode<S>> literals = new ConcurrentLinkedHashMap.Builder<String, LiteralCommandNode<S>>().maximumWeightedCapacity(Integer.MAX_VALUE).build(); // Canvas - concurrent
+    private final Map<String, ArgumentCommandNode<S, ?>> arguments = new ConcurrentLinkedHashMap.Builder<String, ArgumentCommandNode<S, ?>>().maximumWeightedCapacity(Integer.MAX_VALUE).build(); // Canvas - concurrent
     public Predicate<S> requirement; // Paper - public-f
     private final CommandNode<S> redirect;
     private final RedirectModifier<S> modifier;
