--- a/io/papermc/paper/entity/activation/ActivationRange.java
+++ b/io/papermc/paper/entity/activation/ActivationRange.java
@@ -1,7 +_,9 @@
 package io.papermc.paper.entity.activation;
 
+import io.canvasmc.canvas.region.ServerRegions;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.ExperienceOrb;
 import net.minecraft.world.entity.FlyingMob;
@@ -48,26 +_,27 @@
 
     private static int checkInactiveWakeup(final Entity entity) {
         final Level world = entity.level();
+        ServerRegions.WorldTickData worldData = ServerRegions.getTickData(world.level()); // Canvas - Threaded Regions
         final SpigotWorldConfig config = world.spigotConfig;
-        final long inactiveFor = MinecraftServer.currentTick - entity.activatedTick;
+        final long inactiveFor = worldData.peekTick() - entity.activatedTick; // Canvas - Threaded Regions
         if (entity.activationType == ActivationType.VILLAGER) {
-            if (inactiveFor > config.wakeUpInactiveVillagersEvery && world.wakeupInactiveRemainingVillagers > 0) {
-                world.wakeupInactiveRemainingVillagers--;
+            if (inactiveFor > config.wakeUpInactiveVillagersEvery && worldData.wakeupInactiveRemainingVillagers > 0) { // Canvas - Threaded Regions
+                worldData.wakeupInactiveRemainingVillagers--; // Canvas - Threaded Regions
                 return config.wakeUpInactiveVillagersFor;
             }
         } else if (entity.activationType == ActivationType.ANIMAL) {
-            if (inactiveFor > config.wakeUpInactiveAnimalsEvery && world.wakeupInactiveRemainingAnimals > 0) {
-                world.wakeupInactiveRemainingAnimals--;
+            if (inactiveFor > config.wakeUpInactiveAnimalsEvery && worldData.wakeupInactiveRemainingAnimals > 0) { // Canvas - Threaded Regions
+                worldData.wakeupInactiveRemainingAnimals--; // Canvas - Threaded Regions
                 return config.wakeUpInactiveAnimalsFor;
             }
         } else if (entity.activationType == ActivationType.FLYING_MONSTER) {
-            if (inactiveFor > config.wakeUpInactiveFlyingEvery && world.wakeupInactiveRemainingFlying > 0) {
-                world.wakeupInactiveRemainingFlying--;
+            if (inactiveFor > config.wakeUpInactiveFlyingEvery && worldData.wakeupInactiveRemainingFlying > 0) { // Canvas - Threaded Regions
+                worldData.wakeupInactiveRemainingFlying--; // Canvas - Threaded Regions
                 return config.wakeUpInactiveFlyingFor;
             }
         } else if (entity.activationType == ActivationType.MONSTER || entity.activationType == ActivationType.RAIDER) {
-            if (inactiveFor > config.wakeUpInactiveMonstersEvery && world.wakeupInactiveRemainingMonsters > 0) {
-                world.wakeupInactiveRemainingMonsters--;
+            if (inactiveFor > config.wakeUpInactiveMonstersEvery && worldData.wakeupInactiveRemainingMonsters > 0) { // Canvas - Threaded Regions
+                worldData.wakeupInactiveRemainingMonsters--; // Canvas - Threaded Regions
                 return config.wakeUpInactiveMonstersFor;
             }
         }
@@ -115,6 +_,7 @@
      * @param world
      */
     public static void activateEntities(final Level world) {
+        ServerRegions.WorldTickData tickData = ServerRegions.getTickData((ServerLevel) world); // Canvas - Threaded Regions
         final int miscActivationRange = world.spigotConfig.miscActivationRange;
         final int raiderActivationRange = world.spigotConfig.raiderActivationRange;
         final int animalActivationRange = world.spigotConfig.animalActivationRange;
@@ -122,10 +_,10 @@
         final int waterActivationRange = world.spigotConfig.waterActivationRange;
         final int flyingActivationRange = world.spigotConfig.flyingMonsterActivationRange;
         final int villagerActivationRange = world.spigotConfig.villagerActivationRange;
-        world.wakeupInactiveRemainingAnimals = Math.min(world.wakeupInactiveRemainingAnimals + 1, world.spigotConfig.wakeUpInactiveAnimals);
-        world.wakeupInactiveRemainingVillagers = Math.min(world.wakeupInactiveRemainingVillagers + 1, world.spigotConfig.wakeUpInactiveVillagers);
-        world.wakeupInactiveRemainingMonsters = Math.min(world.wakeupInactiveRemainingMonsters + 1, world.spigotConfig.wakeUpInactiveMonsters);
-        world.wakeupInactiveRemainingFlying = Math.min(world.wakeupInactiveRemainingFlying + 1, world.spigotConfig.wakeUpInactiveFlying);
+        tickData.wakeupInactiveRemainingAnimals = Math.min(tickData.wakeupInactiveRemainingAnimals + 1, world.spigotConfig.wakeUpInactiveAnimals); // Canvas - Threaded Regions
+        tickData.wakeupInactiveRemainingVillagers = Math.min(tickData.wakeupInactiveRemainingVillagers + 1, world.spigotConfig.wakeUpInactiveVillagers); // Canvas - Threaded Regions
+        tickData.wakeupInactiveRemainingMonsters = Math.min(tickData.wakeupInactiveRemainingMonsters + 1, world.spigotConfig.wakeUpInactiveMonsters); // Canvas - Threaded Regions
+        tickData.wakeupInactiveRemainingFlying = Math.min(tickData.wakeupInactiveRemainingFlying + 1, world.spigotConfig.wakeUpInactiveFlying); // Canvas - Threaded Regions
 
         int maxRange = Math.max(monsterActivationRange, animalActivationRange);
         maxRange = Math.max(maxRange, raiderActivationRange);
@@ -135,8 +_,8 @@
         maxRange = Math.max(maxRange, villagerActivationRange);
         maxRange = Math.min((world.spigotConfig.simulationDistance << 4) - 8, maxRange);
 
-        for (final Player player : world.players()) {
-            player.activatedTick = MinecraftServer.currentTick;
+        for (final Player player : world.getLocalPlayers()) { // Canvas - Threaded Regions
+            player.activatedTick = ServerRegions.getCurrentTick(world.level()); // Canvas - Threaded Regions
             if (world.spigotConfig.ignoreSpectatorActivation && player.isSpectator()) {
                 continue;
             }
@@ -171,13 +_,14 @@
      * @param entity
      */
     private static void activateEntity(final Entity entity) {
-        if (MinecraftServer.currentTick > entity.activatedTick) {
+        ServerRegions.WorldTickData data = ServerRegions.getTickData(entity.level().level()); // Canvas - Threaded Regions
+        if (data.peekTick() > entity.activatedTick) { // Canvas - Threaded Regions
             if (entity.defaultActivationState) {
-                entity.activatedTick = MinecraftServer.currentTick;
+                entity.activatedTick = data.peekTick(); // Canvas - Threaded Regions
                 return;
             }
             if (entity.activationType.boundingBox.intersects(entity.getBoundingBox())) {
-                entity.activatedTick = MinecraftServer.currentTick;
+                entity.activatedTick = data.peekTick(); // Canvas - Threaded Regions
             }
         }
     }
@@ -191,6 +_,7 @@
      */
     public static int checkEntityImmunities(final Entity entity) { // return # of ticks to get immunity
         final SpigotWorldConfig config = entity.level().spigotConfig;
+        ServerRegions.WorldTickData data = ServerRegions.getTickData(entity.level().level()); // Canvas - Threaded Regions
         final int inactiveWakeUpImmunity = checkInactiveWakeup(entity);
         if (inactiveWakeUpImmunity > -1) {
             return inactiveWakeUpImmunity;
@@ -198,10 +_,10 @@
         if (entity.getRemainingFireTicks() > 0) {
             return 2;
         }
-        if (entity.activatedImmunityTick >= MinecraftServer.currentTick) {
+        if (entity.activatedImmunityTick >= data.peekTick()) { // Canvas - Threaded Regions
             return 1;
         }
-        final long inactiveFor = MinecraftServer.currentTick - entity.activatedTick;
+        final long inactiveFor = data.peekTick() - entity.activatedTick; // Canvas - Threaded Regions
         if ((entity.activationType != ActivationType.WATER && entity.isInWater() && entity.isPushedByFluid())) {
             return 100;
         }
@@ -299,16 +_,17 @@
             return true;
         }
 
-        boolean isActive = entity.activatedTick >= MinecraftServer.currentTick;
+        ServerRegions.WorldTickData data = ServerRegions.getTickData(entity.level().level()); // Canvas - Threaded Regions
+        boolean isActive = entity.activatedTick >= data.peekTick(); // Canvas - Threaded Regions
         entity.isTemporarilyActive = false;
 
         // Should this entity tick?
         if (!isActive) {
-            if ((MinecraftServer.currentTick - entity.activatedTick - 1) % 20 == 0) {
+            if ((data.peekTick() - entity.activatedTick - 1) % 20 == 0) { // Canvas - Threaded Regions
                 // Check immunities every 20 ticks.
                 final int immunity = checkEntityImmunities(entity);
                 if (immunity >= 0) {
-                    entity.activatedTick = MinecraftServer.currentTick + immunity;
+                    entity.activatedTick = data.peekTick() + immunity; // Canvas - Threaded Regions
                 } else {
                     entity.isTemporarilyActive = true;
                 }
