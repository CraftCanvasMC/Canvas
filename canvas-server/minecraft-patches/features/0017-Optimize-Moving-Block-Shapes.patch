From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Fri, 17 Jan 2025 00:24:14 -0800
Subject: [PATCH] Optimize Moving Block Shapes


diff --git a/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java b/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
index 1e6e940fca9d96ef410c7bf05524bd9b24db4a79..da672dfd6a0e0f097fc99c79aa92fec530d7ef66 100644
--- a/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
+++ b/net/minecraft/world/level/block/piston/PistonMovingBlockEntity.java
@@ -2,6 +2,8 @@ package net.minecraft.world.level.block.piston;
 
 import java.util.Iterator;
 import java.util.List;
+import java.util.function.Supplier;
+import io.canvasmc.canvas.Config;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.HolderGetter;
@@ -43,6 +45,58 @@ public class PistonMovingBlockEntity extends BlockEntity {
     private float progressO;
     private long lastTicked;
     private int deathTicks;
+    // Canvas start
+    private static final VoxelShape[] PISTON_BASE_WITH_MOVING_HEAD_SHAPES = precomputePistonBaseWithMovingHeadShapes();
+
+    private static VoxelShape getOffsetAndSimplified(VoxelShape blockShape, float offset, Direction direction) {
+        VoxelShape offsetSimplifiedShape = (blockShape).getOffsetSimplifiedShape(offset, direction);
+        if (offsetSimplifiedShape == null) {
+            //create the offset shape and store it for later use
+            offsetSimplifiedShape = blockShape.move(direction.getStepX() * offset, direction.getStepY() * offset, direction.getStepZ() * offset).optimize();
+            (blockShape).setShape(offset, direction, offsetSimplifiedShape);
+        }
+        return offsetSimplifiedShape;
+    }
+
+    private static VoxelShape[] precomputePistonBaseWithMovingHeadShapes() {
+        float[] offsets = {0f, 0.5f, 1f};
+        Direction[] directions = Direction.values();
+
+        VoxelShape[] mergedShapes = new VoxelShape[offsets.length * directions.length];
+
+        for (Direction facing : directions) {
+            VoxelShape baseShape = Blocks.PISTON.defaultBlockState().setValue(PistonBaseBlock.EXTENDED, true)
+                .setValue(PistonBaseBlock.FACING, facing).getCollisionShape(null, null);
+            for (float offset : offsets) {
+                //this cache is only required for the merged piston head + base shape.
+                //this shape is only used when !this.extending
+                //here: isShort = this.extending != 1.0F - this.progress < 0.25F can be simplified to:
+                //isShort = f < 0.25F , because f = getAmountExtended(this.progress) can be simplified to f == 1.0F - this.progress
+                //therefore isShort is dependent on the offset:
+                boolean isShort = offset < 0.25f;
+
+                VoxelShape headShape = (Blocks.PISTON_HEAD.defaultBlockState().setValue(PistonHeadBlock.FACING, facing))
+                    .setValue(PistonHeadBlock.SHORT, isShort).getCollisionShape(null, null);
+
+                VoxelShape offsetHead = headShape.move(facing.getStepX() * offset,
+                    facing.getStepY() * offset,
+                    facing.getStepZ() * offset);
+                mergedShapes[getIndexForMergedShape(offset, facing)] = Shapes.or(baseShape, offsetHead);
+            }
+
+        }
+
+        return mergedShapes;
+    }
+
+    private static int getIndexForMergedShape(float offset, Direction direction) {
+        if (offset != 0f && offset != 0.5f && offset != 1f) {
+            return -1;
+        }
+        //shape of offset 0 is still dependent on the direction, due to piston head and base being directional blocks
+        return (int) (2 * offset) + (3 * direction.get3DDataValue());
+    }
+    // Canvas end
 
     public PistonMovingBlockEntity(BlockPos pos, BlockState blockState) {
         super(BlockEntityType.PISTON, pos, blockState);
@@ -373,10 +427,34 @@ public class PistonMovingBlockEntity extends BlockEntity {
             }
 
             float extendedProgress = this.getExtendedProgress(this.progress);
+            // Canvas start - optimize piston heads - avoid Shape.or
+            Supplier<VoxelShape> original = () -> {
             double d = this.direction.getStepX() * extendedProgress;
             double d1 = this.direction.getStepY() * extendedProgress;
             double d2 = this.direction.getStepZ() * extendedProgress;
             return Shapes.or(collisionShape, blockState.getCollisionShape(level, pos).move(d, d1, d2));
+            };
+            if (!Config.INSTANCE.optimizePistonMovingBlockEntity) {
+                return original.get();
+            }
+            float absOffset = Math.abs(extendedProgress);
+            if (absOffset != 0f && absOffset != 0.5f && absOffset != 1f) {
+                return original.get();
+            }
+
+            if (this.extending || !this.isSourcePiston || !(this.movedState.getBlock() instanceof PistonBaseBlock)) {
+                //here voxelShape2.isEmpty() is guaranteed, vanilla code would call union() which calls simplify()
+                VoxelShape blockShape = blockState.getCollisionShape(level, pos);
+
+                //we cache the simplified shapes, as the simplify() method costs a lot of CPU time and allocates several objects
+                return getOffsetAndSimplified(blockShape, absOffset, extendedProgress < 0f ? this.direction.getOpposite() : this.direction);
+            } else {
+                //retracting piston heads have to act like their base as well, as the base block is replaced with the moving block
+                //f >= 0f is guaranteed (assuming no other mod interferes)
+                int index = getIndexForMergedShape(extendedProgress, this.direction);
+                return PISTON_BASE_WITH_MOVING_HEAD_SHAPES[index];
+            }
+            // Canvas end
         }
     }
 
diff --git a/net/minecraft/world/phys/shapes/VoxelShape.java b/net/minecraft/world/phys/shapes/VoxelShape.java
index 2c7e70675b62cb753447d2acebf2f36cdac74973..1479fbbb5a81f8e33e263f9f1604e38943d14896 100644
--- a/net/minecraft/world/phys/shapes/VoxelShape.java
+++ b/net/minecraft/world/phys/shapes/VoxelShape.java
@@ -1,6 +1,5 @@
 package net.minecraft.world.phys.shapes;
 
-import com.google.common.collect.Lists;
 import com.google.common.math.DoubleMath;
 import it.unimi.dsi.fastutil.doubles.DoubleList;
 import java.util.List;
@@ -485,6 +484,44 @@ public abstract class VoxelShape implements ca.spottedleaf.moonrise.patches.coll
         }
         // Paper end - optimise collisions
     }
+    // Canvas start
+
+    private volatile VoxelShape[] offsetAndSimplified;
+
+    public void setShape(float offset, Direction direction, VoxelShape offsetShape) {
+        if (offsetShape == null) {
+            throw new IllegalArgumentException("offsetShape must not be null!");
+        }
+        int index = getIndexForOffsetSimplifiedShapes(offset, direction);
+        VoxelShape[] offsetAndSimplifiedShapes = this.offsetAndSimplified;
+        if (offsetAndSimplifiedShapes == null) {
+            offsetAndSimplifiedShapes = new VoxelShape[1 + 2 * 6];
+        } else {
+            offsetAndSimplifiedShapes = offsetAndSimplifiedShapes.clone();
+        }
+        offsetAndSimplifiedShapes[index] = offsetShape;
+        this.offsetAndSimplified = offsetAndSimplifiedShapes;
+    }
+
+    public VoxelShape getOffsetSimplifiedShape(float offset, Direction direction) {
+        VoxelShape[] offsetAndSimplified = this.offsetAndSimplified;
+        if (offsetAndSimplified == null) {
+            return null;
+        }
+        int index = getIndexForOffsetSimplifiedShapes(offset, direction);
+        return offsetAndSimplified[index];
+    }
+
+    private static int getIndexForOffsetSimplifiedShapes(float offset, Direction direction) {
+        if (offset != 0f && offset != 0.5f && offset != 1f) {
+            throw new IllegalArgumentException("offset must be one of {0f, 0.5f, 1f}");
+        }
+        if (offset == 0f) {
+            return 0; //can treat offsetting by 0 in all directions the same
+        }
+        return (int) (2 * offset) + 2 * direction.get3DDataValue();
+    }
+    // Canvas end
 
     public AABB bounds() {
         // Paper start - optimise collisions
