From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Sun, 26 Jan 2025 11:45:58 -0800
Subject: [PATCH] Threaded Entity Scheduling


diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index 11d2597cf3df865683a4427347e53d2ba83cd24a..c525303211338f93770c7968bfb0eaf2e867d81e 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -215,7 +215,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
     public final net.minecraft.world.level.storage.PrimaryLevelData serverLevelData; // CraftBukkit - type
     public ItemStack ominousBanner; // Canvas
     private int lastSpawnChunkRadius;
-    final EntityTickList entityTickList = new EntityTickList();
+    public final EntityTickList entityTickList = new EntityTickList(); // Canvas
     // Paper - rewrite chunk system
     private final GameEventDispatcher gameEventDispatcher;
     public boolean noSave;
@@ -985,7 +985,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             }
 
             io.papermc.paper.entity.activation.ActivationRange.activateEntities(this); // Paper - EAR
-            // Canvas start
+            /* // Canvas start // - threaded entity ticking
             for (final Entity entity : this.entityTickList.entities) {
                 if (Config.shouldCheckMasks && Config.COMPILED_LOCATIONS.contains(entity.getTypeLocation())) {
                     int lived = entity.tickCount;
@@ -1016,7 +1016,8 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
                             }
                         }
                     }
-            // Canvas
+            */ // Canvas // - threaded entity ticking
+            this.tickEntities(false); // Canvas - threaded entity ticking
             profilerFiller.pop();
             this.tickBlockEntities();
         }
@@ -1034,6 +1035,45 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
         this.runAllTasks();
         // Canvas end
     }
+    // Canvas start - threaded entity ticking
+
+    public void tickEntities(boolean isThreaded) {
+        if (Config.INSTANCE.threadedEntityTicking && !isThreaded) {
+            return;
+        }
+        this.entityTickList.forEach((entity) -> {
+            if (Config.shouldCheckMasks && Config.COMPILED_LOCATIONS.contains(entity.getTypeLocation())) {
+                int lived = entity.tickCount;
+                if (!entity.getMask().shouldTick || lived % entity.getMask().tickRate != 0) {
+                    return;
+                }
+            }
+            if (!entity.isRemoved()) {
+                if (!tickRateManager.isEntityFrozen(entity)) {
+                    entity.checkDespawn();
+                    Entity vehicle = entity.getVehicle();
+                    if (vehicle != null) {
+                        if (!vehicle.isRemoved() && vehicle.hasPassenger(entity)) {
+                            return;
+                        }
+
+                        entity.stopRiding();
+                    }
+
+                    try {
+                        this.tickNonPassenger(entity);
+                    } catch (Throwable var6) {
+                        final String msg = String.format("Entity threw exception at %s:%s,%s,%s", entity.level().getWorld().getName(), entity.getX(), entity.getY(), entity.getZ());
+                        MinecraftServer.LOGGER.error(msg, var6);
+                        getCraftServer().getPluginManager().callEvent(new com.destroystokyo.paper.event.server.ServerExceptionEvent(new com.destroystokyo.paper.exception.ServerInternalException(msg, var6)));
+                        entity.discard(org.bukkit.event.entity.EntityRemoveEvent.Cause.DISCARD);
+                    }
+                    this.moonrise$midTickTasks();
+                }
+            }
+        });
+    }
+    // Canvas end
 
     @Override
     public boolean shouldTickBlocksAt(long chunkPos) {
diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index f9eca2f60ae5788c8f6085d3fddbbbc192e62d8a..6e746bbdb0924276a167a07d1412724ae0a02ab0 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -1688,6 +1688,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
 
     private void checkInsideBlocks(List<Entity.Movement> movements, Set<BlockState> blocksInside) {
         if (this.isAffectedByBlocks()) {
+            level.scheduleOnMain(() -> { // Canvas
             Set<Long> set = this.visitedBlocks; // Canvas
 
             for (Entity.Movement movement : movements) {
@@ -1726,6 +1727,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
             }
 
             set.clear();
+            }); // Canvas
         }
     }
 
diff --git a/net/minecraft/world/level/Level.java b/net/minecraft/world/level/Level.java
index c6cd941e6dab638322ff22383237844af6558d30..4794c510b6112f789bbb0aa94f47dd6681844c0a 100644
--- a/net/minecraft/world/level/Level.java
+++ b/net/minecraft/world/level/Level.java
@@ -1145,6 +1145,12 @@ public abstract class Level extends MinecraftServerWorld implements LevelAccesso
 
     @Override
     public boolean setBlock(BlockPos pos, BlockState state, int flags, int recursionLeft) {
+        // Canvas start
+        if (!this.level().isLevelThread()) { // only run set blocks on level threads
+            this.level().scheduleOnMain(() -> setBlock(pos, state, flags, recursionLeft));
+            return false;
+        }
+        // Canvas end
         // CraftBukkit start - tree generation
         if (this.captureTreeGeneration) {
             // Paper start - Protect Bedrock and End Portal/Frames from being destroyed
@@ -1504,7 +1510,7 @@ public abstract class Level extends MinecraftServerWorld implements LevelAccesso
         (this.tickingBlockEntities ? this.pendingBlockEntityTickers : this.blockEntityTickers).add(ticker);
     }
 
-    protected void tickBlockEntities() {
+    public void tickBlockEntities() { // Canvas - protected -> public
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("blockEntities");
         this.tickingBlockEntities = true;
