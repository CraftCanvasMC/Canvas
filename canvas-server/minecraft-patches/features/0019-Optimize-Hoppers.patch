From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Fri, 17 Jan 2025 15:30:23 -0800
Subject: [PATCH] Optimize Hoppers


diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index 5e6243c054435afcebefaee15a4c45d5366f2972..1b33eada51a31dd50702176be4e5035275389fb7 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -38,10 +38,10 @@ import java.util.Optional;
 import java.util.Queue;
 import java.util.Set;
 import java.util.UUID;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.Executor;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.BooleanSupplier;
 import java.util.function.Function;
 import java.util.function.Predicate;
@@ -220,7 +220,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
     private final LevelTicks<Fluid> fluidTicks = new LevelTicks<>(this::isPositionTickingWithEntitiesLoaded);
     private final PathTypeCache pathTypesByPosCache = new PathTypeCache();
     final Set<Mob> navigatingMobs = new ConcurrentSet<>(); // Canvas
-    volatile boolean isUpdatingNavigations;
+    final AtomicBoolean isUpdatingNavigations = new AtomicBoolean(false); // Canvas
     protected final Raids raids;
     private final List<BlockEventData> blockEvents = new CopyOnWriteArrayList<>(); // Canvas
     private final Queue<BlockEventData> blockEventsToReschedule = new ConcurrentLinkedQueue<>(); // Canvas
@@ -889,7 +889,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
 
         hasPhysicsEvent = org.bukkit.event.block.BlockPhysicsEvent.getHandlerList().getRegisteredListeners().length > 0;
         hasEntityMoveEvent = io.papermc.paper.event.entity.EntityMoveEvent.getHandlerList().getRegisteredListeners().length > 0;
-        net.minecraft.world.level.block.entity.HopperBlockEntity.skipHopperEvents = paperConfig().hopper.disableMoveEvent || org.bukkit.event.inventory.InventoryMoveItemEvent.getHandlerList().getRegisteredListeners().length == 0;
+        // net.minecraft.world.level.block.entity.HopperBlockEntity.skipHopperEvents = paperConfig().hopper.disableMoveEvent || org.bukkit.event.inventory.InventoryMoveItemEvent.getHandlerList().getRegisteredListeners().length == 0;
         updateLagCompensationTick();
         hasRidableMoveEvent = org.purpurmc.purpur.event.entity.RidableMoveEvent.getHandlerList().getRegisteredListeners().length > 0;
     // Canvas end
@@ -1936,7 +1936,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
 
     @Override
     public void sendBlockUpdated(BlockPos pos, BlockState oldState, BlockState newState, int flags) {
-        if (this.isUpdatingNavigations) {
+        if (this.isUpdatingNavigations.get() && false) { // Canvas
             String string = "recursive call to sendBlockUpdated";
             Util.logAndPauseIfInIde("recursive call to sendBlockUpdated", new IllegalStateException("recursive call to sendBlockUpdated"));
         }
@@ -1967,13 +1967,13 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             // Paper end - catch CME see below why
 
             try {
-                this.isUpdatingNavigations = true;
+                this.isUpdatingNavigations.set(true); // Canvas
 
                 for (PathNavigation pathNavigation : list) {
                     pathNavigation.recomputePath();
                 }
             } finally {
-                this.isUpdatingNavigations = false;
+                this.isUpdatingNavigations.set(false); // Canvas
             }
         }
         } // Paper - option to disable pathfinding updates
@@ -2864,7 +2864,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             }
 
             if (entity instanceof Mob mob) {
-                if (false && ServerLevel.this.isUpdatingNavigations) { // Paper - Remove unnecessary onTrackingStart during navigation warning
+                if (false && ServerLevel.this.isUpdatingNavigations.get()) { // Paper - Remove unnecessary onTrackingStart during navigation warning // Canvas
                     String string = "onTrackingStart called during navigation iteration";
                     Util.logAndPauseIfInIde(
                         "onTrackingStart called during navigation iteration", new IllegalStateException("onTrackingStart called during navigation iteration")
@@ -2934,7 +2934,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             }
 
             if (entity instanceof Mob mob) {
-                if (false && ServerLevel.this.isUpdatingNavigations) { // Paper - Remove unnecessary onTrackingStart during navigation warning
+                if (false && ServerLevel.this.isUpdatingNavigations.get()) { // Paper - Remove unnecessary onTrackingStart during navigation warning // Canvas
                     String string = "onTrackingStart called during navigation iteration";
                     Util.logAndPauseIfInIde(
                         "onTrackingStart called during navigation iteration", new IllegalStateException("onTrackingStart called during navigation iteration")
diff --git a/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 5cd1326ad5d046c88b2b3449d610a78fa880b4cd..e58a32593e8b42bfc534d13457240860293dd3f4 100644
--- a/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -139,56 +139,18 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         }
     }
 
-    // Paper start - Perf: Optimize Hoppers
-    private static final int HOPPER_EMPTY = 0;
-    private static final int HOPPER_HAS_ITEMS = 1;
-    private static final int HOPPER_IS_FULL = 2;
-
-    private static int getFullState(final HopperBlockEntity hopper) {
-        hopper.unpackLootTable(null);
-
-        final List<ItemStack> hopperItems = hopper.items;
-
-        boolean empty = true;
-        boolean full = true;
-
-        for (int i = 0, len = hopperItems.size(); i < len; ++i) {
-            final ItemStack stack = hopperItems.get(i);
-            if (stack.isEmpty()) {
-                full = false;
-                continue;
-            }
-
-            if (!full) {
-                // can't be full
-                return HOPPER_HAS_ITEMS;
-            }
-
-            empty = false;
-
-            if (stack.getCount() != stack.getMaxStackSize()) {
-                // can't be full or empty
-                return HOPPER_HAS_ITEMS;
-            }
-        }
-
-        return empty ? HOPPER_EMPTY : (full ? HOPPER_IS_FULL : HOPPER_HAS_ITEMS);
-    }
-    // Paper end - Perf: Optimize Hoppers
-
     private static boolean tryMoveItems(Level level, BlockPos pos, BlockState state, HopperBlockEntity blockEntity, BooleanSupplier validator) {
         if (level.isClientSide) {
             return false;
         } else {
             if (!blockEntity.isOnCooldown() && state.getValue(HopperBlock.ENABLED)) {
                 boolean flag = false;
-                final int fullState = getFullState(blockEntity); // Paper - Perf: Optimize Hoppers
-                if (fullState != HOPPER_EMPTY) { // Paper - Perf: Optimize Hoppers
+                if (!blockEntity.isEmpty()) {
                     flag = ejectItems(level, pos, blockEntity);
                 }
 
-                if (fullState != HOPPER_IS_FULL || flag) { // Paper - Perf: Optimize Hoppers
-                    flag |= validator.getAsBoolean(); // Paper - note: this is not a validator, it's what adds/sucks in items
+                if (!blockEntity.inventoryFull()) {
+                    flag |= validator.getAsBoolean();
                 }
 
                 if (flag) {
@@ -212,206 +174,6 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         return true;
     }
 
-    // Paper start - Perf: Optimize Hoppers
-    public static boolean skipHopperEvents;
-    private static boolean skipPullModeEventFire;
-    private static boolean skipPushModeEventFire;
-
-    private static boolean hopperPush(final Level level, final Container destination, final Direction direction, final HopperBlockEntity hopper) {
-        skipPushModeEventFire = skipHopperEvents;
-        boolean foundItem = false;
-        for (int i = 0; i < hopper.getContainerSize(); ++i) {
-            final ItemStack item = hopper.getItem(i);
-            if (!item.isEmpty()) {
-                foundItem = true;
-                ItemStack origItemStack = item;
-                ItemStack movedItem = origItemStack;
-
-                final int originalItemCount = origItemStack.getCount();
-                final int movedItemCount = Math.min(level.spigotConfig.hopperAmount, originalItemCount);
-                origItemStack.setCount(movedItemCount);
-
-                // We only need to fire the event once to give protection plugins a chance to cancel this event
-                // Because nothing uses getItem, every event call should end up the same result.
-                if (!skipPushModeEventFire) {
-                    movedItem = callPushMoveEvent(destination, movedItem, hopper);
-                    if (movedItem == null) { // cancelled
-                        origItemStack.setCount(originalItemCount);
-                        return false;
-                    }
-                }
-
-                final ItemStack remainingItem = addItem(hopper, destination, movedItem, direction);
-                final int remainingItemCount = remainingItem.getCount();
-                if (remainingItemCount != movedItemCount) {
-                    origItemStack = origItemStack.copy(true);
-                    origItemStack.setCount(originalItemCount);
-                    if (!origItemStack.isEmpty()) {
-                        origItemStack.setCount(originalItemCount - movedItemCount + remainingItemCount);
-                    }
-                    hopper.setItem(i, origItemStack);
-                    destination.setChanged();
-                    return true;
-                }
-                origItemStack.setCount(originalItemCount);
-            }
-        }
-        if (foundItem && level.paperConfig().hopper.cooldownWhenFull) { // Inventory was full - cooldown
-            hopper.setCooldown(level.spigotConfig.hopperTransfer);
-        }
-        return false;
-    }
-
-    private static boolean hopperPull(final Level level, final Hopper hopper, final Container container, ItemStack origItemStack, final int i) {
-        ItemStack movedItem = origItemStack;
-        final int originalItemCount = origItemStack.getCount();
-        final int movedItemCount = Math.min(level.spigotConfig.hopperAmount, originalItemCount);
-        container.setChanged(); // original logic always marks source inv as changed even if no move happens.
-        movedItem.setCount(movedItemCount);
-
-        if (!skipPullModeEventFire) {
-            movedItem = callPullMoveEvent(hopper, container, movedItem);
-            if (movedItem == null) { // cancelled
-                origItemStack.setCount(originalItemCount);
-                // Drastically improve performance by returning true.
-                // No plugin could have relied on the behavior of false as the other call
-                // site for IMIE did not exhibit the same behavior
-                return true;
-            }
-        }
-
-        final ItemStack remainingItem = addItem(container, hopper, movedItem, null);
-        final int remainingItemCount = remainingItem.getCount();
-        if (remainingItemCount != movedItemCount) {
-            origItemStack = origItemStack.copy(true);
-            origItemStack.setCount(originalItemCount);
-            if (!origItemStack.isEmpty()) {
-                origItemStack.setCount(originalItemCount - movedItemCount + remainingItemCount);
-            }
-
-            ignoreBlockEntityUpdates = true;
-            container.setItem(i, origItemStack);
-            ignoreBlockEntityUpdates = false;
-            container.setChanged();
-            return true;
-        }
-        origItemStack.setCount(originalItemCount);
-
-        if (level.paperConfig().hopper.cooldownWhenFull) {
-            applyCooldown(hopper);
-        }
-
-        return false;
-    }
-
-    @Nullable
-    private static ItemStack callPushMoveEvent(Container destination, ItemStack itemStack, HopperBlockEntity hopper) {
-        final org.bukkit.inventory.Inventory destinationInventory = getInventory(destination);
-        final io.papermc.paper.event.inventory.PaperInventoryMoveItemEvent event = new io.papermc.paper.event.inventory.PaperInventoryMoveItemEvent(
-            hopper.getOwner(false).getInventory(),
-            org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(itemStack),
-            destinationInventory,
-            true
-        );
-        final boolean result = event.callEvent();
-        if (!event.calledGetItem && !event.calledSetItem) {
-            skipPushModeEventFire = true;
-        }
-        if (!result) {
-            applyCooldown(hopper);
-            return null;
-        }
-
-        if (event.calledSetItem) {
-            return org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
-        } else {
-            return itemStack;
-        }
-    }
-
-    @Nullable
-    private static ItemStack callPullMoveEvent(final Hopper hopper, final Container container, final ItemStack itemstack) {
-        final org.bukkit.inventory.Inventory sourceInventory = getInventory(container);
-        final org.bukkit.inventory.Inventory destination = getInventory(hopper);
-
-        // Mirror is safe as no plugins ever use this item
-        final io.papermc.paper.event.inventory.PaperInventoryMoveItemEvent event = new io.papermc.paper.event.inventory.PaperInventoryMoveItemEvent(sourceInventory, org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(itemstack), destination, false);
-        final boolean result = event.callEvent();
-        if (!event.calledGetItem && !event.calledSetItem) {
-            skipPullModeEventFire = true;
-        }
-        if (!result) {
-            applyCooldown(hopper);
-            return null;
-        }
-
-        if (event.calledSetItem) {
-            return org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem());
-        } else {
-            return itemstack;
-        }
-    }
-
-    private static org.bukkit.inventory.Inventory getInventory(final Container container) {
-        final org.bukkit.inventory.Inventory sourceInventory;
-        if (container instanceof net.minecraft.world.CompoundContainer compoundContainer) {
-            // Have to special-case large chests as they work oddly
-            sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest(compoundContainer);
-        } else if (container instanceof BlockEntity blockEntity) {
-            sourceInventory = blockEntity.getOwner(false).getInventory();
-        } else if (container.getOwner() != null) {
-            sourceInventory = container.getOwner().getInventory();
-        } else {
-            sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventory(container);
-        }
-        return sourceInventory;
-    }
-
-    private static void applyCooldown(final Hopper hopper) {
-        if (hopper instanceof HopperBlockEntity blockEntity && blockEntity.getLevel() != null) {
-            blockEntity.setCooldown(blockEntity.getLevel().spigotConfig.hopperTransfer);
-        }
-    }
-
-    private static boolean allMatch(Container container, Direction direction, java.util.function.BiPredicate<ItemStack, Integer> test) {
-        if (container instanceof WorldlyContainer) {
-            for (int slot : ((WorldlyContainer) container).getSlotsForFace(direction)) {
-                if (!test.test(container.getItem(slot), slot)) {
-                    return false;
-                }
-            }
-        } else {
-            int size = container.getContainerSize();
-            for (int slot = 0; slot < size; slot++) {
-                if (!test.test(container.getItem(slot), slot)) {
-                    return false;
-                }
-            }
-        }
-        return true;
-    }
-
-    private static boolean anyMatch(Container container, Direction direction, java.util.function.BiPredicate<ItemStack, Integer> test) {
-        if (container instanceof WorldlyContainer) {
-            for (int slot : ((WorldlyContainer) container).getSlotsForFace(direction)) {
-                if (test.test(container.getItem(slot), slot)) {
-                    return true;
-                }
-            }
-        } else {
-            int size = container.getContainerSize();
-            for (int slot = 0; slot < size; slot++) {
-                if (test.test(container.getItem(slot), slot)) {
-                    return true;
-                }
-            }
-        }
-        return true;
-    }
-    private static final java.util.function.BiPredicate<ItemStack, Integer> STACK_SIZE_TEST = (itemStack, i) -> itemStack.getCount() >= itemStack.getMaxStackSize();
-    private static final java.util.function.BiPredicate<ItemStack, Integer> IS_EMPTY_TEST = (itemStack, i) -> itemStack.isEmpty();
-    // Paper end - Perf: Optimize Hoppers
-
     private static boolean ejectItems(Level level, BlockPos pos, HopperBlockEntity blockEntity) {
         Container attachedContainer = getAttachedContainer(level, pos, blockEntity);
         if (attachedContainer == null) {
@@ -421,60 +183,57 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
             if (isFullContainer(attachedContainer, opposite)) {
                 return false;
             } else {
-                // Paper start - Perf: Optimize Hoppers
-                return hopperPush(level, attachedContainer, opposite, blockEntity);
-                //for (int i = 0; i < blockEntity.getContainerSize(); i++) {
-                //    ItemStack item = blockEntity.getItem(i);
-                //    if (!item.isEmpty()) {
-                //        int count = item.getCount();
-                //        // CraftBukkit start - Call event when pushing items into other inventories
-                //        ItemStack original = item.copy();
-                //        org.bukkit.craftbukkit.inventory.CraftItemStack oitemstack = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(
-                //            blockEntity.removeItem(i, level.spigotConfig.hopperAmount)
-                //        ); // Spigot
-
-                //        org.bukkit.inventory.Inventory destinationInventory;
-                //        // Have to special case large chests as they work oddly
-                //        if (attachedContainer instanceof final net.minecraft.world.CompoundContainer compoundContainer) {
-                //            destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest(compoundContainer);
-                //        } else if (attachedContainer.getOwner() != null) {
-                //            destinationInventory = attachedContainer.getOwner().getInventory();
-                //        } else {
-                //            destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventory(attachedContainer);
-                //        }
-
-                //        org.bukkit.event.inventory.InventoryMoveItemEvent event = new org.bukkit.event.inventory.InventoryMoveItemEvent(
-                //            blockEntity.getOwner().getInventory(),
-                //            oitemstack,
-                //            destinationInventory,
-                //            true
-                //        );
-                //        if (!event.callEvent()) {
-                //            blockEntity.setItem(i, original);
-                //            blockEntity.setCooldown(level.spigotConfig.hopperTransfer); // Delay hopper checks // Spigot
-                //            return false;
-                //        }
-                //        int origCount = event.getItem().getAmount(); // Spigot
-                //        ItemStack itemStack = HopperBlockEntity.addItem(blockEntity, attachedContainer, org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem()), opposite);
-                //        // CraftBukkit end
-
-                //        if (itemStack.isEmpty()) {
-                //            attachedContainer.setChanged();
-                //            return true;
-                //        }
-
-                //        item.setCount(count);
-                //        // Spigot start
-                //        item.shrink(origCount - itemStack.getCount());
-                //        if (count <= level.spigotConfig.hopperAmount) {
-                //            // Spigot end
-                //            blockEntity.setItem(i, item);
-                //        }
-                //    }
-                //}
-
-                //return false;
-                // Paper end - Perf: Optimize Hoppers
+                for (int i = 0; i < blockEntity.getContainerSize(); i++) {
+                    ItemStack item = blockEntity.getItem(i);
+                    if (!item.isEmpty()) {
+                        int count = item.getCount();
+                        // CraftBukkit start - Call event when pushing items into other inventories
+                        ItemStack original = item.copy();
+                        org.bukkit.craftbukkit.inventory.CraftItemStack oitemstack = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(
+                            blockEntity.removeItem(i, level.spigotConfig.hopperAmount)
+                        ); // Spigot
+
+                        org.bukkit.inventory.Inventory destinationInventory;
+                        // Have to special case large chests as they work oddly
+                        if (attachedContainer instanceof final net.minecraft.world.CompoundContainer compoundContainer) {
+                            destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest(compoundContainer);
+                        } else if (attachedContainer.getOwner() != null) {
+                            destinationInventory = attachedContainer.getOwner().getInventory();
+                        } else {
+                            destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventory(attachedContainer);
+                        }
+
+                        org.bukkit.event.inventory.InventoryMoveItemEvent event = new org.bukkit.event.inventory.InventoryMoveItemEvent(
+                            blockEntity.getOwner().getInventory(),
+                            oitemstack,
+                            destinationInventory,
+                            true
+                        );
+                        if (!event.callEvent()) {
+                            blockEntity.setItem(i, original);
+                            blockEntity.setCooldown(level.spigotConfig.hopperTransfer); // Delay hopper checks // Spigot
+                            return false;
+                        }
+                        int origCount = event.getItem().getAmount(); // Spigot
+                        ItemStack itemStack = HopperBlockEntity.addItem(blockEntity, attachedContainer, org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem()), opposite);
+                        // CraftBukkit end
+
+                        if (itemStack.isEmpty()) {
+                            attachedContainer.setChanged();
+                            return true;
+                        }
+
+                        item.setCount(count);
+                        // Spigot start
+                        item.shrink(origCount - itemStack.getCount());
+                        if (count <= level.spigotConfig.hopperAmount) {
+                            // Spigot end
+                            blockEntity.setItem(i, item);
+                        }
+                    }
+                }
+
+                return false;
             }
         }
     }
@@ -529,7 +288,6 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         Container sourceContainer = getSourceContainer(level, hopper, blockPos, blockState);
         if (sourceContainer != null) {
             Direction direction = Direction.DOWN;
-            skipPullModeEventFire = skipHopperEvents; // Paper - Perf: Optimize Hoppers
 
             for (int i : getSlots(sourceContainer, direction)) {
                 if (tryTakeInItemFromSlot(hopper, sourceContainer, i, direction, level)) { // Spigot
@@ -555,58 +313,55 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     private static boolean tryTakeInItemFromSlot(Hopper hopper, Container container, int slot, Direction direction, Level level) { // Spigot
         ItemStack item = container.getItem(slot);
         if (!item.isEmpty() && canTakeItemFromContainer(hopper, container, item, slot, direction)) {
-            // Paper start - Perf: Optimize Hoppers
-            return hopperPull(level, hopper, container, item, slot);
-            //int count = item.getCount();
-            //// CraftBukkit start - Call event on collection of items from inventories into the hopper
-            //ItemStack original = item.copy();
-            //org.bukkit.craftbukkit.inventory.CraftItemStack oitemstack = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(
-            //    container.removeItem(slot, level.spigotConfig.hopperAmount) // Spigot
-            //);
-
-            //org.bukkit.inventory.Inventory sourceInventory;
-            //// Have to special case large chests as they work oddly
-            //if (container instanceof final net.minecraft.world.CompoundContainer compoundContainer) {
-            //    sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest(compoundContainer);
-            //} else if (container.getOwner() != null) {
-            //    sourceInventory = container.getOwner().getInventory();
-            //} else {
-            //    sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventory(container);
-            //}
-
-            //org.bukkit.event.inventory.InventoryMoveItemEvent event = new org.bukkit.event.inventory.InventoryMoveItemEvent(
-            //    sourceInventory,
-            //    oitemstack,
-            //    hopper.getOwner().getInventory(),
-            //    false
-            //);
-
-            //if (!event.callEvent()) {
-            //    container.setItem(slot, original);
-
-            //    if (hopper instanceof final HopperBlockEntity hopperBlockEntity) {
-            //        hopperBlockEntity.setCooldown(level.spigotConfig.hopperTransfer); // Spigot
-            //    }
-
-            //    return false;
-            //}
-            //int origCount = event.getItem().getAmount(); // Spigot
-            //ItemStack itemStack = HopperBlockEntity.addItem(container, hopper, org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem()), null);
-            //// CraftBukkit end
-
-            //if (itemStack.isEmpty()) {
-            //    container.setChanged();
-            //    return true;
-            //}
-
-            //item.setCount(count);
-            //// Spigot start
-            //item.shrink(origCount - itemStack.getCount());
-            //if (count <= level.spigotConfig.hopperAmount) {
-            //    // Spigot end
-            //    container.setItem(slot, item);
-            //}
-            // Paper end - Perf: Optimize Hoppers
+            int count = item.getCount();
+            // CraftBukkit start - Call event on collection of items from inventories into the hopper
+            ItemStack original = item.copy();
+            org.bukkit.craftbukkit.inventory.CraftItemStack oitemstack = org.bukkit.craftbukkit.inventory.CraftItemStack.asCraftMirror(
+                container.removeItem(slot, level.spigotConfig.hopperAmount) // Spigot
+            );
+
+            org.bukkit.inventory.Inventory sourceInventory;
+            // Have to special case large chests as they work oddly
+            if (container instanceof final net.minecraft.world.CompoundContainer compoundContainer) {
+                sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest(compoundContainer);
+            } else if (container.getOwner() != null) {
+                sourceInventory = container.getOwner().getInventory();
+            } else {
+                sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventory(container);
+            }
+
+            org.bukkit.event.inventory.InventoryMoveItemEvent event = new org.bukkit.event.inventory.InventoryMoveItemEvent(
+                sourceInventory,
+                oitemstack,
+                hopper.getOwner().getInventory(),
+                false
+            );
+
+            if (!event.callEvent()) {
+                container.setItem(slot, original);
+
+                if (hopper instanceof final HopperBlockEntity hopperBlockEntity) {
+                    hopperBlockEntity.setCooldown(level.spigotConfig.hopperTransfer); // Spigot
+                }
+
+                return false;
+            }
+            int origCount = event.getItem().getAmount(); // Spigot
+            ItemStack itemStack = HopperBlockEntity.addItem(container, hopper, org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(event.getItem()), null);
+            // CraftBukkit end
+
+            if (itemStack.isEmpty()) {
+                container.setChanged();
+                return true;
+            }
+
+            item.setCount(count);
+            // Spigot start
+            item.shrink(origCount - itemStack.getCount());
+            if (count <= level.spigotConfig.hopperAmount) {
+                // Spigot end
+                container.setItem(slot, item);
+            }
         }
 
         return false;
@@ -615,15 +370,13 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     public static boolean addItem(Container container, ItemEntity item) {
         boolean flag = false;
         // CraftBukkit start
-        if (org.bukkit.event.inventory.InventoryPickupItemEvent.getHandlerList().getRegisteredListeners().length > 0) { // Paper - optimize hoppers
         org.bukkit.event.inventory.InventoryPickupItemEvent event = new org.bukkit.event.inventory.InventoryPickupItemEvent(
-            getInventory(container), (org.bukkit.entity.Item) item.getBukkitEntity() // Paper - Perf: Optimize Hoppers; use getInventory() to avoid snapshot creation
+            container.getOwner().getInventory(), (org.bukkit.entity.Item) item.getBukkitEntity()
         );
         if (!event.callEvent()) {
             return false;
         }
         // CraftBukkit end
-        } // Paper - Perf: Optimize Hoppers
         ItemStack itemStack = item.getItem().copy();
         ItemStack itemStack1 = addItem(null, container, itemStack, null);
         if (itemStack1.isEmpty()) {
@@ -678,9 +431,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
                     stack = stack.split(destination.getMaxStackSize());
                 }
                 // Spigot end
-                ignoreBlockEntityUpdates = true; // Paper - Perf: Optimize Hoppers
                 destination.setItem(slot, stack);
-                ignoreBlockEntityUpdates = false; // Paper - Perf: Optimize Hoppers
                 stack = leftover; // Paper - Make hoppers respect inventory max stack size
                 flag = true;
             } else if (canMergeItems(item, stack)) {
@@ -768,19 +519,13 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
     @Nullable
     public static Container getContainerAt(Level level, BlockPos pos) {
-        return getContainerAt(level, pos, level.getBlockState(pos), pos.getX() + 0.5, pos.getY() + 0.5, pos.getZ() + 0.5, true); // Paper - Optimize hoppers
+        return getContainerAt(level, pos, level.getBlockState(pos), pos.getX() + 0.5, pos.getY() + 0.5, pos.getZ() + 0.5);
     }
 
     @Nullable
     private static Container getContainerAt(Level level, BlockPos pos, BlockState state, double x, double y, double z) {
-        // Paper start - Perf: Optimize Hoppers
-        return HopperBlockEntity.getContainerAt(level, pos, state, x, y, z, false);
-    }
-    @Nullable
-    private static Container getContainerAt(Level level, BlockPos pos, BlockState state, double x, double y, double z, final boolean optimizeEntities) {
-        // Paper end - Perf: Optimize Hoppers
         Container blockContainer = getBlockContainer(level, pos, state);
-        if (blockContainer == null && (!optimizeEntities || !level.paperConfig().hopper.ignoreOccludingBlocks || !state.getBukkitMaterial().isOccluding())) { // Paper - Perf: Optimize Hoppers
+        if (blockContainer == null) {
             blockContainer = getEntityContainer(level, x, y, z);
         }
 
@@ -806,14 +551,14 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
     @Nullable
     private static Container getEntityContainer(Level level, double x, double y, double z) {
-        List<Entity> entities = level.getEntitiesOfClass(
-            (Class) Container.class, new AABB(x - 0.5, y - 0.5, z - 0.5, x + 0.5, y + 0.5, z + 0.5), EntitySelector.CONTAINER_ENTITY_SELECTOR // Paper - Perf: Optimize hoppers
+        List<Entity> entities = level.getEntities(
+            (Entity)null, new AABB(x - 0.5, y - 0.5, z - 0.5, x + 0.5, y + 0.5, z + 0.5), EntitySelector.CONTAINER_ENTITY_SELECTOR
         );
         return !entities.isEmpty() ? (Container)entities.get(level.random.nextInt(entities.size())) : null;
     }
 
     private static boolean canMergeItems(ItemStack stack1, ItemStack stack2) {
-        return stack1.getCount() < stack1.getMaxStackSize() && ItemStack.isSameItemSameComponents(stack1, stack2); // Paper - Perf: Optimize Hoppers; used to return true for full itemstacks?!
+        return stack1.getCount() <= stack1.getMaxStackSize() && ItemStack.isSameItemSameComponents(stack1, stack2);
     }
 
     @Override
diff --git a/net/minecraft/world/ticks/LevelChunkTicks.java b/net/minecraft/world/ticks/LevelChunkTicks.java
index faf45ac459f7c25309d6ef6dce371d484a0dae7b..aa730ffad75a439b2f4f121c6e772f4e16ff4b19 100644
--- a/net/minecraft/world/ticks/LevelChunkTicks.java
+++ b/net/minecraft/world/ticks/LevelChunkTicks.java
@@ -16,8 +16,11 @@ import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.world.level.ChunkPos;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
-public class LevelChunkTicks<T> implements SerializableTickContainer<T>, TickContainerAccess<T>, ca.spottedleaf.moonrise.patches.chunk_system.ticks.ChunkSystemLevelChunkTicks { // Paper - rewrite chunk system
+public class LevelChunkTicks<T> implements SerializableTickContainer<T>, TickContainerAccess<T>, ca.spottedleaf.moonrise.patches.chunk_system.ticks.ChunkSystemLevelChunkTicks {
+    private static final Logger log = LogManager.getLogger(LevelChunkTicks.class); // Paper - rewrite chunk system
     private final Queue<ScheduledTick<T>> tickQueue = new PriorityQueue<>(ScheduledTick.DRAIN_ORDER);
     @Nullable
     private List<SavedTick<T>> pendingTicks;
@@ -71,9 +74,17 @@ public class LevelChunkTicks<T> implements SerializableTickContainer<T>, TickCon
 
     @Nullable
     public ScheduledTick<T> poll() {
-        ScheduledTick<T> scheduledTick = this.tickQueue.poll();
-        if (scheduledTick != null) {
-            this.ticksPerPosition.remove(scheduledTick); this.dirty = true; // Paper - rewrite chunk system
+        // Canvas start
+        ScheduledTick<T> scheduledTick = null;
+        try {
+            scheduledTick = this.tickQueue.poll();
+            if (scheduledTick != null) {
+                this.ticksPerPosition.remove(scheduledTick); this.dirty = true; // Paper - rewrite chunk system
+            }
+        } catch (Exception e) {
+            log.error("Encountered caught exception when polling chunk ticks, blocking and returning null.", e);
+            return null;
+        // Canvas end
         }
 
         return scheduledTick;
