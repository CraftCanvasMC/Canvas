From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Thu, 16 Jan 2025 23:29:38 -0800
Subject: [PATCH] Async Pathfinding


diff --git a/net/minecraft/world/entity/ai/behavior/AcquirePoi.java b/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
index 67cbf9f5760fae5db6f31e64095cd1b6be6ade8e..bd1ac48f7050c4c2eaae7646540faa6f4b9e032e 100644
--- a/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
+++ b/net/minecraft/world/entity/ai/behavior/AcquirePoi.java
@@ -94,21 +94,54 @@ public class AcquirePoi {
                                 }
                             }
                             // Paper end - optimise POI access
-                            Path path = findPathToPois(mob, set);
-                            if (path != null && path.canReach()) {
-                                BlockPos target = path.getTarget();
-                                poiManager.getType(target).ifPresent(holder -> {
-                                    poiManager.take(acquirablePois, (holder1, blockPos) -> blockPos.equals(target), target, 1);
-                                    memoryAccessor.set(GlobalPos.of(level.dimension(), target));
-                                    entityEventId.ifPresent(id -> level.broadcastEntityEvent(mob, id));
-                                    map.clear();
-                                    DebugPackets.sendPoiTicketCountPacket(level, target);
+                            // Canvas start - Async path processing
+                            if (io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding) {
+                                // await on path async
+                                Path possiblePath = findPathToPois(mob, set);
+
+                                // wait on the path to be processed
+                                io.canvasmc.canvas.entity.pathfinding.AsyncPathProcessor.awaitProcessing(possiblePath, level, path -> {
+                                    // read canReach check
+                                    if (path == null || !path.canReach()) {
+                                        for (Pair<Holder<PoiType>, BlockPos> pair : set) {
+                                            map.computeIfAbsent(
+                                                    pair.getSecond().asLong(),
+                                                    m -> new JitteredLinearRetry(mob.level().random, time)
+                                            );
+                                        }
+                                        return;
+                                    }
+                                    BlockPos blockPos = path.getTarget();
+                                    poiManager.getType(blockPos).ifPresent(poiType -> {
+                                        poiManager.take(acquirablePois,
+                                                (holder, blockPos2) -> blockPos2.equals(blockPos),
+                                                blockPos,
+                                                1
+                                        );
+                                        memoryAccessor.set(GlobalPos.of(level.dimension(), blockPos));
+                                        entityEventId.ifPresent(status -> level.broadcastEntityEvent(mob, status));
+                                        map.clear();
+                                        DebugPackets.sendPoiTicketCountPacket(level, blockPos);
+                                    });
                                 });
                             } else {
-                                for (Pair<Holder<PoiType>, BlockPos> pair : set) {
-                                    map.computeIfAbsent(pair.getSecond().asLong(), l -> new AcquirePoi.JitteredLinearRetry(level.random, time));
+                                Path path = findPathToPois(mob, set);
+                                if (path != null && path.canReach()) {
+                                    BlockPos target = path.getTarget();
+                                    poiManager.getType(target).ifPresent(holder -> {
+                                        poiManager.take(acquirablePois, (holder1, blockPos) -> blockPos.equals(target), target, 1);
+                                        memoryAccessor.set(GlobalPos.of(level.dimension(), target));
+                                        entityEventId.ifPresent(id -> level.broadcastEntityEvent(mob, id));
+                                        map.clear();
+                                        DebugPackets.sendPoiTicketCountPacket(level, target);
+                                    });
+                                } else {
+                                    for (Pair<Holder<PoiType>, BlockPos> pair : set) {
+                                        map.computeIfAbsent(pair.getSecond().asLong(), l -> new AcquirePoi.JitteredLinearRetry(level.random, time));
+                                    }
                                 }
                             }
+                            // Canvas end - Async path processing
 
                             return true;
                         }
diff --git a/net/minecraft/world/entity/ai/behavior/MoveToTargetSink.java b/net/minecraft/world/entity/ai/behavior/MoveToTargetSink.java
index 621ba76784f2b92790eca62be4d0688834335ab6..148c59c9b20fc5cd8ad44fa96c903cc95ccc37ad 100644
--- a/net/minecraft/world/entity/ai/behavior/MoveToTargetSink.java
+++ b/net/minecraft/world/entity/ai/behavior/MoveToTargetSink.java
@@ -21,6 +21,7 @@ public class MoveToTargetSink extends Behavior<Mob> {
     private int remainingCooldown;
     @Nullable
     private Path path;
+    private boolean finishedProcessing; // Canvas - async path processing
     @Nullable
     private BlockPos lastTargetPos;
     private float speedModifier;
@@ -53,9 +54,11 @@ public class MoveToTargetSink extends Behavior<Mob> {
             Brain<?> brain = owner.getBrain();
             WalkTarget walkTarget = brain.getMemory(MemoryModuleType.WALK_TARGET).get();
             boolean flag = this.reachedTarget(owner, walkTarget);
-            if (!flag && this.tryComputePath(owner, walkTarget, level.getGameTime())) {
+            if (!io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding && !flag && this.tryComputePath(owner, walkTarget, level.getGameTime())) { // Canvas - async path processing
                 this.lastTargetPos = walkTarget.getTarget().currentBlockPosition();
                 return true;
+            } else if (io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding && !flag) { // Canvas - async pathfinding
+                return true;
             } else {
                 brain.eraseMemory(MemoryModuleType.WALK_TARGET);
                 if (flag) {
@@ -69,6 +72,7 @@ public class MoveToTargetSink extends Behavior<Mob> {
 
     @Override
     protected boolean canStillUse(ServerLevel level, Mob entity, long gameTime) {
+        if (io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding && !this.finishedProcessing) return true; // Canvas - wait for processing
         if (this.path != null && this.lastTargetPos != null) {
             Optional<WalkTarget> memory = entity.getBrain().getMemory(MemoryModuleType.WALK_TARGET);
             boolean flag = memory.map(MoveToTargetSink::isWalkTargetSpectator).orElse(false);
@@ -95,27 +99,98 @@ public class MoveToTargetSink extends Behavior<Mob> {
 
     @Override
     protected void start(ServerLevel level, Mob entity, long gameTime) {
+        // Canvas start - start processing
+        if (io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding) {
+            Brain<?> brain = entity.getBrain();
+            WalkTarget walkTarget = brain.getMemory(MemoryModuleType.WALK_TARGET).get();
+
+            this.finishedProcessing = false;
+            this.lastTargetPos = walkTarget.getTarget().currentBlockPosition();
+            this.path = this.computePath(entity, walkTarget);
+            return;
+        }
+        // Canvas end - start processing
         entity.getBrain().setMemory(MemoryModuleType.PATH, this.path);
         entity.getNavigation().moveTo(this.path, (double)this.speedModifier);
     }
 
     @Override
     protected void tick(ServerLevel level, Mob owner, long gameTime) {
-        Path path = owner.getNavigation().getPath();
-        Brain<?> brain = owner.getBrain();
-        if (this.path != path) {
-            this.path = path;
-            brain.setMemory(MemoryModuleType.PATH, path);
-        }
+        // Canvas start - Async path processing
+        if (io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding) {
+            if (this.path != null && !this.path.isProcessed()) return; // wait for processing
 
-        if (path != null && this.lastTargetPos != null) {
-            WalkTarget walkTarget = brain.getMemory(MemoryModuleType.WALK_TARGET).get();
-            if (walkTarget.getTarget().currentBlockPosition().distSqr(this.lastTargetPos) > 4.0 && this.tryComputePath(owner, walkTarget, level.getGameTime())) {
-                this.lastTargetPos = walkTarget.getTarget().currentBlockPosition();
-                this.start(level, owner, gameTime);
+            if (!this.finishedProcessing) {
+                this.finishedProcessing = true;
+
+                Brain<?> brain = owner.getBrain();
+                boolean canReach = this.path != null && this.path.canReach();
+                if (canReach) {
+                    brain.eraseMemory(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE);
+                } else if (!brain.hasMemoryValue(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE)) {
+                    brain.setMemory(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, gameTime);
+                }
+
+                if (!canReach) {
+                    Optional<WalkTarget> walkTarget = brain.getMemory(MemoryModuleType.WALK_TARGET);
+
+                    if (!walkTarget.isPresent()) return;
+
+                    BlockPos blockPos = walkTarget.get().getTarget().currentBlockPosition();
+                    Vec3 vec3 = DefaultRandomPos.getPosTowards((PathfinderMob) owner, 10, 7, Vec3.atBottomCenterOf(blockPos), (float) Math.PI / 2F);
+                    if (vec3 != null) {
+                        // try recalculating the path using a random position
+                        this.path = owner.getNavigation().createPath(vec3.x, vec3.y, vec3.z, 0);
+                        this.finishedProcessing = false;
+                        return;
+                    }
+                }
+
+                owner.getBrain().setMemory(MemoryModuleType.PATH, this.path);
+                owner.getNavigation().moveTo(this.path, this.speedModifier);
             }
+
+            Path path = owner.getNavigation().getPath();
+            Brain<?> brain = owner.getBrain();
+
+            if (path != null && this.lastTargetPos != null && brain.hasMemoryValue(MemoryModuleType.WALK_TARGET)) {
+                WalkTarget walkTarget = brain.getMemory(MemoryModuleType.WALK_TARGET).get(); // we know isPresent = true
+                if (walkTarget.getTarget().currentBlockPosition().distSqr(this.lastTargetPos) > 4.0D) {
+                    this.start(level, owner, gameTime);
+                }
+            }
+        } else {
+            Path path = owner.getNavigation().getPath();
+            Brain<?> brain = owner.getBrain();
+            if (this.path != path) {
+                this.path = path;
+                brain.setMemory(MemoryModuleType.PATH, path);
+            }
+
+            if (path != null && this.lastTargetPos != null) {
+                WalkTarget walkTarget = brain.getMemory(MemoryModuleType.WALK_TARGET).get();
+                if (walkTarget.getTarget().currentBlockPosition().distSqr(this.lastTargetPos) > 4.0
+                        && this.tryComputePath(owner, walkTarget, level.getGameTime())) {
+                    this.lastTargetPos = walkTarget.getTarget().currentBlockPosition();
+                    this.start(level, owner, gameTime);
+                }
+            }
+        }
+        // Canvas end - Async path processing
+    }
+
+    // Canvas start - Async path processing
+    @Nullable
+    private Path computePath(Mob entity, WalkTarget walkTarget) {
+        BlockPos blockPos = walkTarget.getTarget().currentBlockPosition();
+        this.speedModifier = walkTarget.getSpeedModifier();
+        Brain<?> brain = entity.getBrain();
+        if (this.reachedTarget(entity, walkTarget)) {
+            brain.eraseMemory(MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE);
         }
+        return entity.getNavigation().createPath(blockPos, 0);
     }
+    // Canvas end - Async path processing
 
     private boolean tryComputePath(Mob mob, WalkTarget target, long time) {
         BlockPos blockPos = target.getTarget().currentBlockPosition();
diff --git a/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java b/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
index 4f9f3367b1ca3903df03a80fa2b01a3d24e6e77d..2bcf655fd28cca04e4062db867f2299cb1039fa3 100644
--- a/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
+++ b/net/minecraft/world/entity/ai/behavior/SetClosestHomeAsWalkTarget.java
@@ -60,17 +60,38 @@ public class SetClosestHomeAsWalkTarget {
                                         poi -> poi.is(PoiTypes.HOME), predicate, mob.blockPosition(), 48, PoiManager.Occupancy.ANY
                                     )
                                     .collect(Collectors.toSet());
-                                Path path = AcquirePoi.findPathToPois(mob, set);
-                                if (path != null && path.canReach()) {
-                                    BlockPos target = path.getTarget();
-                                    Optional<Holder<PoiType>> type = poiManager.getType(target);
-                                    if (type.isPresent()) {
-                                        walkTarget.set(new WalkTarget(target, speedModifier, 1));
-                                        DebugPackets.sendPoiTicketCountPacket(level, target);
+                                // Canvas start - async path processing
+                                if (io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding) {
+                                    // await on path async
+                                    Path possiblePath = AcquirePoi.findPathToPois(mob, set);
+
+                                    // wait on the path to be processed
+                                    io.canvasmc.canvas.entity.pathfinding.AsyncPathProcessor.awaitProcessing(possiblePath, level, path -> {
+                                        if (path == null || !path.canReach() || mutableInt.getValue() < 5) { // read canReach check
+                                            map.long2LongEntrySet().removeIf(entry -> entry.getLongValue() < mutableLong.getValue());
+                                                    return;
+                                        }
+                                        BlockPos blockPos = path.getTarget();
+                                        Optional<Holder<PoiType>> optional2 = poiManager.getType(blockPos);
+                                        if (optional2.isPresent()) {
+                                            walkTarget.set(new WalkTarget(blockPos, speedModifier, 1));
+                                            DebugPackets.sendPoiTicketCountPacket(level, blockPos);
+                                        }
+                                    });
+                                } else {
+                                    Path path = AcquirePoi.findPathToPois(mob, set);
+                                    if (path != null && path.canReach()) {
+                                        BlockPos target = path.getTarget();
+                                        Optional<Holder<PoiType>> type = poiManager.getType(target);
+                                        if (type.isPresent()) {
+                                            walkTarget.set(new WalkTarget(target, speedModifier, 1));
+                                            DebugPackets.sendPoiTicketCountPacket(level, target);
+                                        }
+                                    } else if (mutableInt.getValue() < 5) {
+                                        map.long2LongEntrySet().removeIf(entry -> entry.getLongValue() < mutableLong.getValue());
                                     }
-                                } else if (mutableInt.getValue() < 5) {
-                                    map.long2LongEntrySet().removeIf(entry -> entry.getLongValue() < mutableLong.getValue());
                                 }
+                                // Canvas end - async path processing
 
                                 return true;
                             } else {
diff --git a/net/minecraft/world/entity/ai/goal/DoorInteractGoal.java b/net/minecraft/world/entity/ai/goal/DoorInteractGoal.java
index d8f532c5e68ff4dff933556c4f981e9474c044e6..ae73295e160a52dfd87b892d09e88f79c017b2a8 100644
--- a/net/minecraft/world/entity/ai/goal/DoorInteractGoal.java
+++ b/net/minecraft/world/entity/ai/goal/DoorInteractGoal.java
@@ -56,7 +56,7 @@ public abstract class DoorInteractGoal extends Goal {
         } else {
             GroundPathNavigation groundPathNavigation = (GroundPathNavigation)this.mob.getNavigation();
             Path path = groundPathNavigation.getPath();
-            if (path != null && !path.isDone()) {
+            if (path != null && path.isProcessed() && !path.isDone()) { // Canvas - async path processing
                 for (int i = 0; i < Math.min(path.getNextNodeIndex() + 2, path.getNodeCount()); i++) {
                     Node node = path.getNode(i);
                     this.doorPos = new BlockPos(node.x, node.y + 1, node.z);
diff --git a/net/minecraft/world/entity/ai/navigation/AmphibiousPathNavigation.java b/net/minecraft/world/entity/ai/navigation/AmphibiousPathNavigation.java
index 66a02fe7594522ef391d67e09856bf3f70fe597d..128a387356c3e890e5a3afd206c470b41e77babe 100644
--- a/net/minecraft/world/entity/ai/navigation/AmphibiousPathNavigation.java
+++ b/net/minecraft/world/entity/ai/navigation/AmphibiousPathNavigation.java
@@ -12,9 +12,25 @@ public class AmphibiousPathNavigation extends PathNavigation {
         super(mob, level);
     }
 
+    // Canvas start - async path processing
+    private static final io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorGenerator nodeEvaluatorGenerator = (io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorFeatures nodeEvaluatorFeatures) -> {
+        AmphibiousNodeEvaluator nodeEvaluator = new AmphibiousNodeEvaluator(false);
+        nodeEvaluator.setCanPassDoors(nodeEvaluatorFeatures.canPassDoors());
+        nodeEvaluator.setCanFloat(nodeEvaluatorFeatures.canFloat());
+        nodeEvaluator.setCanWalkOverFences(nodeEvaluatorFeatures.canWalkOverFences());
+        nodeEvaluator.setCanOpenDoors(nodeEvaluatorFeatures.canOpenDoors());
+        return nodeEvaluator;
+    };
+    // Canvas end - async path processing
+
     @Override
     protected PathFinder createPathFinder(int maxVisitedNodes) {
         this.nodeEvaluator = new AmphibiousNodeEvaluator(false);
+        // Canvas start - async path processing
+        if (io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding) {
+            return new PathFinder(this.nodeEvaluator, maxVisitedNodes, nodeEvaluatorGenerator);
+        }
+        // Canvas end - async path processing
         return new PathFinder(this.nodeEvaluator, maxVisitedNodes);
     }
 
diff --git a/net/minecraft/world/entity/ai/navigation/FlyingPathNavigation.java b/net/minecraft/world/entity/ai/navigation/FlyingPathNavigation.java
index 71ea68b56b3069bdf8e47931156b6ef49ea8ce5d..8eb934c9f7042f9fb318253ff0f2811fb38dc8ac 100644
--- a/net/minecraft/world/entity/ai/navigation/FlyingPathNavigation.java
+++ b/net/minecraft/world/entity/ai/navigation/FlyingPathNavigation.java
@@ -16,9 +16,25 @@ public class FlyingPathNavigation extends PathNavigation {
         super(mob, level);
     }
 
+    // Canvas start - async path processing
+    private static final io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorGenerator nodeEvaluatorGenerator = (io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorFeatures nodeEvaluatorFeatures) -> {
+        FlyNodeEvaluator nodeEvaluator = new FlyNodeEvaluator();
+        nodeEvaluator.setCanPassDoors(nodeEvaluatorFeatures.canPassDoors());
+        nodeEvaluator.setCanFloat(nodeEvaluatorFeatures.canFloat());
+        nodeEvaluator.setCanWalkOverFences(nodeEvaluatorFeatures.canWalkOverFences());
+        nodeEvaluator.setCanOpenDoors(nodeEvaluatorFeatures.canOpenDoors());
+        return nodeEvaluator;
+    };
+    // Canvas end - async path processing
+
     @Override
     protected PathFinder createPathFinder(int maxVisitedNodes) {
         this.nodeEvaluator = new FlyNodeEvaluator();
+        // Canvas start - async path processing
+        if (io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding) {
+            return new PathFinder(this.nodeEvaluator, maxVisitedNodes, nodeEvaluatorGenerator);
+        }
+        // Canvas end - async path processing
         return new PathFinder(this.nodeEvaluator, maxVisitedNodes);
     }
 
@@ -48,6 +64,7 @@ public class FlyingPathNavigation extends PathNavigation {
         if (this.hasDelayedRecomputation) {
             this.recomputePath();
         }
+        if (this.path != null && !this.path.isProcessed()) return; // Canvas - async path processing
 
         if (!this.isDone()) {
             if (this.canUpdatePath()) {
diff --git a/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java b/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
index 045cfafb3afe8271d60852ae3c7cdcb039b44d4f..d9b1e1a02073dee56e0d2ac9075aa94de228b459 100644
--- a/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
+++ b/net/minecraft/world/entity/ai/navigation/GroundPathNavigation.java
@@ -24,9 +24,25 @@ public class GroundPathNavigation extends PathNavigation {
         super(mob, level);
     }
 
+    // Canvas start - async path processing
+    protected static final io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorGenerator nodeEvaluatorGenerator = (io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorFeatures nodeEvaluatorFeatures) -> {
+        WalkNodeEvaluator nodeEvaluator = new WalkNodeEvaluator();
+        nodeEvaluator.setCanPassDoors(nodeEvaluatorFeatures.canPassDoors());
+        nodeEvaluator.setCanFloat(nodeEvaluatorFeatures.canFloat());
+        nodeEvaluator.setCanWalkOverFences(nodeEvaluatorFeatures.canWalkOverFences());
+        nodeEvaluator.setCanOpenDoors(nodeEvaluatorFeatures.canOpenDoors());
+        return nodeEvaluator;
+    };
+    // Canvas end - async path processing
+
     @Override
     protected PathFinder createPathFinder(int maxVisitedNodes) {
         this.nodeEvaluator = new WalkNodeEvaluator();
+        // Canvas start - async path processing
+        if (io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding) {
+            return new PathFinder(this.nodeEvaluator, maxVisitedNodes, nodeEvaluatorGenerator);
+        }
+        // Canvas end - async path processing
         return new PathFinder(this.nodeEvaluator, maxVisitedNodes);
     }
 
diff --git a/net/minecraft/world/entity/ai/navigation/PathNavigation.java b/net/minecraft/world/entity/ai/navigation/PathNavigation.java
index b44f2c49509d847817a78e9c4fb1499fb378054b..8ea650a29026fe1a54461d131b8b0ae75461bc63 100644
--- a/net/minecraft/world/entity/ai/navigation/PathNavigation.java
+++ b/net/minecraft/world/entity/ai/navigation/PathNavigation.java
@@ -169,6 +169,10 @@ public abstract class PathNavigation {
             return null;
         } else if (!this.canUpdatePath()) {
             return null;
+            // Canvas start - catch early if it's still processing these positions let it keep processing
+        } else if (this.path instanceof io.canvasmc.canvas.entity.pathfinding.AsyncPath asyncPath && !asyncPath.isProcessed() && asyncPath.hasSameProcessingPositions(targets)) {
+            return this.path;
+            // Canvas end - catch early if it's still processing these positions let it keep processing
         } else if (this.path != null && !this.path.isDone() && targets.contains(this.targetPos)) {
             return this.path;
         } else {
@@ -195,12 +199,30 @@ public abstract class PathNavigation {
             int i = (int)(followRange + regionOffset);
             PathNavigationRegion pathNavigationRegion = new PathNavigationRegion(this.level, blockPos.offset(-i, -i, -i), blockPos.offset(i, i, i));
             Path path = this.pathFinder.findPath(pathNavigationRegion, this.mob, targets, followRange, accuracy, this.maxVisitedNodesMultiplier);
-            profilerFiller.pop();
-            if (path != null && path.getTarget() != null) {
-                this.targetPos = path.getTarget();
-                this.reachRange = accuracy;
-                this.resetStuckTimeout();
+            // Canvas start - async path processing
+            if (io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding) {
+                // assign early a target position. most calls will only have 1 position
+                if (!targets.isEmpty()) this.targetPos = targets.iterator().next();
+
+                io.canvasmc.canvas.entity.pathfinding.AsyncPathProcessor.awaitProcessing(path, this.mob.level(), processedPath -> {
+                    // check that processing didn't take so long that we calculated a new path
+                    if (processedPath != this.path) return;
+
+                    if (processedPath != null && processedPath.getTarget() != null) {
+                        this.targetPos = processedPath.getTarget();
+                        this.reachRange = accuracy;
+                        this.resetStuckTimeout();
+                    }
+                });
+            } else {
+                profilerFiller.pop();
+                if (path != null && path.getTarget() != null) {
+                    this.targetPos = path.getTarget();
+                    this.reachRange = accuracy;
+                    this.resetStuckTimeout();
+                }
             }
+            // Canvas end - async path processing
 
             return path;
         }
@@ -251,8 +273,8 @@ public abstract class PathNavigation {
             if (this.isDone()) {
                 return false;
             } else {
-                this.trimPath();
-                if (this.path.getNodeCount() <= 0) {
+                if (path.isProcessed()) this.trimPath(); // Canvas - only trim if processed
+                if (path.isProcessed() && this.path.getNodeCount() <= 0) { // Canvas - only check node count if processed
                     return false;
                 } else {
                     this.speedModifier = speed;
@@ -275,6 +297,7 @@ public abstract class PathNavigation {
         if (this.hasDelayedRecomputation) {
             this.recomputePath();
         }
+        if (this.path != null && !this.path.isProcessed()) return; // Canvas - skip pathfinding if we're still processing
 
         if (!this.isDone()) {
             if (this.canUpdatePath()) {
@@ -304,6 +327,7 @@ public abstract class PathNavigation {
     }
 
     protected void followThePath() {
+        if (!this.path.isProcessed()) return; // Canvas - skip if not processed
         Vec3 tempMobPos = this.getTempMobPos();
         this.maxDistanceToWaypoint = this.mob.getBbWidth() > 0.75F ? this.mob.getBbWidth() / 2.0F : 0.75F - this.mob.getBbWidth() / 2.0F;
         Vec3i nextNodePos = this.path.getNextNodePos();
@@ -460,7 +484,7 @@ public abstract class PathNavigation {
     public boolean shouldRecomputePath(BlockPos pos) {
         if (this.hasDelayedRecomputation) {
             return false;
-        } else if (this.path != null && !this.path.isDone() && this.path.getNodeCount() != 0) {
+        } else if (this.path != null && this.path.isProcessed() && !this.path.isDone() && this.path.getNodeCount() != 0) { // Canvas - Skip if not processed
             Node endNode = this.path.getEndNode();
             Vec3 vec3 = new Vec3((endNode.x + this.mob.getX()) / 2.0, (endNode.y + this.mob.getY()) / 2.0, (endNode.z + this.mob.getZ()) / 2.0);
             return pos.closerToCenterThan(vec3, this.path.getNodeCount() - this.path.getNextNodeIndex());
diff --git a/net/minecraft/world/entity/ai/navigation/WaterBoundPathNavigation.java b/net/minecraft/world/entity/ai/navigation/WaterBoundPathNavigation.java
index 2979846853898d78a2df19df2287da16dbe4ae71..00297898867403262e41e2493546d09fa01a1db2 100644
--- a/net/minecraft/world/entity/ai/navigation/WaterBoundPathNavigation.java
+++ b/net/minecraft/world/entity/ai/navigation/WaterBoundPathNavigation.java
@@ -15,11 +15,27 @@ public class WaterBoundPathNavigation extends PathNavigation {
         super(mob, level);
     }
 
+    // Canvas start - async path processing
+    private static final io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorGenerator nodeEvaluatorGenerator = (io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorFeatures nodeEvaluatorFeatures) -> {
+        SwimNodeEvaluator nodeEvaluator = new SwimNodeEvaluator(nodeEvaluatorFeatures.allowBreaching());
+        nodeEvaluator.setCanPassDoors(nodeEvaluatorFeatures.canPassDoors());
+        nodeEvaluator.setCanFloat(nodeEvaluatorFeatures.canFloat());
+        nodeEvaluator.setCanWalkOverFences(nodeEvaluatorFeatures.canWalkOverFences());
+        nodeEvaluator.setCanOpenDoors(nodeEvaluatorFeatures.canOpenDoors());
+        return nodeEvaluator;
+    };
+    // Canvas end - async path processing
+
     @Override
     protected PathFinder createPathFinder(int maxVisitedNodes) {
         this.allowBreaching = this.mob.getType() == EntityType.DOLPHIN;
         this.nodeEvaluator = new SwimNodeEvaluator(this.allowBreaching);
         this.nodeEvaluator.setCanPassDoors(false);
+        // Canvas start - async path processing
+        if (io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding) {
+            return new PathFinder(this.nodeEvaluator, maxVisitedNodes, nodeEvaluatorGenerator);
+        }
+        // Canvas end - async path processing
         return new PathFinder(this.nodeEvaluator, maxVisitedNodes);
     }
 
diff --git a/net/minecraft/world/entity/ai/sensing/NearestBedSensor.java b/net/minecraft/world/entity/ai/sensing/NearestBedSensor.java
index 1f96fd5085bacb4c584576c7cb9f51e7898e9b03..8795d8f3b924bcae50867a9dbc8df87510965819 100644
--- a/net/minecraft/world/entity/ai/sensing/NearestBedSensor.java
+++ b/net/minecraft/world/entity/ai/sensing/NearestBedSensor.java
@@ -57,17 +57,37 @@ public class NearestBedSensor extends Sensor<Mob> {
             java.util.List<Pair<Holder<PoiType>, BlockPos>> poiposes = new java.util.ArrayList<>();
             // don't ask me why it's unbounded. ask mojang.
             io.papermc.paper.util.PoiAccess.findAnyPoiPositions(poiManager, type -> type.is(PoiTypes.HOME), predicate, entity.blockPosition(), level.purpurConfig.villagerNearestBedSensorSearchRadius, PoiManager.Occupancy.ANY, false, Integer.MAX_VALUE, poiposes); // Purpur - Configurable villager search radius
-            Path path = AcquirePoi.findPathToPois(entity, new java.util.HashSet<>(poiposes));
             // Paper end - optimise POI access
-            if (path != null && path.canReach()) {
-                BlockPos target = path.getTarget();
-                Optional<Holder<PoiType>> type = poiManager.getType(target);
-                if (type.isPresent()) {
-                    entity.getBrain().setMemory(MemoryModuleType.NEAREST_BED, target);
+            // Canvas start - async pathfinding
+            if (io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding) {
+                Path possiblePath = AcquirePoi.findPathToPois(entity, new java.util.HashSet<>(poiposes));
+                io.canvasmc.canvas.entity.pathfinding.AsyncPathProcessor.awaitProcessing(possiblePath, level, path -> {
+                    // read canReach check
+                    if ((path == null || !path.canReach()) && this.triedCount < 5) {
+                        this.batchCache.long2LongEntrySet().removeIf(entry -> entry.getLongValue() < this.lastUpdate);
+                        return;
+                    }
+                    if (path == null) return;
+
+                    BlockPos blockPos = path.getTarget();
+                    Optional<Holder<PoiType>> optional = poiManager.getType(blockPos);
+                    if (optional.isPresent()) {
+                        entity.getBrain().setMemory(MemoryModuleType.NEAREST_BED, blockPos);
+                    }
+                });
+            } else {
+                Path path = AcquirePoi.findPathToPois(entity, new java.util.HashSet<>(poiposes));
+                if (path != null && path.canReach()) {
+                    BlockPos target = path.getTarget();
+                    Optional<Holder<PoiType>> type = poiManager.getType(target);
+                    if (type.isPresent()) {
+                        entity.getBrain().setMemory(MemoryModuleType.NEAREST_BED, target);
+                    }
+                } else if (this.triedCount < 5) {
+                    this.batchCache.long2LongEntrySet().removeIf(entry -> entry.getLongValue() < this.lastUpdate);
                 }
-            } else if (this.triedCount < 5) {
-                this.batchCache.long2LongEntrySet().removeIf(entry -> entry.getLongValue() < this.lastUpdate);
             }
+            // Canvas end - async pathfinding
         }
     }
 }
diff --git a/net/minecraft/world/entity/animal/Bee.java b/net/minecraft/world/entity/animal/Bee.java
index 57c50ce5724b073b1aedf4df3129285143097303..2e5aba50c2089a78110fd464d3cf02591a04eced 100644
--- a/net/minecraft/world/entity/animal/Bee.java
+++ b/net/minecraft/world/entity/animal/Bee.java
@@ -934,7 +934,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
                         } else {
                             Bee.this.pathfindRandomlyTowards(Bee.this.hivePos);
                         }
-                    } else {
+                    } else if (navigation.getPath() != null && navigation.getPath().isProcessed()) { // Canvas - check processing
                         boolean flag = this.pathfindDirectlyTowards(Bee.this.hivePos);
                         if (!flag) {
                             this.dropAndBlacklistHive();
@@ -988,7 +988,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
                 return true;
             } else {
                 Path path = Bee.this.navigation.getPath();
-                return path != null && path.getTarget().equals(pos) && path.canReach() && path.isDone();
+                return path != null && path.isProcessed() && path.getTarget().equals(pos) && path.canReach() && path.isDone(); // Canvas - ensure path is processed
             }
         }
     }
diff --git a/net/minecraft/world/entity/animal/frog/Frog.java b/net/minecraft/world/entity/animal/frog/Frog.java
index c4ea9485294b7dec2582c638802f003ad70659b6..354de19a6cc86a5996e0d266fed4dca390d0a330 100644
--- a/net/minecraft/world/entity/animal/frog/Frog.java
+++ b/net/minecraft/world/entity/animal/frog/Frog.java
@@ -475,6 +475,16 @@ public class Frog extends Animal implements VariantHolder<Holder<FrogVariant>> {
     }
 
     static class FrogPathNavigation extends AmphibiousPathNavigation {
+        // Canvas start - async path processing
+        private static final io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorGenerator nodeEvaluatorGenerator = (io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorFeatures nodeEvaluatorFeatures) -> {
+            Frog.FrogNodeEvaluator nodeEvaluator = new Frog.FrogNodeEvaluator(true);
+            nodeEvaluator.setCanPassDoors(nodeEvaluatorFeatures.canPassDoors());
+            nodeEvaluator.setCanFloat(nodeEvaluatorFeatures.canFloat());
+            nodeEvaluator.setCanWalkOverFences(nodeEvaluatorFeatures.canWalkOverFences());
+            nodeEvaluator.setCanOpenDoors(nodeEvaluatorFeatures.canOpenDoors());
+            return nodeEvaluator;
+        };
+        // Canvas end - async path processing
         FrogPathNavigation(Frog mob, Level level) {
             super(mob, level);
         }
@@ -487,6 +497,11 @@ public class Frog extends Animal implements VariantHolder<Holder<FrogVariant>> {
         @Override
         protected PathFinder createPathFinder(int maxVisitedNodes) {
             this.nodeEvaluator = new Frog.FrogNodeEvaluator(true);
+            // Canvas start - async path processing
+            if (io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding) {
+                return new PathFinder(this.nodeEvaluator, maxVisitedNodes, nodeEvaluatorGenerator);
+            }
+            // Canvas end - async path processing
             return new PathFinder(this.nodeEvaluator, maxVisitedNodes);
         }
     }
diff --git a/net/minecraft/world/entity/monster/Drowned.java b/net/minecraft/world/entity/monster/Drowned.java
index 6c73245b8d04f194e72165aa0000ca79a95db59d..0b1b05a9be7acdafbdb944a1142d4160c2d49d19 100644
--- a/net/minecraft/world/entity/monster/Drowned.java
+++ b/net/minecraft/world/entity/monster/Drowned.java
@@ -313,7 +313,7 @@ public class Drowned extends Zombie implements RangedAttackMob {
 
     protected boolean closeToNextPos() {
         Path path = this.getNavigation().getPath();
-        if (path != null) {
+        if (path != null && path.isProcessed()) { // Canvas - ensure path is processed
             BlockPos target = path.getTarget();
             if (target != null) {
                 double d = this.distanceToSqr(target.getX(), target.getY(), target.getZ());
diff --git a/net/minecraft/world/entity/monster/Strider.java b/net/minecraft/world/entity/monster/Strider.java
index 241526239bdbd5d9276f85e7fca46a7051f46a25..1a64b6df1867239e1b432a498544c79d97907535 100644
--- a/net/minecraft/world/entity/monster/Strider.java
+++ b/net/minecraft/world/entity/monster/Strider.java
@@ -579,9 +579,25 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
             super(strider, level);
         }
 
+        // Canvas start - async path processing
+        private static final io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorGenerator nodeEvaluatorGenerator = (io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorFeatures nodeEvaluatorFeatures) -> {
+            WalkNodeEvaluator nodeEvaluator = new WalkNodeEvaluator();
+            nodeEvaluator.setCanPassDoors(nodeEvaluatorFeatures.canPassDoors());
+            nodeEvaluator.setCanFloat(nodeEvaluatorFeatures.canFloat());
+            nodeEvaluator.setCanWalkOverFences(nodeEvaluatorFeatures.canWalkOverFences());
+            nodeEvaluator.setCanOpenDoors(nodeEvaluatorFeatures.canOpenDoors());
+            return nodeEvaluator;
+        };
+        // Canvas end - async path processing
+
         @Override
         protected PathFinder createPathFinder(int maxVisitedNodes) {
             this.nodeEvaluator = new WalkNodeEvaluator();
+            // Canvas start - async path processing
+            if (io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding) {
+                return new PathFinder(this.nodeEvaluator, maxVisitedNodes, nodeEvaluatorGenerator);
+            }
+            // Canvas end
             return new PathFinder(this.nodeEvaluator, maxVisitedNodes);
         }
 
diff --git a/net/minecraft/world/entity/monster/warden/Warden.java b/net/minecraft/world/entity/monster/warden/Warden.java
index f968e5c99bdb23b268bc34ea1ba5d54ae9ad0ff9..2bd74dd3a923b87c3cad58e65ba109768e16c693 100644
--- a/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/net/minecraft/world/entity/monster/warden/Warden.java
@@ -602,6 +602,16 @@ public class Warden extends Monster implements VibrationSystem {
             @Override
             protected PathFinder createPathFinder(int maxVisitedNodes) {
                 this.nodeEvaluator = new WalkNodeEvaluator();
+                // Canvas start - async path processing
+                if (io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding) {
+                    return new PathFinder(this.nodeEvaluator, maxVisitedNodes, GroundPathNavigation.nodeEvaluatorGenerator) {
+                        @Override
+                        protected float distance(Node first, Node second) {
+                            return first.distanceToXZ(second);
+                        }
+                    };
+                }
+                // Canvas end - async path processing
                 return new PathFinder(this.nodeEvaluator, maxVisitedNodes) {
                     @Override
                     protected float distance(Node first, Node second) {
diff --git a/net/minecraft/world/level/pathfinder/Path.java b/net/minecraft/world/level/pathfinder/Path.java
index d6d3c8f5e5dd4a8cab0d3fcc131c3a59f06130c6..09cbf13666c84d91189cdf3e9e84427bd988a170 100644
--- a/net/minecraft/world/level/pathfinder/Path.java
+++ b/net/minecraft/world/level/pathfinder/Path.java
@@ -26,6 +26,17 @@ public class Path {
         this.reached = reached;
     }
 
+    // Canvas start - async path processing
+    /**
+     * checks if the path is completely processed in the case of it being computed async
+     *
+     * @return true if the path is processed
+     */
+    public boolean isProcessed() {
+        return true;
+    }
+    // Canvas end - async path processing
+
     public void advance() {
         this.nextNodeIndex++;
     }
@@ -99,6 +110,7 @@ public class Path {
     }
 
     public boolean sameAs(@Nullable Path pathentity) {
+        if (pathentity == this) return true; // Canvas - async path processing
         if (pathentity == null) {
             return false;
         } else if (pathentity.nodes.size() != this.nodes.size()) {
diff --git a/net/minecraft/world/level/pathfinder/PathFinder.java b/net/minecraft/world/level/pathfinder/PathFinder.java
index 81de6c1bbef1cafd3036e736dd305fbedc8368c6..f456f85978e0177e94335999b2380c284fe82cd9 100644
--- a/net/minecraft/world/level/pathfinder/PathFinder.java
+++ b/net/minecraft/world/level/pathfinder/PathFinder.java
@@ -25,11 +25,19 @@ public class PathFinder {
     public final NodeEvaluator nodeEvaluator;
     private static final boolean DEBUG = false;
     private final BinaryHeap openSet = new BinaryHeap();
+    private final @Nullable io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorGenerator nodeEvaluatorGenerator; // Canvas - we use this later to generate an evaluator
 
-    public PathFinder(NodeEvaluator nodeEvaluator, int maxVisitedNodes) {
+    // Canvas start - support nodeEvaluatorgenerators
+    public PathFinder(NodeEvaluator nodeEvaluator, int maxVisitedNodes, @Nullable io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorGenerator nodeEvaluatorGenerator) { // Canvas - add nodeEvaluatorGenerator
         this.nodeEvaluator = nodeEvaluator;
         this.maxVisitedNodes = maxVisitedNodes;
+        this.nodeEvaluatorGenerator = nodeEvaluatorGenerator;
+    }
+
+    public PathFinder(NodeEvaluator nodeEvaluator, int maxVisitedNodes) {
+        this(nodeEvaluator, maxVisitedNodes, null);
     }
+    // Canvas end - support nodeEvaluatorgenerators
 
     public void setMaxVisitedNodes(int maxVisitedNodes) {
         this.maxVisitedNodes = maxVisitedNodes;
@@ -37,26 +45,63 @@ public class PathFinder {
 
     @Nullable
     public Path findPath(PathNavigationRegion region, Mob mob, Set<BlockPos> targetPositions, float maxRange, int accuracy, float searchDepthMultiplier) {
-        this.openSet.clear();
-        this.nodeEvaluator.prepare(region, mob);
-        Node start = this.nodeEvaluator.getStart();
+        // Canvas start - use a generated evaluator if we have one otherwise run sync
+        if (!io.canvasmc.canvas.Config.INSTANCE.pathfinding.enableThreadedPathfinding)
+            this.openSet.clear(); // it's always cleared in processPath
+        NodeEvaluator nodeEvaluator = this.nodeEvaluatorGenerator == null
+                ? this.nodeEvaluator
+                : io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorCache.takeNodeEvaluator(this.nodeEvaluatorGenerator, this.nodeEvaluator);
+        nodeEvaluator.prepare(region, mob);
+        Node start = nodeEvaluator.getStart();
+        // Canvas end - use a generated evaluator if we have one otherwise run sync
         if (start == null) {
+            io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorCache.removeNodeEvaluator(nodeEvaluator); // Canvas - handle nodeEvaluatorGenerator
             return null;
         } else {
             // Paper start - Perf: remove streams and optimize collection
             List<Map.Entry<Target, BlockPos>> map = Lists.newArrayList();
             for (BlockPos pos : targetPositions) {
-                map.add(new java.util.AbstractMap.SimpleEntry<>(this.nodeEvaluator.getTarget(pos.getX(), pos.getY(), pos.getZ()), pos));
+                map.add(new java.util.AbstractMap.SimpleEntry<>(nodeEvaluator.getTarget(pos.getX(), pos.getY(), pos.getZ()), pos)); // Canvas - handle nodeEvaluatorGenerator
             }
             // Paper end - Perf: remove streams and optimize collection
-            Path path = this.findPath(start, map, maxRange, accuracy, searchDepthMultiplier);
-            this.nodeEvaluator.done();
-            return path;
+            // Canvas start - async path processing
+            if (this.nodeEvaluatorGenerator == null) {
+                // run sync :(
+                io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorCache.removeNodeEvaluator(nodeEvaluator);
+                return this.findPath(start, map, maxRange, accuracy, searchDepthMultiplier);
+            }
+
+            return new io.canvasmc.canvas.entity.pathfinding.AsyncPath(Lists.newArrayList(), targetPositions, () -> {
+                try {
+                    return this.processPath(nodeEvaluator, start, map, maxRange, accuracy, searchDepthMultiplier);
+                } catch (Exception e) {
+                    e.printStackTrace();
+                    return null;
+                } finally {
+                    nodeEvaluator.done();
+                    io.canvasmc.canvas.entity.pathfinding.NodeEvaluatorCache.returnNodeEvaluator(nodeEvaluator);
+                }
+            });
+            // Canvas end - async path processing
         }
     }
 
     @Nullable
     private Path findPath(Node node, List<Map.Entry<Target, BlockPos>> positions, float maxRange, int accuracy, float searchDepthMultiplier) { // Paper - optimize collection
+        // Canvas start - split pathfinding into the original sync method for compat and processing for delaying
+        try {
+            return this.processPath(this.nodeEvaluator, node, positions, maxRange, accuracy, searchDepthMultiplier);
+        } catch (Exception e) {
+            e.printStackTrace();
+            return null;
+        } finally {
+            this.nodeEvaluator.done();
+        }
+    }
+
+    private synchronized @org.jetbrains.annotations.NotNull Path processPath(NodeEvaluator nodeEvaluator, Node node, List<Map.Entry<Target, BlockPos>> positions, float maxRange, int accuracy, float searchDepthMultiplier) { // sync to only use the caching functions in this class on a single thread
+        org.apache.commons.lang3.Validate.isTrue(!positions.isEmpty()); // ensure that we have at least one position, which means we'll always return a path
+        // Canvas end - split pathfinding into the original sync method for compat and processing for delaying
         ProfilerFiller profilerFiller = Profiler.get();
         profilerFiller.push("find_path");
         profilerFiller.markForCharting(MetricCategory.PATH_FINDING);
@@ -95,7 +140,7 @@ public class PathFinder {
             }
 
             if (!(node1.distanceTo(node) >= maxRange)) {
-                int neighbors = this.nodeEvaluator.getNeighbors(this.neighbors, node1);
+                int neighbors = nodeEvaluator.getNeighbors(this.neighbors, node1); // Canvas - use provided nodeEvaluator
 
                 for (int i2 = 0; i2 < neighbors; i2++) {
                     Node node2 = this.neighbors[i2];
diff --git a/net/minecraft/world/level/pathfinder/SwimNodeEvaluator.java b/net/minecraft/world/level/pathfinder/SwimNodeEvaluator.java
index f18aa938692a1c29228ff5e98ab9d58c4bfff094..c213cbb5a720aa4f831c9eb8296f37b5c92f1f16 100644
--- a/net/minecraft/world/level/pathfinder/SwimNodeEvaluator.java
+++ b/net/minecraft/world/level/pathfinder/SwimNodeEvaluator.java
@@ -15,7 +15,7 @@ import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.FluidState;
 
 public class SwimNodeEvaluator extends NodeEvaluator {
-    private final boolean allowBreaching;
+    public final boolean allowBreaching; // Canvas - private -> public
     private final Long2ObjectMap<PathType> pathTypesByPosCache = new Long2ObjectOpenHashMap<>();
 
     public SwimNodeEvaluator(boolean allowBreaching) {
