From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Wed, 22 Jan 2025 03:16:12 -0800
Subject: [PATCH] Entity Masks


diff --git a/net/minecraft/server/level/ServerLevel.java b/net/minecraft/server/level/ServerLevel.java
index fd2726d89b72a50cfe51e1a9346ec2a8710fc1a0..64d4b89ee529ec52c57d76394c2c0ed091709ede 100644
--- a/net/minecraft/server/level/ServerLevel.java
+++ b/net/minecraft/server/level/ServerLevel.java
@@ -985,9 +985,15 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             }
 
             io.papermc.paper.entity.activation.ActivationRange.activateEntities(this); // Paper - EAR
-            this.entityTickList
-                .forEach(
-                    entity -> {
+            // Canvas start
+            for (final Entity entity : this.entityTickList.entities) {
+                if (Config.shouldCheckMasks && Config.COMPILED_LOCATIONS.contains(entity.getTypeLocation())) {
+                    int lived = entity.tickCount;
+                    if (!entity.getMask().shouldTick || lived % entity.getMask().tickRate != 0) {
+                        continue;
+                    }
+                }
+            // Canvas end
                         if (!entity.isRemoved()) {
                             if (!tickRateManager.isEntityFrozen(entity)) {
                                 profilerFiller.push("checkDespawn");
@@ -1010,7 +1016,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
                             }
                         }
                     }
-                );
+            // Canvas
             profilerFiller.pop();
             this.tickBlockEntities();
         }
diff --git a/net/minecraft/world/entity/Entity.java b/net/minecraft/world/entity/Entity.java
index 9456280afe3f49c3264557f15c80e40c2cf5da1f..cf4654d7a06eb398e46cdcf6a4f23f378bf5310a 100644
--- a/net/minecraft/world/entity/Entity.java
+++ b/net/minecraft/world/entity/Entity.java
@@ -6,6 +6,7 @@ import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.google.common.collect.ImmutableList.Builder;
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.Config;
 import io.netty.util.internal.ConcurrentSet;
 import it.unimi.dsi.fastutil.floats.FloatArraySet;
 import it.unimi.dsi.fastutil.floats.FloatArrays;
@@ -46,6 +47,7 @@ import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.SectionPos;
 import net.minecraft.core.particles.BlockParticleOption;
 import net.minecraft.core.particles.ParticleTypes;
+import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.DoubleTag;
 import net.minecraft.nbt.FloatTag;
@@ -349,6 +351,31 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     public boolean isTemporarilyActive;
     public long activatedImmunityTick = Integer.MIN_VALUE;
     public @Nullable Boolean immuneToFire = null; // Purpur - Fire immune API
+    // Canvas start
+
+    public ResourceLocation getTypeLocation() {
+        EntityType<?> entityType = this.getType();
+        if (entityType.isCachedResource()) {
+            return entityType.cachedLocation();
+        }
+        entityType.cacheResource(BuiltInRegistries.ENTITY_TYPE.getKey(entityType));
+        return entityType.cachedLocation();
+    }
+
+    public Config.EntityMask getMask() {
+        EntityType<?> entityType = this.getType();
+        if (entityType.isCachedMask()) {
+            return entityType.getMask();
+        }
+        for (final Config.EntityMask entityMask : Config.INSTANCE.entityMasks) {
+            if (entityMask.type.equals(getTypeLocation())) {
+                entityType.cacheMask(entityMask);
+                break;
+            }
+        }
+        return entityType.getMask();
+    }
+    // Canvas end
 
     public void inactiveTick() {
     }
diff --git a/net/minecraft/world/entity/EntityType.java b/net/minecraft/world/entity/EntityType.java
index 4186db5cb8d2cd29ebc230d704dd125ae0dfa358..e732e7eb00545128dbfebd3ebe594511c7dea42f 100644
--- a/net/minecraft/world/entity/EntityType.java
+++ b/net/minecraft/world/entity/EntityType.java
@@ -6,12 +6,14 @@ import java.util.List;
 import java.util.Optional;
 import java.util.Set;
 import java.util.Spliterator;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Consumer;
 import java.util.function.Function;
 import java.util.function.Supplier;
 import java.util.stream.Stream;
 import java.util.stream.StreamSupport;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.Config;
 import net.minecraft.Util;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -1365,6 +1367,34 @@ public class EntityType<T extends Entity> implements FeatureElement, EntityTypeT
     public float getHeight() {
         return this.dimensions.height();
     }
+    // Canvas start
+    private final AtomicReference<ResourceLocation> cached = new AtomicReference<>();
+    private final AtomicReference<Config.EntityMask> cachedMask = new AtomicReference<>();
+
+    public boolean isCachedResource() {
+        return cached.get() == null;
+    }
+
+    public void cacheResource(ResourceLocation location) {
+        cached.set(location);
+    }
+
+    public ResourceLocation cachedLocation() {
+        return cached.get();
+    }
+
+    public boolean isCachedMask() {
+        return cachedMask.get() == null;
+    }
+
+    public void cacheMask(Config.EntityMask mask) {
+        cachedMask.set(mask);
+    }
+
+    public Config.EntityMask getMask() {
+        return cachedMask.get();
+    }
+    // Canvas end
 
     @Override
     public FeatureFlagSet requiredFeatures() {
