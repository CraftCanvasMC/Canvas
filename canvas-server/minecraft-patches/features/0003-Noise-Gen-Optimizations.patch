From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Thu, 16 Jan 2025 19:08:50 -0800
Subject: [PATCH] Noise Gen Optimizations

Micro Optimizations ATM - plan on improving.

diff --git a/net/minecraft/world/level/chunk/LevelChunkSection.java b/net/minecraft/world/level/chunk/LevelChunkSection.java
index 412e7b1cf8c24f0ddf6d174967bedad576f10aba..1dcfd6939931720eb6ed80ecc20ca645a79a585a 100644
--- a/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -18,11 +18,12 @@ public class LevelChunkSection implements ca.spottedleaf.moonrise.patches.block_
     public static final int SECTION_HEIGHT = 16;
     public static final int SECTION_SIZE = 4096;
     public static final int BIOME_CONTAINER_BITS = 2;
-    short nonEmptyBlockCount; // Paper - package private
-    private short tickingBlockCount;
-    private short tickingFluidCount;
+    public short nonEmptyBlockCount; // Paper - package private // Canvas - package-private -> public
+    public short tickingBlockCount; // Canvas - private -> public
+    public short tickingFluidCount; // Canvas - private -> public
     public final PalettedContainer<BlockState> states;
     private PalettedContainer<Holder<Biome>> biomes; // CraftBukkit - read/write
+    private static final int sliceSize = 4; // Canvas
 
     // Paper start - block counting
     private static final it.unimi.dsi.fastutil.shorts.ShortArrayList FULL_LIST = new it.unimi.dsi.fastutil.shorts.ShortArrayList(16*16*16);
@@ -312,13 +313,15 @@ public class LevelChunkSection implements ca.spottedleaf.moonrise.patches.block_
         PalettedContainer<Holder<Biome>> palettedContainer = this.biomes.recreate();
         int i = 4;
 
-        for (int i1 = 0; i1 < 4; i1++) {
-            for (int i2 = 0; i2 < 4; i2++) {
-                for (int i3 = 0; i3 < 4; i3++) {
-                    palettedContainer.getAndSetUnchecked(i1, i2, i3, biomeResolver.getNoiseBiome(x + i1, y + i2, z + i3, climateSampler));
+        // Canvas start - noise gen optimizations
+        for (int posY = 0; posY < sliceSize; ++posY) {
+            for (int posZ = 0; posZ < sliceSize; ++posZ) {
+                for (int posX = 0; posX < sliceSize; ++posX) {
+                    palettedContainer.getAndSetUnchecked(posX, posY, posZ, biomeResolver.getNoiseBiome(x + posX, y + posY, z + posZ, climateSampler));
                 }
             }
         }
+        // Canvas end
 
         this.biomes = palettedContainer;
     }
diff --git a/net/minecraft/world/level/chunk/PalettedContainer.java b/net/minecraft/world/level/chunk/PalettedContainer.java
index f5da433050fd3060e0335d4002d520ebe8cd691f..f63d8d08a4b01d5df561ee96d961ddeb3d6e377e 100644
--- a/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -30,7 +30,7 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
     public final IdMap<T> registry;
     private final T @org.jetbrains.annotations.Nullable [] presetValues; // Paper - Anti-Xray - Add preset values
     public volatile PalettedContainer.Data<T> data; // Paper - optimise collisions - public
-    private final PalettedContainer.Strategy strategy;
+    public final PalettedContainer.Strategy strategy; // Canvas - private -> public
     //private final ThreadingDetector threadingDetector = new ThreadingDetector("PalettedContainer"); // Paper - unused
 
     public void acquire() {
@@ -432,7 +432,7 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
 
         private final PalettedContainer.Configuration<T> configuration;
         private final BitStorage storage;
-        private final Palette<T> palette;
+        public final Palette<T> palette; // Canvas - private -> public
 
         private T[] moonrise$palette;
 
diff --git a/net/minecraft/world/level/levelgen/NoiseSettings.java b/net/minecraft/world/level/levelgen/NoiseSettings.java
index 4cf3a364595ba5f81f741295695cb9a449bdf672..ad6b96dd82c88aace7b15ca1b52c61008de92d25 100644
--- a/net/minecraft/world/level/levelgen/NoiseSettings.java
+++ b/net/minecraft/world/level/levelgen/NoiseSettings.java
@@ -8,7 +8,7 @@ import net.minecraft.core.QuartPos;
 import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.dimension.DimensionType;
 
-public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int noiseSizeVertical) {
+public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int noiseSizeVertical, int horizontalCellBlockCount, int verticalCellBlockCount) { // Canvas
     public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.<NoiseSettings>create(
             instance -> instance.group(
                     Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY),
@@ -16,7 +16,10 @@ public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int n
                     Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter(NoiseSettings::noiseSizeHorizontal),
                     Codec.intRange(1, 4).fieldOf("size_vertical").forGetter(NoiseSettings::noiseSizeVertical)
                 )
-                .apply(instance, NoiseSettings::new)
+                // Canvas start - noise gen optimizations
+                .apply(instance, (Integer minY1, Integer height1, Integer noiseSizeHorizontal1, Integer noiseSizeVertical1) -> new NoiseSettings(minY1, height1, noiseSizeHorizontal1, noiseSizeVertical1,
+                    QuartPos.toBlock(noiseSizeHorizontal1), QuartPos.toBlock(noiseSizeVertical1)))
+                // Canvas end
         )
         .comapFlatMap(NoiseSettings::guardY, Function.identity());
     protected static final NoiseSettings OVERWORLD_NOISE_SETTINGS = create(-64, 384, 1, 2);
@@ -36,7 +39,7 @@ public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int n
     }
 
     public static NoiseSettings create(int minY, int height, int noiseSizeHorizontal, int noiseSizeVertical) {
-        NoiseSettings noiseSettings = new NoiseSettings(minY, height, noiseSizeHorizontal, noiseSizeVertical);
+        NoiseSettings noiseSettings = new NoiseSettings(minY, height, noiseSizeHorizontal, noiseSizeVertical, QuartPos.toBlock(noiseSizeHorizontal), QuartPos.toBlock(noiseSizeVertical)); // Canvas - noise gen optimizations
         guardY(noiseSettings).error().ifPresent(error -> {
             throw new IllegalStateException(error.message());
         });
@@ -44,16 +47,16 @@ public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int n
     }
 
     public int getCellHeight() {
-        return QuartPos.toBlock(this.noiseSizeVertical());
+        return verticalCellBlockCount(); // Canvas - noise gen optimizations
     }
 
     public int getCellWidth() {
-        return QuartPos.toBlock(this.noiseSizeHorizontal());
+        return horizontalCellBlockCount(); // Canvas - noise gen optimizations
     }
 
     public NoiseSettings clampToHeightAccessor(LevelHeightAccessor heightAccessor) {
         int max = Math.max(this.minY, heightAccessor.getMinY());
         int i = Math.min(this.minY + this.height, heightAccessor.getMaxY() + 1) - max;
-        return new NoiseSettings(max, i, this.noiseSizeHorizontal, this.noiseSizeVertical);
+        return new NoiseSettings(max, i, this.noiseSizeHorizontal, this.noiseSizeVertical, QuartPos.toBlock(this.noiseSizeHorizontal), QuartPos.toBlock(this.noiseSizeVertical)); // Canvas - noise gen optimizations
     }
 }
