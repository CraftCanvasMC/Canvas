From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Thu, 16 Jan 2025 21:23:16 -0800
Subject: [PATCH] Native Math Optimizations


diff --git a/net/minecraft/world/level/biome/BiomeManager.java b/net/minecraft/world/level/biome/BiomeManager.java
index 65f3725272a066f4312f8de75c444434eaa6c375..3f3fe60262fe1c1b00415cf70c115cb6e03beea5 100644
--- a/net/minecraft/world/level/biome/BiomeManager.java
+++ b/net/minecraft/world/level/biome/BiomeManager.java
@@ -1,6 +1,8 @@
 package net.minecraft.world.level.biome;
 
 import com.google.common.hash.Hashing;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.util.Bindings;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.QuartPos;
@@ -30,54 +32,61 @@ public class BiomeManager {
 
     public Holder<Biome> getBiome(BlockPos pos) {
         // Canvas start - optimize
-        final int var0 = pos.getX() - 2;
-        final int var1 = pos.getY() - 2;
-        final int var2 = pos.getZ() - 2;
-        final int var3 = var0 >> 2;
-        final int var4 = var1 >> 2;
-        final int var5 = var2 >> 2;
-        final double var6 = (double) (var0 & 3) / 4.0;
-        final double var7 = (double) (var1 & 3) / 4.0;
-        final double var8 = (double) (var2 & 3) / 4.0;
-        int var9 = 0;
-        double var10 = Double.POSITIVE_INFINITY;
+        if (Config.INSTANCE.chunkGeneration.nativeAccelerationEnabled) {
+            int mask = Bindings.c2me_natives_biome_access_sample(this.biomeZoomSeed, pos.getX(), pos.getY(), pos.getZ());
 
-        for (int var11 = 0; var11 < 8; ++var11) {
-            boolean var12 = (var11 & 4) == 0;
-            boolean var13 = (var11 & 2) == 0;
-            boolean var14 = (var11 & 1) == 0;
-            long var15 = var12 ? var3 : var3 + 1;
-            long var16 = var13 ? var4 : var4 + 1;
-            long var17 = var14 ? var5 : var5 + 1;
-            double var18 = var12 ? var6 : var6 - 1.0;
-            double var19 = var13 ? var7 : var7 - 1.0;
-            double var20 = var14 ? var8 : var8 - 1.0;
-            long var21 = this.biomeZoomSeed * (this.biomeZoomSeed * 6364136223846793005L + 1442695040888963407L) + var15;
-            var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + var16;
-            var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + var17;
-            var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + var15;
-            var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + var16;
-            var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + var17;
-            double var22 = (double)((var21 >> 24) & 1023) / 1024.0;
-            double var23 = (var22 - 0.5) * 0.9;
-            var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + this.biomeZoomSeed;
-            double var24 = (double)((var21 >> 24) & 1023) / 1024.0;
-            double var25 = (var24 - 0.5) * 0.9;
-            var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + this.biomeZoomSeed;
-            double var26 = (double)((var21 >> 24) & 1023) / 1024.0;
-            double var27 = (var26 - 0.5) * 0.9;
-            double var28 = Mth.square(var20 + var27) + Mth.square(var19 + var25) + Mth.square(var18 + var23);
-            if (var10 > var28) {
-                var9 = var11;
-                var10 = var28;
+            return this.noiseBiomeSource.getNoiseBiome(
+                ((pos.getX() - 2) >> 2) + ((mask & 4) != 0 ? 1 : 0),
+                ((pos.getY() - 2) >> 2) + ((mask & 2) != 0 ? 1 : 0),
+                ((pos.getZ() - 2) >> 2) + ((mask & 1) != 0 ? 1 : 0)
+            );
+        } else {
+            final int var0 = pos.getX() - 2;
+            final int var1 = pos.getY() - 2;
+            final int var2 = pos.getZ() - 2;
+            final int var3 = var0 >> 2;
+            final int var4 = var1 >> 2;
+            final int var5 = var2 >> 2;
+            final double var6 = (double) (var0 & 3) / 4.0;
+            final double var7 = (double) (var1 & 3) / 4.0;
+            final double var8 = (double) (var2 & 3) / 4.0;
+            int var9 = 0;
+            double var10 = Double.POSITIVE_INFINITY;
+            for (int var11 = 0; var11 < 8; ++var11) {
+                boolean var12 = (var11 & 4) == 0;
+                boolean var13 = (var11 & 2) == 0;
+                boolean var14 = (var11 & 1) == 0;
+                long var15 = var12 ? var3 : var3 + 1;
+                long var16 = var13 ? var4 : var4 + 1;
+                long var17 = var14 ? var5 : var5 + 1;
+                double var18 = var12 ? var6 : var6 - 1.0;
+                double var19 = var13 ? var7 : var7 - 1.0;
+                double var20 = var14 ? var8 : var8 - 1.0;
+                long var21 = this.biomeZoomSeed * (this.biomeZoomSeed * 6364136223846793005L + 1442695040888963407L) + var15;
+                var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + var16;
+                var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + var17;
+                var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + var15;
+                var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + var16;
+                var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + var17;
+                double var22 = (double)((var21 >> 24) & 1023) / 1024.0;
+                double var23 = (var22 - 0.5) * 0.9;
+                var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + this.biomeZoomSeed;
+                double var24 = (double)((var21 >> 24) & 1023) / 1024.0;
+                double var25 = (var24 - 0.5) * 0.9;
+                var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + this.biomeZoomSeed;
+                double var26 = (double)((var21 >> 24) & 1023) / 1024.0;
+                double var27 = (var26 - 0.5) * 0.9;
+                double var28 = Mth.square(var20 + var27) + Mth.square(var19 + var25) + Mth.square(var18 + var23);
+                if (var10 > var28) {
+                    var9 = var11;
+                    var10 = var28;
+                }
             }
+            int resX = (var9 & 4) == 0 ? var3 : var3 + 1;
+            int resY = (var9 & 2) == 0 ? var4 : var4 + 1;
+            int resZ = (var9 & 1) == 0 ? var5 : var5 + 1;
+            return this.noiseBiomeSource.getNoiseBiome(resX, resY, resZ);
         }
-
-        int resX = (var9 & 4) == 0 ? var3 : var3 + 1;
-        int resY = (var9 & 2) == 0 ? var4 : var4 + 1;
-        int resZ = (var9 & 1) == 0 ? var5 : var5 + 1;
-
-        return this.noiseBiomeSource.getNoiseBiome(resX, resY, resZ);
         // Canvas end
     }
 
diff --git a/net/minecraft/world/level/levelgen/DensityFunctions.java b/net/minecraft/world/level/levelgen/DensityFunctions.java
index 04527a5c65ad630f794fed9071d485aedd02257a..6acecd46a2b93cacef8599409bd5ad27fa707d73 100644
--- a/net/minecraft/world/level/levelgen/DensityFunctions.java
+++ b/net/minecraft/world/level/levelgen/DensityFunctions.java
@@ -5,7 +5,12 @@ import com.mojang.logging.LogUtils;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.util.Bindings;
 import it.unimi.dsi.fastutil.doubles.Double2DoubleFunction;
+import java.lang.foreign.Arena;
+import java.lang.foreign.MemorySegment;
+import java.lang.invoke.VarHandle;
 import java.util.Arrays;
 import java.util.Optional;
 import java.util.function.BiFunction;
@@ -501,6 +506,11 @@ public final class DensityFunctions {
     }
 
     protected static final class EndIslandDensityFunction implements DensityFunction.SimpleFunction {
+        // Canvas start
+        private final Arena c2me$arena = Arena.ofAuto();
+        private MemorySegment c2me$samplerData = null;
+        private long c2me$samplerDataPtr;
+        // Canvas end
         public static final KeyDispatchDataCodec<DensityFunctions.EndIslandDensityFunction> CODEC = KeyDispatchDataCodec.of(
             MapCodec.unit(new DensityFunctions.EndIslandDensityFunction(0L))
         );
@@ -521,6 +531,16 @@ public final class DensityFunctions {
             RandomSource randomSource = new LegacyRandomSource(seed);
             randomSource.consumeCount(17292);
             this.islandNoise = new SimplexNoise(randomSource);
+            // Canvas start
+            if (Config.INSTANCE.chunkGeneration.nativeAccelerationEnabled) {
+                int[] permutation = (this.islandNoise).p;
+                MemorySegment segment = this.c2me$arena.allocate(permutation.length * 4L, 64);
+                MemorySegment.copy(MemorySegment.ofArray(permutation), 0L, segment, 0L, permutation.length * 4L);
+                VarHandle.fullFence();
+                this.c2me$samplerData = segment;
+                this.c2me$samplerDataPtr = segment.address();
+            }
+            // Canvas end
         }
 
         private static float getHeightValue(SimplexNoise noise, int x, int z) {
@@ -567,7 +587,13 @@ public final class DensityFunctions {
 
         @Override
         public double compute(DensityFunction.FunctionContext context) {
+            // Canvas start
+            if (Config.INSTANCE.chunkGeneration.nativeAccelerationEnabled && this.c2me$samplerDataPtr != 0L) {
+                return ((double) Bindings.c2me_natives_end_islands_sample(this.c2me$samplerDataPtr, context.blockX() / 8, context.blockZ() / 8) - 8.0) / 128.0;
+            } else {
             return (getHeightValue(this.islandNoise, context.blockX() / 8, context.blockZ() / 8) - 8.0) / 128.0;
+            }
+            // Canvas end
         }
 
         @Override
@@ -815,8 +841,40 @@ public final class DensityFunctions {
         }
 
         @Override
-        public void fillArray(double[] array, DensityFunction.ContextProvider contextProvider) {
-            contextProvider.fillAllDirectly(array, this);
+        // Canvas start
+        public void fillArray(double[] densities, DensityFunction.ContextProvider applier) {
+            if (!Config.INSTANCE.chunkGeneration.nativeAccelerationEnabled) {
+                applier.fillAllDirectly(densities, this);
+                return;
+            }
+            NormalNoise noise = this.noise.noise();
+            if (noise == null) {
+                Arrays.fill(densities, 0.0);
+                return;
+            }
+            long ptr = noise.c2me$getPointer();
+            if (ptr == 0L) {
+                applier.fillAllDirectly(densities, this);
+                return;
+            }
+            double[] x = new double[densities.length];
+            double[] y = new double[densities.length];
+            double[] z = new double[densities.length];
+            for (int i = 0; i < densities.length; i++) {
+                FunctionContext pos = applier.forIndex(i);
+                x[i] = pos.blockX() * this.xzScale();
+                y[i] = pos.blockY() * this.yScale();
+                z[i] = pos.blockZ() * this.xzScale();
+            }
+            Bindings.c2me_natives_noise_perlin_double_batch(
+                ptr,
+                MemorySegment.ofArray(densities),
+                MemorySegment.ofArray(x),
+                MemorySegment.ofArray(y),
+                MemorySegment.ofArray(z),
+                densities.length
+            );
+        // Canvas end
         }
 
         @Override
@@ -938,6 +996,46 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
+        // Canvas start
+
+        @Override
+        public void fillArray(final double[] densities, final ContextProvider applier) {
+            if (!Config.INSTANCE.chunkGeneration.nativeAccelerationEnabled) {
+                applier.fillAllDirectly(densities, this);
+                return;
+            }
+            NormalNoise noise = this.offsetNoise.noise();
+            if (noise == null) {
+                Arrays.fill(densities, 0.0);
+                return;
+            }
+            long ptr = noise.c2me$getPointer();
+            if (ptr == 0L) {
+                applier.fillAllDirectly(densities, this);
+                return;
+            }
+            double[] x = new double[densities.length];
+            double[] y = new double[densities.length];
+            double[] z = new double[densities.length];
+            for (int i = 0; i < densities.length; i++) {
+                FunctionContext pos = applier.forIndex(i);
+                x[i] = pos.blockX() * 0.25;
+                y[i] = pos.blockY() * 0.25;
+                z[i] = pos.blockZ() * 0.25;
+            }
+            Bindings.c2me_natives_noise_perlin_double_batch(
+                ptr,
+                MemorySegment.ofArray(densities),
+                MemorySegment.ofArray(x),
+                MemorySegment.ofArray(y),
+                MemorySegment.ofArray(z),
+                densities.length
+            );
+            for (int i = 0; i < densities.length; i++) {
+                densities[i] *= 4.0;
+            }
+        }
+        // Canvas end
     }
 
     protected record ShiftA(@Override DensityFunction.NoiseHolder offsetNoise) implements DensityFunctions.ShiftNoise {
@@ -959,6 +1057,46 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
+        // Canvas start
+
+        @Override
+        public void fillArray(final double[] densities, final ContextProvider applier) {
+            if (!Config.INSTANCE.chunkGeneration.nativeAccelerationEnabled) {
+                applier.fillAllDirectly(densities, this);
+                return;
+            }
+            NormalNoise noise = this.offsetNoise.noise();
+            if (noise == null) {
+                Arrays.fill(densities, 0.0);
+                return;
+            }
+            long ptr = noise.c2me$getPointer();
+            if (ptr == 0L) {
+                applier.fillAllDirectly(densities, this);
+                return;
+            }
+            double[] x = new double[densities.length];
+            double[] y = new double[densities.length];
+            double[] z = new double[densities.length];
+            for (int i = 0; i < densities.length; i++) {
+                FunctionContext pos = applier.forIndex(i);
+                x[i] = pos.blockX() * 0.25;
+                y[i] = 0;
+                z[i] = pos.blockZ() * 0.25;
+            }
+            Bindings.c2me_natives_noise_perlin_double_batch(
+                ptr,
+                MemorySegment.ofArray(densities),
+                MemorySegment.ofArray(x),
+                MemorySegment.ofArray(y),
+                MemorySegment.ofArray(z),
+                densities.length
+            );
+            for (int i = 0; i < densities.length; i++) {
+                densities[i] *= 4.0;
+            }
+        }
+        // Canvas end
     }
 
     protected record ShiftB(@Override DensityFunction.NoiseHolder offsetNoise) implements DensityFunctions.ShiftNoise {
@@ -980,6 +1118,46 @@ public final class DensityFunctions {
         public KeyDispatchDataCodec<? extends DensityFunction> codec() {
             return CODEC;
         }
+        // Canvas start
+
+        @Override
+        public void fillArray(final double[] densities, final ContextProvider applier) {
+            if (!Config.INSTANCE.chunkGeneration.nativeAccelerationEnabled) {
+                applier.fillAllDirectly(densities, this);
+                return;
+            }
+            NormalNoise noise = this.offsetNoise.noise();
+            if (noise == null) {
+                Arrays.fill(densities, 0.0);
+                return;
+            }
+            long ptr = noise.c2me$getPointer();
+            if (ptr == 0L) {
+                applier.fillAllDirectly(densities, this);
+                return;
+            }
+            double[] x = new double[densities.length];
+            double[] y = new double[densities.length];
+            double[] z = new double[densities.length];
+            for (int i = 0; i < densities.length; i++) {
+                FunctionContext pos = applier.forIndex(i);
+                x[i] = pos.blockZ() * 0.25;
+                y[i] = pos.blockX() * 0.25;
+                z[i] = 0.0;
+            }
+            Bindings.c2me_natives_noise_perlin_double_batch(
+                ptr,
+                MemorySegment.ofArray(densities),
+                MemorySegment.ofArray(x),
+                MemorySegment.ofArray(y),
+                MemorySegment.ofArray(z),
+                densities.length
+            );
+            for (int i = 0; i < densities.length; i++) {
+                densities[i] *= 4.0;
+            }
+        }
+        // Canvas end
     }
 
     interface ShiftNoise extends DensityFunction {
diff --git a/net/minecraft/world/level/levelgen/synth/BlendedNoise.java b/net/minecraft/world/level/levelgen/synth/BlendedNoise.java
index 4d6e672fade3746af90d8318b03809c43704bbb3..e2cbfd1f7ce16542a9132120b4fc70e238d5706c 100644
--- a/net/minecraft/world/level/levelgen/synth/BlendedNoise.java
+++ b/net/minecraft/world/level/levelgen/synth/BlendedNoise.java
@@ -4,8 +4,13 @@ import com.google.common.annotations.VisibleForTesting;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
+import java.lang.foreign.Arena;
+import java.lang.foreign.MemorySegment;
 import java.util.Locale;
 import java.util.stream.IntStream;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.util.Bindings;
+import io.canvasmc.canvas.util.BindingsTemplate;
 import net.minecraft.util.KeyDispatchDataCodec;
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
@@ -25,17 +30,24 @@ public class BlendedNoise implements DensityFunction.SimpleFunction {
             .apply(instance, BlendedNoise::createUnseeded)
     );
     public static final KeyDispatchDataCodec<BlendedNoise> CODEC = KeyDispatchDataCodec.of(DATA_CODEC);
-    private final PerlinNoise minLimitNoise;
-    private final PerlinNoise maxLimitNoise;
-    private final PerlinNoise mainNoise;
-    private final double xzMultiplier;
-    private final double yMultiplier;
-    private final double xzFactor;
-    private final double yFactor;
-    private final double smearScaleMultiplier;
-    private final double maxValue;
-    private final double xzScale;
-    private final double yScale;
+    // Canvas start - AT
+    public final PerlinNoise minLimitNoise;
+    public final PerlinNoise maxLimitNoise;
+    public final PerlinNoise mainNoise;
+    public final double xzMultiplier;
+    public final double yMultiplier;
+    public final double xzFactor;
+    public final double yFactor;
+    public final double smearScaleMultiplier;
+    public final double maxValue;
+    public final double xzScale;
+    public final double yScale;
+    // Canvas end
+    // Canvas start
+    private final Arena c2me$arena = Arena.ofAuto();
+    private MemorySegment c2me$samplerData = null;
+    private long c2me$samplerDataPtr;
+    // Canvas end
 
     public static BlendedNoise createUnseeded(double xzScale, double yScale, double xzFactor, double yFactor, double smearScaleMultiplier) {
         return new BlendedNoise(new XoroshiroRandomSource(0L), xzScale, yScale, xzFactor, yFactor, smearScaleMultiplier);
@@ -62,6 +74,12 @@ public class BlendedNoise implements DensityFunction.SimpleFunction {
         this.xzMultiplier = 684.412 * this.xzScale;
         this.yMultiplier = 684.412 * this.yScale;
         this.maxValue = minLimitNoise.maxBrokenValue(this.yMultiplier);
+        // Canvas start
+        if (Config.INSTANCE.chunkGeneration.nativeAccelerationEnabled) {
+            this.c2me$samplerData = BindingsTemplate.interpolated_noise_sampler$create(this.c2me$arena, this);
+            this.c2me$samplerDataPtr = this.c2me$samplerData.address();
+        }
+        // Canvas end
     }
 
     @VisibleForTesting
diff --git a/net/minecraft/world/level/levelgen/synth/ImprovedNoise.java b/net/minecraft/world/level/levelgen/synth/ImprovedNoise.java
index fb11a2eea540d55e50eab59f9857ca5d99f556f8..51ba38c4280cbd98bb43d6e5a9010153dc144814 100644
--- a/net/minecraft/world/level/levelgen/synth/ImprovedNoise.java
+++ b/net/minecraft/world/level/levelgen/synth/ImprovedNoise.java
@@ -6,7 +6,7 @@ import net.minecraft.util.RandomSource;
 
 public final class ImprovedNoise {
     private static final float SHIFT_UP_EPSILON = 1.0E-7F;
-    private final byte[] p;
+    public final byte[] p; // Canvas start - private -> public
     public final double xo;
     public final double yo;
     public final double zo;
diff --git a/net/minecraft/world/level/levelgen/synth/NormalNoise.java b/net/minecraft/world/level/levelgen/synth/NormalNoise.java
index 45060882654217eeb9a07357c5149b12fbff02c1..05383b96350aa1ee11e3f23b6a520c7a823f8c92 100644
--- a/net/minecraft/world/level/levelgen/synth/NormalNoise.java
+++ b/net/minecraft/world/level/levelgen/synth/NormalNoise.java
@@ -3,9 +3,14 @@ package net.minecraft.world.level.levelgen.synth;
 import com.google.common.annotations.VisibleForTesting;
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.util.Bindings;
+import io.canvasmc.canvas.util.BindingsTemplate;
 import it.unimi.dsi.fastutil.doubles.DoubleArrayList;
 import it.unimi.dsi.fastutil.doubles.DoubleList;
 import it.unimi.dsi.fastutil.doubles.DoubleListIterator;
+import java.lang.foreign.Arena;
+import java.lang.foreign.MemorySegment;
 import java.util.List;
 import net.minecraft.Util;
 import net.minecraft.core.Holder;
@@ -21,6 +26,15 @@ public class NormalNoise {
     private final PerlinNoise second;
     private final double maxValue;
     private final NormalNoise.NoiseParameters parameters;
+    // Canvas start
+    private final Arena c2me$arena = Arena.ofAuto();
+    private MemorySegment c2me$samplerData = null;
+    private long c2me$samplerDataPtr;
+
+    public long c2me$getPointer() {
+        return this.c2me$samplerDataPtr;
+    }
+    // Canvas end
 
     @Deprecated
     public static NormalNoise createLegacyNetherBiome(RandomSource random, NormalNoise.NoiseParameters parameters) {
@@ -62,6 +76,12 @@ public class NormalNoise {
 
         this.valueFactor = 0.16666666666666666 / expectedDeviation(i2 - i1);
         this.maxValue = (this.first.maxValue() + this.second.maxValue()) * this.valueFactor;
+        // Canvas start
+        if (Config.INSTANCE.chunkGeneration.nativeAccelerationEnabled) {
+            this.c2me$samplerData = BindingsTemplate.double_octave_sampler_data$create(this.c2me$arena, this.first, this.second, this.valueFactor);
+            this.c2me$samplerDataPtr = this.c2me$samplerData.address();
+        }
+        // Canvas end
     }
 
     public double maxValue() {
diff --git a/net/minecraft/world/level/levelgen/synth/PerlinNoise.java b/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
index da3c26fbad32d75d71f7e59c8c3341316a754756..1dfeb461df9814ce0ad17e44fd359226472c12ad 100644
--- a/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
+++ b/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
@@ -20,12 +20,14 @@ import net.minecraft.world.level.levelgen.PositionalRandomFactory;
 
 public class PerlinNoise {
     private static final int ROUND_OFF = 33554432;
-    private final ImprovedNoise[] noiseLevels;
-    private final int firstOctave;
-    private final DoubleList amplitudes;
-    private final double lowestFreqValueFactor;
-    private final double lowestFreqInputFactor;
-    private final double maxValue;
+    // Canvas start - AT
+    public final ImprovedNoise[] noiseLevels;
+    public final int firstOctave;
+    public final DoubleList amplitudes;
+    public final double lowestFreqValueFactor;
+    public final double lowestFreqInputFactor;
+    public final double maxValue;
+    // Canvas end
 
     @Deprecated
     public static PerlinNoise createLegacyForBlendedNoise(RandomSource random, IntStream octaves) {
diff --git a/net/minecraft/world/level/levelgen/synth/SimplexNoise.java b/net/minecraft/world/level/levelgen/synth/SimplexNoise.java
index c9d152382672c3ff8a847ca6f74bfaf4588e9c31..367145df325629ebe8d6fc642d66b311834bf8a9 100644
--- a/net/minecraft/world/level/levelgen/synth/SimplexNoise.java
+++ b/net/minecraft/world/level/levelgen/synth/SimplexNoise.java
@@ -25,7 +25,7 @@ public class SimplexNoise {
     private static final double SQRT_3 = Math.sqrt(3.0);
     private static final double F2 = 0.5 * (SQRT_3 - 1.0);
     private static final double G2 = (3.0 - SQRT_3) / 6.0;
-    private final int[] p = new int[512];
+    public final int[] p = new int[512]; // Canvas - private -> public
     public final double xo;
     public final double yo;
     public final double zo;
