From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Thu, 16 Jan 2025 20:47:49 -0800
Subject: [PATCH] Chunk Access Optimizations


diff --git a/net/minecraft/world/level/LevelReader.java b/net/minecraft/world/level/LevelReader.java
index 26c8c1e5598daf3550aef05b12218c47bda6618b..84b0ee7f82b473e4995265244e2846fa568a2192 100644
--- a/net/minecraft/world/level/LevelReader.java
+++ b/net/minecraft/world/level/LevelReader.java
@@ -1,5 +1,6 @@
 package net.minecraft.world.level;
 
+import java.util.concurrent.CompletableFuture;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
@@ -10,6 +11,9 @@ import net.minecraft.core.Registry;
 import net.minecraft.core.RegistryAccess;
 import net.minecraft.core.SectionPos;
 import net.minecraft.resources.ResourceKey;
+import net.minecraft.server.level.ChunkHolder;
+import net.minecraft.server.level.ChunkResult;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.FluidTags;
 import net.minecraft.util.Mth;
 import net.minecraft.world.flag.FeatureFlagSet;
@@ -17,6 +21,7 @@ import net.minecraft.world.level.biome.Biome;
 import net.minecraft.world.level.biome.BiomeManager;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkAccess;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.status.ChunkStatus;
 import net.minecraft.world.level.dimension.DimensionType;
 import net.minecraft.world.level.levelgen.Heightmap;
@@ -70,10 +75,26 @@ public interface LevelReader extends ca.spottedleaf.moonrise.patches.chunk_syste
 
     @Override
     default Holder<Biome> getNoiseBiome(int x, int y, int z) {
-        ChunkAccess chunk = this.getChunk(QuartPos.toSection(x), QuartPos.toSection(z), ChunkStatus.BIOMES, false);
+        ChunkAccess chunk = this.canvas$fasterChunkAccess(this, QuartPos.toSection(x), QuartPos.toSection(z), ChunkStatus.BIOMES, false); // Canvas
         return chunk != null ? chunk.getNoiseBiome(x, y, z) : this.getUncachedNoiseBiome(x, y, z);
     }
-
+    // Canvas start
+
+    private @Nullable ChunkAccess canvas$fasterChunkAccess(LevelReader instance, int x, int z, ChunkStatus chunkStatus, boolean create) {
+        if (!create && instance instanceof ServerLevel world) {
+            final ChunkHolder holder = (world.getChunkSource().chunkMap).getVisibleChunkIfPresent(ChunkPos.asLong(x, z));
+            if (holder != null) {
+                final CompletableFuture<ChunkResult<LevelChunk>> future = holder.getFullChunkFuture();
+                final ChunkResult<LevelChunk> either = future.getNow(null);
+                if (either != null) {
+                    final LevelChunk chunk = either.orElse(null);
+                    if (chunk != null) return chunk;
+                }
+            }
+        }
+        return instance.getChunk(x, z, chunkStatus, create);
+    }
+    // Canvas end
     Holder<Biome> getUncachedNoiseBiome(int x, int y, int z);
 
     boolean isClientSide();
diff --git a/net/minecraft/world/level/biome/BiomeManager.java b/net/minecraft/world/level/biome/BiomeManager.java
index 73962e79a0f3d892e3155443a1b84508b0f4042e..65f3725272a066f4312f8de75c444434eaa6c375 100644
--- a/net/minecraft/world/level/biome/BiomeManager.java
+++ b/net/minecraft/world/level/biome/BiomeManager.java
@@ -29,39 +29,56 @@ public class BiomeManager {
     }
 
     public Holder<Biome> getBiome(BlockPos pos) {
-        int i = pos.getX() - 2;
-        int i1 = pos.getY() - 2;
-        int i2 = pos.getZ() - 2;
-        int i3 = i >> 2;
-        int i4 = i1 >> 2;
-        int i5 = i2 >> 2;
-        double d = (i & 3) / 4.0;
-        double d1 = (i1 & 3) / 4.0;
-        double d2 = (i2 & 3) / 4.0;
-        int i6 = 0;
-        double d3 = Double.POSITIVE_INFINITY;
+        // Canvas start - optimize
+        final int var0 = pos.getX() - 2;
+        final int var1 = pos.getY() - 2;
+        final int var2 = pos.getZ() - 2;
+        final int var3 = var0 >> 2;
+        final int var4 = var1 >> 2;
+        final int var5 = var2 >> 2;
+        final double var6 = (double) (var0 & 3) / 4.0;
+        final double var7 = (double) (var1 & 3) / 4.0;
+        final double var8 = (double) (var2 & 3) / 4.0;
+        int var9 = 0;
+        double var10 = Double.POSITIVE_INFINITY;
 
-        for (int i7 = 0; i7 < 8; i7++) {
-            boolean flag = (i7 & 4) == 0;
-            boolean flag1 = (i7 & 2) == 0;
-            boolean flag2 = (i7 & 1) == 0;
-            int i8 = flag ? i3 : i3 + 1;
-            int i9 = flag1 ? i4 : i4 + 1;
-            int i10 = flag2 ? i5 : i5 + 1;
-            double d4 = flag ? d : d - 1.0;
-            double d5 = flag1 ? d1 : d1 - 1.0;
-            double d6 = flag2 ? d2 : d2 - 1.0;
-            double fiddledDistance = getFiddledDistance(this.biomeZoomSeed, i8, i9, i10, d4, d5, d6);
-            if (d3 > fiddledDistance) {
-                i6 = i7;
-                d3 = fiddledDistance;
+        for (int var11 = 0; var11 < 8; ++var11) {
+            boolean var12 = (var11 & 4) == 0;
+            boolean var13 = (var11 & 2) == 0;
+            boolean var14 = (var11 & 1) == 0;
+            long var15 = var12 ? var3 : var3 + 1;
+            long var16 = var13 ? var4 : var4 + 1;
+            long var17 = var14 ? var5 : var5 + 1;
+            double var18 = var12 ? var6 : var6 - 1.0;
+            double var19 = var13 ? var7 : var7 - 1.0;
+            double var20 = var14 ? var8 : var8 - 1.0;
+            long var21 = this.biomeZoomSeed * (this.biomeZoomSeed * 6364136223846793005L + 1442695040888963407L) + var15;
+            var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + var16;
+            var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + var17;
+            var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + var15;
+            var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + var16;
+            var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + var17;
+            double var22 = (double)((var21 >> 24) & 1023) / 1024.0;
+            double var23 = (var22 - 0.5) * 0.9;
+            var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + this.biomeZoomSeed;
+            double var24 = (double)((var21 >> 24) & 1023) / 1024.0;
+            double var25 = (var24 - 0.5) * 0.9;
+            var21 = var21 * (var21 * 6364136223846793005L + 1442695040888963407L) + this.biomeZoomSeed;
+            double var26 = (double)((var21 >> 24) & 1023) / 1024.0;
+            double var27 = (var26 - 0.5) * 0.9;
+            double var28 = Mth.square(var20 + var27) + Mth.square(var19 + var25) + Mth.square(var18 + var23);
+            if (var10 > var28) {
+                var9 = var11;
+                var10 = var28;
             }
         }
 
-        int i7x = (i6 & 4) == 0 ? i3 : i3 + 1;
-        int i11 = (i6 & 2) == 0 ? i4 : i4 + 1;
-        int i12 = (i6 & 1) == 0 ? i5 : i5 + 1;
-        return this.noiseBiomeSource.getNoiseBiome(i7x, i11, i12);
+        int resX = (var9 & 4) == 0 ? var3 : var3 + 1;
+        int resY = (var9 & 2) == 0 ? var4 : var4 + 1;
+        int resZ = (var9 & 1) == 0 ? var5 : var5 + 1;
+
+        return this.noiseBiomeSource.getNoiseBiome(resX, resY, resZ);
+        // Canvas end
     }
 
     public Holder<Biome> getNoiseBiomeAtPosition(double x, double y, double z) {
