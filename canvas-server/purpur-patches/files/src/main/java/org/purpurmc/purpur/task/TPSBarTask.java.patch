--- a/src/main/java/org/purpurmc/purpur/task/TPSBarTask.java
+++ b/src/main/java/org/purpurmc/purpur/task/TPSBarTask.java
@@ -4,14 +_,21 @@
 import net.kyori.adventure.text.Component;
 import net.kyori.adventure.text.minimessage.MiniMessage;
 import net.kyori.adventure.text.minimessage.tag.resolver.Placeholder;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
 import org.purpurmc.purpur.PurpurConfig;
 import org.bukkit.Bukkit;
 import org.bukkit.entity.Player;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
 
 public class TPSBarTask extends BossBarTask {
     private static TPSBarTask instance;
-    private double tps = 20.0D;
-    private double mspt = 0.0D;
+    // Canvas start - Replaced doubles (tps and mspt) with maps to get data of player current world
+    private final Map<UUID, Double> tps = new HashMap<>(0);
+    private final Map<UUID, Double> mspt = new HashMap<>(0);
+    // Canvas end
     private int tick = 0;
 
     public static TPSBarTask instance() {
@@ -23,60 +_,72 @@
 
     @Override
     BossBar createBossBar() {
-        return BossBar.bossBar(Component.text(""), 0.0F, instance().getBossBarColor(), PurpurConfig.commandTPSBarProgressOverlay);
+        return BossBar.bossBar(Component.text(""), 0.0F, instance().getBossBarColor(null), PurpurConfig.commandTPSBarProgressOverlay); // Canvas - Pass null because we need to know where's player right now to show proper data
     }
 
     @Override
     void updateBossBar(BossBar bossbar, Player player) {
-        bossbar.progress(getBossBarProgress());
-        bossbar.color(getBossBarColor());
+        // Canvas start - get player's current world UUID and pass it to some of the methods for showing TPS and MSPT of current world
+        UUID playerWorldUID = player.getWorld().getUID();
+
+        bossbar.progress(getBossBarProgress(playerWorldUID));
+        bossbar.color(getBossBarColor(playerWorldUID));
         bossbar.name(MiniMessage.miniMessage().deserialize(PurpurConfig.commandTPSBarTitle,
-                Placeholder.component("tps", getTPSColor()),
-                Placeholder.component("mspt", getMSPTColor()),
-                Placeholder.component("ping", getPingColor(player.getPing()))
+            Placeholder.component("tps", getTPSColor(playerWorldUID)),
+            Placeholder.component("mspt", getMSPTColor(playerWorldUID)),
+            Placeholder.component("ping", getPingColor(player.getPing()))
         ));
+        // Canvas end
     }
 
     @Override
     public void run() {
-        if (++tick < PurpurConfig.commandTPSBarTickInterval) {
+        if (++tick < PurpurConfig.commandTPSBarTickInterval || tick < MinecraftServer.getServer().tickRateManager().tickrate()) { // Canvas - don't run task more often than once a second
             return;
         }
         tick = 0;
 
-        this.tps = Math.max(Math.min(Bukkit.getTPS()[0], 20.0D), 0.0D);
-        this.mspt = Bukkit.getAverageTickTime();
+        // Canvas start - Per level TPS and MSPT
+        for (ServerLevel level : MinecraftServer.getThreadedServer().getThreadedWorlds()) {
+            tps.put(level.uuid, Math.max(Math.min(level.tps5s.getAverage(), 20.0D), 0.0D));
+            mspt.put(level.uuid, level.getNanoSecondsFromLastTick() / 1_000_000);
+        }
+        // Canvas end
 
         super.run();
     }
 
-    private float getBossBarProgress() {
+    private float getBossBarProgress(UUID playerWorldUID) {  // Canvas - Add UUID as an argument
         if (PurpurConfig.commandTPSBarProgressFillMode == FillMode.MSPT) {
-            return Math.max(Math.min((float) mspt / 50.0F, 1.0F), 0.0F);
+            return Math.max(Math.min(mspt.get(playerWorldUID).floatValue() / 50.0F, 1.0F), 0.0F); // Canvas - get MSPT from map
         } else {
-            return Math.max(Math.min((float) tps / 20.0F, 1.0F), 0.0F);
+            return Math.max(Math.min(tps.get(playerWorldUID).floatValue() / 20.0F, 1.0F), 0.0F); // Canvas - get TPS from map
         }
     }
 
-    private BossBar.Color getBossBarColor() {
-        if (isGood(PurpurConfig.commandTPSBarProgressFillMode)) {
+    private BossBar.Color getBossBarColor(UUID playerWorldUID) {  // Canvas - Add UUID as an argument
+        if(playerWorldUID == null) return PurpurConfig.commandTPSBarProgressColorGood; // Canvas - It's required to not get NPE on bossbar creation
+
+        // Canvas start - Pass world UUID to isGood() and isMedium() as we need it to get proper bossbar color
+        if (isGood(PurpurConfig.commandTPSBarProgressFillMode, playerWorldUID)) {
             return PurpurConfig.commandTPSBarProgressColorGood;
-        } else if (isMedium(PurpurConfig.commandTPSBarProgressFillMode)) {
+        } else if (isMedium(PurpurConfig.commandTPSBarProgressFillMode, playerWorldUID)) {
+            // Canvas end
             return PurpurConfig.commandTPSBarProgressColorMedium;
         } else {
             return PurpurConfig.commandTPSBarProgressColorLow;
         }
     }
 
-    private boolean isGood(FillMode mode) {
-        return isGood(mode, 0);
+    private boolean isGood(FillMode mode, UUID playerWorldUID) {  // Canvas - Add UUID as an argument
+        return isGood(mode, 0, playerWorldUID); // Canvas - Pass UUID
     }
 
-    private boolean isGood(FillMode mode, int ping) {
+    private boolean isGood(FillMode mode, int ping, UUID playerWorldUID) {  // Canvas - Add UUID as an argument
         if (mode == FillMode.MSPT) {
-            return mspt < 40;
+            return mspt.get(playerWorldUID) < 40; // Canvas - get MSPT from map
         } else if (mode == FillMode.TPS) {
-            return tps >= 19;
+            return tps.get(playerWorldUID) >= 19; // Canvas - get TPS from map
         } else if (mode == FillMode.PING) {
             return ping < 100;
         } else {
@@ -84,15 +_,15 @@
         }
     }
 
-    private boolean isMedium(FillMode mode) {
-        return isMedium(mode, 0);
+    private boolean isMedium(FillMode mode, UUID playerWorldUID) {  // Canvas - Add UUID as an argument
+        return isMedium(mode, 0, playerWorldUID); // Canvas - Pass UUID
     }
 
-    private boolean isMedium(FillMode mode, int ping) {
+    private boolean isMedium(FillMode mode, int ping, UUID playerWorldUID) {  // Canvas - Add UUID as an argument
         if (mode == FillMode.MSPT) {
-            return mspt < 50;
+            return mspt.get(playerWorldUID) < 50; // Canvas - get MSPT from map
         } else if (mode == FillMode.TPS) {
-            return tps >= 15;
+            return tps.get(playerWorldUID) >= 15; // Canvas - get TPS from map
         } else if (mode == FillMode.PING) {
             return ping < 200;
         } else {
@@ -100,35 +_,41 @@
         }
     }
 
-    private Component getTPSColor() {
+    private Component getTPSColor(UUID playerWorldUID) {  // Canvas - Add UUID as an argument
         String color;
-        if (isGood(FillMode.TPS)) {
+        // Canvas start - Pass world UUID to isGood() and isMedium() as we need it to get TPS
+        if (isGood(FillMode.TPS, playerWorldUID)) {
             color = PurpurConfig.commandTPSBarTextColorGood;
-        } else if (isMedium(FillMode.TPS)) {
+        } else if (isMedium(FillMode.TPS, playerWorldUID)) {
+            // Canvas end
             color = PurpurConfig.commandTPSBarTextColorMedium;
         } else {
             color = PurpurConfig.commandTPSBarTextColorLow;
         }
-        return MiniMessage.miniMessage().deserialize(color, Placeholder.parsed("text", String.format("%.2f", tps)));
+        return MiniMessage.miniMessage().deserialize(color, Placeholder.parsed("text", String.format("%.2f", tps.get(playerWorldUID)))); // Canvas - get TPS from map
     }
 
-    private Component getMSPTColor() {
+    private Component getMSPTColor(UUID playerWorldUID) {  // Canvas - Add UUID as an argument
         String color;
-        if (isGood(FillMode.MSPT)) {
+        // Canvas start - Pass world UUID to isGood() and isMedium() as we need it to get MSPT
+        if (isGood(FillMode.MSPT, playerWorldUID)) {
             color = PurpurConfig.commandTPSBarTextColorGood;
-        } else if (isMedium(FillMode.MSPT)) {
+        } else if (isMedium(FillMode.MSPT, playerWorldUID)) {
+            // Canvas end
             color = PurpurConfig.commandTPSBarTextColorMedium;
         } else {
             color = PurpurConfig.commandTPSBarTextColorLow;
         }
-        return MiniMessage.miniMessage().deserialize(color, Placeholder.parsed("text", String.format("%.2f", mspt)));
+        return MiniMessage.miniMessage().deserialize(color, Placeholder.parsed("text", String.format("%.2f", mspt.get(playerWorldUID)))); // Canvas - get MSPT from map
     }
 
     private Component getPingColor(int ping) {
         String color;
-        if (isGood(FillMode.PING, ping)) {
+        // Canvas start - Pass null to isGood() and isMedium() as we don't need world UUID for ping
+        if (isGood(FillMode.PING, ping, null)) {
             color = PurpurConfig.commandTPSBarTextColorGood;
-        } else if (isMedium(FillMode.PING, ping)) {
+        } else if (isMedium(FillMode.PING, ping, null)) {
+            // Canvas end
             color = PurpurConfig.commandTPSBarTextColorMedium;
         } else {
             color = PurpurConfig.commandTPSBarTextColorLow;
