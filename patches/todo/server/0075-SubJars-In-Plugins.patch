From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <159172167+PurpleWolfMC@users.noreply.github.com>
Date: Wed, 7 Feb 2024 08:24:12 +0000
Subject: [PATCH] SubJars In Plugins


diff --git a/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java b/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
index 6141f716b15ad47ac2ac4c9ce92a3897b3ad8807..8b9a2cdc0679a0e007a751c9c439f8376a098b99 100644
--- a/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
+++ b/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
@@ -18,6 +18,8 @@ import java.io.File;
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.*;
 
 public class PluginInitializerManager {
 
@@ -31,11 +33,11 @@ public class PluginInitializerManager {
         this.updateDirectory = updateDirectory;
     }
 
-    private static PluginInitializerManager parse(@NotNull final OptionSet minecraftOptionSet) throws Exception {
+    private static PluginInitializerManager parse(@NotNull final OptionSet minecraftOptionSet, Path pluginDirectory) throws Exception { // Canvas
         // We have to load the bukkit configuration inorder to get the update folder location.
         final File configFileLocationBukkit = (File) minecraftOptionSet.valueOf("bukkit-settings");
 
-        final Path pluginDirectory = ((File) minecraftOptionSet.valueOf("plugins")).toPath();
+        // final Path pluginDirectory = ((File) minecraftOptionSet.valueOf("plugins")).toPath(); // Canvas
 
         final YamlConfiguration configuration = PaperConfigurations.loadLegacyConfigFile(configFileLocationBukkit);
 
@@ -74,8 +76,8 @@ public class PluginInitializerManager {
         return new PluginInitializerManager(pluginDirectory, resolvedUpdateDirectory);
     }
 
-    public static PluginInitializerManager init(final OptionSet optionSet) throws Exception {
-        impl = parse(optionSet);
+    public static PluginInitializerManager init(final OptionSet optionSet, Path pluginDirectory) throws Exception {
+        impl = parse(optionSet, pluginDirectory);
         return impl;
     }
 
@@ -94,12 +96,23 @@ public class PluginInitializerManager {
     }
 
     public static void load(OptionSet optionSet) throws Exception {
+        // Canvas start - lets try and load 2 dirs
         // We have to load the bukkit configuration inorder to get the update folder location.
-        io.papermc.paper.plugin.PluginInitializerManager pluginSystem = io.papermc.paper.plugin.PluginInitializerManager.init(optionSet);
+        // io.papermc.paper.plugin.PluginInitializerManager pluginSystem = io.papermc.paper.plugin.PluginInitializerManager.init(optionSet);
 
         // Register the default plugin directory
-        io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(io.papermc.paper.plugin.provider.source.DirectoryProviderSource.INSTANCE, pluginSystem.pluginDirectoryPath());
-
+        // io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(io.papermc.paper.plugin.provider.source.DirectoryProviderSource.INSTANCE, pluginSystem.pluginDirectoryPath());
+
+        Path mainPath = ((File) optionSet.valueOf("plugins")).toPath();
+        Path secondPath = Paths.get("cache" + File.separator + "plugins");
+        List<Path> paths = new ArrayList<>();
+        paths.add(mainPath);
+        paths.add(secondPath);
+        for(Path pluginDirectory : paths){
+            io.papermc.paper.plugin.PluginInitializerManager pluginSystem = io.papermc.paper.plugin.PluginInitializerManager.init(optionSet, pluginDirectory);
+            io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(io.papermc.paper.plugin.provider.source.DirectoryProviderSource.INSTANCE, pluginDirectory);
+        }
+        // Canvas end
         // Register plugins from the flag
         @SuppressWarnings("unchecked")
         java.util.List<Path> files = ((java.util.List<File>) optionSet.valuesOf("add-plugin")).stream().map(File::toPath).toList();
diff --git a/src/main/java/me/dueris/canvas/plugin/CanvasPluginLoader.java b/src/main/java/me/dueris/canvas/plugin/CanvasPluginLoader.java
new file mode 100644
index 0000000000000000000000000000000000000000..10b3c58682b549000576a8c1c0f60da330c71bac
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/plugin/CanvasPluginLoader.java
@@ -0,0 +1,106 @@
+package me.dueris.canvas.plugin;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.ArrayList;
+import java.util.Enumeration;
+import java.util.List;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
+import net.minecraft.server.Main;
+
+public class CanvasPluginLoader {
+
+    public List<JarFile> pluginList = new ArrayList<>();
+
+    /**
+     * Begins loading the jars
+     * 
+     * Enters the jarFile and adds the jarFiles
+     * to the cache to be loaded into the server
+     * 
+     * If the jarFile wasnt loaded correctly, it will throw a new
+     * IOException. If this occurs please run the loader() method
+     * correctly with your jarFile inside the correct dir
+     * 
+     */
+    public static void loader(){
+        CanvasPluginLoader pluginLoader = new CanvasPluginLoader();
+        pluginLoader.clearCache();
+        // System.out.println(Paths.get("plugins"));
+            File dir = Paths.get("plugins").toFile();
+            dir.mkdirs();
+
+            for(File file : dir.listFiles()){
+                if(file.getName().endsWith(".jar")){
+                    try {
+                        JarFile jarFile = new JarFile(file);
+                        Enumeration<JarEntry> entries = jarFile.entries();
+
+                        while (entries.hasMoreElements()) {
+                            JarEntry entry = entries.nextElement();
+
+                            if (entry.getName().contains("PLUGIN-INF/jars/")) {
+                                pluginLoader.extractJarEntry(jarFile, entry);
+                            } else if (entry.getName().contains("META-INF/jars/")) {
+                                pluginLoader.extractJarEntry(jarFile, entry);
+                            }
+                        }
+    
+                        jarFile.close();
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                    }
+                }
+            }
+    }
+
+    public void clearCache(){
+        Path cache = Paths.get("cache" + File.separator + "plugins");
+        cache.toFile().mkdirs();
+        if(cache != null){
+            for(File file : cache.toFile().listFiles()){
+                try {
+                    Files.delete(Path.of(file.getPath()));
+                } catch (IOException e) {
+                    // e.printStackTrace();
+                }
+            }
+        }
+    }
+
+    /**
+     * Extracts the jar entry to the "cache/plugins/" directory
+     */
+    public void extractJarEntry(JarFile jarFile, JarEntry entry){
+        Path jarPath = Paths.get("cache" + File.separator + "plugins");
+        jarPath.toFile().mkdirs();
+
+        if (entry.getName().endsWith(".jar")){
+            // gonna try and load it into the cache plugins with the source providers
+            Main.LOGGER.info("Loading built-in jarfile[%pl] to cache"
+                .replace("%pl", entry.getName())
+            );
+
+            try (InputStream inputStream = jarFile.getInputStream(entry)){
+                Path outputPath = jarPath.resolve(entry.getName().replace("PLUGIN-INF/jars/", "").replace("META-INF/jars/", ""));
+                FileOutputStream outputStream = new FileOutputStream(outputPath.toFile());
+
+                byte[] buffer = new byte[1024];
+                int bytesRead;
+
+                while ((bytesRead = inputStream.read(buffer)) != -1) {
+                    outputStream.write(buffer, 0, bytesRead);
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 5c64b467a37aeea9626f0e2e5aa31e281d7b1e63..5764e3b018afc5870e8dff00ac074c01544f31e5 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1391,6 +1391,7 @@ public final class CraftServer implements Server {
             if (console.isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread(worker.getThread(), "still running"); // Paper - Debugging
         }
         io.papermc.paper.plugin.PluginInitializerManager.reload(this.console); // Paper
+        me.dueris.canvas.plugin.CanvasPluginLoader.loader(); // Canvas - reload cache mappings
         this.loadPlugins();
         this.enablePlugins(PluginLoadOrder.STARTUP);
         this.enablePlugins(PluginLoadOrder.POSTWORLD);
