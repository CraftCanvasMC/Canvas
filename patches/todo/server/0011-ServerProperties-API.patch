From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolf1909 <160778222+PurpleWolf1909@users.noreply.github.com>
Date: Tue, 30 Apr 2024 18:19:11 +0000
Subject: [PATCH] ServerProperties API


diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
index 9ebe1f1797b5be562bc4f6d92b9a4d6022ca2151..20017514a19ef3c3df8d71da2c3123074db8301f 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServerProperties.java
@@ -42,12 +42,14 @@ import net.minecraft.world.level.levelgen.flat.FlatLevelGeneratorSettings;
 import net.minecraft.world.level.levelgen.presets.WorldPreset;
 import net.minecraft.world.level.levelgen.presets.WorldPresets;
 import org.slf4j.Logger;
+import java.util.*;
+import java.io.*;
 
 // CraftBukkit start
 import joptsimple.OptionSet;
 // CraftBukkit end
 
-public class DedicatedServerProperties extends Settings<DedicatedServerProperties> {
+public class DedicatedServerProperties extends Settings<DedicatedServerProperties> implements io.github.dueris.canvas.properties.ServerProperties { // Canvas
 
     static final Logger LOGGER = LogUtils.getLogger();
     private static final Pattern SHA1 = Pattern.compile("^[a-fA-F0-9]{40}$");
@@ -113,7 +115,31 @@ public class DedicatedServerProperties extends Settings<DedicatedServerPropertie
 
     public final String rconIp; // Paper - Configurable rcon ip
 
-    // CraftBukkit start
+    // Canvas start
+    public HashMap<String, Object> getPropertyMappings() {
+        HashMap<String, Object> map = new HashMap<>();
+
+        for (String key : this.retrieveRawProperties().stringPropertyNames()) {
+            String value = this.retrieveRawProperties().getProperty(key);
+            map.put(key, (Object) value);
+        }
+
+        return map;
+    }
+
+    public Properties getRawProperties(){
+        return this.retrieveRawProperties();
+    }
+
+    public ArrayList<String> getPropertyKeys(){
+        return new ArrayList<>(this.retrieveRawProperties().stringPropertyNames());
+    }
+
+    public File getFile(){
+        return java.nio.file.Paths.get("server.properties").toFile();
+    }
+
+    // Canvas end -/- CraftBukkit start
     public DedicatedServerProperties(Properties properties, OptionSet optionset) {
         super(properties, optionset);
         // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/dedicated/Settings.java b/src/main/java/net/minecraft/server/dedicated/Settings.java
index d7bd235ef2815890e038091dd625177049d253a5..4f172f1cd8e1a3789e2a999a4ef05d7e462ef8b6 100644
--- a/src/main/java/net/minecraft/server/dedicated/Settings.java
+++ b/src/main/java/net/minecraft/server/dedicated/Settings.java
@@ -21,6 +21,7 @@ import java.util.function.Supplier;
 import java.util.function.UnaryOperator;
 import javax.annotation.Nullable;
 import org.slf4j.Logger;
+import java.util.*;
 
 import joptsimple.OptionSet; // CraftBukkit
 import net.minecraft.core.RegistryAccess;
@@ -47,6 +48,12 @@ public abstract class Settings<T extends Settings<T>> {
         return value;
         // CraftBukkit end
     }
+    // Canvas start
+    private static Properties propertiesRaw;
+    public static Properties retrieveRawProperties(){
+        return propertiesRaw;
+    }
+    // Canvas end
 
     public static Properties loadFromFile(Path path) {
         try {
@@ -82,7 +89,8 @@ public abstract class Settings<T extends Settings<T>> {
                 if (inputstream != null) {
                     inputstream.close();
                 }
-
+                
+                propertiesRaw = properties1; // Canvas
                 return properties1;
             } catch (CharacterCodingException charactercodingexception) {
                 Settings.LOGGER.info("Failed to load properties as UTF-8 from file {}, trying ISO_8859_1", path);
@@ -108,10 +116,12 @@ public abstract class Settings<T extends Settings<T>> {
                     bufferedreader.close();
                 }
 
+                propertiesRaw = properties1; // Canvas
                 return properties1;
             }
         } catch (IOException ioexception) {
             Settings.LOGGER.error("Failed to load properties from file: {}", path, ioexception);
+            propertiesRaw = new Properties();
             return new Properties();
         }
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 65d9c01536a1ef3e58bbbd03e6be8722bb3bffe5..d253ad658de9a32dbfa63ac1e584c8a7905ac829 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -791,6 +791,11 @@ public final class CraftServer implements Server {
     public String[] getStartupArgs(){
         return CraftServer.startupArgs != null ? CraftServer.startupArgs : new String[0];
     }
+
+    @Override
+    public io.github.dueris.canvas.properties.ServerProperties getServerProperties(){
+        return getProperties();
+    }
     // Canvas end
 
     @Override
