From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Fri, 3 Jan 2025 10:39:56 -0800
Subject: [PATCH] Noise Optimizations


diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index e4ae25c83ab9dd1aaa530a5456275ef63cdb8511..e62634e4007090b67e13fb3578dba803161bfdf2 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -19,11 +19,12 @@ public class LevelChunkSection implements ca.spottedleaf.moonrise.patches.block_
     public static final int SECTION_HEIGHT = 16;
     public static final int SECTION_SIZE = 4096;
     public static final int BIOME_CONTAINER_BITS = 2;
-    short nonEmptyBlockCount; // Paper - package private
-    private short tickingBlockCount;
-    private short tickingFluidCount;
+    public short nonEmptyBlockCount; // Paper - package private // Canvas - package-private -> public
+    public short tickingBlockCount; // Canvas - private -> public
+    public short tickingFluidCount; // Canvas - private -> public
     public final PalettedContainer<BlockState> states;
     private PalettedContainer<Holder<Biome>> biomes; // CraftBukkit - read/write
+    private static final int sliceSize = 4; // Canvas
 
     // Paper start - block counting
     private static final it.unimi.dsi.fastutil.shorts.ShortArrayList FULL_LIST = new it.unimi.dsi.fastutil.shorts.ShortArrayList(16*16*16);
@@ -309,18 +310,19 @@ public class LevelChunkSection implements ca.spottedleaf.moonrise.patches.block_
     // CraftBukkit end
 
     public void fillBiomesFromNoise(BiomeResolver biomeSupplier, Climate.Sampler sampler, int x, int y, int z) {
-        PalettedContainer<Holder<Biome>> datapaletteblock = this.biomes.recreate();
-        boolean flag = true;
+        // Canvas start - noise gen optimizations
+        PalettedContainer<Holder<Biome>> palettedContainer = this.biomes.recreate();
 
-        for (int l = 0; l < 4; ++l) {
-            for (int i1 = 0; i1 < 4; ++i1) {
-                for (int j1 = 0; j1 < 4; ++j1) {
-                    datapaletteblock.getAndSetUnchecked(l, i1, j1, biomeSupplier.getNoiseBiome(x + l, y + i1, z + j1, sampler));
+        for (int posY = 0; posY < sliceSize; ++posY) {
+            for (int posZ = 0; posZ < sliceSize; ++posZ) {
+                for (int posX = 0; posX < sliceSize; ++posX) {
+                    palettedContainer.getAndSetUnchecked(posX, posY, posZ, biomeSupplier.getNoiseBiome(x + posX, y + posY, z + posZ, sampler));
                 }
             }
         }
 
-        this.biomes = datapaletteblock;
+        this.biomes = palettedContainer;
+        // Canvas end
     }
 
     public LevelChunkSection copy() {
diff --git a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
index 8b84bf2272556ac3321cbf16361d7f48a1cc6873..3384ea43c8257653ec539e8065f33a677d1af539 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -30,7 +30,7 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
     public final IdMap<T> registry;
     private final T @org.jetbrains.annotations.Nullable [] presetValues; // Paper - Anti-Xray - Add preset values
     public volatile PalettedContainer.Data<T> data; // Paper - optimise collisions - public
-    private final PalettedContainer.Strategy strategy;
+    public final PalettedContainer.Strategy strategy; // Canvas - private -> public
     // private final ThreadingDetector threadingDetector = new ThreadingDetector("PalettedContainer"); // Paper - unused
 
     public void acquire() {
@@ -436,7 +436,7 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
 
         private final PalettedContainer.Configuration<T> configuration;
         private final BitStorage storage;
-        private final Palette<T> palette;
+        public final Palette<T> palette; // Canvas - private -> public
 
         private T[] moonrise$palette;
 
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
index 3f39d6c786d9dfdd9ad591e08ff05fcbb41a1df6..6c19e8979e8cccbe7f1274661dc522371529967c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -13,6 +13,8 @@ import java.util.Objects;
 import java.util.OptionalInt;
 import java.util.Set;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
@@ -48,6 +50,7 @@ import net.minecraft.world.level.levelgen.blending.Blender;
 import net.minecraft.world.level.levelgen.carver.CarvingContext;
 import net.minecraft.world.level.levelgen.carver.ConfiguredWorldCarver;
 import org.apache.commons.lang3.mutable.MutableObject;
+import org.jetbrains.annotations.NotNull;
 
 public final class NoiseBasedChunkGenerator extends ChunkGenerator {
 
@@ -61,6 +64,7 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
     private static final BlockState AIR = Blocks.AIR.defaultBlockState();
     public final Holder<NoiseGeneratorSettings> settings;
     private final Supplier<Aquifer.FluidPicker> globalFluidPicker;
+    private static final ExecutorService NOISE_THREAD_POOL = Executors.newVirtualThreadPerTaskExecutor();
 
     public NoiseBasedChunkGenerator(BiomeSource biomeSource, Holder<NoiseGeneratorSettings> settings) {
         super(biomeSource);
@@ -270,48 +274,29 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
         int k = Mth.floorDiv(noisesettings.height(), noisesettings.getCellHeight());
 
         return k <= 0 ? CompletableFuture.completedFuture(chunk) : CompletableFuture.supplyAsync(() -> {
-            int l = chunk.getSectionIndex(k * noisesettings.getCellHeight() - 1 + i);
-            int i1 = chunk.getSectionIndex(i);
-            Set<LevelChunkSection> set = Sets.newHashSet();
-
-            for (int j1 = l; j1 >= i1; --j1) {
-                LevelChunkSection chunksection = chunk.getSection(j1);
-
-                chunksection.acquire();
-                set.add(chunksection);
+            // Canvas start - optimize noise gen
+            final int startingChunkSectionIndex = chunk.getSectionIndex(
+                k * noisesettings.verticalCellBlockCount() - 1 + i);
+            final int minimumYChunkSectionIndex = chunk.getSectionIndex(i);
+
+            @NotNull final var chunkSections = chunk.getSections();
+            for (int chunkSectionIndex = startingChunkSectionIndex; chunkSectionIndex >= minimumYChunkSectionIndex; --chunkSectionIndex) {
+                chunkSections[chunkSectionIndex].acquire();
             }
 
-            boolean flag = false;
-
-            ChunkAccess ichunkaccess1;
-
+            @org.jetbrains.annotations.Nullable ChunkAccess chunkWithNoise;
             try {
-                flag = true;
-                ichunkaccess1 = this.doFill(blender, structureAccessor, noiseConfig, chunk, j, k);
-                flag = false;
+                chunkWithNoise = this.doFill(
+                    blender, structureAccessor, noiseConfig, chunk, j, k);
             } finally {
-                if (flag) {
-                    Iterator iterator = set.iterator();
-
-                    while (iterator.hasNext()) {
-                        LevelChunkSection chunksection1 = (LevelChunkSection) iterator.next();
-
-                        chunksection1.release();
-                    }
-
+                for (int chunkSectionIndex = startingChunkSectionIndex; chunkSectionIndex >= minimumYChunkSectionIndex; --chunkSectionIndex) {
+                    chunkSections[chunkSectionIndex].release();
                 }
             }
 
-            Iterator iterator1 = set.iterator();
-
-            while (iterator1.hasNext()) {
-                LevelChunkSection chunksection2 = (LevelChunkSection) iterator1.next();
-
-                chunksection2.release();
-            }
-
-            return ichunkaccess1;
-        }, Runnable::run); // Paper - rewrite chunk system
+            return chunkWithNoise;
+        }, NOISE_THREAD_POOL); // Paper - rewrite chunk system
+            // Canvas end
     }
 
     private ChunkAccess doFill(Blender blender, StructureManager structureAccessor, RandomState noiseConfig, ChunkAccess chunk, int minimumCellY, int cellHeight) {
@@ -377,7 +362,7 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
 
                                 iblockdata = this.debugPreliminarySurfaceLevel(noisechunk, j4, j3, i5, iblockdata);
                                 if (iblockdata != NoiseBasedChunkGenerator.AIR && !SharedConstants.debugVoidTerrain(chunk.getPos())) {
-                                    chunksection.setBlockState(k4, k3, j5, iblockdata, false);
+                                    canvas$optimizeNoiseGen(chunksection, k4, k3, j5, iblockdata, false); // Canvas - optimize noise gen
                                     heightmap.update(k4, j3, j5, iblockdata);
                                     heightmap1.update(k4, j3, j5, iblockdata);
                                     if (aquifer.shouldScheduleFluidUpdate() && !iblockdata.getFluidState().isEmpty()) {
@@ -398,6 +383,28 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
         return chunk;
     }
 
+    // Canvas start
+    private BlockState canvas$optimizeNoiseGen(@NotNull LevelChunkSection chunkSection, int chunkSectionBlockPosX, int chunkSectionBlockPosY, int chunkSectionBlockPosZ, @NotNull BlockState blockState, boolean lock) {
+        chunkSection.nonEmptyBlockCount += 1;
+
+        if (!blockState.getFluidState().isEmpty()) {
+            chunkSection.tickingFluidCount += 1;
+        }
+
+        if (blockState.isRandomlyTicking()) {
+            chunkSection.tickingBlockCount += 1;
+        }
+
+        var blockStateId = chunkSection.states.data.palette.idFor(blockState);
+        chunkSection.states.data.storage().set(
+            chunkSection.states.strategy.getIndex(chunkSectionBlockPosX, chunkSectionBlockPosY,
+                chunkSectionBlockPosZ
+            ), blockStateId);
+
+        return blockState;
+    }
+
+    // Canvas end
     private BlockState debugPreliminarySurfaceLevel(NoiseChunk chunkNoiseSampler, int x, int y, int z, BlockState state) {
         return state;
     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
index 932d1d9bd717b1176f8c82b0cf65d2eb6403ad40..c9ccd3b4de8b7eb363e916a243a92f7505aa7c49 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
@@ -8,7 +8,7 @@ import net.minecraft.core.QuartPos;
 import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.dimension.DimensionType;
 
-public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int noiseSizeVertical) {
+public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int noiseSizeVertical, int horizontalCellBlockCount, int verticalCellBlockCount) { // Canvas
     public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.<NoiseSettings>create(
             instance -> instance.group(
                         Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY),
@@ -16,7 +16,10 @@ public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int n
                         Codec.intRange(1, 4).fieldOf("size_horizontal").forGetter(NoiseSettings::noiseSizeHorizontal),
                         Codec.intRange(1, 4).fieldOf("size_vertical").forGetter(NoiseSettings::noiseSizeVertical)
                     )
-                    .apply(instance, NoiseSettings::new)
+                // Canvas start - noise gen optimizations
+                    .apply(instance, (Integer minY1, Integer height1, Integer noiseSizeHorizontal1, Integer noiseSizeVertical1) -> new NoiseSettings(minY1, height1, noiseSizeHorizontal1, noiseSizeVertical1,
+                        QuartPos.toBlock(noiseSizeHorizontal1), QuartPos.toBlock(noiseSizeVertical1)))
+                // Canvas end
         )
         .comapFlatMap(NoiseSettings::guardY, Function.identity());
     protected static final NoiseSettings OVERWORLD_NOISE_SETTINGS = create(-64, 384, 1, 2);
@@ -36,7 +39,7 @@ public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int n
     }
 
     public static NoiseSettings create(int minimumY, int height, int horizontalSize, int verticalSize) {
-        NoiseSettings noiseSettings = new NoiseSettings(minimumY, height, horizontalSize, verticalSize);
+        NoiseSettings noiseSettings = new NoiseSettings(minimumY, height, horizontalSize, verticalSize, QuartPos.toBlock(horizontalSize), QuartPos.toBlock(verticalSize)); // Canvas - noise gen optimizations
         guardY(noiseSettings).error().ifPresent(error -> {
             throw new IllegalStateException(error.message());
         });
@@ -44,16 +47,16 @@ public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int n
     }
 
     public int getCellHeight() {
-        return QuartPos.toBlock(this.noiseSizeVertical());
+        return verticalCellBlockCount(); // Canvas - noise gen optimizations
     }
 
     public int getCellWidth() {
-        return QuartPos.toBlock(this.noiseSizeHorizontal());
+        return horizontalCellBlockCount(); // Canvas - noise gen optimizations
     }
 
     public NoiseSettings clampToHeightAccessor(LevelHeightAccessor world) {
         int i = Math.max(this.minY, world.getMinY());
         int j = Math.min(this.minY + this.height, world.getMaxY() + 1) - i;
-        return new NoiseSettings(i, j, this.noiseSizeHorizontal, this.noiseSizeVertical);
+        return new NoiseSettings(i, j, this.noiseSizeHorizontal, this.noiseSizeVertical, QuartPos.toBlock(this.noiseSizeHorizontal), QuartPos.toBlock(this.noiseSizeVertical)); // Canvas - noise gen optimizations
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java b/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
index 0e6dfe2635ea5f5e410049b05f94f5083b2f18a4..e85f83546ebade583d3c45116426b590141a5cac 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
@@ -9,12 +9,16 @@ public record MaterialRuleList(NoiseChunk.BlockStateFiller[] materialRuleList) i
     @Nullable
     @Override
     public BlockState calculate(DensityFunction.FunctionContext pos) {
-        for (NoiseChunk.BlockStateFiller blockStateFiller : this.materialRuleList) {
-            BlockState blockState = blockStateFiller.calculate(pos);
-            if (blockState != null) {
-                return blockState;
+        // Canvas start - noise gen optimizations
+        for (int i = 0; i < this.materialRuleList.length; i++) {
+            BlockState blockState = this.materialRuleList[i].calculate(pos);
+            if (blockState == null) {
+                continue;
             }
+
+            return blockState;
         }
+        // Canvas end
 
         return null;
     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/synth/ImprovedNoise.java b/src/main/java/net/minecraft/world/level/levelgen/synth/ImprovedNoise.java
index 9a97e5cd23d839183ac4d243d28df92af3119fe7..a02f6de4bc77f5f1618995268d9478e3ec5f464c 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/synth/ImprovedNoise.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/synth/ImprovedNoise.java
@@ -5,6 +5,26 @@ import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 
 public final class ImprovedNoise {
+    // Canvas start
+    private static final double[] FLAT_SIMPLEX_GRAD = new double[]{
+        1, 1, 0, 0,
+        -1, 1, 0, 0,
+        1, -1, 0, 0,
+        -1, -1, 0, 0,
+        1, 0, 1, 0,
+        -1, 0, 1, 0,
+        1, 0, -1, 0,
+        -1, 0, -1, 0,
+        0, 1, 1, 0,
+        0, -1, 1, 0,
+        0, 1, -1, 0,
+        0, -1, -1, 0,
+        1, 1, 0, 0,
+        0, -1, 1, 0,
+        -1, 1, 0, 0,
+        0, -1, -1, 0,
+    };
+    // Canvas end
     private static final float SHIFT_UP_EPSILON = 1.0E-7F;
     private final byte[] p;
     public final double xo;
@@ -38,13 +58,15 @@ public final class ImprovedNoise {
         double d = x + this.xo;
         double e = y + this.yo;
         double f = z + this.zo;
-        int i = Mth.floor(d);
-        int j = Mth.floor(e);
-        int k = Mth.floor(f);
-        double g = d - (double)i;
-        double h = e - (double)j;
-        double l = f - (double)k;
-        double o;
+        // Canvas start - remove frequent type conversions
+        double i = Math.floor(d);
+        double j = Math.floor(e);
+        double k = Math.floor(f);
+        double g = d - i;
+        double h = e - j;
+        double l = f - k;
+        double o = 0.0D;
+        // Canvas end
         if (yScale != 0.0) {
             double m;
             if (yMax >= 0.0 && yMax < h) {
@@ -53,12 +75,10 @@ public final class ImprovedNoise {
                 m = h;
             }
 
-            o = (double)Mth.floor(m / yScale + 1.0E-7F) * yScale;
-        } else {
-            o = 0.0;
+            o = Math.floor(m / yScale + 1.0E-7F) * yScale; // Canvas
         }
 
-        return this.sampleAndLerp(i, j, k, g, h - o, l, h);
+        return this.sampleAndLerp((int) i, (int) j, (int) k, g, h - o, l, h); // Canvas
     }
 
     public double noiseWithDerivative(double x, double y, double z, double[] ds) {
@@ -82,25 +102,70 @@ public final class ImprovedNoise {
         return this.p[input & 0xFF] & 0xFF;
     }
 
-    private double sampleAndLerp(int sectionX, int sectionY, int sectionZ, double localX, double localY, double localZ, double fadeLocalY) {
-        int i = this.p(sectionX);
-        int j = this.p(sectionX + 1);
-        int k = this.p(i + sectionY);
-        int l = this.p(i + sectionY + 1);
-        int m = this.p(j + sectionY);
-        int n = this.p(j + sectionY + 1);
-        double d = gradDot(this.p(k + sectionZ), localX, localY, localZ);
-        double e = gradDot(this.p(m + sectionZ), localX - 1.0, localY, localZ);
-        double f = gradDot(this.p(l + sectionZ), localX, localY - 1.0, localZ);
-        double g = gradDot(this.p(n + sectionZ), localX - 1.0, localY - 1.0, localZ);
-        double h = gradDot(this.p(k + sectionZ + 1), localX, localY, localZ - 1.0);
-        double o = gradDot(this.p(m + sectionZ + 1), localX - 1.0, localY, localZ - 1.0);
-        double p = gradDot(this.p(l + sectionZ + 1), localX, localY - 1.0, localZ - 1.0);
-        double q = gradDot(this.p(n + sectionZ + 1), localX - 1.0, localY - 1.0, localZ - 1.0);
-        double r = Mth.smoothstep(localX);
-        double s = Mth.smoothstep(fadeLocalY);
-        double t = Mth.smoothstep(localZ);
-        return Mth.lerp3(r, s, t, d, e, f, g, h, o, p, q);
+    private double sampleAndLerp(int sectionX, int sectionY, int sectionZ, double localX, double localY, double localZ, double fadeLocalX) {
+        // Canvas start - inline math & small optimization: remove frequent type conversions and redundant ops
+        final int var0 = sectionX & 0xFF;
+        final int var1 = (sectionX + 1) & 0xFF;
+        final int var2 = this.p[var0] & 0xFF;
+        final int var3 = this.p[var1] & 0xFF;
+        final int var4 = (var2 + sectionY) & 0xFF;
+        final int var5 = (var3 + sectionY) & 0xFF;
+        final int var6 = (var2 + sectionY + 1) & 0xFF;
+        final int var7 = (var3 + sectionY + 1) & 0xFF;
+        final int var8 = this.p[var4] & 0xFF;
+        final int var9 = this.p[var5] & 0xFF;
+        final int var10 = this.p[var6] & 0xFF;
+        final int var11 = this.p[var7] & 0xFF;
+
+        final int var12 = (var8 + sectionZ) & 0xFF;
+        final int var13 = (var9 + sectionZ) & 0xFF;
+        final int var14 = (var10 + sectionZ) & 0xFF;
+        final int var15 = (var11 + sectionZ) & 0xFF;
+        final int var16 = (var8 + sectionZ + 1) & 0xFF;
+        final int var17 = (var9 + sectionZ + 1) & 0xFF;
+        final int var18 = (var10 + sectionZ + 1) & 0xFF;
+        final int var19 = (var11 + sectionZ + 1) & 0xFF;
+        final int var20 = (this.p[var12] & 15) << 2;
+        final int var21 = (this.p[var13] & 15) << 2;
+        final int var22 = (this.p[var14] & 15) << 2;
+        final int var23 = (this.p[var15] & 15) << 2;
+        final int var24 = (this.p[var16] & 15) << 2;
+        final int var25 = (this.p[var17] & 15) << 2;
+        final int var26 = (this.p[var18] & 15) << 2;
+        final int var27 = (this.p[var19] & 15) << 2;
+        final double var60 = localX - 1.0;
+        final double var61 = localY - 1.0;
+        final double var62 = localZ - 1.0;
+        final double var87 = FLAT_SIMPLEX_GRAD[(var20) | 0] * localX + FLAT_SIMPLEX_GRAD[(var20) | 1] * localY + FLAT_SIMPLEX_GRAD[(var20) | 2] * localZ;
+        final double var88 = FLAT_SIMPLEX_GRAD[(var21) | 0] * var60 + FLAT_SIMPLEX_GRAD[(var21) | 1] * localY + FLAT_SIMPLEX_GRAD[(var21) | 2] * localZ;
+        final double var89 = FLAT_SIMPLEX_GRAD[(var22) | 0] * localX + FLAT_SIMPLEX_GRAD[(var22) | 1] * var61 + FLAT_SIMPLEX_GRAD[(var22) | 2] * localZ;
+        final double var90 = FLAT_SIMPLEX_GRAD[(var23) | 0] * var60 + FLAT_SIMPLEX_GRAD[(var23) | 1] * var61 + FLAT_SIMPLEX_GRAD[(var23) | 2] * localZ;
+        final double var91 = FLAT_SIMPLEX_GRAD[(var24) | 0] * localX + FLAT_SIMPLEX_GRAD[(var24) | 1] * localY + FLAT_SIMPLEX_GRAD[(var24) | 2] * var62;
+        final double var92 = FLAT_SIMPLEX_GRAD[(var25) | 0] * var60 + FLAT_SIMPLEX_GRAD[(var25) | 1] * localY + FLAT_SIMPLEX_GRAD[(var25) | 2] * var62;
+        final double var93 = FLAT_SIMPLEX_GRAD[(var26) | 0] * localX + FLAT_SIMPLEX_GRAD[(var26) | 1] * var61 + FLAT_SIMPLEX_GRAD[(var26) | 2] * var62;
+        final double var94 = FLAT_SIMPLEX_GRAD[(var27) | 0] * var60 + FLAT_SIMPLEX_GRAD[(var27) | 1] * var61 + FLAT_SIMPLEX_GRAD[(var27) | 2] * var62;
+
+        final double var95 = localX * 6.0 - 15.0;
+        final double var96 = fadeLocalX * 6.0 - 15.0;
+        final double var97 = localZ * 6.0 - 15.0;
+        final double var98 = localX * var95 + 10.0;
+        final double var99 = fadeLocalX * var96 + 10.0;
+        final double var100 = localZ * var97 + 10.0;
+        final double var101 = localX * localX * localX * var98;
+        final double var102 = fadeLocalX * fadeLocalX * fadeLocalX * var99;
+        final double var103 = localZ * localZ * localZ * var100;
+
+        final double var113 = var87 + var101 * (var88 - var87);
+        final double var114 = var93 + var101 * (var94 - var93);
+        final double var115 = var91 + var101 * (var92 - var91);
+        final double var116 = var89 + var101 * (var90 - var89);
+        final double var117 = var114 - var115;
+        final double var118 = var102 * (var116 - var113);
+        final double var119 = var102 * var117;
+        final double var120 = var113 + var118;
+        final double var121 = var115 + var119;
+        return var120 + (var103 * (var121 - var120));
+        // Canvas end
     }
 
     private double sampleWithDerivative(int sectionX, int sectionY, int sectionZ, double localX, double localY, double localZ, double[] ds) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/synth/PerlinNoise.java b/src/main/java/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
index 35820670837376bcad8891241724d5b946fbd31f..09fa454984a05cd06f361321bf063ae5d56b684e 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/synth/PerlinNoise.java
@@ -26,6 +26,8 @@ public class PerlinNoise {
     private final double lowestFreqValueFactor;
     private final double lowestFreqInputFactor;
     private final double maxValue;
+    private int octaveSamplersCount = 0; // Canvas
+    private double[] amplitudesArray = null; // Canvas
 
     @Deprecated
     public static PerlinNoise createLegacyForBlendedNoise(RandomSource random, IntStream octaves) {
@@ -127,6 +129,8 @@ public class PerlinNoise {
         this.lowestFreqInputFactor = Math.pow(2.0, (double)(-j));
         this.lowestFreqValueFactor = Math.pow(2.0, (double)(i - 1)) / (Math.pow(2.0, (double)i) - 1.0);
         this.maxValue = this.edgeValue(2.0);
+        this.octaveSamplersCount = this.noiseLevels.length;
+        this.amplitudesArray = this.amplitudes.toDoubleArray();
     }
 
     protected double maxValue() {
@@ -147,11 +151,15 @@ public class PerlinNoise {
         double e = this.lowestFreqInputFactor;
         double f = this.lowestFreqValueFactor;
 
-        for (int i = 0; i < this.noiseLevels.length; i++) {
+        for (int i = 0; i < this.octaveSamplersCount; ++i) { // Canvas
             ImprovedNoise improvedNoise = this.noiseLevels[i];
             if (improvedNoise != null) {
-                double g = improvedNoise.noise(wrap(x * e), useOrigin ? -improvedNoise.yo : wrap(y * e), wrap(z * e), yScale * e, yMax * e);
-                d += this.amplitudes.getDouble(i) * g * f;
+                // Canvas start
+                double g = improvedNoise.noise(
+                    wrap(x * e), wrap(y * e), wrap(z * e), 0.0, 0.0
+                );
+                d += this.amplitudesArray[i] * g * f;
+                // Canvas end
             }
 
             e *= 2.0;
@@ -187,7 +195,7 @@ public class PerlinNoise {
     }
 
     public static double wrap(double value) {
-        return value - (double)Mth.lfloor(value / 3.3554432E7 + 0.5) * 3.3554432E7;
+        return value - Math.floor(value / 3.3554432E7 + 0.5) * 3.3554432E7; // Canvas - remove frequent type conversion
     }
 
     protected int firstOctave() {
