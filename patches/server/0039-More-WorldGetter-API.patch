From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolf1909 <160778222+PurpleWolf1909@users.noreply.github.com>
Date: Tue, 30 Apr 2024 21:46:32 +0000
Subject: [PATCH] More WorldGetter API


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 94fdb4ca2182005dfb972dffaccb3f84173c880f..c5f7cd4f8470d50d5e79d925739ad0f7e368aee5 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -675,6 +675,33 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
         // Paper end - Configurable player collision
 
+        // Canvas start
+        boolean isEmpty = true;
+
+        for (Object element : this.server.console.getAllLevels()) {
+            isEmpty = false;
+            break;
+        }
+
+        if (isEmpty) {
+            this.server.LOGGER.severe("Iterable of worlds is empty");
+        }
+        
+        for (ServerLevel world : this.server.console.getAllLevels()) {
+            if(world.dimension() == net.minecraft.world.level.Level.OVERWORLD){
+                this.server.overworld = world.getWorld();
+                this.server.vanillaWorlds.add(world.getWorld());
+            } else if(world.dimension() == net.minecraft.world.level.Level.NETHER){
+                this.server.nether = world.getWorld();
+                this.server.vanillaWorlds.add(world.getWorld());
+            } else if(world.dimension() == net.minecraft.world.level.Level.END){
+                this.server.end = world.getWorld();
+                this.server.vanillaWorlds.add(world.getWorld());
+            } else {
+                this.server.customWorlds.add(world.getWorld());
+            }
+        }
+        // Canvas end
         this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.POSTWORLD);
         if (io.papermc.paper.plugin.PluginInitializerManager.instance().pluginRemapper != null) io.papermc.paper.plugin.PluginInitializerManager.instance().pluginRemapper.pluginsEnabled(); // Paper - Remap plugins
         io.papermc.paper.command.brigadier.PaperCommands.INSTANCE.setValid(); // Paper - reset invalid state for event fire below
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index ffc6c2608a5303879bbebd9922cc6a5a666cc94c..d6631f41a25f8f718ee6ec8324b6fd4461544773 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -269,7 +269,10 @@ import javax.annotation.Nonnull; // Paper
 public final class CraftServer implements Server {
     private final String serverName = io.papermc.paper.ServerBuildInfo.buildInfo().brandName(); // Paper
     private final String serverVersion;
-    public static String[] startupArgs = null; // Canvas
+    // Canvas start
+    public Logger LOGGER = Logger.getLogger(CraftServer.class.getName());
+    public static String[] startupArgs = null;
+    // Canvas end
     private final String bukkitVersion = Versioning.getBukkitVersion();
     private final Logger logger = Logger.getLogger("Minecraft");
     private final ServicesManager servicesManager = new SimpleServicesManager();
@@ -280,7 +283,7 @@ public final class CraftServer implements Server {
     private final SimplePluginManager pluginManager; // Paper - Move down
     public final io.papermc.paper.plugin.manager.PaperPluginManagerImpl paperPluginManager; // Paper
     private final StructureManager structureManager;
-    protected final DedicatedServer console;
+    public final DedicatedServer console; // Canvas - protected -> public
     protected final DedicatedPlayerList playerList;
     private final Map<String, World> worlds = new LinkedHashMap<String, World>();
     // private final Map<Class<?>, Registry<?>> registries = new HashMap<>(); // Paper - replace with RegistryAccess
@@ -488,13 +491,80 @@ public final class CraftServer implements Server {
         }
         this.potionBrewer = new io.papermc.paper.potion.PaperPotionBrewer(console); // Paper - custom potion mixes
         datapackManager = new io.papermc.paper.datapack.PaperDatapackManager(console.getPackRepository()); // Paper
-        Boat.setupBoatDropMap(); // Canvas - setup drop mappings
-        Bukkit.getPluginManager().registerEvents(new MinecraftInternalPlugin(), new MinecraftInternalPlugin()); // Canvas - register as listener
+        // Canvas start
+        Boat.setupBoatDropMap(); // setup drop mappings
+        Bukkit.getPluginManager().registerEvents(new MinecraftInternalPlugin(), new MinecraftInternalPlugin()); // register as listener
+        // Canvas end
     }
 
     public boolean getCommandBlockOverride(String command) {
         return this.overrideAllCommandBlockCommands || this.commandsConfiguration.getStringList("command-block-overrides").contains(command);
     }
+    // Canvas start
+    public CraftWorld overworld;
+    public CraftWorld nether;
+    public CraftWorld end;
+    public java.util.ArrayList<World> customWorlds = new ArrayList();
+    public java.util.ArrayList<World> vanillaWorlds = new ArrayList();
+
+    @Override
+    public java.util.ArrayList<World> getVanillaWorlds(){
+        return this.vanillaWorlds;
+    }
+
+    @Override
+    public java.util.ArrayList<World> getCustomWorlds(){
+        return this.customWorlds;
+    }
+
+    @Override
+    public World getCustomWorld(int index){
+        return this.customWorlds.get(index);
+    }
+
+    @Override
+    public World getCustomWorld(org.bukkit.NamespacedKey key){
+        ServerLevel worldServer = console.getLevel(
+            ResourceKey.create(net.minecraft.core.registries.Registries.DIMENSION,
+            CraftNamespacedKey.toMinecraft(key))
+        );
+        if (worldServer == null) return null;
+        if (!this.customWorlds.contains(worldServer.getWorld())) return null;
+        return worldServer.getWorld();
+    }
+
+    @Override
+    public World getOverworld(){
+        return this.overworld;
+    }
+
+    @Override
+    public World getNether(){
+        return this.nether;
+    }
+
+    @Override
+    public World getEnd(){
+        return this.end;
+    }
+
+    @Override
+    public World getVanillaWorld(int index){
+        return this.vanillaWorlds.get(index);
+    }
+
+    @Override
+    public World getVanillaWorld(org.bukkit.NamespacedKey key){
+        ServerLevel worldServer = console.getLevel(
+            ResourceKey.create(net.minecraft.core.registries.Registries.DIMENSION,
+            CraftNamespacedKey.toMinecraft(key))
+        );
+        if (worldServer == null) return null;
+        if (!this.vanillaWorlds.contains(worldServer.getWorld())) return null;
+        return worldServer.getWorld();
+    }
+
+    // Canvas end
 
     private File getConfigFile() {
         return (File) this.console.options.valueOf("bukkit-settings");
@@ -1472,6 +1542,7 @@ public final class CraftServer implements Server {
         this.getServer().prepareLevels(internal.getChunkSource().chunkMap.progressListener, internal);
 
         this.pluginManager.callEvent(new WorldLoadEvent(internal.getWorld()));
+        this.customWorlds.add(internal.getWorld()); // Canvas
         return internal.getWorld();
     }
 
