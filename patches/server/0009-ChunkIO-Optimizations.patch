From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Fri, 20 Dec 2024 22:18:54 -0800
Subject: [PATCH] ChunkIO Optimizations


diff --git a/src/main/java/io/canvasmc/canvas/Config.java b/src/main/java/io/canvasmc/canvas/Config.java
index d0abc931be066318355feb77cd8c1d3ec72705b4..37b266632f72c9db5e5e2ddafda90c7d5b68a2f7 100644
--- a/src/main/java/io/canvasmc/canvas/Config.java
+++ b/src/main/java/io/canvasmc/canvas/Config.java
@@ -35,6 +35,14 @@ public class Config implements ConfigData {
     @Comment("Enables the \"threadedtick\" command, which is an implementation of the vanilla \"tick\" command for the Canvas threaded context")
     public boolean enableCanvasTickCommand = true;
 
+    // Chunk Generation
+    @Comment("Chunk-Gen related config options")
+    public ChunkGeneration chunkGeneration = new ChunkGeneration();
+    public static class ChunkGeneration {
+        public long chunkDataCacheSoftLimit = 8192L;
+        public long chunkDataCacheLimit = 32678L;
+    }
+
 	public static Config init() {
 		AutoConfig.register(Config.class, JanksonConfigSerializer::new);
 		INSTANCE = AutoConfig.getConfigHolder(Config.class).getConfig();
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java b/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java
index a8a9e59a9721a76e34f78c1baa5026e5fe1d2bda..922694e4f09e10c68165f9030f79efff73cf3d08 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java
@@ -1,11 +1,14 @@
 package net.minecraft.world.level.chunk.storage;
 
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.Config;
 import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import java.io.IOException;
 import java.nio.file.Path;
 import java.util.BitSet;
+import java.util.Iterator;
 import java.util.LinkedHashMap;
+import java.util.Map;
 import java.util.Optional;
 import java.util.SequencedMap;
 import java.util.Map.Entry;
@@ -212,7 +215,38 @@ public class IOWorker implements ChunkScanAccess, AutoCloseable {
         });
     }
 
+    // Canvas start - chunkio optimizations - c2me
+
+    private void checkHardLimit() {
+        if (this.pendingWrites.size() >= Config.INSTANCE.chunkGeneration.chunkDataCacheLimit) {
+            LOGGER.warn("Chunk data cache size exceeded hard limit ({} >= {}), forcing writes to disk (you can increase chunkDataCacheLimit in c2me.toml)", this.pendingWrites.size(), Config.INSTANCE.chunkGeneration.chunkDataCacheLimit);
+            while (this.pendingWrites.size() >= Config.INSTANCE.chunkGeneration.chunkDataCacheSoftLimit * 0.75) { // using chunkDataCacheSoftLimit is intentional
+                writeResult0();
+            }
+        }
+    }
+
+    private void writeResult0() {
+        // TODO [VanillaCopy] writeResult
+        Iterator<Entry<ChunkPos, PendingStore>> iterator = this.pendingWrites.entrySet().iterator();
+        if (iterator.hasNext()) {
+            Map.Entry<ChunkPos, IOWorker.PendingStore> entry = iterator.next();
+            iterator.remove();
+            this.runStore(entry.getKey(), entry.getValue());
+        }
+    }
+
     private void storePendingChunk() {
+        if (!this.pendingWrites.isEmpty()) {
+            checkHardLimit();
+            if (this.pendingWrites.size() >= Config.INSTANCE.chunkGeneration.chunkDataCacheSoftLimit) {
+                int writeFrequency = Math.min(1, (this.pendingWrites.size() - (int) Config.INSTANCE.chunkGeneration.chunkDataCacheSoftLimit) / 16);
+                for (int i = 0; i < writeFrequency; i++) {
+                    writeResult0();
+                }
+            }
+        }
+    // Canvas end
         Entry<ChunkPos, IOWorker.PendingStore> entry = this.pendingWrites.pollFirstEntry();
         if (entry != null) {
             this.runStore(entry.getKey(), entry.getValue());
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
index a68f27288604b6f6755efe3c8ea612e295cb1656..abb47c4aa0cf6c27dde09b3cf9c8e481cd694180 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/RegionFileStorage.java
@@ -242,9 +242,9 @@ public class RegionFileStorage implements AutoCloseable, ca.spottedleaf.moonrise
     }
     // Paper end
 
-    protected RegionFileStorage(RegionStorageInfo storageKey, Path directory, boolean dsync) { // Paper - protected
+    protected RegionFileStorage(RegionStorageInfo storageKey, Path directory, Boolean dsync) { // Paper - protected // Canvas
         this.folder = directory;
-        this.sync = dsync;
+        this.sync = Boolean.parseBoolean(System.getProperty("com.ishland.c2me.chunkio.syncDiskWrites", dsync.toString())); // Canvas
         this.info = storageKey;
         this.isChunkData = isChunkDataFolder(this.folder); // Paper - recalculate region file headers
     }
