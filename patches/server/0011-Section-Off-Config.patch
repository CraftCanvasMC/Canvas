From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Sat, 21 Dec 2024 11:49:18 -0800
Subject: [PATCH] Section Off Config


diff --git a/src/main/java/io/github/dueris/canvas/Config.java b/src/main/java/io/github/dueris/canvas/Config.java
index acbb2286eed4d7fd2473fdab0483a81ffe29e0d2..d42401eef86b14eb8f40113ed83fba1e5f3f0c6e 100644
--- a/src/main/java/io/github/dueris/canvas/Config.java
+++ b/src/main/java/io/github/dueris/canvas/Config.java
@@ -10,10 +10,7 @@ public class Config implements JsonConfig {
     public static boolean enabled = false;
     public static Config INSTANCE = new Config();
 
-    public long chunkDataCacheSoftLimit = 8192L;
-    public long chunkDataCacheLimit = 32678L;
-    public boolean allowAVX512 = false;
-    public boolean nativeAccelerationEnabled = true;
+    public ChunkGeneration chunkgen = new ChunkGeneration();
 
     public static Config init() {
         final JsonConfigAPI jsonConfigAPI = new JsonConfigAPI(true);
@@ -27,7 +24,7 @@ public class Config implements JsonConfig {
         );
 
         System.setProperty("com.ishland.c2me.opts.natives_math.duringGameInit", "true");
-        boolean configured = INSTANCE.nativeAccelerationEnabled;
+        boolean configured = INSTANCE.chunkgen.nativeAccelerationEnabled;
         boolean actuallyEnabled = false;
         if (configured) {
             try {
@@ -39,4 +36,11 @@ public class Config implements JsonConfig {
         enabled = actuallyEnabled;
         return INSTANCE;
     }
+
+    public static class ChunkGeneration {
+        public long chunkDataCacheSoftLimit = 8192L;
+        public long chunkDataCacheLimit = 32678L;
+        public boolean allowAVX512 = false;
+        public boolean nativeAccelerationEnabled = true;
+    }
 }
diff --git a/src/main/java/io/github/dueris/canvas/util/NativeLoader.java b/src/main/java/io/github/dueris/canvas/util/NativeLoader.java
index 1758eeecf924ae63936d5837ef096b3a409bf20a..9ef17c8b609e5ef4b1a380d2a4d86cb7ee7e5834 100644
--- a/src/main/java/io/github/dueris/canvas/util/NativeLoader.java
+++ b/src/main/java/io/github/dueris/canvas/util/NativeLoader.java
@@ -41,7 +41,7 @@ public class NativeLoader {
                         ValueLayout.JAVA_INT,
                         ValueLayout.JAVA_BOOLEAN
                     )
-                ).invokeExact(Boolean.getBoolean("com.ishland.c2me.opts.natives_math.duringGameInit") ? Config.INSTANCE.allowAVX512 : true);
+                ).invokeExact(Boolean.getBoolean("com.ishland.c2me.opts.natives_math.duringGameInit") ? Config.INSTANCE.chunkgen.allowAVX512 : true);
                 ISATarget target = (ISATarget) ISATarget.getInstance().getEnumConstants()[level];
                 while (!target.isNativelySupported()) target = (ISATarget) ISATarget.getInstance().getEnumConstants()[target.ordinal() - 1];
                 currentMachineTarget = target;
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java b/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java
index b00e3050ebb9578e07bbb49cbb759ba66fd2c51d..522a3db1cf535cbfef1989b957bdb6970dc383d2 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/IOWorker.java
@@ -218,9 +218,9 @@ public class IOWorker implements ChunkScanAccess, AutoCloseable {
     // Canvas start - chunkio optimizations - c2me
 
     private void checkHardLimit() {
-        if (this.pendingWrites.size() >= Config.INSTANCE.chunkDataCacheLimit) {
-            LOGGER.warn("Chunk data cache size exceeded hard limit ({} >= {}), forcing writes to disk (you can increase chunkDataCacheLimit in c2me.toml)", this.pendingWrites.size(), Config.INSTANCE.chunkDataCacheLimit);
-            while (this.pendingWrites.size() >= Config.INSTANCE.chunkDataCacheSoftLimit * 0.75) { // using chunkDataCacheSoftLimit is intentional
+        if (this.pendingWrites.size() >= Config.INSTANCE.chunkgen.chunkDataCacheLimit) {
+            LOGGER.warn("Chunk data cache size exceeded hard limit ({} >= {}), forcing writes to disk (you can increase chunkDataCacheLimit in c2me.toml)", this.pendingWrites.size(), Config.INSTANCE.chunkgen.chunkDataCacheLimit);
+            while (this.pendingWrites.size() >= Config.INSTANCE.chunkgen.chunkDataCacheSoftLimit * 0.75) { // using chunkDataCacheSoftLimit is intentional
                 writeResult0();
             }
         }
@@ -239,8 +239,8 @@ public class IOWorker implements ChunkScanAccess, AutoCloseable {
     private void storePendingChunk() {
         if (!this.pendingWrites.isEmpty()) {
             checkHardLimit();
-            if (this.pendingWrites.size() >= Config.INSTANCE.chunkDataCacheSoftLimit) {
-                int writeFrequency = Math.min(1, (this.pendingWrites.size() - (int) Config.INSTANCE.chunkDataCacheSoftLimit) / 16);
+            if (this.pendingWrites.size() >= Config.INSTANCE.chunkgen.chunkDataCacheSoftLimit) {
+                int writeFrequency = Math.min(1, (this.pendingWrites.size() - (int) Config.INSTANCE.chunkgen.chunkDataCacheSoftLimit) / 16);
                 for (int i = 0; i < writeFrequency; i++) {
                     writeResult0();
                 }
