From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Thu, 16 May 2024 18:15:02 -0700
Subject: [PATCH] CanvasCommand and Spark config


diff --git a/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java b/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
index 066189475dccb9aafe7316feaa64b42cbb146874..c7716bf4625a4ab17e73934be5142a923af434ee 100644
--- a/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
+++ b/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
@@ -127,7 +127,7 @@ public class PluginInitializerManager {
         @SuppressWarnings("unchecked")
         java.util.List<Path> files = ((java.util.List<File>) optionSet.valuesOf("add-plugin")).stream().map(File::toPath).toList();
         io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(io.papermc.paper.plugin.provider.source.PluginFlagProviderSource.INSTANCE, files);
-        io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(io.papermc.paper.plugin.provider.source.SparkProviderSource.INSTANCE, new File("cache", "spark.jar").toPath()); // Purpur
+        if (me.dueris.canvas.CanvasConfig.useSpark) io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(io.papermc.paper.plugin.provider.source.SparkProviderSource.INSTANCE, new File("cache", "spark.jar").toPath()); // Purpur
     }
 
     // This will be the end of me...
diff --git a/src/main/java/me/dueris/canvas/CanvasConfig.java b/src/main/java/me/dueris/canvas/CanvasConfig.java
index b5f8b5cbbe5475d9c889315da30dc6e7319ac4e8..2e9f2dbf806d47293140baaf4bca943eee34f8f0 100644
--- a/src/main/java/me/dueris/canvas/CanvasConfig.java
+++ b/src/main/java/me/dueris/canvas/CanvasConfig.java
@@ -3,6 +3,7 @@ package me.dueris.canvas;
 import com.google.common.base.Throwables;
 import com.google.common.collect.ImmutableMap;
 import com.mojang.datafixers.util.Pair;
+import me.dueris.canvas.command.CanvasCommand;
 import net.kyori.adventure.bossbar.BossBar;
 import net.kyori.adventure.text.minimessage.MiniMessage;
 import net.minecraft.core.registries.BuiltInRegistries;
@@ -52,7 +53,7 @@ public class CanvasConfig {
     private static File CONFIG_FILE;
     public static YamlConfiguration config;
 
-    private static Map<String, Command> commands;
+    private static Map<String, Command> commands = new HashMap<>();
 
     public static int version;
     static boolean verbose;
@@ -70,6 +71,8 @@ public class CanvasConfig {
         config.options().header(HEADER);
         config.options().copyDefaults(true);
 
+        commands.put("canvas", new CanvasCommand("canvas"));
+
         version = getInt("config-version", 33);
         set("config-version", 33);
 
@@ -210,6 +213,7 @@ public class CanvasConfig {
     public static double orbMergeSearchInfaltionRadius = 0.8;
     public static int maxEntitiesToReducePathfindingRates = 2;
     public static int maxTntWorkerThreads = 3;
+    public static boolean useSpark = true;
 
     private static void general(){
         disableFootsteps = getBoolean("disableFootsteps", disableFootsteps);
@@ -220,6 +224,7 @@ public class CanvasConfig {
         useCanvasOrbOptimizations = getBoolean("useCanvasOrbOptimizations", useCanvasOrbOptimizations);
         orbMergeSearchInfaltionRadius = getDouble("orbMergeSearchInfaltionRadius", orbMergeSearchInfaltionRadius);
         maxEntitiesToReducePathfindingRates = getInt("maxEntitiesToReducePathfindingRates", maxEntitiesToReducePathfindingRates);
+        useSpark = getBoolean("useSpark", useSpark);
     }
     
     private static void optimizations(){
diff --git a/src/main/java/me/dueris/canvas/command/CanvasCommand.java b/src/main/java/me/dueris/canvas/command/CanvasCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..a85a49a7f102e7b4868c05cc56bf687799ff9c06
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/command/CanvasCommand.java
@@ -0,0 +1,98 @@
+package me.dueris.canvas.command;
+
+import java.io.File;
+import java.math.BigDecimal;
+import java.math.RoundingMode;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+import me.dueris.canvas.world.TickManagerHolder;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.TextComponent;
+import net.kyori.adventure.text.format.TextColor;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.ServerTickRateManager;
+import net.minecraft.server.level.ServerLevel;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.purpurmc.purpur.PurpurConfig;
+
+public class CanvasCommand extends Command {
+    public CanvasCommand(String name) {
+        super(name);
+        this.description = "Canvas related commands";
+        this.usageMessage = "/canvas [tps | version]";
+        this.setPermission("bukkit.command.canvas");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return Stream.of("tps", "version")
+                    .filter(arg -> arg.startsWith(args[0].toLowerCase()))
+                    .collect(Collectors.toList());
+        }
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length != 1) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        if (args[0].equalsIgnoreCase("tps")) {
+            TextComponent base = Component.text("").color(TextColor.color(0x3C82D8));
+            sender.sendMessage(base.append(Component.text("==================================")));
+            sender.sendMessage(base.append(Component.text("TPS For Currently running TickManagers:")));
+            HashMap<TickManagerHolder, Double> recentTps = new HashMap<>();
+            for (ServerTickRateManager h : MinecraftServer.getServer().getAllTickRateManagers()) {
+                TickManagerHolder holder = h.getHolder();
+                if (holder instanceof MinecraftServer server) {
+                    sender.sendMessage(base.append(Component.text("---- MinecraftServer ----")));
+                    sender.sendMessage(
+                        base.append(
+                            Component.text("TPS5s: ")).append(Component.text(roundToHundredth(server.tps5s.getAverage())).append(Component.space())
+                            .append(Component.text("TPS1: ")).append(Component.text(roundToHundredth(server.tps1.getAverage()))).append(Component.space())
+                            .append(Component.text("TPS5: ")).append(Component.text(roundToHundredth(server.tps5.getAverage()))).append(Component.space())
+                            .append(Component.text("TPS15: ")).append(Component.text(roundToHundredth(server.tps15.getAverage()))).append(Component.space())
+                        )
+                    );
+                    recentTps.put(server, roundToHundredth(server.tps5s.getAverage()));
+                } else if (holder instanceof ServerLevel level) {
+                    sender.sendMessage(base.append(Component.text("---- ServerLevel ({}) ----".replace("{}", level.getWorld().getName()))));
+                    sender.sendMessage(
+                        base.append(
+                            Component.text("TPS5s: ")).append(Component.text(roundToHundredth(level.tps5s.getAverage())).append(Component.space())
+                            .append(Component.text("TPS1: ")).append(Component.text(roundToHundredth(level.tps1.getAverage()))).append(Component.space())
+                            .append(Component.text("TPS5: ")).append(Component.text(roundToHundredth(level.tps5.getAverage()))).append(Component.space())
+                            .append(Component.text("TPS15: ")).append(Component.text(roundToHundredth(level.tps15.getAverage()))).append(Component.space())
+                        )
+                    );
+                    recentTps.put(level, roundToHundredth(level.tps5s.getAverage()));
+                }
+            }
+            sender.sendMessage(base.append(Component.text("==================================")));
+        } else if (args[0].equalsIgnoreCase("version")) {
+            Command verCmd = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+            if (verCmd != null) {
+                return verCmd.execute(sender, commandLabel, new String[0]);
+            }
+        }
+
+        return true;
+    }
+
+    public static double roundToHundredth(double value) {
+        BigDecimal bd = new BigDecimal(Double.toString(value));
+        bd = bd.setScale(2, RoundingMode.HALF_UP);
+        return bd.doubleValue();
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 7e0bfe4401c75523104dcfe620d1c7c220997aeb..65cc4b3e8e378f01fa509bcbd1124cc834ee3fd5 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -324,7 +324,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public static final int TICK_TIME = 1000000000 / MinecraftServer.TPS;
     public static final int SAMPLE_INTERVAL = 20; // Paper - improve server tick loop // Canvas
     @Deprecated(forRemoval = true) // Paper
-    public final double[] recentTps = new double[ 4 ]; // Purpur
+    public final Double[] recentTps = new Double[ 4 ]; // Purpur // Canvas
     // Spigot end
     public final io.papermc.paper.configuration.PaperConfigurations paperConfigurations; // Paper - add paper configuration files
     public static long currentTickLong = 0L; // Paper - track current tick as a long
@@ -1265,7 +1265,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
             org.spigotmc.WatchdogThread.tick(); // Paper
             org.spigotmc.WatchdogThread.hasStarted = true; // Paper
-            Arrays.fill( this.recentTps, 20 );
+            Arrays.fill( this.recentTps, 20D ); // Canvas
             // Paper start - further improve server tick loop
             long tickSection = Util.getNanos();
             long currentTime;
diff --git a/src/main/java/net/minecraft/server/ServerTickRateManager.java b/src/main/java/net/minecraft/server/ServerTickRateManager.java
index e03df35d533546c30100e33dab85e4fa224b3333..7119a9b32dbceb8474842cc79aa12e182848dbb8 100644
--- a/src/main/java/net/minecraft/server/ServerTickRateManager.java
+++ b/src/main/java/net/minecraft/server/ServerTickRateManager.java
@@ -25,6 +25,13 @@ public class ServerTickRateManager extends TickRateManager {
         return this.scheduledCurrentSprintTicks > 0L;
     }
 
+    // Canvas start
+
+    public TickManagerHolder getHolder() {
+        return server;
+    }
+    // Canvas end
+
     @Override
     public void setFrozen(boolean frozen) {
         super.setFrozen(frozen);
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 800d6fdd351f18da2fbb0562dcf83860958fb1ca..094757bf4423373c79cac74c9c2ced9e0b0af56b 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -260,6 +260,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             return false;
         }
         org.purpurmc.purpur.PurpurConfig.registerCommands();
+        me.dueris.canvas.CanvasConfig.registerCommands(); // Canvas
         // Purpur end
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // Paper - load version history now
 
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 98fa5ee6aca30776e6b39fc73bf9807614e68b59..91093c860b984450374108995e5cd124450e2f6a 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -865,7 +865,7 @@ public class ServerLevel extends Level implements WorldGenLevel, TickManagerHold
     private long delayedTasksMaxNextTickTimeNanos;
     private boolean mayHaveDelayedTasks;
     public boolean lagging = false;
-    public final double[] recentTps = new double[ 4 ];
+    public final Double[] recentTps = new Double[4];
     private EventLoop eventLoop;
     public long currentTime;
     private net.minecraft.util.debugchart.SampleLogger tickTimeLogger;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 32c9df0505752234bae8150eed9713a12c34094f..5d66ad47b46e1a804769bd2d7fbf04b1e9e4c915 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1205,6 +1205,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         io.papermc.paper.command.PaperCommands.registerCommands(this.console); // Paper
         org.purpurmc.purpur.PurpurConfig.registerCommands(); // Purpur
+        me.dueris.canvas.CanvasConfig.registerCommands(); // Canvas
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
