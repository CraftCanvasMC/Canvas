From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sat, 14 Oct 2023 14:16:34 -0700
Subject: [PATCH] patched custom colored logging


diff --git a/src/main/java/com/dueris/canvas/logger/CraftCanvasLogger.java b/src/main/java/com/dueris/canvas/logger/CraftCanvasLogger.java
index e51c9b38faa1b793abf1d6bc5b1e2715b3115bab..62d18b60b845a0802eade5b8e6fb6474a40fb725 100644
--- a/src/main/java/com/dueris/canvas/logger/CraftCanvasLogger.java
+++ b/src/main/java/com/dueris/canvas/logger/CraftCanvasLogger.java
@@ -18,51 +18,67 @@ import java.util.logging.Logger;
 
 public class CraftCanvasLogger implements CanvasLogger {
 
-    private static final String ANSI_RESET = "\u001B[0m";
-    private static final String ANSI_BLACK = "\u001B[30m";
-    private static final String ANSI_RED = "\u001B[31m";
-    private static final String ANSI_GREEN = "\u001B[32m";
-    private static final String ANSI_YELLOW = "\u001B[33m";
-    private static final String ANSI_BLUE = "\u001B[34m";
-    private static final String ANSI_PURPLE = "\u001B[35m";
-    private static final String ANSI_CYAN = "\u001B[36m";
-    private static final String ANSI_WHITE = "\u001B[37m";
-
     public String getName() {
         return "CanvasLogger";
     }
 
+    public enum ConsoleColor {
+        WHITE("\u001B[37m"),
+        CYAN("\u001B[36m"),
+        RESET("\u001B[0m"),
+        PURPLE("\u001B[35m"),
+        BLUE("\u001B[34m"),
+        YELLOW("\u001B[33m"),
+        GREEN("\u001B[32m"),
+        RED("\u001B[31m"),
+        BLACK("\u001B[30m");
+
+        private final String stringValue;
+
+        ConsoleColor(String stringValue) {
+            this.stringValue = stringValue;
+        }
+
+        public String getStringValue() {
+            return stringValue;
+        }
+    }
+
     public enum LogLevel {
         INFO, WARNING, ERROR
     }
 
     public void info(String message) {
         if (logLevel.ordinal() <= LogLevel.INFO.ordinal()) {
-            logC(ANSI_BLUE, "INFO", message);
+            logColored(CanvasLogger.ConsoleColor.WHITE, CanvasLogger.LogLevel.INFO, message);
         }
     }
 
-    private void logC(String color, String level, String message) {
-        System.out.println(color + "[" + level + "] " + message + ANSI_RESET);
+    public void logColored(final CanvasLogger.ConsoleColor color, final CanvasLogger.LogLevel level, final String message) {
+        System.out.println(color.getStringValue() + message + ConsoleColor.RESET.getStringValue());
     }
 
-    public void logColored(String color, String level, String message) {
-        logC(color, level, message);
+    private static final Map<String, ConsoleColor> colorMap = new HashMap<>();
+
+    static {
+        for (ConsoleColor color : ConsoleColor.values()) {
+            colorMap.put(color.getStringValue(), color);
+        }
     }
 
-    public void log(String level, String message){
-        logC(ANSI_WHITE, level, message);
+    public void log(CanvasLogger.LogLevel level, String message){
+        logColored(CanvasLogger.ConsoleColor.WHITE, level, message);
     }
 
     public void error(String message) {
         if (logLevel.ordinal() <= LogLevel.ERROR.ordinal()) {
-            logC(ANSI_RED, "ERROR", message);
+            logColored(CanvasLogger.ConsoleColor.RED, CanvasLogger.LogLevel.ERROR, message);
         }
     }
 
     public void warning(String message) {
         if (logLevel.ordinal() <= LogLevel.WARNING.ordinal()) {
-            logC(ANSI_YELLOW, "WARNING", message);
+            logColored(CanvasLogger.ConsoleColor.YELLOW, CanvasLogger.LogLevel.WARNING, message);
         }
     }
 
