From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sun, 12 Nov 2023 13:13:41 -0800
Subject: [PATCH] Create per-world time manager api


diff --git a/src/main/java/io/github/dueris/canvas/world/time/CraftTimeManager.java b/src/main/java/io/github/dueris/canvas/world/time/CraftTimeManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..ccb662481ca944579634c43c2b4aeb09ef064ab4
--- /dev/null
+++ b/src/main/java/io/github/dueris/canvas/world/time/CraftTimeManager.java
@@ -0,0 +1,139 @@
+package io.github.dueris.canvas.world.time;
+
+import com.mojang.logging.LogUtils;
+import org.bukkit.World;
+
+public class CraftTimeManager implements TimeManager {
+    /*
+        Canvas notes lol
+        8640000 ticks in 1 year(assuming each month is 30 days)
+        720000 ticks in 1 month(assuming its 30 days)
+        24000 ticks in 1 day
+        1000 ticks in 1 hour
+        17 ticks in 1 minute
+     */
+
+    public static int YEAR_TICK = 8640000;
+    public static int MONTH_TICK = 720000;
+    public static int DAY_TICK = 24000;
+    public static int HOUR_TICK = 1000;
+    public static int MINUTE_TICK = 17;
+
+    @Override
+    public long getMinecraftTime(World world) {
+        return world.getTime();
+    }
+
+    @Override
+    public String getNormalTime(World world) {
+        return translateToNormal(world);
+    }
+
+    @Override
+    public void setFullTime(World world, final int years) {
+        setFullTime(world, years, 0, 0, 0, 0);
+    }
+
+    @Override
+    public void addTime(World world, final int years) {
+        addTime(world, years, 0, 0, 0, 0);
+    }
+
+    @Override
+    public void removeTime(World world, final int years) {
+        removeTime(world, years, 0, 0, 0, 0);
+    }
+
+    @Override
+    public void setFullTime(World world, final int years, final int months) {
+        setFullTime(world, years, months, 0, 0, 0);
+    }
+
+    @Override
+    public void addTime(World world, final int years, final int months) {
+        addTime(world, years, months, 0, 0, 0);
+    }
+
+    @Override
+    public void removeTime(World world, final int years, final int months) {
+        removeTime(world, years, months, 0, 0, 0);
+    }
+
+    @Override
+    public void setFullTime(World world, final int years, final int months, final int days) {
+        setFullTime(world, years, months, days, 0, 0);
+    }
+
+    @Override
+    public void addTime(World world, final int years, final int months, final int days) {
+        addTime(world, years, months, days, 0, 0);
+    }
+
+    @Override
+    public void removeTime(World world, final int years, final int months, final int days) {
+        removeTime(world, years, months, days, 0, 0);
+    }
+
+    @Override
+    public void setFullTime(World world, final int years, final int months, final int days, final int hours) {
+        setFullTime(world, years, months, days, hours, 0);
+    }
+
+    @Override
+    public void addTime(World world, final int years, final int months, final int days, final int hours) {
+        addTime(world, years, months, days, hours, 0);
+    }
+
+    @Override
+    public void removeTime(World world, final int years, final int months, final int days, final int hours) {
+        removeTime(world, years, months, days, hours, 0);
+    }
+
+    @Override
+    public void setFullTime(World world, final int years, final int months, final int days, final int hours, final int minutes) {
+        world.setFullTime(translateToMinecraft(years, months, days, hours, minutes));
+    }
+
+    @Override
+    public void addTime(World world, final int years, final int months, final int days, final int hours, final int minutes) {
+        world.setFullTime(world.getFullTime() + translateToMinecraft(years, months, days, hours, minutes));
+    }
+
+    @Override
+    public void removeTime(World world, final int years, final int months, final int days, final int hours, final int minutes) {
+        world.setFullTime(world.getFullTime() - translateToMinecraft(years, months, days, hours, minutes));
+    }
+
+    private long translateToMinecraft(int years, int months, int days, int hours, int minutes){
+        final int mc_years = years * CraftTimeManager.YEAR_TICK;
+        final int mc_months = months * CraftTimeManager.MONTH_TICK;
+        final int mc_days = days * CraftTimeManager.DAY_TICK;
+        final int mc_hours = hours * CraftTimeManager.HOUR_TICK;
+        final int mc_minutes = minutes * CraftTimeManager.MINUTE_TICK;
+
+        long final_time = mc_years + mc_months + mc_days + mc_hours + mc_minutes;
+
+        if(final_time > Long.MAX_VALUE){
+            LogUtils.getLogger().warn("Time translation was larger than LONG.MAX_VALUE, so it was set to %max"
+                .replace("%max", String.valueOf(Long.MAX_VALUE))
+            );
+            final_time = Long.MAX_VALUE;
+        } else if (final_time < Long.MIN_VALUE) {
+            final_time = Long.MIN_VALUE;
+        }
+
+        return final_time;
+    }
+
+    private String translateToNormal(World world){
+        long minecraftTime = world.getFullTime();
+
+        long years = Math.round(minecraftTime / CraftTimeManager.YEAR_TICK);
+        long months = Math.round(minecraftTime / CraftTimeManager.MONTH_TICK);
+        long days = Math.round(minecraftTime / CraftTimeManager.DAY_TICK);
+        long hours = Math.round(minecraftTime / CraftTimeManager.HOUR_TICK);
+        long minutes = Math.round(minecraftTime / CraftTimeManager.MINUTE_TICK);
+
+        return String.format("%d/%d/%d/%d/%d", years, months, days, hours, minutes);
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index b144b8a4c8852c0952e8db29c2a900222823e36d..014f06ae98bce24b84c577b64cdb890dfa6f5fe4 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -796,6 +796,11 @@ public final class CraftServer implements Server {
     public io.github.dueris.canvas.properties.ServerProperties getServerProperties(){
         return getProperties();
     }
+
+    @Override
+    public io.github.dueris.canvas.world.time.TimeManager getTimeManager(){
+        return new io.github.dueris.canvas.world.time.CraftTimeManager();
+    }
     // Canvas end
 
     @Override
