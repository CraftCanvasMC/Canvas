From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sat, 18 Nov 2023 11:10:45 -0800
Subject: [PATCH] WardenSonicBoomEvent


diff --git a/src/main/java/net/minecraft/world/entity/ai/behavior/warden/SonicBoom.java b/src/main/java/net/minecraft/world/entity/ai/behavior/warden/SonicBoom.java
index 03ec02f9a2fb5abb5387cd0d83c9481d6cbb0bd2..a4a1f5142849f9a54a1a72c07fd7be042c9012b5 100644
--- a/src/main/java/net/minecraft/world/entity/ai/behavior/warden/SonicBoom.java
+++ b/src/main/java/net/minecraft/world/entity/ai/behavior/warden/SonicBoom.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.ai.behavior.warden;
 
 import com.google.common.collect.ImmutableMap;
+import me.dueris.canvas.event.entity.WardenSonicBoomEvent;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvents;
@@ -47,30 +48,36 @@ public class SonicBoom extends Behavior<Warden> {
 
     @Override
     protected void tick(ServerLevel world, Warden entity, long time) {
-        entity.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).ifPresent((target) -> {
-            entity.getLookControl().setLookAt(target.position());
-        });
-        if (!entity.getBrain().hasMemoryValue(MemoryModuleType.SONIC_BOOM_SOUND_DELAY) && !entity.getBrain().hasMemoryValue(MemoryModuleType.SONIC_BOOM_SOUND_COOLDOWN)) {
-            entity.getBrain().setMemoryWithExpiry(MemoryModuleType.SONIC_BOOM_SOUND_COOLDOWN, Unit.INSTANCE, (long)(DURATION - TICKS_BEFORE_PLAYING_SOUND));
-            entity.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).filter(entity::canTargetEntity).filter((target) -> {
-                return entity.closerThan(target, 15.0D, 20.0D);
-            }).ifPresent((target) -> {
-                Vec3 vec3 = entity.position().add(0.0D, (double)1.6F, 0.0D);
-                Vec3 vec32 = target.getEyePosition().subtract(vec3);
-                Vec3 vec33 = vec32.normalize();
+        // Canvas start - WardenSonicBoomEvent
+        WardenSonicBoomEvent wardenSonicBoomEvent = new WardenSonicBoomEvent((org.bukkit.entity.Warden) entity.getBukkitEntity());
+        wardenSonicBoomEvent.callEvent();
+        if(!wardenSonicBoomEvent.isCanceled()){
+            entity.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).ifPresent((target) -> {
+                entity.getLookControl().setLookAt(target.position());
+            });
+            if (!entity.getBrain().hasMemoryValue(MemoryModuleType.SONIC_BOOM_SOUND_DELAY) && !entity.getBrain().hasMemoryValue(MemoryModuleType.SONIC_BOOM_SOUND_COOLDOWN)) {
+                entity.getBrain().setMemoryWithExpiry(MemoryModuleType.SONIC_BOOM_SOUND_COOLDOWN, Unit.INSTANCE, (long)(DURATION - TICKS_BEFORE_PLAYING_SOUND));
+                entity.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).filter(entity::canTargetEntity).filter((target) -> {
+                    return entity.closerThan(target, 15.0D, 20.0D);
+                }).ifPresent((target) -> {
+                    Vec3 vec3 = entity.position().add(0.0D, (double)1.6F, 0.0D);
+                    Vec3 vec32 = target.getEyePosition().subtract(vec3);
+                    Vec3 vec33 = vec32.normalize();
 
-                for(int i = 1; i < Mth.floor(vec32.length()) + 7; ++i) {
-                    Vec3 vec34 = vec3.add(vec33.scale((double)i));
-                    world.sendParticles(ParticleTypes.SONIC_BOOM, vec34.x, vec34.y, vec34.z, 1, 0.0D, 0.0D, 0.0D, 0.0D);
-                }
+                    for(int i = 1; i < Mth.floor(vec32.length()) + 7; ++i) {
+                        Vec3 vec34 = vec3.add(vec33.scale((double)i));
+                        world.sendParticles(ParticleTypes.SONIC_BOOM, vec34.x, vec34.y, vec34.z, 1, 0.0D, 0.0D, 0.0D, 0.0D);
+                    }
 
-                entity.playSound(SoundEvents.WARDEN_SONIC_BOOM, 3.0F, 1.0F);
-                target.hurt(world.damageSources().sonicBoom(entity), 10.0F);
-                double d = 0.5D * (1.0D - target.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE));
-                double e = 2.5D * (1.0D - target.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE));
-                target.push(vec33.x() * e, vec33.y() * d, vec33.z() * e, entity); // Paper
-            });
+                    entity.playSound(SoundEvents.WARDEN_SONIC_BOOM, 3.0F, 1.0F);
+                    target.hurt(world.damageSources().sonicBoom(entity), wardenSonicBoomEvent.getDamage());
+                    double d = 0.5D * (1.0D - target.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE));
+                    double e = 2.5D * (1.0D - target.getAttributeValue(Attributes.KNOCKBACK_RESISTANCE));
+                    target.push(vec33.x() * e, vec33.y() * d, vec33.z() * e, entity); // Paper
+                });
+            }
         }
+        // Canvas end
     }
 
     @Override
