From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris MC <purplewolf.mc1@gmail.com>
Date: Fri, 8 Dec 2023 04:47:13 +0000
Subject: [PATCH] Add more Entity APIs


diff --git a/src/main/java/io/papermc/paper/entity/PaperSchoolableFish.java b/src/main/java/io/papermc/paper/entity/PaperSchoolableFish.java
index 41bf71d116ffc5431586ce54abba7f8def6c1dcf..e5afe1989a65870624e9408e52223201d7e841c3 100644
--- a/src/main/java/io/papermc/paper/entity/PaperSchoolableFish.java
+++ b/src/main/java/io/papermc/paper/entity/PaperSchoolableFish.java
@@ -49,4 +49,14 @@ public class PaperSchoolableFish extends CraftFish implements SchoolableFish {
 
         return (SchoolableFish) leader.getBukkitEntity();
     }
+
+    @Override
+    public void moveToLeader() {
+        this.getHandle().pathToLeader();
+    }
+
+    @Override
+    public boolean inRangeOfLeader() {
+        return this.getHandle().inRangeOfLeader();
+    }
 }
diff --git a/src/main/java/me/dueris/canvas/entity/CraftMobType.java b/src/main/java/me/dueris/canvas/entity/CraftMobType.java
new file mode 100644
index 0000000000000000000000000000000000000000..2afb1fcb15dab7be11bfa690cd3098431964fd99
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/entity/CraftMobType.java
@@ -0,0 +1,46 @@
+package me.dueris.canvas.entity;
+
+
+import static net.minecraft.world.entity.MobType.ARTHROPOD;
+import static net.minecraft.world.entity.MobType.ILLAGER;
+import static net.minecraft.world.entity.MobType.UNDEAD;
+import static net.minecraft.world.entity.MobType.UNDEFINED;
+import static net.minecraft.world.entity.MobType.WATER;
+
+public class CraftMobType {
+    public static net.minecraft.world.entity.MobType canvasToNMS(me.dueris.canvas.entity.MobType mobType){
+        switch (mobType){
+            case WATER -> {
+                return WATER;
+            }
+            case ILLAGER -> {
+                return ILLAGER;
+            }
+            case UNDEAD -> {
+                return UNDEAD;
+            }
+            case ARTHROPOD -> {
+                return ARTHROPOD;
+            }
+            case UNDEFINED -> {
+                return UNDEFINED;
+            }
+        }
+        return UNDEFINED;
+    }
+
+    public static me.dueris.canvas.entity.MobType nmsToCanvas(net.minecraft.world.entity.MobType mobType) {
+        if (mobType.equals(WATER)) {
+            return MobType.WATER;
+        } else if (mobType.equals(ILLAGER)) {
+            return MobType.ILLAGER;
+        } else if (mobType.equals(UNDEAD)) {
+            return MobType.UNDEAD;
+        } else if (mobType.equals(ARTHROPOD)) {
+            return MobType.ARTHROPOD;
+        } else if (mobType.equals(UNDEFINED)) {
+            return MobType.UNDEFINED;
+        }
+        return MobType.UNDEFINED;
+    }
+}
diff --git a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
index 1b8f5680c4122c7b6b19e2bc1ed6295caa024622..e29ec5ce2c0426fc95013452af7c755e03c2bd93 100644
--- a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
+++ b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
@@ -207,7 +207,9 @@ public class ExperienceOrb extends Entity {
             while (iterator.hasNext()) {
                 ExperienceOrb entityexperienceorb = (ExperienceOrb) iterator.next();
 
-                this.merge(entityexperienceorb);
+                if(this.allowMerge){
+                    this.merge(entityexperienceorb);
+                }
             }
         }
 
@@ -250,20 +252,25 @@ public class ExperienceOrb extends Entity {
             return false;
         }
     }
+    // Canvas start
+    public boolean allowMerge = true;
 
     private boolean canMerge(ExperienceOrb other) {
-        return other != this && ExperienceOrb.canMerge(other, this.getId(), this.value);
+        return other != this && ExperienceOrb.canMerge(other, this.getId(), this.value) && this.allowMerge;
     }
 
     private static boolean canMerge(ExperienceOrb orb, int seed, int amount) {
-        return !orb.isRemoved() && (orb.getId() - seed) % 40 == 0 && orb.value == amount;
+        return !orb.isRemoved() && (orb.getId() - seed) % 40 == 0 && orb.value == amount && orb.allowMerge;
     }
 
     private void merge(ExperienceOrb other) {
-        this.count += other.count;
-        this.age = Math.min(this.age, other.age);
-        other.discard();
+        if(this.allowMerge && other.allowMerge) {
+            this.count += other.count;
+            this.age = Math.min(this.age, other.age);
+            other.discard();
+        }
     }
+    // Canvas end
 
     private void setUnderwaterMovement() {
         Vec3 vec3d = this.getDeltaMovement();
diff --git a/src/main/java/net/minecraft/world/entity/GlowSquid.java b/src/main/java/net/minecraft/world/entity/GlowSquid.java
index b18cbe85330e26de6f6cbfcc3d51a7418bd93877..b39002c9134e60a21fa0709e6017fbc001857793 100644
--- a/src/main/java/net/minecraft/world/entity/GlowSquid.java
+++ b/src/main/java/net/minecraft/world/entity/GlowSquid.java
@@ -57,7 +57,7 @@ public class GlowSquid extends Squid {
     }
 
     @Override
-    protected ParticleOptions getInkParticle() {
+    public ParticleOptions getInkParticle() { // Canvas - protected -> public
         return ParticleTypes.GLOW_SQUID_INK;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index b354edc9bf2565d95abdae375983233eb96d63bb..30d157aa33682928c9bcd8a5dab6237b3847f9aa 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -2617,8 +2617,15 @@ public abstract class LivingEntity extends Entity implements Attackable {
     }
 
     public MobType getMobType() {
-        return MobType.UNDEFINED;
+        return this.mobType; // Canvas
     }
+    // Canvas start
+    MobType mobType = MobType.UNDEFINED;
+
+    public void setMobType(MobType mobType){
+        this.mobType = mobType;
+    }
+    // Canvas end
 
     public ItemStack getMainHandItem() {
         return this.getItemBySlot(EquipmentSlot.MAINHAND);
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 55458453077e3d531215e4c5946ba5dbc5c365fe..e9e194f11049e1463ee5f8f8eca263fc9874bec8 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -172,6 +172,12 @@ public abstract class Mob extends LivingEntity implements Targeting {
 
     protected void registerGoals() {}
 
+    // Canvas start
+    public void removeGoal(Goal goal){
+        this.goalSelector.removeGoal(goal);
+    }
+    // Canvas end
+
     public static AttributeSupplier.Builder createMobAttributes() {
         return LivingEntity.createLivingAttributes().add(Attributes.FOLLOW_RANGE, 16.0D).add(Attributes.ATTACK_KNOCKBACK);
     }
@@ -1752,7 +1758,7 @@ public abstract class Mob extends LivingEntity implements Targeting {
     }
 
     @Override
-    protected void jumpInLiquid(TagKey<Fluid> fluid) {
+    public void jumpInLiquid(TagKey<Fluid> fluid) { // Canvas - protected -> public
         if (this.getNavigation().canFloat()) {
             super.jumpInLiquid(fluid);
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
index 00cf59524477ec79d4354cc403fc3e75a63b81a0..bcc6575331379e0e1c0bb455968bed87bf8e158f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
@@ -29,7 +29,7 @@ public class TemptGoal extends Goal {
     protected LivingEntity player; // CraftBukkit
     private int calmDown;
     private boolean isRunning;
-    private final Ingredient items;
+    public Ingredient items; // Canvas - private -> public && final -> !final
     private final boolean canScare;
 
     public TemptGoal(PathfinderMob entity, double speed, Ingredient food, boolean canBeScared) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
index 2ccfaab0a02cf5ff9779e250fb79a75a9852e10d..5d5ca33f80c64812f30422d17875e9cc65a22bec 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
@@ -57,12 +57,19 @@ public abstract class AbstractFish extends WaterAnimal implements Bucketable {
     public boolean removeWhenFarAway(double distanceSquared) {
         return !this.fromBucket() && !this.hasCustomName();
     }
+    // Canvas start
+    private int maxClusterSize = 8;
 
     @Override
     public int getMaxSpawnClusterSize() {
-        return 8;
+        return this.maxClusterSize;
     }
 
+    public void setMaxSpawnClusterSize(int i){
+        this.maxClusterSize = i;
+    }
+    // Canvas end
+
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
@@ -151,10 +158,18 @@ public abstract class AbstractFish extends WaterAnimal implements Bucketable {
         return SoundEvents.BUCKET_FILL_FISH;
     }
 
-    protected boolean canRandomSwim() {
-        return true;
+    public boolean canRandomSwim() { // Canvas - protected -> public
+        return this.canRandomSwim; // Canvas - use customizable value
     }
 
+    // Canvas start
+    public void setCanRandomSwim(boolean can){
+        this.canRandomSwim = can;
+    }
+
+    private boolean canRandomSwim = true;
+    // Canvas end
+
     protected abstract SoundEvent getFlopSound();
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java
index 86b437836cb4b1f6e8ca9acd5f1f93b925cf9e51..a4800322d72f368ba67cdad8f79881daec6765f6 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java
@@ -36,11 +36,19 @@ public abstract class AbstractSchoolingFish extends AbstractFish {
         return super.getMaxSpawnClusterSize();
     }
 
+    // Canvas start - apply AbstractFish patches
     @Override
-    protected boolean canRandomSwim() {
-        return !this.isFollower();
+    public boolean canRandomSwim() {
+        return this.canRandomSwim;
     }
 
+    public void setCanRandomSwim(boolean can){
+        this.canRandomSwim = can;
+    }
+
+    private boolean canRandomSwim = true;
+    // Canvas end
+
     public boolean isFollower() {
         return this.leader != null && this.leader.isAlive();
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index bdb78cc701543cfe91a6bafd1786fe2ea0bf1ddc..5f5299ab20ee8ba405307c1cc21f72ee6013b371 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -68,6 +68,7 @@ import net.minecraft.world.entity.ai.util.AirRandomPos;
 import net.minecraft.world.entity.ai.util.HoverRandomPos;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiRecord;
+import net.minecraft.world.entity.animal.Bee.BeeLocateHiveGoal;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.crafting.Ingredient;
@@ -123,7 +124,16 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     public static final String TAG_HAS_NECTAR = "HasNectar";
     public static final String TAG_FLOWER_POS = "FlowerPos";
     public static final String TAG_HIVE_POS = "HivePos";
-    private static final UniformInt PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);
+    public UniformInt PERSISTENT_ANGER_TIME; // Canvas - private static/final -> public
+    // Canvas start - add Enderman anger customization features
+    public int minRangeAnger = 20;
+    public int maxRangeAnger = 39;
+    public void setPersistentAngerTime(int min, int max){
+        this.PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(min, max);
+        this.maxRangeAnger = max;
+        this.minRangeAnger = min;
+    }
+    // Canvas end
     @Nullable
     private UUID persistentAngerTarget;
     private float rollAmount;
@@ -140,14 +150,26 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     BlockPos savedFlowerPos;
     @Nullable
     public BlockPos hivePos;
-    Bee.BeePollinateGoal beePollinateGoal;
-    Bee.BeeGoToHiveGoal goToHiveGoal;
-    private Bee.BeeGoToKnownFlowerGoal goToKnownFlowerGoal;
+    public Bee.BeePollinateGoal beePollinateGoal; // Canvas - private -> public
+    public Bee.BeeGoToHiveGoal goToHiveGoal;
+    public Bee.BeeGoToKnownFlowerGoal goToKnownFlowerGoal; // Canvas - private -> public
     private int underWaterTicks;
+    // Canvas start
+    private int minRollFl;
+    private int maxRollFl;
+
+    public void rerollFlowerLocateTimer(){
+        this.remainingCooldownBeforeLocatingNewFlower = Mth.nextInt(this.random, minRollFl, maxRollFl);
+    }
+
+    public int getFlowerLocateTimer(){
+        return this.remainingCooldownBeforeLocatingNewFlower;
+    }
+    // Canvas end
 
     public Bee(EntityType<? extends Bee> type, Level world) {
         super(type, world);
-        this.remainingCooldownBeforeLocatingNewFlower = Mth.nextInt(this.random, 20, 60);
+        this.remainingCooldownBeforeLocatingNewFlower = Mth.nextInt(this.random, minRollFl, maxRollFl); // Canvas
         final org.purpurmc.purpur.controller.FlyingMoveControllerWASD flyingController = new org.purpurmc.purpur.controller.FlyingMoveControllerWASD(this, 0.25F, 1.0F, false); // Purpur
         // Paper start - apply gravity to bees when they get stuck in the void, fixes MC-167279
         class BeeFlyingMoveControl extends FlyingMoveControl {
@@ -231,18 +253,29 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     public float getWalkTargetValue(BlockPos pos, LevelReader world) {
         return world.getBlockState(pos).isAir() ? 10.0F : 0.0F;
     }
+    // Canvas start
+    
+    public BeeLocateHiveGoal locateHiveGoal;
+    public BeeEnterHiveGoal enterHiveGoal;
+    // Canvas end
 
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(0, new Bee.BeeAttackGoal(this, 1.399999976158142D, true));
-        this.goalSelector.addGoal(1, new Bee.BeeEnterHiveGoal());
+        // Canvas start
+        this.enterHiveGoal = new Bee.BeeEnterHiveGoal();
+        this.goalSelector.addGoal(1, this.enterHiveGoal);
+        // Canvas end
         this.goalSelector.addGoal(2, new BreedGoal(this, 1.0D));
         this.goalSelector.addGoal(3, new TemptGoal(this, 1.25D, Ingredient.of(ItemTags.FLOWERS), false));
         this.beePollinateGoal = new Bee.BeePollinateGoal();
         this.goalSelector.addGoal(4, this.beePollinateGoal);
         this.goalSelector.addGoal(5, new FollowParentGoal(this, 1.25D));
-        this.goalSelector.addGoal(5, new Bee.BeeLocateHiveGoal());
+        // Canvas start
+        this.locateHiveGoal = new Bee.BeeLocateHiveGoal();
+        this.goalSelector.addGoal(5, this.locateHiveGoal);
+        // Canvas end
         this.goToHiveGoal = new Bee.BeeGoToHiveGoal();
         this.goalSelector.addGoal(5, this.goToHiveGoal);
         this.goToKnownFlowerGoal = new Bee.BeeGoToKnownFlowerGoal();
@@ -522,7 +555,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
     @Override
     public void startPersistentAngerTimer() {
-        this.setRemainingPersistentAngerTime(Bee.PERSISTENT_ANGER_TIME.sample(this.random));
+        this.setRemainingPersistentAngerTime(this.PERSISTENT_ANGER_TIME.sample(this.random)); // Canvas - use public
     }
 
     private boolean doesHiveHaveSpace(BlockPos pos) {
@@ -761,7 +794,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     }
 
     @Override
-    protected void jumpInLiquid(TagKey<Fluid> fluid) {
+    public void jumpInLiquid(TagKey<Fluid> fluid) { // Canvas - protected -> public
         this.setDeltaMovement(this.getDeltaMovement().add(0.0D, 0.01D, 0.0D));
     }
 
@@ -774,7 +807,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         return pos.closerThan(this.blockPosition(), (double) distance);
     }
 
-    private class BeePollinateGoal extends Bee.BaseBeeGoal {
+    public class BeePollinateGoal extends Bee.BaseBeeGoal { // Canvas - private -> public
 
         private static final int MIN_POLLINATION_TICKS = 400;
         private static final int MIN_FIND_FLOWER_RETRY_COOLDOWN = 20;
@@ -999,7 +1032,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         }
     }
 
-    private class BeeEnterHiveGoal extends Bee.BaseBeeGoal {
+    public class BeeEnterHiveGoal extends Bee.BaseBeeGoal { // Canvas - private -> public
 
         BeeEnterHiveGoal() {
             super();
@@ -1044,7 +1077,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         }
     }
 
-    private class BeeLocateHiveGoal extends Bee.BaseBeeGoal {
+    public class BeeLocateHiveGoal extends Bee.BaseBeeGoal { // Canvas - private -> public
 
         BeeLocateHiveGoal() {
             super();
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cat.java b/src/main/java/net/minecraft/world/entity/animal/Cat.java
index 6e5b4a50b8d2dddbd7f099426b4866b35bcb798a..db3c824104b681b50621dfb6efe3bb4812f8e476 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cat.java
@@ -154,7 +154,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
         this.goalSelector.addGoal(1, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(1, new PanicGoal(this, 1.5D));
         this.goalSelector.addGoal(2, new SitWhenOrderedToGoal(this));
-        this.goalSelector.addGoal(3, new Cat.CatRelaxOnOwnerGoal(this));
+        this.goalSelector.addGoal(3, new Cat.CatRelaxOnOwnerGoal(this, this.getAllowMorningGift()));
         this.goalSelector.addGoal(4, this.temptGoal);
         this.goalSelector.addGoal(5, new CatLieOnBedGoal(this, 1.1D, 8));
         this.goalSelector.addGoal(6, new FollowOwnerGoal(this, 1.0D, 10.0F, 5.0F, false));
@@ -525,6 +525,44 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
 
     }
 
+    // Canvas start
+    public boolean allowMorningGift = true;
+
+    public void setAllowMorningGift(boolean allow){
+        this.allowMorningGift = allow;
+    }
+
+    public boolean getAllowMorningGift(){
+        return allowMorningGift;
+    }
+
+    public void giveMorningGift() {
+        RandomSource randomsource = getRandom();
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
+
+        blockposition_mutableblockposition.set(isLeashed() ? getLeashHolder().blockPosition() : blockPosition());
+        randomTeleport((double) (blockposition_mutableblockposition.getX() + randomsource.nextInt(11) - 5), (double) (blockposition_mutableblockposition.getY() + randomsource.nextInt(5) - 2), (double) (blockposition_mutableblockposition.getZ() + randomsource.nextInt(11) - 5), false);
+        blockposition_mutableblockposition.set(blockPosition());
+        LootTable loottable = level().getServer().getLootData().getLootTable(BuiltInLootTables.CAT_MORNING_GIFT);
+        LootParams lootparams = (new LootParams.Builder((ServerLevel) level())).withParameter(LootContextParams.ORIGIN, position()).withParameter(LootContextParams.THIS_ENTITY, this).create(LootContextParamSets.GIFT);
+        List<ItemStack> list = loottable.getRandomItems(lootparams);
+        Iterator iterator = list.iterator();
+
+        while (iterator.hasNext()) {
+            ItemStack itemstack = (ItemStack) iterator.next();
+
+            ItemEntity entityitem = new ItemEntity(level(), (double) blockposition_mutableblockposition.getX() - (double) Mth.sin(yBodyRot * 0.017453292F), (double) blockposition_mutableblockposition.getY(), (double) blockposition_mutableblockposition.getZ() + (double) Mth.cos(yBodyRot * 0.017453292F), itemstack);
+            org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
+            entityitem.level().getCraftServer().getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                continue;
+            }
+            level().addFreshEntity(entityitem);
+        }
+    }
+
+    // Canvas end
+
     @Override
     public boolean isSteppingCarefully() {
         return this.isCrouching() || super.isSteppingCarefully();
@@ -568,7 +606,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
         }
     }
 
-    private static class CatRelaxOnOwnerGoal extends Goal {
+    public class CatRelaxOnOwnerGoal extends Goal {
 
         private final Cat cat;
         @Nullable
@@ -576,9 +614,11 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
         @Nullable
         private BlockPos goalPos;
         private int onBedTicks;
+        public boolean allowGift;
 
-        public CatRelaxOnOwnerGoal(Cat cat) {
+        public CatRelaxOnOwnerGoal(Cat cat, boolean allowMorningGift) {
             this.cat = cat;
+            this.allowGift = allowMorningGift;
         }
 
         @Override
@@ -664,33 +704,37 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
             this.cat.getNavigation().stop();
         }
 
-        private void giveMorningGift() {
-            RandomSource randomsource = this.cat.getRandom();
-            BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
-
-            blockposition_mutableblockposition.set(this.cat.isLeashed() ? this.cat.getLeashHolder().blockPosition() : this.cat.blockPosition());
-            this.cat.randomTeleport((double) (blockposition_mutableblockposition.getX() + randomsource.nextInt(11) - 5), (double) (blockposition_mutableblockposition.getY() + randomsource.nextInt(5) - 2), (double) (blockposition_mutableblockposition.getZ() + randomsource.nextInt(11) - 5), false);
-            blockposition_mutableblockposition.set(this.cat.blockPosition());
-            LootTable loottable = this.cat.level().getServer().getLootData().getLootTable(BuiltInLootTables.CAT_MORNING_GIFT);
-            LootParams lootparams = (new LootParams.Builder((ServerLevel) this.cat.level())).withParameter(LootContextParams.ORIGIN, this.cat.position()).withParameter(LootContextParams.THIS_ENTITY, this.cat).create(LootContextParamSets.GIFT);
-            List<ItemStack> list = loottable.getRandomItems(lootparams);
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                ItemStack itemstack = (ItemStack) iterator.next();
-
-                // CraftBukkit start
-                ItemEntity entityitem = new ItemEntity(this.cat.level(), (double) blockposition_mutableblockposition.getX() - (double) Mth.sin(this.cat.yBodyRot * 0.017453292F), (double) blockposition_mutableblockposition.getY(), (double) blockposition_mutableblockposition.getZ() + (double) Mth.cos(this.cat.yBodyRot * 0.017453292F), itemstack);
-                org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.cat.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
-                entityitem.level().getCraftServer().getPluginManager().callEvent(event);
-                if (event.isCancelled()) {
-                    continue;
+        // Canvas start
+
+        public void giveMorningGift() {
+            if(allowGift){
+                RandomSource randomsource = this.cat.getRandom();
+                BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
+
+                blockposition_mutableblockposition.set(this.cat.isLeashed() ? this.cat.getLeashHolder().blockPosition() : this.cat.blockPosition());
+                this.cat.randomTeleport((double) (blockposition_mutableblockposition.getX() + randomsource.nextInt(11) - 5), (double) (blockposition_mutableblockposition.getY() + randomsource.nextInt(5) - 2), (double) (blockposition_mutableblockposition.getZ() + randomsource.nextInt(11) - 5), false);
+                blockposition_mutableblockposition.set(this.cat.blockPosition());
+                LootTable loottable = this.cat.level().getServer().getLootData().getLootTable(BuiltInLootTables.CAT_MORNING_GIFT);
+                LootParams lootparams = (new LootParams.Builder((ServerLevel) this.cat.level())).withParameter(LootContextParams.ORIGIN, this.cat.position()).withParameter(LootContextParams.THIS_ENTITY, this.cat).create(LootContextParamSets.GIFT);
+                List<ItemStack> list = loottable.getRandomItems(lootparams);
+                Iterator iterator = list.iterator();
+
+                while (iterator.hasNext()) {
+                    ItemStack itemstack = (ItemStack) iterator.next();
+
+                    // CraftBukkit start
+                    ItemEntity entityitem = new ItemEntity(this.cat.level(), (double) blockposition_mutableblockposition.getX() - (double) Mth.sin(this.cat.yBodyRot * 0.017453292F), (double) blockposition_mutableblockposition.getY(), (double) blockposition_mutableblockposition.getZ() + (double) Mth.cos(this.cat.yBodyRot * 0.017453292F), itemstack);
+                    org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.cat.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
+                    entityitem.level().getCraftServer().getPluginManager().callEvent(event);
+                    if (event.isCancelled()) {
+                        continue;
+                    }
+                    this.cat.level().addFreshEntity(entityitem);
+                    // CraftBukkit end
                 }
-                this.cat.level().addFreshEntity(entityitem);
-                // CraftBukkit end
             }
-
         }
+        // Canvas end
 
         @Override
         public void tick() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cow.java b/src/main/java/net/minecraft/world/entity/animal/Cow.java
index 6d00b3cd4a9cb0fc8a9e9c27f37429a25fcf6e9d..cbcc2961a17ce3562904913742ca1186072ea137 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cow.java
@@ -47,8 +47,12 @@ public class Cow extends Animal {
     public Cow(EntityType<? extends Cow> type, Level world) {
         super(type, world);
     }
+    // Canvas start
 
-    // Purpur start
+    public void convertToMushroom(){
+        this.convertTo(EntityType.MOOSHROOM, false);
+    }
+    // Canvas end -/- Purpur start
     @Override
     public boolean isRidable() {
         return level().purpurConfig.cowRidable;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
index ed2769d8049bb304c1ee3b8e162046855951a624..888acdf92f3128539a77204dbfa4612666ea11b6 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
@@ -239,6 +239,19 @@ public class Dolphin extends WaterAnimal {
         this.setGotFish(nbt.getBoolean("GotFish"));
         this.setMoisntessLevel(nbt.getInt("Moistness"));
     }
+    // Canvas start
+    public DolphinSwimToTreasureGoal swimToTreasureGoal;
+    public DolphinSwimWithPlayerGoal swimWithPlayerGoal;
+    public PlayWithItemsGoal playWithItemsGoal;
+    private double swimWithPlayerDistance = 4.0D;
+
+    public void setSwimWithPlayerDistance(double distance){
+        this.goalSelector.removeGoal(swimWithPlayerGoal);
+        this.swimWithPlayerDistance = distance;
+        this.swimWithPlayerGoal = new Dolphin.DolphinSwimWithPlayerGoal(this, swimWithPlayerDistance);
+        this.goalSelector.addGoal(2, this.swimWithPlayerGoal);
+    }
+    // Canvas end
 
     @Override
     protected void registerGoals() {
@@ -246,14 +259,21 @@ public class Dolphin extends WaterAnimal {
         this.goalSelector.addGoal(0, new TryFindWaterGoal(this));
         this.goalSelector.addGoal(1, new MeleeAttackGoal(this, 1.2000000476837158D, true)); // Purpur
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
-        this.goalSelector.addGoal(1, new Dolphin.DolphinSwimToTreasureGoal(this));
-        this.goalSelector.addGoal(2, new Dolphin.DolphinSwimWithPlayerGoal(this, 4.0D));
+        // Canvas start
+        this.swimToTreasureGoal = new Dolphin.DolphinSwimToTreasureGoal(this);
+        this.swimWithPlayerGoal = new Dolphin.DolphinSwimWithPlayerGoal(this, swimWithPlayerDistance);
+        this.goalSelector.addGoal(1, this.swimToTreasureGoal);
+        this.goalSelector.addGoal(2, this.swimWithPlayerGoal);
+        // Canvas end
         this.goalSelector.addGoal(4, new RandomSwimmingGoal(this, 1.0D, 10));
         this.goalSelector.addGoal(4, new RandomLookAroundGoal(this));
         this.goalSelector.addGoal(5, new LookAtPlayerGoal(this, Player.class, 6.0F));
         this.goalSelector.addGoal(5, new DolphinJumpGoal(this, 10));
         //this.goalSelector.addGoal(6, new MeleeAttackGoal(this, 1.2000000476837158D, true)); // Purpur - moved up
-        this.goalSelector.addGoal(8, new Dolphin.PlayWithItemsGoal());
+        // Canvas start
+        this.playWithItemsGoal = new Dolphin.PlayWithItemsGoal();
+        this.goalSelector.addGoal(8, this.playWithItemsGoal);
+        // Canvas end
         this.goalSelector.addGoal(8, new FollowBoatGoal(this));
         this.goalSelector.addGoal(9, new AvoidEntityGoal<>(this, Guardian.class, 8.0F, 1.0D, 1.0D));
         this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
@@ -477,7 +497,7 @@ public class Dolphin extends WaterAnimal {
         return true;
     }
 
-    private static class DolphinSwimToTreasureGoal extends Goal {
+    public static class DolphinSwimToTreasureGoal extends Goal { // Canvas - private -> public
 
         private final Dolphin dolphin;
         private boolean stuck;
@@ -569,7 +589,7 @@ public class Dolphin extends WaterAnimal {
         }
     }
 
-    private static class DolphinSwimWithPlayerGoal extends Goal {
+    public static class DolphinSwimWithPlayerGoal extends Goal { // Canvas - private -> public
 
         private final Dolphin dolphin;
         private final double speedModifier;
@@ -620,7 +640,7 @@ public class Dolphin extends WaterAnimal {
         }
     }
 
-    private class PlayWithItemsGoal extends Goal {
+    public class PlayWithItemsGoal extends Goal { // Canvas - private -> public
 
         private int cooldown;
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index 77d40aad6e336cac7ee4e4adef159571181ba44a..3df7c80cc883fbd1b9bccf24561e6a4ee5477355 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -211,6 +211,14 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         this.entityData.define(Fox.DATA_TYPE_ID, 0);
         this.entityData.define(Fox.DATA_FLAGS_ID, (byte) 0);
     }
+    // Canvas start
+    public FaceplantGoal faceplantGoal;
+    public StalkPreyGoal stalkPreyGoal;
+    public SeekShelterGoal seekShelterGoal;
+    public SleepGoal sleepGoal;
+    public FoxSearchForItemsGoal searchForItemsGoal;
+    public FoxPounceGoal pounceGoal;
+    // Canvas end
 
     @Override
     protected void registerGoals() {
@@ -224,7 +232,10 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         this.goalSelector.addGoal(0, new Fox.FoxFloatGoal());
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(0, new ClimbOnTopOfPowderSnowGoal(this, this.level()));
-        this.goalSelector.addGoal(1, new Fox.FaceplantGoal());
+        // Canvas start
+        this.faceplantGoal = new FaceplantGoal();
+        this.goalSelector.addGoal(1, faceplantGoal);
+        // Canvas end
         this.goalSelector.addGoal(2, new Fox.FoxPanicGoal(2.2D));
         this.goalSelector.addGoal(3, new Fox.FoxBreedGoal(1.0D));
         this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Player.class, 16.0F, 1.6D, 1.4D, (entityliving) -> {
@@ -236,17 +247,28 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, PolarBear.class, 8.0F, 1.6D, 1.4D, (entityliving) -> {
             return !this.isDefending();
         }));
-        this.goalSelector.addGoal(5, new Fox.StalkPreyGoal());
-        this.goalSelector.addGoal(6, new Fox.FoxPounceGoal());
-        this.goalSelector.addGoal(6, new Fox.SeekShelterGoal(1.25D));
+        // Canvas start
+        this.stalkPreyGoal = new StalkPreyGoal();
+        this.pounceGoal = new FoxPounceGoal();
+        this.seekShelterGoal = new SeekShelterGoal(1.25D);
+        this.goalSelector.addGoal(5, stalkPreyGoal);
+        this.goalSelector.addGoal(6, pounceGoal);
+        this.goalSelector.addGoal(6, seekShelterGoal);
+        // Canvas end
         this.goalSelector.addGoal(7, new Fox.FoxMeleeAttackGoal(1.2000000476837158D, true));
-        this.goalSelector.addGoal(7, new Fox.SleepGoal());
+        // Canvas start
+        this.sleepGoal = new SleepGoal();
+        this.goalSelector.addGoal(7, sleepGoal);
+        // Canvas end
         this.goalSelector.addGoal(8, new Fox.FoxFollowParentGoal(this, 1.25D));
         this.goalSelector.addGoal(9, new Fox.FoxStrollThroughVillageGoal(32, 200));
         this.goalSelector.addGoal(10, new Fox.FoxEatBerriesGoal(1.2000000476837158D, 12, 1));
         this.goalSelector.addGoal(10, new LeapAtTargetGoal(this, 0.4F));
         this.goalSelector.addGoal(11, new WaterAvoidingRandomStrollGoal(this, 1.0D));
-        this.goalSelector.addGoal(11, new Fox.FoxSearchForItemsGoal());
+        // Canvas start
+        this.searchForItemsGoal = new FoxSearchForItemsGoal();
+        this.goalSelector.addGoal(11, searchForItemsGoal);
+        // Canvas end
         this.goalSelector.addGoal(12, new Fox.FoxLookAtPlayerGoal(this, Player.class, 24.0F));
         this.goalSelector.addGoal(13, new Fox.PerchAndSearchGoal());
         this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
@@ -912,7 +934,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
     }
 
-    private class FaceplantGoal extends Goal {
+    public class FaceplantGoal extends Goal { // Canvas - private -> public
 
         int countdown;
 
@@ -1026,7 +1048,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
     }
 
-    private class StalkPreyGoal extends Goal {
+    public class StalkPreyGoal extends Goal { // Canvas - private -> public
 
         public StalkPreyGoal() {
             this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
@@ -1190,7 +1212,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
     }
 
-    private class SeekShelterGoal extends FleeSunGoal {
+    public class SeekShelterGoal extends FleeSunGoal { // Canvas - private -> public
 
         private int interval = reducedTickDelay(100);
 
@@ -1252,7 +1274,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
     }
 
-    private class SleepGoal extends Fox.FoxBehaviorGoal {
+    public class SleepGoal extends Fox.FoxBehaviorGoal { // Canvas - private -> public
 
         private static final int WAIT_TIME_BEFORE_SLEEP = reducedTickDelay(140);
         private int countdown;
@@ -1450,7 +1472,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
     }
 
-    private class FoxSearchForItemsGoal extends Goal {
+    public class FoxSearchForItemsGoal extends Goal { // Canvas - private -> public
 
         public FoxSearchForItemsGoal() {
             this.setFlags(EnumSet.of(Goal.Flag.MOVE));
diff --git a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
index 64aba511e615983988cdb6a0fd45b7d9d4f2f16d..edd90334b464b96dc4a20784e90fc6bfe734a736 100644
--- a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
@@ -4,6 +4,7 @@ import com.google.common.collect.ImmutableList;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.UUID;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
@@ -41,6 +42,7 @@ import net.minecraft.world.entity.ai.goal.target.ResetUniversalAngerTargetGoal;
 import net.minecraft.world.entity.monster.Creeper;
 import net.minecraft.world.entity.monster.Enemy;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.level.Level;
@@ -49,6 +51,8 @@ import net.minecraft.world.level.NaturalSpawner;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.Material;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 
 public class IronGolem extends AbstractGolem implements NeutralMob {
 
@@ -230,6 +234,7 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
     @Override
     public boolean doHurtTarget(Entity target) {
         this.attackAnimationTick = 10;
+        Vec3 velocity = translateIntToVec3(getFlingVelocity()); // Canvas
         this.level().broadcastEntityEvent(this, (byte) 4);
         float f = this.getAttackDamage();
         float f1 = (int) f > 0 ? f / 2.0F + (float) this.random.nextInt((int) f) : f;
@@ -249,7 +254,8 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
             double d1 = d0;
             double d2 = Math.max(0.0D, 1.0D - d1);
 
-            target.setDeltaMovement(target.getDeltaMovement().add(0.0D, 0.4000000059604645D * d2, 0.0D));
+            target.setDeltaMovement(target.getDeltaMovement().add(velocity)); // Canvas
+            this.setRepairItem(Material.IRON_INGOT);
             this.doEnchantDamageEffects(this, target);
         }
 
@@ -257,6 +263,22 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
         return flag;
     }
 
+    // Canvas start
+    private static double yVelocity = 0.4000000059604645D;
+
+    public void setFlingVelocity(double newYVelocity) {
+        yVelocity = newYVelocity;
+    }
+
+    public double getFlingVelocity(){
+        return yVelocity;
+    }
+
+    private Vec3 translateIntToVec3(double amount) {
+        return new Vec3(0.0D, amount * yVelocity, 0.0D);
+    }
+    // Canvas end
+
     @Override
     public boolean hurt(DamageSource source, float amount) {
         IronGolem.Crackiness entityirongolem_cracklevel = this.getCrackiness();
@@ -317,7 +339,7 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
     protected InteractionResult mobInteract(Player player, InteractionHand hand) {
         ItemStack itemstack = player.getItemInHand(hand);
 
-        if (!itemstack.is(Items.IRON_INGOT)) {
+        if (!itemstack.is(repairitem) || !canRepair) { // Canvas
             return tryRide(player, hand); // Purpur
         } else {
             float f = this.getHealth();
@@ -339,6 +361,20 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
         }
     }
 
+    // Canvas start
+    public boolean canRepair = true;
+
+    public void setCanRepair(boolean can){
+        canRepair = can;
+    }
+
+    public Item repairitem = Items.IRON_INGOT;
+
+    public void setRepairItem(Material material){
+        repairitem = CraftMagicNumbers.getItem(material);
+    }
+    // Canvas end
+
     @Override
     protected void playStepSound(BlockPos pos, BlockState state) {
         this.playSound(SoundEvents.IRON_GOLEM_STEP, 1.0F, 1.0F);
diff --git a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
index 6ce116dc3173d17b19c4c03fe9cf494dd022f0d5..81cca115e02a935d08f3268ed261c8557e1e408b 100644
--- a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
@@ -62,8 +62,12 @@ public class MushroomCow extends Cow implements Shearable, VariantHolder<Mushroo
     public MushroomCow(EntityType<? extends MushroomCow> type, Level world) {
         super(type, world);
     }
+    // Canvas start
 
-    // Purpur start
+    public void convertToNormal(){
+        this.convertTo(EntityType.COW, false);
+    }
+    // Canvas end -/- Purpur start
     @Override
     public boolean isRidable() {
         return level().purpurConfig.mooshroomRidable;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Panda.java b/src/main/java/net/minecraft/world/entity/animal/Panda.java
index 97c38b72b998bdf397c72d3ea08fd93186585f30..ad6091bb5b62c904089fb2c2201fc5a59870bb95 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Panda.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Panda.java
@@ -51,6 +51,7 @@ import net.minecraft.world.entity.ai.goal.TemptGoal;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
+import net.minecraft.world.entity.animal.Panda.PandaSneezeGoal;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.player.Player;
@@ -318,6 +319,11 @@ public class Panda extends Animal {
 
         return entitypanda;
     }
+    // Canvas start
+    public PandaSneezeGoal sneezGoal;
+    public PandaLieOnBackGoal lieOnBackGoal;
+    public PandaRollGoal rollGoal;
+    // Canvas end
 
     @Override
     protected void registerGoals() {
@@ -330,12 +336,18 @@ public class Panda extends Animal {
         this.goalSelector.addGoal(6, new Panda.PandaAvoidGoal<>(this, Player.class, 8.0F, 2.0D, 2.0D));
         this.goalSelector.addGoal(6, new Panda.PandaAvoidGoal<>(this, Monster.class, 4.0F, 2.0D, 2.0D));
         this.goalSelector.addGoal(7, new Panda.PandaSitGoal());
-        this.goalSelector.addGoal(8, new Panda.PandaLieOnBackGoal(this));
-        this.goalSelector.addGoal(8, new Panda.PandaSneezeGoal(this));
+        // Canvas start
+        this.sneezGoal = new PandaSneezeGoal(this);
+        this.goalSelector.addGoal(8, this.sneezGoal);
+        this.lieOnBackGoal = new PandaLieOnBackGoal(this);
+        this.goalSelector.addGoal(8, this.lieOnBackGoal);
+        this.rollGoal = new PandaRollGoal(this);
+        this.goalSelector.addGoal(12, this.rollGoal);
+        // Canvas end
         this.lookAtPlayerGoal = new Panda.PandaLookAtPlayerGoal(this, Player.class, 6.0F);
         this.goalSelector.addGoal(9, this.lookAtPlayerGoal);
         this.goalSelector.addGoal(10, new RandomLookAroundGoal(this));
-        this.goalSelector.addGoal(12, new Panda.PandaRollGoal(this));
+//         this.goalSelector.addGoal(12, new Panda.PandaRollGoal(this));
         this.goalSelector.addGoal(13, new FollowParentGoal(this, 1.25D));
         this.goalSelector.addGoal(14, new WaterAvoidingRandomStrollGoal(this, 1.0D));
         this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
@@ -541,7 +553,7 @@ public class Panda extends Animal {
         return Mth.lerp(tickDelta, this.rollAmountO, this.rollAmount);
     }
 
-    private void handleRoll() {
+    public void handleRoll() { // Canvas - private -> public
         ++this.rollCounter;
         if (this.rollCounter > 32) {
             this.roll(false);
@@ -1011,7 +1023,7 @@ public class Panda extends Animal {
         }
     }
 
-    private static class PandaLieOnBackGoal extends Goal {
+    public static class PandaLieOnBackGoal extends Goal { // Canvas - private -> public
 
         private final Panda panda;
         private int cooldown;
@@ -1043,7 +1055,7 @@ public class Panda extends Animal {
         }
     }
 
-    private static class PandaSneezeGoal extends Goal {
+    public static class PandaSneezeGoal extends Goal { // Canvas - private -> public
 
         private final Panda panda;
 
@@ -1113,7 +1125,7 @@ public class Panda extends Animal {
         }
     }
 
-    private static class PandaRollGoal extends Goal {
+    public static class PandaRollGoal extends Goal { // Canvas - private -> public
 
         private final Panda panda;
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Parrot.java b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
index 351b580611bf4b92d7addcc402c3276f7cb4e639..1b4cde90ac8192f37967c02c30539b722b141964 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Parrot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
@@ -70,6 +70,8 @@ import net.minecraft.world.level.block.LeavesBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.phys.Vec3;
+
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.joml.Vector3f;
 
 public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot.Variant>, FlyingAnimal {
@@ -80,7 +82,16 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
             return entityinsentient != null && Parrot.MOB_SOUND_MAP.containsKey(entityinsentient.getType());
         }
     };
-    private static final Item POISONOUS_FOOD = Items.COOKIE;
+    private Item POISONOUS_FOOD = Items.COOKIE; // Canvas - static/final -> private
+    // Canvas start
+    public void setPoisonousFood(org.bukkit.Material material){
+        this.POISONOUS_FOOD = CraftMagicNumbers.getItem(material);
+    }
+
+    public org.bukkit.Material getPoisonousFood(){
+        return CraftMagicNumbers.getMaterial(this.POISONOUS_FOOD);
+    }
+    // Canvas end
     private static final Set<Item> TAME_FOOD = Sets.newHashSet(new Item[]{Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS, Items.TORCHFLOWER_SEEDS, Items.PITCHER_POD});
     static final Map<EntityType<?>, SoundEvent> MOB_SOUND_MAP = (Map) Util.make(Maps.newHashMap(), (hashmap) -> {
         hashmap.put(EntityType.BLAZE, SoundEvents.PARROT_IMITATE_BLAZE);
@@ -228,6 +239,13 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
     public boolean isBaby() {
         return false;
     }
+    // Canvas start
+    public LandOnOwnersShoulderGoal landOnOwnersShoulderGoal;
+
+    public void landOnShoulder(){
+        this.landOnOwnersShoulderGoal.start();
+    }
+    // Canvas end
 
     @Override
     protected void registerGoals() {
@@ -240,7 +258,10 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
         this.goalSelector.addGoal(2, new SitWhenOrderedToGoal(this));
         this.goalSelector.addGoal(2, new FollowOwnerGoal(this, 1.0D, 5.0F, 1.0F, true));
         this.goalSelector.addGoal(2, new Parrot.ParrotWanderGoal(this, 1.0D));
-        this.goalSelector.addGoal(3, new LandOnOwnersShoulderGoal(this));
+        // Canvas start
+        this.landOnOwnersShoulderGoal = new LandOnOwnersShoulderGoal(this);
+        this.goalSelector.addGoal(3, this.landOnOwnersShoulderGoal);
+        // Canvas end
         this.goalSelector.addGoal(3, new FollowMobGoal(this, 1.0D, 3.0F, 7.0F));
     }
 
@@ -352,7 +373,7 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
 
             if (this.level().purpurConfig.parrotBreedable) return super.mobInteract(player, hand); // Purpur
             return InteractionResult.sidedSuccess(this.level().isClientSide);
-        } else if (itemstack.is(Parrot.POISONOUS_FOOD)) {
+        } else if (itemstack.is(this.POISONOUS_FOOD)) {
             if (!player.getAbilities().instabuild) {
                 itemstack.shrink(1);
             }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pig.java b/src/main/java/net/minecraft/world/entity/animal/Pig.java
index b8de9c4630fbdaad2d3a4ca6d27a61873ddbda2e..85d5466c4891deadb1c35399826281147b092660 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pig.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pig.java
@@ -41,6 +41,7 @@ import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.monster.ZombifiedPiglin;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.vehicle.DismountHelper;
+import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.Ingredient;
@@ -54,6 +55,7 @@ import org.joml.Vector3f;
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 // CraftBukkit end
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 
 public class Pig extends Animal implements ItemSteerable, Saddleable {
 
@@ -103,6 +105,25 @@ public class Pig extends Animal implements ItemSteerable, Saddleable {
     protected boolean isAlwaysExperienceDropper() {
         return this.level().purpurConfig.pigAlwaysDropExp;
     }
+    // Canvas start
+    public TemptGoal RIDE_ITEM_GOAL;
+    public Item rideItem = Items.CARROT_ON_A_STICK;
+
+    public void setRideItem(org.bukkit.Material material){
+        this.rideItem = CraftMagicNumbers.getItem(material);
+        this.updateRideGoal();
+    }
+
+    protected void updateRideGoal(){
+        this.goalSelector.removeGoal(this.RIDE_ITEM_GOAL);
+        this.RIDE_ITEM_GOAL = new TemptGoal(this, 1.2D, Ingredient.of(this.rideItem), false);
+        this.goalSelector.addGoal(4, this.RIDE_ITEM_GOAL);
+    }
+
+    public org.bukkit.Material getRideItem(){
+        return CraftMagicNumbers.getMaterial(this.rideItem);
+    }
+    // Canvas end
 
     @Override
     protected void registerGoals() {
@@ -110,7 +131,10 @@ public class Pig extends Animal implements ItemSteerable, Saddleable {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(1, new PanicGoal(this, 1.25D));
         this.goalSelector.addGoal(3, new BreedGoal(this, 1.0D));
-        this.goalSelector.addGoal(4, new TemptGoal(this, 1.2D, Ingredient.of(Items.CARROT_ON_A_STICK), false));
+        // Canvas start
+        this.RIDE_ITEM_GOAL = new TemptGoal(this, 1.2D, Ingredient.of(this.rideItem), false);
+        this.goalSelector.addGoal(4, this.RIDE_ITEM_GOAL);
+        // Canvas end
         this.goalSelector.addGoal(4, new TemptGoal(this, 1.2D, Pig.FOOD_ITEMS, false));
         this.goalSelector.addGoal(5, new FollowParentGoal(this, 1.1D));
         this.goalSelector.addGoal(6, new WaterAvoidingRandomStrollGoal(this, 1.0D));
diff --git a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
index 54b6d780d14c27f24d3d4dc9171818f6256afd5c..ab4a66b4c304f5c110ab4d4ee129fd51af05236e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
+++ b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
@@ -322,7 +322,7 @@ public class PolarBear extends Animal implements NeutralMob {
     }
 
     @Override
-    protected float getWaterSlowDown() {
+    public float getWaterSlowDown() { // Canvas - protected -> public
         return 0.98F;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
index 54f5206b686c3cf4d2e5b470c07047a518f5dd00..91d3e9e54c01cb4465891c6c125c9c0cde2049b8 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
@@ -180,30 +180,42 @@ public class Pufferfish extends AbstractFish {
         }
 
     }
+    // Canvas start
+    public boolean canPoison = true;
 
+    public void setCanPoison(boolean can){
+        this.canPoison = can;
+    }
+    
     private void touch(Mob mob) {
-        int i = this.getPuffState();
+        if(this.canPoison){
+            int i = this.getPuffState();
 
-        if (mob.hurt(this.damageSources().mobAttack(this), (float) (1 + i))) {
-            mob.addEffect(new MobEffectInstance(MobEffects.POISON, 60 * i, 0), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
-            this.playSound(SoundEvents.PUFFER_FISH_STING, 1.0F, 1.0F);
+            if (mob.hurt(this.damageSources().mobAttack(this), (float) (1 + i))) {
+                mob.addEffect(new MobEffectInstance(MobEffects.POISON, 60 * i, 0), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
+                this.playSound(SoundEvents.PUFFER_FISH_STING, 1.0F, 1.0F);
+            }
         }
-
     }
+    // Canvas end
 
     @Override
     public void playerTouch(Player player) {
-        int i = this.getPuffState();
+        // Canvas start - implement able to poison boolean
+        if(this.canPoison){
+            int i = this.getPuffState();
 
-        if (player instanceof ServerPlayer && i > 0 && player.hurt(this.damageSources().mobAttack(this), (float) (1 + i))) {
-            if (!this.isSilent()) {
-                ((ServerPlayer) player).connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.PUFFER_FISH_STING, 0.0F));
-            }
+            if (player instanceof ServerPlayer && i > 0 && player.hurt(this.damageSources().mobAttack(this), (float) (1 + i))) {
+                if (!this.isSilent()) {
+                    ((ServerPlayer) player).connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.PUFFER_FISH_STING, 0.0F));
+                }
 
-            player.addEffect(new MobEffectInstance(MobEffects.POISON, 60 * i, 0), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
+                player.addEffect(new MobEffectInstance(MobEffects.POISON, 60 * i, 0), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
+            }
         }
 
     }
+    // Canvas end
 
     @Override
     protected SoundEvent getAmbientSound() {
@@ -227,17 +239,34 @@ public class Pufferfish extends AbstractFish {
 
     @Override
     public EntityDimensions getDimensions(Pose pose) {
-        return super.getDimensions(pose).scale(Pufferfish.getScale(this.getPuffState()));
+        return super.getDimensions(pose).scale(this.getScale(this.getPuffState()));
+    }
+    // Canvas start
+    public float scaleSmallSize = 0.5f;
+    public float scaleMediumSize = 0.7f;
+    public float scaleLargeSize = 1.0f;
+
+    public void setScaleSizeSmall(float scale){
+        this.scaleSmallSize = scale;
+    }
+
+    public void setScaleSizeMedium(float scale){
+        this.scaleMediumSize = scale;
+    }
+
+    public void setScaleSizeLarge(float scale){
+        this.scaleLargeSize = scale;
     }
+    // Canvas end
 
-    private static float getScale(int puffState) {
+    public float getScale(int puffState) { // Canvas - private/static -> public
         switch (puffState) {
             case 0:
-                return 0.5F;
+                return this.scaleSmallSize; // Canvas - use custom scaling
             case 1:
-                return 0.7F;
+                return this.scaleMediumSize; // Canvas - use custom scaling
             default:
-                return 1.0F;
+                return this.scaleLargeSize; // Canvas - use custom scaling
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
index eae2488f2a46e543b496b7a2919aabbb55dcb825..be6a3abdcace862441920c938e3d136ae9a3fee9 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
@@ -511,7 +511,7 @@ public class Rabbit extends Animal implements VariantHolder<Rabbit.Variant> {
         return world.getBlockState(pos.below()).is(BlockTags.RABBITS_SPAWNABLE_ON) && isBrightEnoughToSpawn(world, pos);
     }
 
-    boolean wantsMoreFood() {
+    public boolean wantsMoreFood() { // Canvas - ensure public specified bc i picky
         return this.moreCarrotTicks <= 0;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Squid.java b/src/main/java/net/minecraft/world/entity/animal/Squid.java
index dd7f2beabf0edad4143ac2365ac04a22edf1f75e..c456e8959b4df057e04ca515e4f4b44f024a163f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Squid.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Squid.java
@@ -1,7 +1,10 @@
 package net.minecraft.world.entity.animal;
 
+import org.bukkit.craftbukkit.CraftParticle;
+
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ParticleOptions;
+import net.minecraft.core.particles.ParticleType;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
@@ -234,7 +237,7 @@ public class Squid extends WaterAnimal {
         return vec3.yRot(-this.yBodyRotO * ((float)Math.PI / 180F));
     }
 
-    private void spawnInk() {
+    public void spawnInk() { // Canvas - private -> public
         this.playSound(this.getSquirtSound(), this.getSoundVolume(), this.getVoicePitch());
         Vec3 vec3 = this.rotateVector(new Vec3(0.0D, -1.0D, 0.0D)).add(this.getX(), this.getY(), this.getZ());
 
@@ -246,7 +249,12 @@ public class Squid extends WaterAnimal {
 
     }
 
-    protected ParticleOptions getInkParticle() {
+    // Canvas start
+    public void setGlowingSquid(){
+        this.convertTo(EntityType.GLOW_SQUID, true);
+    }
+    // Canvas end
+    public ParticleOptions getInkParticle() { // Canvas - protected -> public
         return ParticleTypes.SQUID_INK;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Turtle.java b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
index 8f891e9fd9fc0bf4a9c022a3415b371cea9b92fa..98922d10ea85b7e4818472d6da48c0e6424959da 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Turtle.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
@@ -119,7 +119,7 @@ public class Turtle extends Animal {
     }
 
     @Override
-    protected boolean isAlwaysExperienceDropper() {
+    public boolean isAlwaysExperienceDropper() { // Canvas - protected -> public
         return this.level().purpurConfig.turtleAlwaysDropExp;
     }
 
@@ -243,7 +243,7 @@ public class Turtle extends Animal {
 
     @Override
     public boolean isPushedByFluid() {
-        return false;
+        return false; 
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
index b3e92d3fb6fbadfc6df236754123bc12ad9bc7e7..e6595fa972ce2ba1180175301689f2b1b46a8827 100644
--- a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
@@ -74,7 +74,7 @@ import org.slf4j.Logger;
 public class Allay extends PathfinderMob implements InventoryCarrier, VibrationSystem {
 
     private static final Logger LOGGER = LogUtils.getLogger();
-    private static final Vec3i ITEM_PICKUP_REACH = new Vec3i(1, 1, 1);
+    public Vec3i ITEM_PICKUP_REACH = new Vec3i(1, 1, 1);
     private static final int LIFTING_ITEM_ANIMATION_DURATION = 5;
     private static final float DANCING_LOOP_DURATION = 55.0F;
     private static final float SPINNING_ANIMATION_DURATION = 15.0F;
@@ -83,13 +83,44 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
     private static final int NUM_OF_DUPLICATION_HEARTS = 3;
     private static final EntityDataAccessor<Boolean> DATA_DANCING = SynchedEntityData.defineId(Allay.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_CAN_DUPLICATE = SynchedEntityData.defineId(Allay.class, EntityDataSerializers.BOOLEAN);
-    protected static final ImmutableList<SensorType<? extends Sensor<? super Allay>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.HURT_BY, SensorType.NEAREST_ITEMS);
-    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.PATH, MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.HURT_BY, MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM, MemoryModuleType.LIKED_PLAYER, MemoryModuleType.LIKED_NOTEBLOCK_POSITION, MemoryModuleType.LIKED_NOTEBLOCK_COOLDOWN_TICKS, MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS, MemoryModuleType.IS_PANICKING, new MemoryModuleType[0]);
-    public static final ImmutableList<Float> THROW_SOUND_PITCHES = ImmutableList.of(0.5625F, 0.625F, 0.75F, 0.9375F, 1.0F, 1.0F, 1.125F, 1.25F, 1.5F, 1.875F, 2.0F, 2.25F, new Float[]{2.5F, 3.0F, 3.75F, 4.0F});
-    private final DynamicGameEventListener<VibrationSystem.Listener> dynamicVibrationListener;
+    // Canvas start - expand list for easier readability
+    protected static final ImmutableList<SensorType<? extends Sensor<? super Allay>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES,
+                        SensorType.NEAREST_PLAYERS,
+                        SensorType.HURT_BY,
+                        SensorType.NEAREST_ITEMS);
+    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.PATH, MemoryModuleType.LOOK_TARGET,
+                        MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
+                        MemoryModuleType.WALK_TARGET,
+                        MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
+                        MemoryModuleType.HURT_BY,
+                        MemoryModuleType.NEAREST_VISIBLE_WANTED_ITEM,
+                        MemoryModuleType.LIKED_PLAYER,
+                        MemoryModuleType.LIKED_NOTEBLOCK_POSITION,
+                        MemoryModuleType.LIKED_NOTEBLOCK_COOLDOWN_TICKS,
+                        MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS,
+                        MemoryModuleType.IS_PANICKING,
+                        new MemoryModuleType[0]);
+    public static final ImmutableList<Float> THROW_SOUND_PITCHES = ImmutableList.of(0.5625F,
+                        0.625F,
+                        0.75F,
+                        0.9375F,
+                        1.0F,
+                        1.0F,
+                        1.125F,
+                        1.25F,
+                        1.5F,
+                        1.875F,
+                        2.0F,
+                        2.25F,
+                        new Float[]{2.5F, 3.0F, 3.75F, 4.0F});
+    // Canvas end
+    public DynamicGameEventListener<VibrationSystem.Listener> dynamicVibrationListener; // Canvas - private -> public
     private VibrationSystem.Data vibrationData;
+    // Canvas start
+    public JukeboxListener jukeboxListener;
+    // Canvas end
     private final VibrationSystem.User vibrationUser;
-    private final DynamicGameEventListener<Allay.JukeboxListener> dynamicJukeboxListener;
+    public DynamicGameEventListener<Allay.JukeboxListener> dynamicJukeboxListener; // Canvas - private -> public
     private final SimpleContainer inventory = new SimpleContainer(1);
     @Nullable
     public BlockPos jukeboxPos;
@@ -121,7 +152,10 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         this.vibrationUser = new Allay.VibrationUser();
         this.vibrationData = new VibrationSystem.Data();
         this.dynamicVibrationListener = new DynamicGameEventListener<>(new VibrationSystem.Listener(this));
-        this.dynamicJukeboxListener = new DynamicGameEventListener<>(new Allay.JukeboxListener(this.vibrationUser.getPositionSource(), GameEvent.JUKEBOX_PLAY.getNotificationRadius()));
+        // Canvas start
+        this.jukeboxListener = new Allay.JukeboxListener(this.vibrationUser.getPositionSource(), GameEvent.JUKEBOX_PLAY.getNotificationRadius());
+        this.dynamicJukeboxListener = new DynamicGameEventListener<>(this.jukeboxListener);
+        // Canvas end
     }
 
     // CraftBukkit start
@@ -336,50 +370,63 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         return this.getBrain().checkMemory(MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS, MemoryStatus.VALUE_PRESENT);
     }
 
+    // Canvas start
+    public boolean canInteract = true;
+
+    public void setCanInteract(boolean canInteract){
+        this.canInteract = canInteract;
+    }
+
     @Override
     protected InteractionResult mobInteract(Player player, InteractionHand hand) {
-        ItemStack itemstack = player.getItemInHand(hand);
-        ItemStack itemstack1 = this.getItemInHand(InteractionHand.MAIN_HAND);
+        if(canInteract){
+            ItemStack itemstack = player.getItemInHand(hand);
+            ItemStack itemstack1 = this.getItemInHand(InteractionHand.MAIN_HAND);
+
+            if (this.isDancing() && this.isDuplicationItem(itemstack) && this.canDuplicate()) {
+                // CraftBukkit start - handle cancel duplication
+                Allay allay = this.duplicateAllay();
+                if (allay == null) {
+                    return InteractionResult.SUCCESS;
+                }
+                // CraftBukkit end
+                this.level().broadcastEntityEvent(this, (byte) 18);
+                this.level().playSound(player, (Entity) this, SoundEvents.AMETHYST_BLOCK_CHIME, SoundSource.NEUTRAL, 2.0F, 1.0F);
+                this.removeInteractionItem(player, itemstack);
+                return InteractionResult.SUCCESS;
+            } else if (itemstack1.isEmpty() && !itemstack.isEmpty()) {
+                ItemStack itemstack2 = itemstack.copyWithCount(1);
 
-        if (this.isDancing() && this.isDuplicationItem(itemstack) && this.canDuplicate()) {
-            // CraftBukkit start - handle cancel duplication
-            Allay allay = this.duplicateAllay();
-            if (allay == null) {
+                this.setItemInHand(InteractionHand.MAIN_HAND, itemstack2);
+                this.removeInteractionItem(player, itemstack);
+                this.level().playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_GIVEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
+                this.getBrain().setMemory(MemoryModuleType.LIKED_PLAYER, player.getUUID()); // CraftBukkit - decompile error
                 return InteractionResult.SUCCESS;
-            }
-            // CraftBukkit end
-            this.level().broadcastEntityEvent(this, (byte) 18);
-            this.level().playSound(player, (Entity) this, SoundEvents.AMETHYST_BLOCK_CHIME, SoundSource.NEUTRAL, 2.0F, 1.0F);
-            this.removeInteractionItem(player, itemstack);
-            return InteractionResult.SUCCESS;
-        } else if (itemstack1.isEmpty() && !itemstack.isEmpty()) {
-            ItemStack itemstack2 = itemstack.copyWithCount(1);
-
-            this.setItemInHand(InteractionHand.MAIN_HAND, itemstack2);
-            this.removeInteractionItem(player, itemstack);
-            this.level().playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_GIVEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
-            this.getBrain().setMemory(MemoryModuleType.LIKED_PLAYER, player.getUUID()); // CraftBukkit - decompile error
-            return InteractionResult.SUCCESS;
-        } else if (!itemstack1.isEmpty() && hand == InteractionHand.MAIN_HAND && itemstack.isEmpty()) {
-            this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
-            this.level().playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_TAKEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
-            this.swing(InteractionHand.MAIN_HAND);
-            Iterator iterator = this.getInventory().removeAllItems().iterator();
+            } else if (!itemstack1.isEmpty() && hand == InteractionHand.MAIN_HAND && itemstack.isEmpty()) {
+                this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
+                this.level().playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_TAKEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
+                this.swing(InteractionHand.MAIN_HAND);
+                Iterator iterator = this.getInventory().removeAllItems().iterator();
 
-            while (iterator.hasNext()) {
-                ItemStack itemstack3 = (ItemStack) iterator.next();
+                while (iterator.hasNext()) {
+                    ItemStack itemstack3 = (ItemStack) iterator.next();
 
-                BehaviorUtils.throwItem(this, itemstack3, this.position());
-            }
+                    BehaviorUtils.throwItem(this, itemstack3, this.position());
+                }
 
-            this.getBrain().eraseMemory(MemoryModuleType.LIKED_PLAYER);
-            player.addItem(itemstack1);
-            return InteractionResult.SUCCESS;
-        } else {
+                this.getBrain().eraseMemory(MemoryModuleType.LIKED_PLAYER);
+                player.addItem(itemstack1);
+                return InteractionResult.SUCCESS;
+            } else {
+                return super.mobInteract(player, hand);
+            }
+        }else{
             return super.mobInteract(player, hand);
         }
     }
 
+    // Canvas end
+
     public void setJukeboxPlaying(BlockPos jukeboxPos, boolean playing) {
         if (playing) {
             if (!this.isDancing()) {
@@ -400,7 +447,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
 
     @Override
     protected Vec3i getPickupReach() {
-        return Allay.ITEM_PICKUP_REACH;
+        return this.ITEM_PICKUP_REACH;
     }
 
     @Override
@@ -432,7 +479,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         // Purpur end
     }
 
-    private boolean allayConsidersItemEqual(ItemStack stack, ItemStack stack2) {
+    public boolean allayConsidersItemEqual(ItemStack stack, ItemStack stack2) { // Canvas - private -> public
         return ItemStack.isSameItem(stack, stack2) && !this.hasNonMatchingPotion(stack, stack2);
     }
 
@@ -660,16 +707,16 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         return this.vibrationUser;
     }
 
-    private class VibrationUser implements VibrationSystem.User {
+    public class VibrationUser implements VibrationSystem.User { // Canvas - private -> public
 
-        private static final int VIBRATION_EVENT_LISTENER_RANGE = 16;
+        public int VIBRATION_EVENT_LISTENER_RANGE = 16; // Canvas - static/final -> public
         private final PositionSource positionSource = new EntityPositionSource(Allay.this, Allay.this.getEyeHeight());
 
         VibrationUser() {}
 
         @Override
         public int getListenerRadius() {
-            return 16;
+            return this.VIBRATION_EVENT_LISTENER_RANGE; // Change to be customizable
         }
 
         @Override
@@ -708,12 +755,12 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         }
     }
 
-    private class JukeboxListener implements GameEventListener {
+    public class JukeboxListener implements GameEventListener { // Canvas - private -> public
 
         private final PositionSource listenerSource;
-        private final int listenerRadius;
+        public int listenerRadius; // Canvas - final -> !final
 
-        public JukeboxListener(PositionSource positionsource, int i) {
+        public JukeboxListener(PositionSource positionsource, final int i) { // Canvas - made provider int final
             this.listenerSource = positionsource;
             this.listenerRadius = i;
         }
@@ -723,6 +770,10 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
             return this.listenerSource;
         }
 
+        public void setRadius(int radius){
+            this.listenerRadius = radius;
+        }
+
         @Override
         public int getListenerRadius() {
             return this.listenerRadius;
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index 5f3670c02ddbb923a96ba0c6199c49e665d224c4..75db73abf4ea9bd9ba192170f03372ce24bbce1c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -29,6 +29,7 @@ import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.AgeableMob;
@@ -64,6 +65,12 @@ import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.craftbukkit.CraftEffect;
+import org.bukkit.craftbukkit.potion.CraftPotionEffectType;
+import org.bukkit.craftbukkit.potion.CraftPotionUtil;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
 import org.joml.Vector3f;
 
 public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolotl.Variant>, Bucketable {
@@ -77,7 +84,29 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
     public static final int TOTAL_PLAYDEAD_TIME = 200;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Axolotl>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.AXOLOTL_ATTACKABLES, SensorType.AXOLOTL_TEMPTATIONS);
     // CraftBukkit - decompile error
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN, MemoryModuleType.IS_PANICKING});
+    // Canvas start - expand for easier readability
+    public static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, // Canvas - protected -> public
+                        MemoryModuleType.NEAREST_LIVING_ENTITIES,
+                        MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
+                        MemoryModuleType.NEAREST_VISIBLE_PLAYER,
+                         MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER,
+                         MemoryModuleType.LOOK_TARGET,
+                         MemoryModuleType.WALK_TARGET,
+                         MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
+                         MemoryModuleType.PATH,
+                         MemoryModuleType.ATTACK_TARGET,
+                         MemoryModuleType.ATTACK_COOLING_DOWN,
+                         MemoryModuleType.NEAREST_VISIBLE_ADULT,
+                         new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY,
+                            MemoryModuleType.PLAY_DEAD_TICKS,
+                            MemoryModuleType.NEAREST_ATTACKABLE,
+                            MemoryModuleType.TEMPTING_PLAYER,
+                            MemoryModuleType.TEMPTATION_COOLDOWN_TICKS,
+                            MemoryModuleType.IS_TEMPTED,
+                            MemoryModuleType.HAS_HUNTING_COOLDOWN,
+                            MemoryModuleType.IS_PANICKING
+    });
+    // Canvas end
     private static final EntityDataAccessor<Integer> DATA_VARIANT = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_PLAYING_DEAD = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> FROM_BUCKET = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
@@ -211,7 +240,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
 
     }
 
-    protected void handleAirSupply(int air) {
+    public void handleAirSupply(int air) { // Canvas - protected -> public
         if (this.isAlive() && !this.isInWaterRainOrBubble()) {
             this.setAirSupply(air - 1);
             if (this.getAirSupply() == -20) {
@@ -243,9 +272,23 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
     public void setVariant(Axolotl.Variant variant) {
         this.entityData.set(Axolotl.DATA_VARIANT, variant.getId());
     }
+    // Canvas start
+    private int varientChanceBounds = 1200;
+    public void setRareVarientChanceBound(int bound){
+        this.varientChanceBounds = bound;
+    }
+
+    public int getRareVarientChanceBound(){
+        return this.varientChanceBounds;
+    }
+
+    public void resetRareVarientChanceBound(){
+        this.varientChanceBounds = 1200;
+    }
+    // Canvas end
 
-    private static boolean useRareVariant(RandomSource random) {
-        return random.nextInt(1200) == 0;
+    public boolean useRareVariant(RandomSource random) {
+        return random.nextInt(this.varientChanceBounds) == 0; // Canvas - use customziable value
     }
 
     @Override
@@ -289,7 +332,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
         if (axolotl != null) {
             Axolotl.Variant axolotl_variant;
 
-            if (Axolotl.useRareVariant(this.random)) {
+            if (this.useRareVariant(this.random)) {
                 axolotl_variant = Axolotl.Variant.getRareSpawnVariant(this.random);
             } else {
                 axolotl_variant = this.random.nextBoolean() ? this.getVariant() : ((Axolotl) entity).getVariant();
@@ -447,6 +490,36 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
 
     }
 
+    // Canvas start
+    private boolean applySupportingEffects = true;
+    private MobEffect supportingEffectType = MobEffects.REGENERATION;
+    private int amplifier = 1;
+
+    public boolean getApplySupportingEffects(){
+        return applySupportingEffects;
+    }
+
+    public void setApplySupportingEffects(boolean applySupportingEffects) {
+        this.applySupportingEffects = applySupportingEffects;
+    }
+
+    public void setSupportingEffectType(PotionEffectType potionEffectType){
+        MobEffect effect = CraftPotionEffectType.bukkitToMinecraft(potionEffectType);
+        this.supportingEffectType = effect;
+    }
+
+    public PotionEffectType getSupportingPotionEffectType(){
+        return CraftPotionEffectType.minecraftToBukkit(supportingEffectType);
+    }
+
+    public void setSupportingEffectAmplifier(int amplifier){
+        this.amplifier = amplifier;
+    }
+
+    public int getSupportingEffectAmplifier(){
+        return this.amplifier;
+    }
+
     public void applySupportingEffects(Player player) {
         MobEffectInstance mobeffect = player.getEffect(MobEffects.REGENERATION);
 
@@ -454,12 +527,14 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
             int i = mobeffect != null ? mobeffect.getDuration() : 0;
             int j = Math.min(2400, 100 + i);
 
-            player.addEffect(new MobEffectInstance(MobEffects.REGENERATION, j, 0), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.AXOLOTL); // CraftBukkit
+            player.addEffect(new MobEffectInstance(supportingEffectType, j, amplifier), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.AXOLOTL); // CraftBukkit
         }
 
         player.removeEffect(MobEffects.DIG_SLOWDOWN, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.AXOLOTL); // Paper
     }
 
+    // Canvas end
+
     @Override
     public boolean requiresCustomPersistence() {
         return super.requiresCustomPersistence() || this.fromBucket();
diff --git a/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java b/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java
index cd9129bb5049c13f08c58b8581d511b59a5bb1b5..c4aca550756fe73666e7f9dea52218b5f83029f0 100644
--- a/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java
+++ b/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java
@@ -54,7 +54,7 @@ import org.joml.Vector3f;
 
 public class Camel extends AbstractHorse implements PlayerRideableJumping, Saddleable {
     public static final Ingredient TEMPTATION_ITEM = Ingredient.of(Items.CACTUS);
-    public static final float BABY_SCALE = 0.45F;
+    public static float BABY_SCALE = 0.45F;
     public static final int DASH_COOLDOWN_TICKS = 55;
     public static final int MAX_HEAD_Y_ROT = 30;
     private static final float RUNNING_SPEED_BONUS = 0.1F;
@@ -497,11 +497,17 @@ public class Camel extends AbstractHorse implements PlayerRideableJumping, Saddl
         return new Vector3f(0.0F, g, f * scaleFactor);
     }
 
+    // Canvas start
+
+    private float GROWN_SCALE = 1.0f;
+
     @Override
     public float getScale() {
-        return this.isBaby() ? 0.45F : 1.0F;
+        return this.isBaby() ? BABY_SCALE : GROWN_SCALE;
     }
 
+    // Canvas end
+
     private double getBodyAnchorAnimationYOffset(boolean primaryPassenger, float tickDelta, EntityDimensions dimensions, float scaleFactor) {
         double d = (double)(dimensions.height - 0.375F * scaleFactor);
         float f = scaleFactor * 1.43F;
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java b/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
index b95b6d35635ebcc4ed70d3114f1b27bbffdcf076..6a0d997c3133e79eca3e34cde57354ab7309e3ae 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
@@ -70,8 +70,29 @@ import org.joml.Vector3f;
 public class Frog extends Animal implements VariantHolder<FrogVariant> {
     public static final Ingredient TEMPTATION_ITEM = Ingredient.of(Items.SLIME_BALL);
     protected static final ImmutableList<SensorType<? extends Sensor<? super Frog>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.HURT_BY, SensorType.FROG_ATTACKABLES, SensorType.FROG_TEMPTATIONS, SensorType.IS_IN_WATER);
-    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.BREED_TARGET, MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.IS_IN_WATER, MemoryModuleType.IS_PREGNANT, MemoryModuleType.IS_PANICKING, MemoryModuleType.UNREACHABLE_TONGUE_TARGETS);
-    private static final EntityDataAccessor<FrogVariant> DATA_VARIANT_ID = SynchedEntityData.defineId(Frog.class, EntityDataSerializers.FROG_VARIANT);
+    // Canvas start - expand for better readability
+    public static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, // Canvas - protected -> public
+                        MemoryModuleType.NEAREST_LIVING_ENTITIES,
+                        MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
+                        MemoryModuleType.WALK_TARGET,
+                        MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
+                        MemoryModuleType.PATH,
+                        MemoryModuleType.BREED_TARGET,
+                        MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS,
+                        MemoryModuleType.LONG_JUMP_MID_JUMP,
+                        MemoryModuleType.ATTACK_TARGET,
+                        MemoryModuleType.TEMPTING_PLAYER,
+                        MemoryModuleType.TEMPTATION_COOLDOWN_TICKS,
+                        MemoryModuleType.IS_TEMPTED,
+                        MemoryModuleType.HURT_BY,
+                        MemoryModuleType.HURT_BY_ENTITY,
+                        MemoryModuleType.NEAREST_ATTACKABLE,
+                        MemoryModuleType.IS_IN_WATER,
+                        MemoryModuleType.IS_PREGNANT,
+                        MemoryModuleType.IS_PANICKING,
+                        MemoryModuleType.UNREACHABLE_TONGUE_TARGETS);
+    // Canvas end
+    private static final EntityDataAccessor<FrogVariant> DATA_VARIANT_ID = SynchedEntityData.defineId(Frog.class,EntityDataSerializers.FROG_VARIANT);
     private static final EntityDataAccessor<OptionalInt> DATA_TONGUE_TARGET_ID = SynchedEntityData.defineId(Frog.class, EntityDataSerializers.OPTIONAL_UNSIGNED_INT);
     private static final int FROG_FALL_DAMAGE_REDUCTION = 5;
     public static final String VARIANT_KEY = "variant";
@@ -125,7 +146,6 @@ public class Frog extends Animal implements VariantHolder<FrogVariant> {
     public boolean isControllable() {
         return level().purpurConfig.frogControllable;
     }
-
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
@@ -157,6 +177,12 @@ public class Frog extends Animal implements VariantHolder<FrogVariant> {
         return (Brain<Frog>) super.getBrain(); // Paper - decompile fix
     }
 
+    // Canvas start
+    public void youngify(){
+        this.convertTo(EntityType.TADPOLE, true);
+    }
+    // Canvas end
+
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
index 1e86f144d6139cff52ccc48f03f3283aa6517736..cb91b96a62ad31f45029c83077dd3cbdbcb186d5 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
@@ -43,7 +43,19 @@ public class Tadpole extends AbstractFish {
     public static float HITBOX_HEIGHT = 0.3F;
     public int age;
     protected static final ImmutableList<SensorType<? extends Sensor<? super Tadpole>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.HURT_BY, SensorType.FROG_TEMPTATIONS);
-    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.BREED_TARGET, MemoryModuleType.IS_PANICKING);
+    // Canvas start - expand for better readability
+    public static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, // Canvas - protected -> public
+                        MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
+                        MemoryModuleType.WALK_TARGET,
+                        MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
+                        MemoryModuleType.PATH,
+                        MemoryModuleType.NEAREST_VISIBLE_ADULT,
+                        MemoryModuleType.TEMPTATION_COOLDOWN_TICKS,
+                        MemoryModuleType.IS_TEMPTED,
+                        MemoryModuleType.TEMPTING_PLAYER,
+                        MemoryModuleType.BREED_TARGET,
+                        MemoryModuleType.IS_PANICKING);
+    // Canvas end
     public boolean ageLocked; // Paper
     private org.purpurmc.purpur.controller.WaterMoveControllerWASD purpurController; // Purpur
 
@@ -109,6 +121,12 @@ public class Tadpole extends AbstractFish {
         return (Brain<Tadpole>) super.getBrain(); // CraftBukkit - decompile error
     }
 
+    // Canvas start
+    public void makeOld(){
+        this.convertTo(EntityType.FROG, true);
+    }
+    // Canvas end
+
     @Override
     protected SoundEvent getFlopSound() {
         return SoundEvents.TADPOLE_FLOP;
@@ -246,7 +264,7 @@ public class Tadpole extends AbstractFish {
         return this.age;
     }
 
-    private void ageUp(int seconds) {
+    public void ageUp(int seconds) { // Canvas - private -> public
         if (this.ageLocked) return; // Paper
         this.setAge(this.age + seconds * 20);
     }
@@ -259,36 +277,48 @@ public class Tadpole extends AbstractFish {
 
     }
 
+    // Canvas start
+    private boolean canAge = true;
+    public void setCanAgeUp(boolean canAge){
+        this.canAge = canAge;
+    }
+
+    public boolean getCanAgeUp(){
+        return this.canAge;
+    }
+
     private void ageUp() {
         Level world = this.level();
 
         if (world instanceof ServerLevel) {
-            ServerLevel worldserver = (ServerLevel) world;
-            Frog frog = (Frog) EntityType.FROG.create(this.level());
-
-            if (frog != null) {
-                frog.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
-                frog.finalizeSpawn(worldserver, this.level().getCurrentDifficultyAt(frog.blockPosition()), MobSpawnType.CONVERSION, (SpawnGroupData) null, (CompoundTag) null);
-                frog.setNoAi(this.isNoAi());
-                if (this.hasCustomName()) {
-                    frog.setCustomName(this.getCustomName());
-                    frog.setCustomNameVisible(this.isCustomNameVisible());
-                }
-
-                frog.setPersistenceRequired();
-                // CraftBukkit start
-                if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTransformEvent(this, frog, org.bukkit.event.entity.EntityTransformEvent.TransformReason.METAMORPHOSIS).isCancelled()) {
-                    this.setAge(0); // Sets the age to 0 for avoid a loop if the event is canceled
-                    return;
+            if(this.canAge){
+                ServerLevel worldserver = (ServerLevel) world;
+                Frog frog = (Frog) EntityType.FROG.create(this.level());
+    
+                if (frog != null) {
+                    frog.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
+                    frog.finalizeSpawn(worldserver, this.level().getCurrentDifficultyAt(frog.blockPosition()), MobSpawnType.CONVERSION, (SpawnGroupData) null, (CompoundTag) null);
+                    frog.setNoAi(this.isNoAi());
+                    if (this.hasCustomName()) {
+                        frog.setCustomName(this.getCustomName());
+                        frog.setCustomNameVisible(this.isCustomNameVisible());
+                    }
+    
+                    frog.setPersistenceRequired();
+                    // CraftBukkit start
+                    if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTransformEvent(this, frog, org.bukkit.event.entity.EntityTransformEvent.TransformReason.METAMORPHOSIS).isCancelled()) {
+                        this.setAge(0); // Sets the age to 0 for avoid a loop if the event is canceled
+                        return;
+                    }
+                    // CraftBukkit end
+                    this.playSound(SoundEvents.TADPOLE_GROW_UP, 0.15F, 1.0F);
+                    worldserver.addFreshEntityWithPassengers(frog, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.METAMORPHOSIS); // CraftBukkit - add SpawnReason
+                    this.discard();
                 }
-                // CraftBukkit end
-                this.playSound(SoundEvents.TADPOLE_GROW_UP, 0.15F, 1.0F);
-                worldserver.addFreshEntityWithPassengers(frog, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.METAMORPHOSIS); // CraftBukkit - add SpawnReason
-                this.discard();
             }
         }
-
     }
+    // Canvas end
 
     private int getTicksLeftUntilAdult() {
         return Math.max(0, Tadpole.ticksToBeFrog - this.age);
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index fd2a6c9def675fa2dd5e78fbc18002794098da26..8870653358fc83bfa7028ae6988011c33f2657ea 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -64,18 +64,42 @@ import org.bukkit.event.player.PlayerBucketFillEvent;
 public class Goat extends Animal {
 
     public static final EntityDimensions LONG_JUMPING_DIMENSIONS = EntityDimensions.scalable(0.9F, 1.3F).scale(0.7F);
-    private static final int ADULT_ATTACK_DAMAGE = 2;
-    private static final int BABY_ATTACK_DAMAGE = 1;
-    protected static final ImmutableList<SensorType<? extends Sensor<? super Goat>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.GOAT_TEMPTATIONS);
-    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.BREED_TARGET, MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, new MemoryModuleType[]{MemoryModuleType.IS_TEMPTED, MemoryModuleType.RAM_COOLDOWN_TICKS, MemoryModuleType.RAM_TARGET, MemoryModuleType.IS_PANICKING});
-    public static final int GOAT_FALL_DAMAGE_REDUCTION = 10;
-    public static final double GOAT_SCREAMING_CHANCE = 0.02D;
-    public static final double UNIHORN_CHANCE = 0.10000000149011612D;
+    // Canvas start - static/final -> public
+    private int ADULT_ATTACK_DAMAGE = 2;
+    private int BABY_ATTACK_DAMAGE = 1;
+    // Canvas end
+    public static final ImmutableList<SensorType<? extends Sensor<? super Goat>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.GOAT_TEMPTATIONS); // Canvas protected -> public
+    // Canvas start - expand ImmutableList for easier readability
+    public static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, // protected -> public
+                            MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
+                            MemoryModuleType.WALK_TARGET,
+                            MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
+                            MemoryModuleType.PATH, MemoryModuleType.ATE_RECENTLY,
+                            MemoryModuleType.BREED_TARGET,
+                            MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS,
+                            MemoryModuleType.LONG_JUMP_MID_JUMP,
+                            MemoryModuleType.TEMPTING_PLAYER,
+                            MemoryModuleType.NEAREST_VISIBLE_ADULT,
+                            MemoryModuleType.TEMPTATION_COOLDOWN_TICKS,
+                            new MemoryModuleType[]{MemoryModuleType.IS_TEMPTED,
+                                MemoryModuleType.RAM_COOLDOWN_TICKS,
+                                MemoryModuleType.RAM_TARGET,
+                                MemoryModuleType.IS_PANICKING}); 
+    // Canvas start - static/final -> public
+    public int GOAT_FALL_DAMAGE_REDUCTION = 10;
+    public double GOAT_SCREAMING_CHANCE = 0.02D;
+    public double UNIHORN_CHANCE = 0.10000000149011612D;
+    // Canvas end
     private static final EntityDataAccessor<Boolean> DATA_IS_SCREAMING_GOAT = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
     public static final EntityDataAccessor<Boolean> DATA_HAS_LEFT_HORN = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
     public static final EntityDataAccessor<Boolean> DATA_HAS_RIGHT_HORN = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
     private boolean isLoweringHead;
     private int lowerHeadTick;
+    // Canvas start
+    public boolean isLoweringHead(){
+        return this.isLoweringHead;
+    }
+    // Canvas end
 
     public Goat(EntityType<? extends Goat> type, Level world) {
         super(type, world);
@@ -149,10 +173,19 @@ public class Goat extends Animal {
         }
 
     }
+    // Canvas start
+    public void setFallDamageReduction(int fallDamageReduction){
+        this.GOAT_FALL_DAMAGE_REDUCTION = fallDamageReduction;
+    }
+
+    public int getFallDamageReduction(){
+        return this.GOAT_FALL_DAMAGE_REDUCTION;
+    }
+    // Canvas end
 
     @Override
     protected int calculateFallDamage(float fallDistance, float damageMultiplier) {
-        return super.calculateFallDamage(fallDistance, damageMultiplier) - 10;
+        return super.calculateFallDamage(fallDistance, damageMultiplier) - this.GOAT_FALL_DAMAGE_REDUCTION; // Canvas - set int to customizable int value
     }
 
     @Override
@@ -399,6 +432,23 @@ public class Goat extends Animal {
         this.entityData.set(Goat.DATA_HAS_LEFT_HORN, true);
         this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, true);
     }
+    // Canvas start
+    public void addRightHorn(){
+        this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, true);
+    }
+
+    public void removeRightHorn(){
+        this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, false);
+    }
+
+    public void addLeftHorn(){
+        this.entityData.set(Goat.DATA_HAS_LEFT_HORN, true);
+    }
+
+    public void removeLeftHorn(){
+        this.entityData.set(Goat.DATA_HAS_LEFT_HORN, false);
+    }
+    // Canvas end
 
     public void removeHorns() {
         this.entityData.set(Goat.DATA_HAS_LEFT_HORN, false);
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
index 27c86c474af331510b07eedc5aae430136235acc..d69a40279f9ad9d319593f10560853bb3923857f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -200,11 +200,16 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         return (0.44999998807907104D + random.nextDouble() * 0.3D + random.nextDouble() * 0.3D + random.nextDouble() * 0.3D) * 0.25D;
     }
 
+    public RunAroundLikeCrazyGoal runAroundLikeCrazyGoal; // Canvas
+
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HorseHasRider(this)); // Purpur
         this.goalSelector.addGoal(1, new PanicGoal(this, 1.2D));
-        this.goalSelector.addGoal(1, new RunAroundLikeCrazyGoal(this, 1.2D));
+        // Canvas start
+        this.runAroundLikeCrazyGoal = new RunAroundLikeCrazyGoal(this, 1.2D);
+        this.goalSelector.addGoal(1, this.runAroundLikeCrazyGoal);
+        // Canvas end
         this.goalSelector.addGoal(2, new BreedGoal(this, 1.0D, AbstractHorse.class));
         this.goalSelector.addGoal(4, new FollowParentGoal(this, 1.0D));
         this.goalSelector.addGoal(6, new WaterAvoidingRandomStrollGoal(this, 0.7D));
@@ -218,10 +223,15 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         this.addBehaviourGoals();
     }
 
-    protected void addBehaviourGoals() {
+    // Canvas start
+    public TemptGoal temptGoal;
+
+    public void addBehaviourGoals() { // Canvas - protected -> public
         this.goalSelector.addGoal(0, new FloatGoal(this));
-        this.goalSelector.addGoal(3, new TemptGoal(this, 1.25D, Ingredient.of(Items.GOLDEN_CARROT, Items.GOLDEN_APPLE, Items.ENCHANTED_GOLDEN_APPLE), false));
+        this.temptGoal = new TemptGoal(this, 1.25D, Ingredient.of(Items.GOLDEN_CARROT, Items.GOLDEN_APPLE, Items.ENCHANTED_GOLDEN_APPLE), false);
+        this.goalSelector.addGoal(3, this.temptGoal);
     }
+    // Canvas end
 
     @Override
     protected void defineSynchedData() {
@@ -621,10 +631,20 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         return AbstractHorse.FOOD_ITEMS.test(stack);
     }
 
-    private void moveTail() {
+    public void moveTail() { // Canvas - private -> public
         this.tailCounter = 1;
     }
 
+    // Canvas start
+    public void skeletonify(){
+        this.convertTo(EntityType.SKELETON_HORSE, true);
+    }
+
+    public void zombify(){
+        this.convertTo(EntityType.ZOMBIE_HORSE, true);
+    }
+    // Canvas end
+
     @Override
     protected void dropEquipment() {
         super.dropEquipment();
@@ -667,7 +687,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         }
     }
 
-    protected void followMommy() {
+    public void followMommy() { // Canvas - protected -> public
         if (this.isBred() && this.isBaby() && !this.isEating()) {
             LivingEntity entityliving = this.level().getNearestEntity(AbstractHorse.class, AbstractHorse.MOMMY_TARGETING, this, this.getX(), this.getY(), this.getZ(), this.getBoundingBox().inflate(16.0D));
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
index b414572411e5b2b78fd66e860273656d53df9d9d..dc68de097fa59998e6ccae628d290e3a32865172 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
@@ -548,7 +548,7 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
     }
 
     @Override
-    protected void followMommy() {
+    public void followMommy() { // Canvas - protected -> public
         if (!this.inCaravan() && this.isBaby()) {
             super.followMommy();
         }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
index 64f0f486e29e0b63b024dd5c06738e12d0fb5b9a..305ceb239ef2af0ad71a21502e418dfb782c9ef7 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
@@ -103,6 +103,15 @@ public class SkeletonHorse extends AbstractHorse {
     public SoundEvent getDeathSound() {
         return SoundEvents.SKELETON_HORSE_DEATH;
     }
+    // Canvas start
+    public void revertToHorse(){
+        this.convertTo(EntityType.HORSE, true);
+    }
+
+    public void zombify(){
+        this.convertTo(EntityType.ZOMBIE_HORSE, true);
+    }
+    // Canvas end
 
     @Override
     protected SoundEvent getHurtSound(DamageSource source) {
@@ -183,7 +192,7 @@ public class SkeletonHorse extends AbstractHorse {
     }
 
     @Override
-    protected float getWaterSlowDown() {
+    public float getWaterSlowDown() { // Canvas - protected -> public
         return 0.96F;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
index 813501e8aac1c121569cb996b47f0293d99c7e36..f79e765d368de215b6d4fc7d308f9e730ee31254 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
@@ -62,6 +62,15 @@ public class ZombieHorse extends AbstractHorse {
     public boolean isSensitiveToWater() {
         return this.level().purpurConfig.zombieHorseTakeDamageFromWater;
     }
+    // Canvas start
+    public void revertToHorse(){
+        this.convertTo(EntityType.HORSE, true);
+    }
+
+    public void skeletonify(){
+        this.convertTo(EntityType.SKELETON_HORSE, true);
+    }
+    // Canvas end
 
     @Override
     protected boolean isAlwaysExperienceDropper() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java b/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
index dcb10e2ea1e0c7d0479adae5bc2ff57ece172aad..ea4677845ae4fb55fbc250fdc6167c08e9ecfc9b 100644
--- a/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
+++ b/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
@@ -150,9 +150,43 @@ public class Sniffer extends Animal {
     public EntityDimensions getDimensions(Pose pose) {
         return this.entityData.hasItem(Sniffer.DATA_STATE) && this.getState() == Sniffer.State.DIGGING ? Sniffer.DIGGING_DIMENSIONS.scale(this.getScale()) : super.getDimensions(pose);
     }
+    // Canvas start
+    public boolean canSearch = true;
+    public boolean canSniff = true;
+    public boolean storeExploredLocations = true;
+    public boolean canDig = true;
+
+    public void setCanSearch(boolean canSearch){
+        this.canSearch = canSearch;
+    }
+
+    public void setCanSniff(boolean canSniff){
+        this.canSniff = canSniff;
+    }
+
+    public void setStoreExploredLocations(boolean canStore){
+        this.storeExploredLocations = canStore;
+    }
+
+    public void setCanDig(boolean canDig){
+        this.canDig = canDig;
+    }
+
+    public boolean getCanSearch(){
+        return this.canSearch;
+    }
+
+    public boolean getCanSniff(){
+        return this.canSniff;
+    }
+
+    public boolean canStoreExploredLocations(){
+        return this.storeExploredLocations;
+    }
+    // Canvas end
 
     public boolean isSearching() {
-        return this.getState() == Sniffer.State.SEARCHING;
+        return canSearch && this.getState() == Sniffer.State.SEARCHING;
     }
 
     public boolean isTempted() {
@@ -160,11 +194,11 @@ public class Sniffer extends Animal {
     }
 
     public boolean canSniff() {
-        return !this.isTempted() && !this.isPanicking() && !this.isInWater() && !this.isInLove() && this.onGround() && !this.isPassenger() && !this.isLeashed();
+        return canSniff && !this.isTempted() && !this.isPanicking() && !this.isInWater() && !this.isInLove() && this.onGround() && !this.isPassenger() && !this.isLeashed();
     }
 
     public boolean canPlayDiggingSound() {
-        return this.getState() == Sniffer.State.DIGGING || this.getState() == Sniffer.State.SEARCHING;
+        return canDig && this.getState() == Sniffer.State.DIGGING || this.getState() == Sniffer.State.SEARCHING;
     }
 
     private BlockPos getHeadBlock() {
@@ -193,20 +227,34 @@ public class Sniffer extends Animal {
 
             this.resetAnimations();
             switch (sniffer_state) {
-                case SCENTING:
-                    this.scentingAnimationState.startIfStopped(this.tickCount);
-                    break;
-                case SNIFFING:
-                    this.sniffingAnimationState.startIfStopped(this.tickCount);
-                    break;
-                case DIGGING:
-                    this.diggingAnimationState.startIfStopped(this.tickCount);
-                    break;
-                case RISING:
+                // Canvas start
+                case SCENTING -> {
+                    if(canSearch){
+                        this.scentingAnimationState.startIfStopped(this.tickCount);
+                        break;
+                    }
+                }
+                case SNIFFING -> {
+                    if(canSniff){
+                        this.sniffingAnimationState.startIfStopped(this.tickCount);
+                        break;
+                    }
+                }
+                case DIGGING -> {
+                    if(canDig){
+                        this.diggingAnimationState.startIfStopped(this.tickCount);
+                        break;
+                    }
+                }
+                case RISING -> {
                     this.risingAnimationState.startIfStopped(this.tickCount);
                     break;
-                case FEELING_HAPPY:
+                }
+                case FEELING_HAPPY -> {
                     this.feelingHappyAnimationState.startIfStopped(this.tickCount);
+                    break;
+                }
+                // Canvas end
             }
 
             this.refreshDimensions();
@@ -225,50 +273,70 @@ public class Sniffer extends Animal {
 
     public Sniffer transitionTo(Sniffer.State state) {
         switch (state) {
-            case SCENTING:
-                this.setState(Sniffer.State.SCENTING).onScentingStart();
-                break;
-            case SNIFFING:
-                this.playSound(SoundEvents.SNIFFER_SNIFFING, 1.0F, 1.0F);
-                this.setState(Sniffer.State.SNIFFING);
-                break;
-            case DIGGING:
-                this.setState(Sniffer.State.DIGGING).onDiggingStart();
-                break;
-            case RISING:
+            case SCENTING -> {
+                if(canSearch){
+                    this.setState(Sniffer.State.SCENTING).onScentingStart();
+                    break;
+                }
+            }
+            case SNIFFING -> {
+                if(canSniff){
+                    this.playSound(SoundEvents.SNIFFER_SNIFFING, 1.0F, 1.0F);
+                    this.setState(Sniffer.State.SNIFFING);
+                    break;
+                }
+            }
+            case DIGGING -> {
+                if(canDig){
+                    this.setState(Sniffer.State.DIGGING).onDiggingStart();
+                    break;
+                }
+            }
+            case RISING -> {
                 this.playSound(SoundEvents.SNIFFER_DIGGING_STOP, 1.0F, 1.0F);
                 this.setState(Sniffer.State.RISING);
                 break;
-            case FEELING_HAPPY:
+            }
+            case FEELING_HAPPY -> {
                 this.playSound(SoundEvents.SNIFFER_HAPPY, 1.0F, 1.0F);
                 this.setState(Sniffer.State.FEELING_HAPPY);
                 break;
-            case IDLING:
+            }
+            case IDLING -> {
                 this.setState(Sniffer.State.IDLING);
                 break;
-            case SEARCHING:
+            }
+            case SEARCHING -> {
                 this.setState(Sniffer.State.SEARCHING);
+            }
         }
 
         return this;
     }
 
     private Sniffer onScentingStart() {
-        this.playSound(SoundEvents.SNIFFER_SCENTING, 1.0F, this.isBaby() ? 1.3F : 1.0F);
-        return this;
+        if(canSearch){
+            this.playSound(SoundEvents.SNIFFER_SCENTING, 1.0F, this.isBaby() ? 1.3F : 1.0F);
+            return this;
+        }else{
+            return this;
+        }
     }
 
     private Sniffer onDiggingStart() {
-        this.entityData.set(Sniffer.DATA_DROP_SEED_AT_TICK, this.tickCount + 120);
-        this.level().broadcastEntityEvent(this, (byte) 63);
-        return this;
+        if(canDig){
+            this.entityData.set(Sniffer.DATA_DROP_SEED_AT_TICK, this.tickCount + 120);
+            this.level().broadcastEntityEvent(this, (byte) 63);
+            return this;
+        }else{
+            return this;
+        }
     }
 
     public Sniffer onDiggingComplete(boolean explored) {
-        if (explored) {
+        if (explored && storeExploredLocations) {
             this.storeExploredPosition(this.getOnPos());
         }
-
         return this;
     }
 
@@ -281,15 +349,25 @@ public class Sniffer extends Animal {
     }
 
     public boolean canDig() {
-        return !this.isPanicking() && !this.isTempted() && !this.isBaby() && !this.isInWater() && this.onGround() && !this.isPassenger() && this.canDig(this.getHeadBlock().below());
+        return canDig && !this.isPanicking() && !this.isTempted() && !this.isBaby() && !this.isInWater() && this.onGround() && !this.isPassenger() && this.canDig(this.getHeadBlock().below());
     }
 
     private boolean canDig(BlockPos pos) {
-        return this.level().getBlockState(pos).is(BlockTags.SNIFFER_DIGGABLE_BLOCK) && this.getExploredPositions().noneMatch((globalpos) -> {
+        return canDig && this.level().getBlockState(pos).is(BlockTags.SNIFFER_DIGGABLE_BLOCK) && this.getExploredPositions().noneMatch((globalpos) -> {
             return GlobalPos.of(this.level().dimension(), pos).equals(globalpos);
         }) && (Boolean) Optional.ofNullable(this.getNavigation().createPath(pos, 1)).map(Path::canReach).orElse(false);
     }
 
+    // Canvas start
+    private net.minecraft.world.item.ItemStack dropItem = null;
+    public void setDiggingDropItem(org.bukkit.inventory.ItemStack item){
+        this.dropItem = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(item);
+    }
+
+    public org.bukkit.inventory.ItemStack getDiggingDropItem(){
+        return org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(this.dropItem);
+    }
+
     private void dropSeed() {
         if (!this.level().isClientSide() && (Integer) this.entityData.get(Sniffer.DATA_DROP_SEED_AT_TICK) == this.tickCount) {
             ServerLevel worldserver = (ServerLevel) this.level();
@@ -299,25 +377,35 @@ public class Sniffer extends Animal {
             BlockPos blockposition = this.getHeadBlock();
             Iterator iterator = list.iterator();
 
-            while (iterator.hasNext()) {
-                ItemStack itemstack = (ItemStack) iterator.next();
-                ItemEntity entityitem = new ItemEntity(worldserver, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), itemstack);
-
-                // CraftBukkit start - handle EntityDropItemEvent
-                org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
-                org.bukkit.Bukkit.getPluginManager().callEvent(event);
-                if (event.isCancelled()) {
-                    continue;
+            if(this.dropItem != null){
+                ItemStack itemstack = this.dropItem;
+                this.handleDigDrops(itemstack, blockposition, list, worldserver);
+            }else{
+                while (iterator.hasNext()) {
+                    ItemStack itemstack = (ItemStack) iterator.next();
+                    this.handleDigDrops(itemstack, blockposition, list, worldserver);
                 }
-                // CraftBukkit end
-                entityitem.setDefaultPickUpDelay();
-                worldserver.addFreshEntity(entityitem);
             }
 
             this.playSound(SoundEvents.SNIFFER_DROP_SEED, 1.0F, 1.0F);
         }
     }
 
+    private void handleDigDrops(ItemStack itemstack, BlockPos blockposition, List<ItemStack> list, ServerLevel worldserver){
+        ItemEntity entityitem = new ItemEntity(worldserver, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), itemstack);
+    
+        // CraftBukkit start - handle EntityDropItemEvent
+        org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
+        org.bukkit.Bukkit.getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return;
+        }
+        // CraftBukkit end
+        entityitem.setDefaultPickUpDelay();
+        worldserver.addFreshEntity(entityitem);
+    }
+    // Canvas end
+
     private Sniffer emitDiggingParticles(AnimationState diggingAnimationState) {
         boolean flag = diggingAnimationState.getAccumulatedTime() > 1700L && diggingAnimationState.getAccumulatedTime() < 6000L;
 
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
index dc7804371b65c43367ec87e79433106e8a11a6ff..2c27177177d7e169b8cb8f2e90ea8bc90f7f4399 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
@@ -79,8 +79,8 @@ public class EnderDragon extends Mob implements Enemy {
     public int posPointer = -1;
     public final EnderDragonPart[] subEntities;
     public final EnderDragonPart head;
-    private final EnderDragonPart neck;
-    private final EnderDragonPart body;
+    public final EnderDragonPart neck; // Canvas
+    public final EnderDragonPart body; // Canvas
     private final EnderDragonPart tail1;
     private final EnderDragonPart tail2;
     private final EnderDragonPart tail3;
@@ -548,7 +548,7 @@ public class EnderDragon extends Mob implements Enemy {
 
     }
 
-    private void knockBack(List<Entity> entities) {
+    public void knockBack(List<Entity> entities) {
         double d0 = (this.body.getBoundingBox().minX + this.body.getBoundingBox().maxX) / 2.0D;
         double d1 = (this.body.getBoundingBox().minZ + this.body.getBoundingBox().maxZ) / 2.0D;
         Iterator iterator = entities.iterator();
@@ -589,7 +589,7 @@ public class EnderDragon extends Mob implements Enemy {
         return (float) Mth.wrapDegrees(yawDegrees);
     }
 
-    private boolean checkWalls(AABB box) {
+    public boolean checkWalls(AABB box) {
         int i = Mth.floor(box.minX);
         int j = Mth.floor(box.minY);
         int k = Mth.floor(box.minZ);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Blaze.java b/src/main/java/net/minecraft/world/entity/monster/Blaze.java
index a8b58469fd8a1ed4ec0ce443cf05557903527bd7..8636a7fe9032e8400ef473a5fb9b40feb3dbb6a4 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Blaze.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Blaze.java
@@ -186,7 +186,7 @@ public class Blaze extends Monster {
         return (this.entityData.get(DATA_FLAGS_ID) & 1) != 0;
     }
 
-    void setCharged(boolean fireActive) {
+    public void setCharged(boolean fireActive) { // Canvas
         byte b = this.entityData.get(DATA_FLAGS_ID);
         if (fireActive) {
             b = (byte)(b | 1);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Drowned.java b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
index 034bb2d1292dde6276885c3ea71d886c3894311c..72e8f4c4d10f95a245be2d705a2fb9630da40def 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Drowned.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
@@ -56,7 +56,7 @@ import net.minecraft.world.phys.Vec3;
 public class Drowned extends Zombie implements RangedAttackMob {
 
     public static final float NAUTILUS_SHELL_CHANCE = 0.03F;
-    boolean searchingForLand;
+    public boolean searchingForLand;
     public final WaterBoundPathNavigation waterNavigation;
     public final GroundPathNavigation groundNavigation;
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java b/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
index df8d1b34078031001c50325b8cf5bfa9a5c361fd..4377f54d1e110268a34d4d2a2380245402ac3b3a 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
@@ -20,12 +20,55 @@ import org.joml.Vector3f;
 
 public class ElderGuardian extends Guardian {
 
-    public static final float ELDER_SIZE_SCALE = EntityType.ELDER_GUARDIAN.getWidth() / EntityType.GUARDIAN.getWidth();
-    private static final int EFFECT_INTERVAL = 1200;
-    private static final int EFFECT_RADIUS = 50;
-    private static final int EFFECT_DURATION = 6000;
-    private static final int EFFECT_AMPLIFIER = 2;
-    private static final int EFFECT_DISPLAY_LIMIT = 1200;
+    // Canvas start
+    public static float ELDER_SIZE_SCALE = EntityType.ELDER_GUARDIAN.getWidth() / EntityType.GUARDIAN.getWidth();
+    private static int EFFECT_INTERVAL = 1200;
+    private static int EFFECT_RADIUS = 50;
+    private static int EFFECT_DURATION = 6000;
+    private static int EFFECT_AMPLIFIER = 2;
+    private static int EFFECT_DISPLAY_LIMIT = 1200;
+
+    public void setEffectAmplifier(final int effectAmplifier) {
+        EFFECT_AMPLIFIER = effectAmplifier;
+    }
+
+    public int getEffectDuration() {
+        return EFFECT_DURATION;
+    }
+
+    public void setEffectDuration(final int effectDuration) {
+        EFFECT_DURATION = effectDuration;
+    }
+
+    public int getEffectAmplifier() {
+        return EFFECT_AMPLIFIER;
+    }
+
+    public int getEffectDisplayLimit() {
+        return EFFECT_DISPLAY_LIMIT;
+    }
+
+    public void setEffectDisplayLimit(final int effectDisplayLimit) {
+        EFFECT_DISPLAY_LIMIT = effectDisplayLimit;
+    }
+
+    public int getEffectInterval() {
+        return EFFECT_INTERVAL;
+    }
+
+    public void setEffectInterval(final int effectInterval) {
+        EFFECT_INTERVAL = effectInterval;
+    }
+
+    public int getEffectRadius() {
+        return EFFECT_RADIUS;
+    }
+
+    public void setEffectRadius(final int effectRadius) {
+        EFFECT_RADIUS = effectRadius;
+    }
+
+    // Canvas end
 
     public ElderGuardian(EntityType<? extends ElderGuardian> type, Level world) {
         super(type, world);
diff --git a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
index c0180f3d7ef4f22bf967b2acc3dde3925283415d..ebd6fc2ed7dfaa57d6db1612baf313dbb2d3fbd3 100644
--- a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
+++ b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
@@ -87,7 +87,7 @@ public class EnderMan extends Monster implements NeutralMob {
     private static final EntityDataAccessor<Boolean> DATA_STARED_AT = SynchedEntityData.defineId(EnderMan.class, EntityDataSerializers.BOOLEAN);
     private int lastStareSound = Integer.MIN_VALUE;
     private int targetChangeTime;
-    private static final UniformInt PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);
+    public UniformInt PERSISTENT_ANGER_TIME; // Canvas
     private int remainingPersistentAngerTime;
     @Nullable
     private UUID persistentAngerTarget;
@@ -96,8 +96,19 @@ public class EnderMan extends Monster implements NeutralMob {
         super(type, world);
         this.setMaxUpStep(1.0F);
         if (isSensitiveToWater()) this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F); // Purpur
+        PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(minRangeAnger, maxRangeAnger);
     }
 
+    // Canvas start
+    public int minRangeAnger = 20;
+    public int maxRangeAnger = 39;
+    public void setPersistentAngerTime(int min, int max){
+        this.PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(min, max);
+        this.maxRangeAnger = max;
+        this.minRangeAnger = min;
+    }
+    // Canvas end
+
     // Purpur start
     @Override
     public boolean isRidable() {
@@ -194,7 +205,7 @@ public class EnderMan extends Monster implements NeutralMob {
 
     @Override
     public void startPersistentAngerTimer() {
-        this.setRemainingPersistentAngerTime(EnderMan.PERSISTENT_ANGER_TIME.sample(this.random));
+        this.setRemainingPersistentAngerTime(this.PERSISTENT_ANGER_TIME.sample(this.random)); // Canvas
     }
 
     @Override
@@ -272,7 +283,7 @@ public class EnderMan extends Monster implements NeutralMob {
         event.setCancelled(!shouldAttack);
         return event.callEvent();
     }
-    private boolean isLookingAtMe_check(Player player) {
+    public boolean isLookingAtMe_check(Player player) {
         // Paper end
         ItemStack itemstack = (ItemStack) player.getInventory().armor.get(3);
 
@@ -359,7 +370,7 @@ public class EnderMan extends Monster implements NeutralMob {
         return this.teleport(d1, d2, d3);
     }
 
-    private boolean teleport(double x, double y, double z) {
+    public boolean teleport(double x, double y, double z) { // Canvas
         BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos(x, y, z);
 
         while (blockposition_mutableblockposition.getY() > this.level().getMinBuildHeight() && !this.level().getBlockState(blockposition_mutableblockposition).blocksMotion()) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Evoker.java b/src/main/java/net/minecraft/world/entity/monster/Evoker.java
index daee6c4c0c2d43b65cdfd691bbbdc72465702dfe..58415e62d4249163e4688fc836e1d5db92e7fde9 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Evoker.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Evoker.java
@@ -82,17 +82,29 @@ public class Evoker extends SpellcasterIllager {
     protected boolean isAlwaysExperienceDropper() {
         return this.level().purpurConfig.evokerAlwaysDropExp;
     }
+    // Canvas start
+    public Evoker.EvokerSummonSpellGoal summonSpellGoal;
+    public Evoker.EvokerCastingSpellGoal castingSpellGoal;
+    public Evoker.EvokerAttackSpellGoal attackSpellGoal;
+    public Evoker.EvokerWololoSpellGoal wololoSpellGoal;
+    // Canvas end
 
     @Override
     protected void registerGoals() {
         super.registerGoals();
         this.goalSelector.addGoal(0, new FloatGoal(this));
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
-        this.goalSelector.addGoal(1, new Evoker.EvokerCastingSpellGoal());
+        this.goalSelector.addGoal(1, castingSpellGoal); // Canvas
         this.goalSelector.addGoal(2, new AvoidEntityGoal<>(this, Player.class, 8.0F, 0.6D, 1.0D));
-        this.goalSelector.addGoal(4, new Evoker.EvokerSummonSpellGoal());
-        this.goalSelector.addGoal(5, new Evoker.EvokerAttackSpellGoal());
-        this.goalSelector.addGoal(6, new Evoker.EvokerWololoSpellGoal());
+        // Canvas start
+        summonSpellGoal = new EvokerSummonSpellGoal();
+        castingSpellGoal = new EvokerCastingSpellGoal();
+        attackSpellGoal = new EvokerAttackSpellGoal();
+        wololoSpellGoal = new EvokerWololoSpellGoal();
+        this.goalSelector.addGoal(4, summonSpellGoal);
+        this.goalSelector.addGoal(5, attackSpellGoal);
+        this.goalSelector.addGoal(6, wololoSpellGoal);
+        // Canvas end
         this.goalSelector.addGoal(8, new RandomStrollGoal(this, 0.6D));
         this.goalSelector.addGoal(9, new LookAtPlayerGoal(this, Player.class, 3.0F, 1.0F));
         this.goalSelector.addGoal(10, new LookAtPlayerGoal(this, Mob.class, 8.0F));
@@ -186,7 +198,7 @@ public class Evoker extends SpellcasterIllager {
         }
     }
 
-    private class EvokerSummonSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal {
+    public class EvokerSummonSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal { // Canvas - private -> public
 
         private final TargetingConditions vexCountTargeting = TargetingConditions.forNonCombat().range(16.0D).ignoreLineOfSight().ignoreInvisibilityTesting();
 
@@ -206,17 +218,17 @@ public class Evoker extends SpellcasterIllager {
         }
 
         @Override
-        protected int getCastingTime() {
+        public int getCastingTime() { // Canvas - protected -> private
             return 100;
         }
 
         @Override
-        protected int getCastingInterval() {
+        public int getCastingInterval() { // Canvas - protected -> private
             return 340;
         }
 
         @Override
-        protected void performSpellCasting() {
+        public void performSpellCasting() { // Canvas - protected -> private
             ServerLevel worldserver = (ServerLevel) Evoker.this.level();
             PlayerTeam scoreboardteam = Evoker.this.getTeam();
 
@@ -252,7 +264,7 @@ public class Evoker extends SpellcasterIllager {
         }
     }
 
-    private class EvokerAttackSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal {
+    public class EvokerAttackSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal { // Canvas - private -> public
 
         EvokerAttackSpellGoal() {
             super();
@@ -269,7 +281,7 @@ public class Evoker extends SpellcasterIllager {
         }
 
         @Override
-        protected void performSpellCasting() {
+        public void performSpellCasting() { // Canvas - protected -> private
             LivingEntity entityliving = Evoker.this.getTarget();
             double d0 = Math.min(entityliving.getY(), Evoker.this.getY());
             double d1 = Math.max(entityliving.getY(), Evoker.this.getY()) + 1.0D;
@@ -343,7 +355,7 @@ public class Evoker extends SpellcasterIllager {
         }
     }
 
-    public class EvokerWololoSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal {
+    public class EvokerWololoSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal { // Canvas - private -> public
 
         private final TargetingConditions wololoTargeting = TargetingConditions.forNonCombat().range(16.0D).selector((entityliving) -> {
             return ((Sheep) entityliving).getColor() == DyeColor.BLUE;
@@ -387,7 +399,7 @@ public class Evoker extends SpellcasterIllager {
         }
 
         @Override
-        protected void performSpellCasting() {
+        public void performSpellCasting() { // Canvas - protected -> private
             Sheep entitysheep = Evoker.this.getWololoTarget();
 
             if (entitysheep != null && entitysheep.isAlive()) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ghast.java b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
index 640f0c378a18cf0a820ad544bb3b172b698c6bfc..67fd40c6ed3644d33706f541d332f10d188b9f61 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ghast.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
@@ -77,14 +77,19 @@ public class Ghast extends FlyingMob implements Enemy {
             setDeltaMovement(mot.scale(0.9D));
         }
     }
-    // Purpur end
+    // Purpur end -/- Canvas start
+    public GhastShootFireballGoal shootFireballGoal;
+    // Canvas end
 
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(5, new Ghast.RandomFloatAroundGoal(this));
         this.goalSelector.addGoal(7, new Ghast.GhastLookGoal(this));
-        this.goalSelector.addGoal(7, new Ghast.GhastShootFireballGoal(this));
+        // Canvas start
+        this.shootFireballGoal = new GhastShootFireballGoal(this);
+        this.goalSelector.addGoal(7, shootFireballGoal);
+        // Canvas end
         this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, (entityliving) -> {
             return Math.abs(entityliving.getY() - this.getY()) <= 4.0D;
@@ -114,7 +119,7 @@ public class Ghast extends FlyingMob implements Enemy {
         return true;
     }
 
-    private static boolean isReflectedFireball(DamageSource damageSource) {
+    public static boolean isReflectedFireball(DamageSource damageSource) {
         return damageSource.getDirectEntity() instanceof LargeFireball && damageSource.getEntity() instanceof Player;
     }
 
@@ -348,7 +353,7 @@ public class Ghast extends FlyingMob implements Enemy {
         }
     }
 
-    private static class GhastShootFireballGoal extends Goal {
+    public class GhastShootFireballGoal extends Goal { // Canvas - private -> public
 
         private final Ghast ghast;
         public int chargeTime;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Husk.java b/src/main/java/net/minecraft/world/entity/monster/Husk.java
index 06a5106a94a44c1d21537410d801cdd945503d69..5d6e3740485b4363b0b41188b430456a49490d3f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Husk.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Husk.java
@@ -16,6 +16,8 @@ import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.ServerLevelAccessor;
+
+import org.bukkit.craftbukkit.entity.CraftEntityType;
 import org.joml.Vector3f;
 
 public class Husk extends Zombie {
@@ -120,18 +122,36 @@ public class Husk extends Zombie {
     }
 
     @Override
-    protected boolean convertsInWater() {
-        return true;
+    public boolean convertsInWater() { // Canvas - protected -> public
+        return converts;
+    }
+
+    // Canvas start
+    public boolean converts = true;
+    public void setShouldConvertInWater(boolean shouldConvertInWater){
+        this.converts = shouldConvertInWater;
+    }
+
+    public void setEntityConversionType(org.bukkit.entity.EntityType entityType){
+        this.entityConversionType = CraftEntityType.bukkitToMinecraft(entityType);
     }
 
+    public org.bukkit.entity.EntityType getEntityConversionType(){
+        return CraftEntityType.minecraftToBukkit(this.entityConversionType);
+    }
+
+    private EntityType entityConversionType = EntityType.ZOMBIE;
+
     @Override
-    protected void doUnderWaterConversion() {
-        this.convertToZombieType(EntityType.ZOMBIE);
-        if (!this.isSilent()) {
-            this.level().levelEvent((Player) null, 1041, this.blockPosition(), 0);
+    public void doUnderWaterConversion() { // Canvas - protected -> public
+        if(convertsInWater()){
+            this.convertToZombieType(this.entityConversionType);
+            if (!this.isSilent()) {
+                this.level().levelEvent((Player) null, 1041, this.blockPosition(), 0);
+            }
         }
-
     }
+    // Canvas end
 
     @Override
     protected ItemStack getSkull() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java b/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
index 1ad97267394d3717b1871336193cdc91f3ffb276..aee214544214e646632f654d79a5b5b12cde2c43 100644
--- a/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
+++ b/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
@@ -131,7 +131,7 @@ public class MagmaCube extends Slime {
     }
 
     @Override
-    protected void jumpInLiquid(TagKey<Fluid> fluid) {
+    public void jumpInLiquid(TagKey<Fluid> fluid) { // Canvas - protected -> public
         if (fluid == FluidTags.LAVA) {
             Vec3 vec3 = this.getDeltaMovement();
             this.setDeltaMovement(vec3.x, (double)(0.22F + (float)this.getSize() * 0.05F), vec3.z);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ravager.java b/src/main/java/net/minecraft/world/entity/monster/Ravager.java
index c9c21c87e3bd1c404fbef6768761bcb5d97d98b9..efce0f8cbdfcdc04016974e297275d477be45c70 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ravager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ravager.java
@@ -274,7 +274,7 @@ public class Ravager extends Raider {
 
     }
 
-    private void roar() {
+    public void roar() { // Canvas - private -> public
         if (this.isAlive()) {
             List<? extends LivingEntity> list = this.level().getEntitiesOfClass(LivingEntity.class, this.getBoundingBox().inflate(4.0D), Ravager.NO_RAVAGER_AND_ALIVE);
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
index f4a47ac2c86cc95178922cce7320ba1ef5121b57..023689fdbcd60d927aee6479d7c6d14f80295f78 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
@@ -26,7 +26,7 @@ import net.minecraft.core.particles.ParticleTypes;
 
 public class Skeleton extends AbstractSkeleton {
 
-    private static final int TOTAL_CONVERSION_TIME = 300;
+    private int TOTAL_CONVERSION_TIME = 300; // Canvas - static/final -> private
     public static final EntityDataAccessor<Boolean> DATA_STRAY_CONVERSION_ID = SynchedEntityData.defineId(Skeleton.class, EntityDataSerializers.BOOLEAN);
     public static final String CONVERSION_TAG = "StrayConversionTime";
     public int inPowderSnowTime;
@@ -82,6 +82,19 @@ public class Skeleton extends AbstractSkeleton {
         this.entityData.set(Skeleton.DATA_STRAY_CONVERSION_ID, converting);
     }
 
+    // Canvas start
+    public void forceFreezeConvert(){
+        Stray stray = this.convertTo(EntityType.STRAY, true, org.bukkit.event.entity.EntityTransformEvent.TransformReason.FROZEN, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.FROZEN);
+    }
+
+    public void forceFreezeConvert(boolean resetConvertTimer){
+        Stray stray = this.convertTo(EntityType.STRAY, true, org.bukkit.event.entity.EntityTransformEvent.TransformReason.FROZEN, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.FROZEN);
+        if(stray != null){
+            this.conversionTime = MAX_CONVERSION_TIME;
+        }
+    }
+    // Canvas end
+
     @Override
     public boolean isShaking() {
         return this.isFreezeConverting();
@@ -131,19 +144,31 @@ public class Skeleton extends AbstractSkeleton {
         this.setFreezeConverting(true);
     }
 
-    protected void doFreezeConversion() {
+    public void doFreezeConversion() { // Canvas - protected -> public
         Stray stray = this.convertTo(EntityType.STRAY, true, org.bukkit.event.entity.EntityTransformEvent.TransformReason.FROZEN, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.FROZEN); // CraftBukkit - add spawn and transform reasons // Paper - track result of conversion
         if (!this.isSilent()) {
             this.level().levelEvent((Player) null, 1048, this.blockPosition(), 0);
         }
         // Paper start - reset conversion time to prevent event spam
         if (stray == null) {
-            this.conversionTime = 300;
+            this.conversionTime = MAX_CONVERSION_TIME; // Canvas - Change to make conversion time configurable
         }
         // Paper end
 
     }
 
+    // Canvas start
+    public int MAX_CONVERSION_TIME = 300;
+
+    public void setMaxConversionTime(int time){
+        this.MAX_CONVERSION_TIME = time;
+    }
+
+    public int getMaxConversionTime(){
+        return this.MAX_CONVERSION_TIME;
+    }
+    // Canvas end
+
     @Override
     public boolean canFreeze() {
         return false;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Strider.java b/src/main/java/net/minecraft/world/entity/monster/Strider.java
index 2f49b528601a1feb7246fe7a9b83ce828c2d78fc..63feee4f0b8cffab20f523cb2bf069b8099e354f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Strider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Strider.java
@@ -82,7 +82,7 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
     private static final float SUFFOCATE_STEERING_MODIFIER = 0.35F;
     private static final float STEERING_MODIFIER = 0.55F;
     private static final Ingredient FOOD_ITEMS = Ingredient.of(Items.WARPED_FUNGUS);
-    private static final Ingredient TEMPT_ITEMS = Ingredient.of(Items.WARPED_FUNGUS, Items.WARPED_FUNGUS_ON_A_STICK);
+    // private static final Ingredient TEMPT_ITEMS = Ingredient.of(Items.WARPED_FUNGUS, Items.WARPED_FUNGUS_ON_A_STICK); - Canvas - move to this.rideItem for steering item customization
     private static final EntityDataAccessor<Integer> DATA_BOOST_TIME = SynchedEntityData.defineId(Strider.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_SUFFOCATING = SynchedEntityData.defineId(Strider.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_SADDLE_ID = SynchedEntityData.defineId(Strider.class, EntityDataSerializers.BOOLEAN);
@@ -189,13 +189,35 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
         }
 
     }
+    // Canvas start
+    public TemptGoal RIDE_ITEM_GOAL;
+    public net.minecraft.world.item.Item rideItem = Items.WARPED_FUNGUS_ON_A_STICK;
+
+    public void setRideItem(org.bukkit.Material material){
+        this.rideItem = org.bukkit.craftbukkit.util.CraftMagicNumbers.getItem(material);
+        this.updateRideGoal();
+    }
+
+    protected void updateRideGoal(){
+        this.goalSelector.removeGoal(this.RIDE_ITEM_GOAL);
+        this.RIDE_ITEM_GOAL = new TemptGoal(this, 1.2D, Ingredient.of(this.rideItem), false);
+        this.goalSelector.addGoal(4, this.RIDE_ITEM_GOAL);
+    }
+
+    public org.bukkit.Material getRideItem(){
+        return org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(this.rideItem);
+    }
+    // Canvas end
 
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(1, new PanicGoal(this, 1.65D));
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(2, new BreedGoal(this, 1.0D));
-        this.temptGoal = new TemptGoal(this, 1.4D, Strider.TEMPT_ITEMS, false);
+        // Canvas start
+        this.RIDE_ITEM_GOAL = new TemptGoal(this, 1.2D, Ingredient.of(this.rideItem), false);
+        this.goalSelector.addGoal(4, this.RIDE_ITEM_GOAL);
+        // Canvas end
         this.goalSelector.addGoal(3, this.temptGoal);
         this.goalSelector.addGoal(4, new Strider.StriderGoToLavaGoal(this, 1.0D));
         this.goalSelector.addGoal(5, new FollowParentGoal(this, 1.0D));
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
index df8c7a45eb49a8c667030eb67d6d49dcbaef4fcf..b4afe3565e7bbbaa655031613f28377df5dccc53 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
@@ -124,6 +124,12 @@ public class ZombifiedPiglin extends Zombie implements NeutralMob {
         this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt));
         this.targetSelector.addGoal(3, new ResetUniversalAngerTargetGoal<>(this, true));
     }
+    // Canvas start
+    
+    public void convertToNormal(){
+        this.convertTo(EntityType.PIGLIN, true);
+    }
+    // Canvas end
 
     public static AttributeSupplier.Builder createAttributes() {
         return Zombie.createAttributes().add(Attributes.SPAWN_REINFORCEMENTS_CHANCE, 0.0D).add(Attributes.MOVEMENT_SPEED, 0.23000000417232513D).add(Attributes.ATTACK_DAMAGE, 5.0D);
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index 2174a583b6db56520fa7523adc3c09e56ed7e85e..902167b44fafb836254ec53792f005e5cd4dc159 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -95,8 +95,13 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
         super(type, world);
         this.xpReward = 5;
     }
+    // Canvas start
 
-    // Purpur start
+    public void convertToZombified(){
+        this.convertTo(EntityType.ZOMBIFIED_PIGLIN, true);
+    }
+    // Canvas end -/- Purpur start
+    
     @Override
     public boolean isRidable() {
         return level().purpurConfig.piglinRidable;
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
index 656c4ee100364a3299cb78f7173ee0506d46ff04..0951429ab0e1b375aa35386fb2c8b9c04f559373 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.monster.warden;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.collect.ImmutableList;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
@@ -47,12 +48,17 @@ import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
+import net.minecraft.world.entity.ai.behavior.MeleeAttack;
+import net.minecraft.world.entity.ai.behavior.SetEntityLookTarget;
+import net.minecraft.world.entity.ai.behavior.SetWalkTargetFromAttackTargetIfTargetOutOfReach;
+import net.minecraft.world.entity.ai.behavior.StopAttackingIfTargetInvalid;
 import net.minecraft.world.entity.ai.behavior.warden.SonicBoom;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.navigation.GroundPathNavigation;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
 import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.entity.schedule.Activity;
 import net.minecraft.world.level.Explosion;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelReader;
@@ -187,11 +193,19 @@ public class Warden extends Monster implements VibrationSystem {
         return false;
     }
 
+    // Canvas start
     @Override
     public boolean canDisableShield() {
-        return true;
+        return canDisableShield;
+    }
+
+    public void setCanDisableShield(boolean canDisableShield){
+        this.canDisableShield = canDisableShield;
     }
 
+    public boolean canDisableShield = true;
+    // Canvas end
+
     @Override
     protected float nextStep() {
         return this.moveDist + 0.55F;
@@ -588,6 +602,22 @@ public class Warden extends Monster implements VibrationSystem {
         SonicBoom.setCooldown(this, 200);
     }
 
+    // Canvas start
+    /* public void trySonicBoom(Warden warden, Brain<Warden> brain){
+        brain.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(DIG_COOLDOWN_SETTER, StopAttackingIfTargetInvalid.<Warden>create((entity) -> {
+            return !warden.getAngerLevel().isAngry() || !warden.canTargetEntity(entity);
+        }, WardenAi::onTargetInvalid, false), SetEntityLookTarget.create((entity) -> {
+            return isTarget(warden, entity);
+        }, (float)warden.getAttributeValue(Attributes.FOLLOW_RANGE)), SetWalkTargetFromAttackTargetIfTargetOutOfReach.create(1.2F), new SonicBoom(), MeleeAttack.create(18)), MemoryModuleType.ATTACK_TARGET);
+    } */
+
+    private boolean isTarget(Warden warden, LivingEntity entity) {
+        return warden.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).filter((entityx) -> {
+            return entityx == entity;
+        }).isPresent();
+    }
+    // Canvas end
+
     @Override
     public EntityDimensions getDimensions(Pose pose) {
         EntityDimensions entitysize = super.getDimensions(pose);
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index fe68013f8efa35e6dfcf658df3b33d9d3df73979..48f65cd1d3db7c328c1cbf4f21255332674ce6ea 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -519,7 +519,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
 
     }
 
-    private boolean needsToRestock() {
+    public boolean needsToRestock() { // Canvas - private -> public
         Iterator iterator = this.getOffers().iterator();
 
         MerchantOffer merchantrecipe;
@@ -587,7 +587,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         this.resendOffersToTradingPlayer();
     }
 
-    private void updateDemand() {
+    public void updateDemand() { // Canvas - private -> public
         Iterator iterator = this.getOffers().iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
index 8b02ca7a0ea5299a319809cdd2ccc8acd0e647bc..10f331ba8253768669d122660e7c7e7cd698d144 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
@@ -200,6 +200,20 @@ public class Arrow extends AbstractArrow {
         }
 
     }
+    // Canvas start
+    protected float divisor = 8;
+
+    public float getDivisor(){
+        return divisor;
+    }
+
+    public void setDivisor(float divisor){
+        if(divisor == 0){
+            divisor = 1;
+        }
+        this.divisor = divisor;
+    }
+    // Canvas end
 
     @Override
     protected void doPostHurtEffects(LivingEntity target) {
@@ -212,7 +226,7 @@ public class Arrow extends AbstractArrow {
         while (iterator.hasNext()) {
             mobeffect = (MobEffectInstance) iterator.next();
             target.addEffect(new MobEffectInstance(mobeffect.getEffect(), Math.max(mobeffect.mapDuration((i) -> {
-                return i / 8;
+                return carpetfixes.helpers.FastMath.round(i / this.divisor); // Canvas
             }), 1), mobeffect.getAmplifier(), mobeffect.isAmbient(), mobeffect.isVisible()), entity, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ARROW); // CraftBukkit
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/projectile/DragonFireball.java b/src/main/java/net/minecraft/world/entity/projectile/DragonFireball.java
index 6256ce68d6ecada66745fb09360cba2bf991360c..1d8aa652b52539ed64a5a0d8dc5dd399db4393b0 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/DragonFireball.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/DragonFireball.java
@@ -73,12 +73,12 @@ public class DragonFireball extends AbstractHurtingProjectile {
     }
 
     @Override
-    protected ParticleOptions getTrailParticle() {
+    public ParticleOptions getTrailParticle() { // Canvas
         return ParticleTypes.DRAGON_BREATH;
     }
 
     @Override
-    protected boolean shouldBurn() {
+    public boolean shouldBurn() { // Canvas
         return false;
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrowableProjectile.java b/src/main/java/net/minecraft/world/entity/projectile/ThrowableProjectile.java
index ab777952bda1651796ed41e8a7fc6621f27db9aa..65b99cfaa75169b5d445b30d53af2a56b0813b26 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrowableProjectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrowableProjectile.java
@@ -100,7 +100,14 @@ public abstract class ThrowableProjectile extends Projectile {
         this.setPos(d0, d1, d2);
     }
 
-    protected float getGravity() {
-        return 0.03F;
+    public float getGravity() { // Canvas - protected -> public
+        return this.gravity; // Canvas - use custom value
     }
+    // Canvas start
+    private float gravity = 0.03f;
+
+    public void setGravity(float gravity){
+        this.gravity = gravity;
+    }
+    // Canvas end
 }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownExperienceBottle.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownExperienceBottle.java
index e53046c6d47b4fd3d82132bc980a31b9491df6a7..ccf3c53560ed94f092ff9b7f97a6246d7f1cb248 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownExperienceBottle.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownExperienceBottle.java
@@ -31,7 +31,7 @@ public class ThrownExperienceBottle extends ThrowableItemProjectile {
     }
 
     @Override
-    protected float getGravity() {
+    public float getGravity() { // Canvas - protected -> public
         return 0.07F;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java
index b34dbb083ecc3a6ead7721391a79e7061e098498..495a2602ed59231f265988fa514df658ff23325d 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java
@@ -66,7 +66,7 @@ public class ThrownPotion extends ThrowableItemProjectile implements ItemSupplie
     }
 
     @Override
-    protected float getGravity() {
+    public float getGravity() { // Canvas - protected -> public
         return 0.05F;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java b/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
index aa5ce9625bf23885a55521cbb4d994b684a5cf61..f12e2d66dacbf9c340f37820045e397c81a768ab 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
@@ -37,7 +37,7 @@ public class WitherSkull extends AbstractHurtingProjectile {
     }
 
     @Override
-    protected float getInertia() {
+    public float getInertia() {
         return this.isDangerous() ? 0.73F : super.getInertia();
     }
 
@@ -145,7 +145,7 @@ public class WitherSkull extends AbstractHurtingProjectile {
     }
 
     @Override
-    protected boolean shouldBurn() {
+    public boolean shouldBurn() {
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
index 7e9c88efd2a1edea673d1ef81635c2891a04d30e..b1179ece0166b7bb8bce57aed79f916b8bbe9504 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
@@ -2,8 +2,10 @@ package net.minecraft.world.entity.vehicle;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.UnmodifiableIterator;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.function.IntFunction;
 import javax.annotation.Nullable;
 import net.minecraft.BlockUtil;
@@ -238,42 +240,62 @@ public class Boat extends VehicleEntity implements VariantHolder<Boat.Type> {
 
     }
 
-    @Override
     public Item getDropItem() {
         Item item;
 
         switch (this.getVariant()) {
             case SPRUCE:
-                item = Items.SPRUCE_BOAT;
+                item = boatDropMap.get(Type.SPRUCE);
                 break;
             case BIRCH:
-                item = Items.BIRCH_BOAT;
+                item = boatDropMap.get(Type.BIRCH);
                 break;
             case JUNGLE:
-                item = Items.JUNGLE_BOAT;
+                item = boatDropMap.get(Type.JUNGLE);
                 break;
             case ACACIA:
-                item = Items.ACACIA_BOAT;
+                item = boatDropMap.get(Type.ACACIA);
                 break;
             case CHERRY:
-                item = Items.CHERRY_BOAT;
+                item = boatDropMap.get(Type.CHERRY);
                 break;
             case DARK_OAK:
-                item = Items.DARK_OAK_BOAT;
+                item = boatDropMap.get(Type.DARK_OAK);
                 break;
             case MANGROVE:
-                item = Items.MANGROVE_BOAT;
+                item = boatDropMap.get(Type.MANGROVE);
                 break;
             case BAMBOO:
-                item = Items.BAMBOO_RAFT;
+                item = boatDropMap.get(Type.BAMBOO);
                 break;
             default:
-                item = Items.OAK_BOAT;
+                item = boatDropMap.get(Type.OAK);
         }
 
         return item;
     }
 
+    public static Map<Type, Item> boatDropMap = new HashMap<>();
+
+    public static void setupBoatDropMap(){
+        boatDropMap.clear();
+        boatDropMap.put(Type.SPRUCE, Items.SPRUCE_BOAT);
+        boatDropMap.put(Type.BIRCH, Items.BIRCH_BOAT);
+        boatDropMap.put(Type.JUNGLE, Items.JUNGLE_BOAT);
+        boatDropMap.put(Type.ACACIA, Items.ACACIA_BOAT);
+        boatDropMap.put(Type.CHERRY, Items.CHERRY_BOAT);
+        boatDropMap.put(Type.DARK_OAK, Items.DARK_OAK_BOAT);
+        boatDropMap.put(Type.MANGROVE, Items.MANGROVE_BOAT);
+        boatDropMap.put(Type.BAMBOO, Items.BAMBOO_RAFT);
+        boatDropMap.put(Type.OAK, Items.OAK_BOAT);
+    }
+
+    public Map<Type, Item> getBoatDropMap(){
+        return boatDropMap;
+    }
+
+    // Canvas end
+
     @Override
     public void animateHurt(float yaw) {
         this.setHurtDir(-this.getHurtDir());
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java b/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java
index bc3fe45d12ffc2069a03d1587b7623d31130565a..a6b9382c64fc69f2ecb755a7deb7f8982932ad3e 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java
@@ -77,12 +77,16 @@ public class ChestBoat extends Boat implements HasCustomInventoryScreen, Contain
         this.readChestVehicleSaveData(nbt);
     }
 
+    /* -- Canvas start
+
     @Override
     public void destroy(DamageSource source) {
         this.destroy(this.getDropItem());
         this.chestVehicleDestroyed(source, this.level(), this);
     }
 
+    Canvas end -- */
+
     @Override
     public void remove(Entity.RemovalReason reason) {
         if (!this.level().isClientSide && reason.shouldDestroy()) {
@@ -118,6 +122,8 @@ public class ChestBoat extends Boat implements HasCustomInventoryScreen, Contain
 
     }
 
+    /* -- Canvas start
+
     @Override
     public Item getDropItem() {
         Item item;
@@ -154,6 +160,8 @@ public class ChestBoat extends Boat implements HasCustomInventoryScreen, Contain
         return item;
     }
 
+     Canvas end -- */
+
     @Override
     public void clearContent() {
         this.clearChestVehicleContent();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index fc8a7ce4181a117316798c762eefb3e35d593f90..7dc228278dfd41deea27a29288dd7a241815f87c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -92,6 +92,7 @@ import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ai.village.VillageSiege;
 import net.minecraft.world.entity.npc.CatSpawner;
 import net.minecraft.world.entity.npc.WanderingTraderSpawner;
+import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.CraftingContainer;
 import net.minecraft.world.inventory.CraftingMenu;
@@ -196,6 +197,7 @@ import org.bukkit.craftbukkit.packs.CraftDataPackManager;
 import org.bukkit.craftbukkit.potion.CraftPotionBrewer;
 import org.bukkit.craftbukkit.profile.CraftPlayerProfile;
 import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
 import org.bukkit.craftbukkit.scoreboard.CraftCriteria;
 import org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager;
 import org.bukkit.craftbukkit.structure.CraftStructureManager;
@@ -495,6 +497,8 @@ public final class CraftServer implements Server {
             MapPalette.setMapColorCache(new CraftMapColorCache(this.logger));
         }
         datapackManager = new io.papermc.paper.datapack.PaperDatapackManager(console.getPackRepository()); // Paper
+        Boat.setupBoatDropMap(); // Canvas - setup drop mappings
+        Bukkit.getPluginManager().registerEvents(new MinecraftInternalPlugin(), new MinecraftInternalPlugin()); // Canvas - register as listener
     }
 
     public boolean getCommandBlockOverride(String command) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
index f9cd595ec28f0284d11bae6bfc5bf92d56526ef9..a45eea96de7c89d1a414b4289862cb8a1dcd6136 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
@@ -96,6 +96,18 @@ public abstract class CraftAbstractHorse extends CraftAnimals implements Abstrac
         return this.getHandle().getOwnerUUID();
     }
 
+    // Canvas start
+    @Override
+    public void skeletonify(){
+        this.getHandle().skeletonify();
+    }
+
+    @Override
+    public void zombify(){
+        this.getHandle().zombify();
+    }
+    // Canvas end
+
     public void setOwnerUUID(UUID uuid) {
         this.getHandle().setOwnerUUID(uuid);
     }
@@ -145,5 +157,21 @@ public abstract class CraftAbstractHorse extends CraftAnimals implements Abstrac
     public void setEating(boolean eating) {
        this.getHandle().setMouthOpen(eating);
     }
-    // Paper end - Horse API
+
+    // Canvas start
+    @Override
+    public void runAroundLikeCrazy() {
+        this.getHandle().runAroundLikeCrazyGoal.start();
+    }
+
+    @Override
+    public void tryMakeAngry() {
+        this.getHandle().makeMad();
+    }
+
+    @Override
+    public boolean isSaddled() {
+        return this.getHandle().isSaddled();
+    }
+    // Paper end - Horse API -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
index c64918175ec08d20cde2bda9e0cac8b474385fe0..37b034505ee5d77e5f5438f6e908b26f7296747f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
@@ -2,14 +2,18 @@ package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Vec3i;
 import net.minecraft.world.entity.animal.allay.Allay;
+import net.minecraft.world.level.gameevent.DynamicGameEventListener;
+
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.*; // Canvas - yeah lets just import them all lol
 import org.bukkit.craftbukkit.util.CraftLocation;
 import org.bukkit.inventory.Inventory;
-
+import org.bukkit.inventory.ItemStack;
+import net.minecraft.world.phys.Vec3;
 public class CraftAllay extends CraftCreature implements org.bukkit.entity.Allay {
 
     public CraftAllay(CraftServer server, Allay entity) {
@@ -91,4 +95,40 @@ public class CraftAllay extends CraftCreature implements org.bukkit.entity.Allay
         BlockPos nmsJukeboxPos = this.getHandle().jukeboxPos;
         return (nmsJukeboxPos != null) ? CraftLocation.toBukkit(nmsJukeboxPos, this.getWorld()) : null;
     }
+
+    // Canvas start
+    @Override
+    public boolean canInteractWith() {
+        return this.getHandle().canInteract;
+    }
+
+    @Override
+    public void setCanInteractWith(final boolean canInteractWith) {
+        this.getHandle().setCanInteract(canInteractWith);
+    }
+
+    @Override
+    public void setJukeboxListenRadius(int radius) {
+        this.getHandle().jukeboxListener.setRadius(radius);
+        this.getHandle().dynamicJukeboxListener = new DynamicGameEventListener<>(this.getHandle().jukeboxListener);
+    }
+
+    @Override
+    public boolean considersItemsEqual(ItemStack item1, ItemStack item2) {
+        return this.getHandle().allayConsidersItemEqual(
+            CraftItemStack.asNMSCopy(item1),
+            CraftItemStack.asNMSCopy(item2));
+    }
+
+    @Override
+    public void setItemPickupReach(int reach) {
+        this.getHandle().ITEM_PICKUP_REACH = new Vec3i(reach, reach, reach);
+    }
+
+    @Override
+    public int getItemPickupReach() {
+        return this.getHandle().ITEM_PICKUP_REACH.getY();
+    }
+    // Canvas end
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
index 6d2fe30742f8b41d53dd2cbff120fcc042ea0e0c..230438530b56fb849adc486cc4560d0d23068802 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
@@ -2,6 +2,7 @@ package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
 import net.minecraft.core.BlockPos;
+import net.minecraft.world.entity.projectile.SpectralArrow;
 import org.bukkit.block.Block;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.AbstractArrow;
@@ -122,7 +123,13 @@ public class CraftArrow extends AbstractProjectile implements AbstractArrow {
     public boolean hasNoPhysics() {
         return this.getHandle().isNoPhysics();
     }
-    // Paper end
+
+    // Canvas start
+    @Override
+    public boolean isSpectral() {
+        return this.getHandle() instanceof SpectralArrow;
+    }
+    // Paper end -/- Canvas end
 
     @Override
     public void setTicksLived(int value) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
index cbfca242f820d238b112f8ce64e9de8398c48a1c..67fd9102d0472c44ffc8d089cf157a5705185ea0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
@@ -3,6 +3,7 @@ package org.bukkit.craftbukkit.entity;
 import com.google.common.base.Preconditions;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Axolotl;
+import org.bukkit.potion.PotionEffectType;
 
 public class CraftAxolotl extends CraftAnimals implements Axolotl, io.papermc.paper.entity.PaperBucketable { // Paper - Bucketable API
 
@@ -41,4 +42,59 @@ public class CraftAxolotl extends CraftAnimals implements Axolotl, io.papermc.pa
 
         this.getHandle().setVariant(net.minecraft.world.entity.animal.axolotl.Axolotl.Variant.byId(variant.ordinal()));
     }
+
+    // Canvas start
+
+    @Override
+    public boolean getApplySupportingEffects() {
+        return this.getHandle().getApplySupportingEffects();
+    }
+
+    @Override
+    public void setApplySupportingEffects(final boolean applySupportingEffects) {
+        this.getHandle().setApplySupportingEffects(applySupportingEffects);
+    }
+
+    @Override
+    public void setSupportingEffectType(final PotionEffectType potionEffectType) {
+        this.getHandle().setSupportingEffectType(potionEffectType);
+    }
+
+    @Override
+    public PotionEffectType getSupportingPotionEffectType() {
+        return this.getHandle().getSupportingPotionEffectType();
+    }
+
+    @Override
+    public void setSupportingEffectAmplifier(final int amplifier) {
+        this.getHandle().setSupportingEffectAmplifier(amplifier);
+    }
+
+    @Override
+    public int getRareVarientChanceBound() {
+        return this.getHandle().getRareVarientChanceBound();
+    }
+
+    @Override
+    public void resetRareVarientChanceBound() {
+        this.getHandle().resetRareVarientChanceBound();
+    }
+
+    @Override
+    public void setRareVarientChanceBound(int bound) {
+        this.getHandle().setRareVarientChanceBound(bound);
+    }
+
+    @Override
+    public int getSupportingEffectAmplifier() {
+        return this.getHandle().getSupportingEffectAmplifier();
+    }
+
+    @Override
+    public void rehydrate(){
+        this.getHandle().rehydrate();
+    }
+
+    // Canvas end
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
index 3dac93b0ab5d5acf5b33dc4b0efed60319eb657b..2d0912392f25c98b464f26f3a83d29dae548b14d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
@@ -6,6 +6,8 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.util.CraftLocation;
 import org.bukkit.entity.Bee;
+import org.apache.commons.lang3.tuple.Pair;
+import java.lang.Integer;
 
 public class CraftBee extends CraftAnimals implements Bee {
 
@@ -123,5 +125,65 @@ public class CraftBee extends CraftAnimals implements Bee {
     public int getTicksSincePollination() {
         return this.getHandle().ticksWithoutNectarSinceExitingHive;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+
+    @Override
+    public void rerollFlowerLocateTimer() {
+        this.getHandle().rerollFlowerLocateTimer();
+    }
+
+    @Override
+    public int getFlowerLocateTimer() {
+        return this.getHandle().getFlowerLocateTimer();
+    }
+
+    @Override
+    public void setPersistentAngerTime(final int min, final int max) {
+        this.getHandle().setPersistentAngerTime(min, max);
+    }
+
+    @Override
+    public Pair<Integer, Integer> getPersistentAngerTime() {
+        int max = this.getHandle().maxRangeAnger;
+        int min = this.getHandle().minRangeAnger;
+        Pair<Integer, Integer> integerPair = new Pair<Integer, Integer>() {
+            @Override
+            @Deprecated(forRemoval = true)
+            public Integer setValue(final Integer value) {
+                return null;
+            }
+
+            @Override
+            public Integer getLeft() {
+                return min;
+            }
+
+            @Override
+            public Integer getRight() {
+                return max;
+            }
+        };
+        return integerPair;
+    }
+
+    @Override
+    public void tryEnterClosestHive() {
+        this.getHandle().enterHiveGoal.start();
+    }
+
+    @Override
+    public void tryPollinate() {
+       this.getHandle().beePollinateGoal.start();
+    }
+
+    @Override
+    public void goToKnownFlower() {
+        this.getHandle().goToKnownFlowerGoal.start();
+    }
+
+    @Override
+    public void tryFindNewHive() {
+        this.getHandle().locateHiveGoal.start();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
index a4c9c73691300880777483b0beb17e1bd6779d06..fa26c48d3d74c6cfd15f2a73636575b3ccbe8864 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
@@ -17,4 +17,16 @@ public class CraftBlaze extends CraftMonster implements Blaze {
     public String toString() {
         return "CraftBlaze";
     }
+
+    // Canvas start
+    @Override
+    public boolean isOnFire() {
+        return this.getHandle().isOnFire();
+    }
+
+    @Override
+    public void setCharged(final boolean fireActive) {
+        this.getHandle().setCharged(fireActive);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
index 859f233197ebe738511011e36668c4eb5d4b7d8e..5358e1cfd5b1b49174f5f8e7796e54a00babe270 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
@@ -2,8 +2,17 @@ package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
 import java.util.stream.Collectors;
+import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.damagesource.DamageSources;
+import net.minecraft.world.damagesource.DamageType;
+import net.minecraft.world.damagesource.DamageTypes;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.Items;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
 import org.bukkit.TreeSpecies;
 import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Boat;
 import org.bukkit.entity.Entity;
 
@@ -84,6 +93,72 @@ public class CraftBoat extends CraftVehicle implements Boat {
     public org.bukkit.Material getBoatMaterial() {
         return org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(this.getHandle().getDropItem());
     }
+
+    // Canvas start
+
+    @Override
+    public void setDropItem(final Boat.Type boatType, final Material itemMaterial) {
+        Item item = Items.AIR;
+        switch (boatType) {
+            case SPRUCE -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.SPRUCE);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.SPRUCE, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case BIRCH -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.BIRCH);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.BIRCH, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case JUNGLE -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.JUNGLE);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.JUNGLE, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case ACACIA -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.ACACIA);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.ACACIA, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case CHERRY -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.CHERRY);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.CHERRY, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case DARK_OAK -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.DARK_OAK);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.DARK_OAK, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case MANGROVE -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.MANGROVE);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.MANGROVE, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case BAMBOO -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.BAMBOO);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.BAMBOO, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case OAK -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.OAK);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.OAK, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+        }
+    }
+
+    @Override
+    public Material getDropItem(final Boat.Type boatMaterial) {
+        return CraftMagicNumbers.getMaterial(this.getHandle().getBoatDropMap().get(boatMaterial));
+    }
+
+    @Override
+    public void resetDropMap() {
+        net.minecraft.world.entity.vehicle.Boat.setupBoatDropMap();
+    }
+    // Canvas end
+
     // Paper end
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
index 80e571c977db5cdf43bfbfce035f37a3fa325c95..3a16e5171079d1d2605b3c3e481b0369ed0a574e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
@@ -5,6 +5,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Camel;
 import org.bukkit.entity.Horse;
 
+import static net.minecraft.world.entity.animal.camel.Camel.BABY_SCALE;
+
 public class CraftCamel extends CraftAbstractHorse implements Camel {
 
     public CraftCamel(CraftServer server, net.minecraft.world.entity.animal.camel.Camel entity) {
@@ -49,4 +51,11 @@ public class CraftCamel extends CraftAbstractHorse implements Camel {
             this.getHandle().standUp();
         }
     }
+
+    // Canvas start
+    @Override
+    public boolean isSaddled() {
+        return this.getHandle().isSaddled();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
index 0ccc20157fb9fdb9c99b942dcb4675db5f928b23..40d2b9d9d48ad2d1d967ff381aed862bb6269738 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
@@ -87,5 +87,31 @@ public class CraftCat extends CraftTameableAnimal implements Cat {
     public boolean isHeadUp() {
         return this.getHandle().isRelaxStateOne();
     }
-    // Paper End - More cat api
+
+    // Canvas start
+    @Override
+    public void hiss() {
+        this.getHandle().hiss();
+    }
+
+    @Override
+    public boolean isSteppingCarefully() {
+        return this.getHandle().isSteppingCarefully();
+    }
+
+    @Override
+    public boolean allowMorningGiftSpawn() {
+        return this.getHandle().allowMorningGift;
+    }
+
+    @Override
+    public void setAllowMorningGiftSpawn(final boolean allow) {
+        this.getHandle().setAllowMorningGift(allow);
+    }
+
+    @Override
+    public void spawnMorningGift() {
+        this.getHandle().giveMorningGift();
+    }
+    // Paper End - More cat api -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
index f1844d697b91e61878ade5b922cf2a3a538365c7..f3a1fa8051b5988152019bf01b956a9318115aeb 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.destroystokyo.paper.entity.CraftRangedEntity;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.entity.vehicle.ChestBoat;
 import org.bukkit.Bukkit;
@@ -7,9 +8,12 @@ import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.entity.Player;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.loot.LootTable;
 
+import static org.bukkit.craftbukkit.entity.CraftEntityType.bukkitToMinecraft;
+
 public class CraftChestBoat extends CraftBoat implements org.bukkit.entity.ChestBoat, com.destroystokyo.paper.loottable.PaperLootableEntityInventory { // Paper
     private final Inventory inventory;
 
@@ -64,4 +68,11 @@ public class CraftChestBoat extends CraftBoat implements org.bukkit.entity.Chest
         this.getHandle().setLootTable(newKey);
         this.getHandle().setLootTableSeed(seed);
     }
+
+    // Canvas start
+    @Override
+    public void openChestInventory(final Player player) {
+        this.getHandle().openCustomInventoryScreen(((CraftPlayer) player).getHandle());
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
index 96f6e2fd9c6b20d34122abfe5c7fba732502d5a0..904a1321f8402927771fabbd2b1d24cfea3d7246 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
@@ -40,4 +40,9 @@ public class CraftChicken extends CraftAnimals implements Chicken {
         this.getHandle().eggTime = eggLayTime;
     }
     // Paper end
+
+    @Override
+    public boolean isFlapping(){
+        return this.isFlapping();
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
index 7babc404e4920cd264206d4e83b1be6f841cdb8c..520bbdbb59a110ca8828ec7114da25df81a53f81 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
@@ -18,4 +18,11 @@ public class CraftCow extends CraftAnimals implements Cow {
     public String toString() {
         return "CraftCow";
     }
+    // Canvas start
+
+    @Override
+    public void convertToMushroom(){
+        this.getHandle().convertToMushroom();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
index 664d9c1793b823ed03f198a936f2ebd9b7695898..b4896cdaa7f4a2497db59fe057888fc07f5c52a6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
@@ -2,6 +2,7 @@ package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.world.entity.PathfinderMob;
 import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.entity.Allay;
 import org.bukkit.entity.Creature;
 
 public class CraftCreature extends CraftMob implements Creature {
@@ -18,4 +19,9 @@ public class CraftCreature extends CraftMob implements Creature {
     public String toString() {
         return "CraftCreature";
     }
+
+    @Override
+    public boolean isPanicking() {
+        return this.getHandle().isPanicking();
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
index f93f8f6509b12eb9b1e07c829278bb0822dd7988..36f15491cecfe781a98ef33a2a91b98fdf4ed0ea 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
@@ -49,5 +49,20 @@ public class CraftDolphin extends CraftWaterMob implements Dolphin {
     public void setTreasureLocation(org.bukkit.Location location) {
         this.getHandle().setTreasurePos(io.papermc.paper.util.MCUtil.toBlockPosition(location));
     }
-    // Paper end - Missing Dolphin API
+    // Paper end - Missing Dolphin API -/- Canvas start
+    @Override
+    public void swimToTreasure(){
+        this.getHandle().swimToTreasureGoal.start();
+    }
+
+    @Override
+    public void setSwimWithPlayerDistance(double distance){
+        this.getHandle().setSwimWithPlayerDistance(distance);
+    }
+
+    @Override
+    public void tryPlayWithItems(){
+        this.getHandle().playWithItemsGoal.start();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
index 51fc4acae9f20e8891069704e4a27f212b870766..71be4d4690991dacc99307354ac860c9adc208c5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
@@ -18,4 +18,14 @@ public class CraftDrowned extends CraftZombie implements Drowned, com.destroysto
     public String toString() {
         return "CraftDrowned";
     }
+
+    @Override
+    public boolean isSearchingForLand() {
+        return this.getHandle().searchingForLand;
+    }
+
+    @Override
+    public void setSearchingForLand(boolean searching) {
+        this.getHandle().setSearchingForLand(searching);
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftElderGuardian.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftElderGuardian.java
index 0e5d7ba2a30b2110723b2a83ac08617d4de9a4ac..aa9b122a85aa644f0fdfac625ff7e087dd6c320d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftElderGuardian.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftElderGuardian.java
@@ -18,4 +18,61 @@ public class CraftElderGuardian extends CraftGuardian implements ElderGuardian {
     public boolean isElder() {
         return true;
     }
+
+    @Override
+    public net.minecraft.world.entity.monster.ElderGuardian getHandle(){
+        return (net.minecraft.world.entity.monster.ElderGuardian) super.getHandle();
+    }
+
+    // Canvas start
+    @Override
+    public void setEffectAmplifier(final int effectAmplifier) {
+        this.getHandle().setEffectAmplifier(effectAmplifier);
+    }
+
+    @Override
+    public int getEffectDuration() {
+        return this.getHandle().getEffectDuration();
+    }
+
+    @Override
+    public void setEffectDuration(final int effectDuration) {
+        this.getHandle().setEffectDuration(effectDuration);
+    }
+
+    @Override
+    public int getEffectAmplifier() {
+        return this.getHandle().getEffectAmplifier();
+    }
+
+    @Override
+    public int getEffectDisplayLimit() {
+        return this.getHandle().getEffectDisplayLimit();
+    }
+
+    @Override
+    public void setEffectDisplayLimit(final int effectDisplayLimit) {
+        this.getHandle().setEffectDisplayLimit(effectDisplayLimit);
+    }
+
+    @Override
+    public int getEffectInterval() {
+        return this.getHandle().getEffectInterval();
+    }
+
+    @Override
+    public void setEffectInterval(final int effectInterval) {
+        this.getHandle().setEffectInterval(effectInterval);
+    }
+
+    @Override
+    public int getEffectRadius() {
+        return this.getHandle().getEffectRadius();
+    }
+
+    @Override
+    public void setEffectRadius(final int effectRadius) {
+        this.getHandle().setEffectRadius(effectRadius);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
index 6eae6efa35a1ccc224e2f311e25ecf13e8647ec8..9de216ccc815cfa2b5a5d941299aa817fad5c328 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
@@ -2,6 +2,8 @@ package org.bukkit.craftbukkit.entity;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.ImmutableSet.Builder;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Set;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase;
@@ -12,6 +14,7 @@ import org.bukkit.craftbukkit.boss.CraftDragonBattle;
 import org.bukkit.entity.ComplexEntityPart;
 import org.bukkit.entity.EnderDragon;
 import org.bukkit.entity.EnderDragon.Phase;
+import org.bukkit.entity.Entity;
 
 public class CraftEnderDragon extends CraftMob implements EnderDragon, CraftEnemy {
 
@@ -64,9 +67,11 @@ public class CraftEnderDragon extends CraftMob implements EnderDragon, CraftEnem
         return battle != null ? battle.getBossBar() : null;
     }
 
+    DragonBattle dragonBattle = this.getHandle().getDragonFight() != null ? new CraftDragonBattle(this.getHandle().getDragonFight()) : null; // Canvas
+
     @Override
     public DragonBattle getDragonBattle() {
-        return this.getHandle().getDragonFight() != null ? new CraftDragonBattle(this.getHandle().getDragonFight()) : null;
+        return this.dragonBattle; // Canvas
     }
 
     @Override
@@ -90,5 +95,32 @@ public class CraftEnderDragon extends CraftMob implements EnderDragon, CraftEnem
             this.getHandle().setPodium(io.papermc.paper.util.MCUtil.toBlockPos(location));
         }
     }
-    // Paper end
+
+    // Canvas start
+    @Override
+    public void setDragonBattle(final DragonBattle dragonBattle) {
+        this.dragonBattle = dragonBattle;
+    }
+
+    @Override
+    public void knockback(final List<Entity> entities) {
+        List<net.minecraft.world.entity.Entity> entityList = new ArrayList<>();
+        for (Entity T : entities) {
+            entityList.add(((CraftEntity) T).getHandle());
+        }
+        this.getHandle().knockBack(entityList);
+    }
+
+    @Override
+    public void knockback(final Entity entity) {
+        List<net.minecraft.world.entity.Entity> entities = new ArrayList<>();
+        entities.add(((CraftEntity) entity).getHandle());
+        this.getHandle().knockBack(entities);
+    }
+
+    @Override
+    public boolean inWall() {
+        return this.getHandle().inWall;
+    }
+    // Paper end -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
index 983b9d6ddb58eff297e96e5c8b28ec427efa267d..f50e30f247203e80b73275683109ebdd0f2696f6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import com.google.common.base.Preconditions;
 import net.minecraft.world.entity.monster.EnderMan;
 import net.minecraft.world.level.block.state.BlockState;
+import org.apache.commons.lang3.tuple.Pair;
+import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.craftbukkit.CraftServer;
@@ -10,6 +12,7 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Enderman;
 import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
 import org.bukkit.material.MaterialData;
 
 public class CraftEnderman extends CraftMonster implements Enderman {
@@ -60,7 +63,53 @@ public class CraftEnderman extends CraftMonster implements Enderman {
     public void setHasBeenStaredAt(boolean hasBeenStaredAt) {
         this.getHandle().setHasBeenStaredAt(hasBeenStaredAt);
     }
-    // Paper end
+
+    // Canavs start
+    @Override
+    public void teleportTowards(final int x, final int y, final int z) {
+        Preconditions.checkArgument(new Location(this.getWorld(), x, y, z) != null, "location cannot be null");
+        this.getHandle().teleport(x, y, z);
+    }
+
+    @Override
+    public void setPersistentAngerTime(final int min, final int max) {
+        this.getHandle().setPersistentAngerTime(min, max);
+    }
+
+    @Override
+    public Pair<Integer, Integer> getPersistentAngerTime() {
+        int max = this.getHandle().maxRangeAnger;
+        int min = this.getHandle().minRangeAnger;
+        Pair<Integer, Integer> integerPair = new Pair<Integer, Integer>() {
+            @Override
+            @Deprecated(forRemoval = true)
+            public Integer setValue(final Integer value) {
+                return null;
+            }
+
+            @Override
+            public Integer getLeft() {
+                return min;
+            }
+
+            @Override
+            public Integer getRight() {
+                return max;
+            }
+        };
+        return integerPair;
+    }
+
+    @Override
+    public void playStareSound() {
+        this.getHandle().playStareSound();
+    }
+
+    @Override
+    public boolean isLookingAtMe(final Player player) {
+        return this.getHandle().isLookingAtMe_check(((CraftPlayer) player).getHandle());
+    }
+    // Paper end -/- Canvas end
 
     @Override
     public EnderMan getHandle() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java
index 18ef90b574dca82c1729868a83612ca06a6ccdce..814ee0946b6c977a695189ba818d7a2d3b9d6f68 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java
@@ -26,4 +26,4 @@ public class CraftEntityType {
         return CraftRegistry.getMinecraftRegistry(Registries.ENTITY_TYPE)
                 .getOptional(KEY_CACHE.computeIfAbsent(bukkit, type -> net.minecraft.resources.ResourceKey.create(Registries.ENTITY_TYPE, CraftNamespacedKey.toMinecraft(type.getKey())))).orElseThrow();
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
index b66dd5c5c5d98c9285e0d0a4ad4b99a66419f732..94caad439d8e134fdddebf46e2cbc7181da93e9a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
@@ -42,5 +42,21 @@ public class CraftEvoker extends CraftSpellcaster implements Evoker {
     public void setWololoTarget(org.bukkit.entity.Sheep sheep) {
         getHandle().setWololoTarget(sheep == null ? null : ((org.bukkit.craftbukkit.entity.CraftSheep) sheep).getHandle());
     }
-    // Paper end
+
+    // Canvas start
+    @Override
+    public void performSummonSpell() {
+        this.getHandle().summonSpellGoal.performSpellCasting();
+    }
+
+    @Override
+    public void performAttackSpell() {
+        this.getHandle().attackSpellGoal.performSpellCasting();
+    }
+
+    @Override
+    public void performWololoSpell(org.bukkit.entity.Sheep wololoTarget) {
+        this.getHandle().wololoSpellGoal.performSpellCasting();
+    }
+    // Paper end -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
index 5a7d314ec0562e472f5dc45924a7b24841cff126..6696e68072a0ac1291a5cbb5fc904d113198c282 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
@@ -39,4 +39,16 @@ public class CraftExperienceOrb extends CraftEntity implements ExperienceOrb {
     public String toString() {
         return "CraftExperienceOrb";
     }
+    // Canvas start - allow configure can merge for xp orbs
+
+    @Override
+    public void setAllowMerge(final boolean allowMerge) {
+        this.getHandle().allowMerge = allowMerge;
+    }
+
+    @Override
+    public boolean allowMerge() {
+        return this.getHandle().allowMerge;
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
index 774ed1fdc909c911bf93a1b720285b43e9f728b8..c808b67959ee7f711cfb82f86bea90432354a895 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
@@ -1,7 +1,12 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
+import net.minecraft.core.particles.ParticleOptions;
+import net.minecraft.core.particles.ParticleType;
+import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.world.entity.projectile.AbstractHurtingProjectile;
+import org.bukkit.Particle;
+import org.bukkit.craftbukkit.CraftParticle;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Fireball;
 import org.bukkit.projectiles.ProjectileSource;
@@ -39,6 +44,37 @@ public class CraftFireball extends AbstractProjectile implements Fireball {
         return new Vector(this.getHandle().xPower, this.getHandle().yPower, this.getHandle().zPower);
     }
 
+    @Override
+    public void setParticleTrailType(final Particle particle) {
+        ParticleOptions particleType = CraftParticle.bukkitToMinecraft(particle);
+        this.getHandle().setTrailParticle(particleType);
+    }
+
+    @Override
+    public Particle getParticleTrailType() {
+        return CraftParticle.minecraftToBukkit(this.getHandle().getTrailParticle().getType());
+    }
+
+    @Override
+    public void setShouldBurn(final boolean should) {
+        this.getHandle().setShouldBurn(should);
+    }
+
+    @Override
+    public boolean shouldBurn() {
+        return this.getHandle().shouldBurn();
+    }
+
+    @Override
+    public void setInertia(final float inertia) {
+        this.getHandle().setInertia(inertia);
+    }
+
+    @Override
+    public float getInertia() {
+        return this.getHandle().getInertia();
+    }
+
     @Override
     public void setDirection(Vector direction) {
         Preconditions.checkArgument(direction != null, "Vector direction cannot be null");
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
index eb10f94d5ed8ca89d3786138647dd43357609a6c..818970c09f748d6fa16e8ad0f5bccd6e1c89dd12 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
@@ -19,4 +19,26 @@ public class CraftFish extends CraftWaterMob implements Fish, io.papermc.paper.e
     public String toString() {
         return "CraftFish";
     }
+    // Canvas start
+
+    @Override
+    public void setCanRandomSwim(boolean can) {
+        this.getHandle().setCanRandomSwim(can);
+    }
+
+    @Override
+    public boolean getCanRandomSwim() {
+        return this.getHandle().canRandomSwim();
+    }
+
+    @Override
+    public int getMaxSpawnClusterSize() {
+        return this.getHandle().getMaxSpawnClusterSize();
+    }
+
+    @Override
+    public void setMaxSpawnClusterSize(int size) {
+        this.getHandle().setMaxSpawnClusterSize(size);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
index c455deb4fd2a7684bcc01a8212c362a2375c190b..314fc84938398a836e4fa6529588b2b9beecdda2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
@@ -149,5 +149,36 @@ public class CraftFox extends CraftAnimals implements Fox {
     public void setFaceplanted(boolean faceplanted) {
         this.getHandle().setFaceplanted(faceplanted);
     }
-    // Paper end - Add more fox behavior API
+
+    // Canvas start
+    @Override
+    public void faceplant() {
+        this.getHandle().faceplantGoal.start();
+    }
+
+    @Override
+    public void tryStalkPrey() {
+        this.getHandle().stalkPreyGoal.start();
+    }
+
+    @Override
+    public void seekShelter() {
+        this.getHandle().seekShelterGoal.start();
+    }
+
+    @Override
+    public void sleep() {
+        this.getHandle().sleepGoal.start();
+    }
+
+    @Override
+    public void searchForItems() {
+        this.getHandle().searchForItemsGoal.start();
+    }
+
+    @Override
+    public void tryPounce() {
+        this.getHandle().pounceGoal.start();
+    }
+    // Paper end - Add more fox behavior API -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
index 65131d153b78a0787b977b9f65c15cfcbd395d11..99997fe11961908875de83f38d3f35457b1c65dc 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
@@ -51,6 +51,13 @@ public class CraftFrog extends CraftAnimals implements org.bukkit.entity.Frog {
 
         this.getHandle().setVariant(CraftVariant.bukkitToMinecraft(variant));
     }
+    // Canvas start
+    
+    @Override
+    public void youngify(){
+        this.getHandle().youngify();
+    }
+    // Canvas end
 
     public static class CraftVariant {
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
index 97fa4e1e70203194bd939618b2fad92665af6d59..66df97e7623d508dd7e0df529154c18d018ec5df 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
@@ -40,5 +40,10 @@ public class CraftGhast extends CraftFlying implements Ghast, CraftEnemy {
         com.google.common.base.Preconditions.checkArgument(explosionPower >= 0 && explosionPower <= 127, "The explosion power has to be between 0 and 127");
         this.getHandle().setExplosionPower(explosionPower);
     }
+
+    @Override
+    public void shootFireBall() {
+        this.getHandle().shootFireballGoal.start();
+    }
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
index 253a0d2f987163cbbb28d261674b47137cbbcbe2..2a60dc58b0841448b44dc64e0ad9f7ee532a557b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
@@ -1,6 +1,9 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
+
+import net.minecraft.world.entity.EntityType;
+
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.GlowSquid;
 
@@ -30,4 +33,11 @@ public class CraftGlowSquid extends CraftSquid implements GlowSquid {
         Preconditions.checkArgument(darkTicksRemaining >= 0, "darkTicksRemaining must be >= 0");
         this.getHandle().setDarkTicks(darkTicksRemaining);
     }
+
+    // Canvas start
+    @Override
+    public void setNonGlowingSquid() {
+        this.getHandle().convertTo(EntityType.SQUID, true);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
index 2c21de478bff9cdf13ba46cd041831d54c11e924..564448d4e07df91f6bb5cb5543cf399792c353d0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
@@ -54,5 +54,33 @@ public class CraftGoat extends CraftAnimals implements Goat {
     public void ram(@org.jetbrains.annotations.NotNull org.bukkit.entity.LivingEntity entity) {
         this.getHandle().ram(((CraftLivingEntity) entity).getHandle());
     }
-    // Paper end
+    // Paper end -/- Canvas start
+    public boolean isLoweringHead(){
+        return this.getHandle().isLoweringHead();
+    }
+
+    public void setFallDamageReduction(int fallDamageReduction){
+        this.getHandle().setFallDamageReduction(fallDamageReduction);
+    }
+
+    public int getFallDamageReduction(){
+        return this.getHandle().getFallDamageReduction();
+    }
+
+    public void addRightHorn(){
+        this.getHandle().addRightHorn();
+    }
+
+    public void removeRightHorn(){
+        this.getHandle().removeRightHorn();
+    }
+
+    public void addLeftHorn(){
+        this.getHandle().addLeftHorn();
+    }
+
+    public void removeLeftHorn(){
+        this.getHandle().removeLeftHorn();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHusk.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHusk.java
index 4822c744cc2614ffd2b5fc44f897205c47557965..d8c443a37ec69c47cd8938e0ae6a88762e79b8ee 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHusk.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHusk.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
 import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Husk;
 
 public class CraftHusk extends CraftZombie implements Husk {
@@ -13,4 +14,29 @@ public class CraftHusk extends CraftZombie implements Husk {
     public String toString() {
         return "CraftHusk";
     }
+
+    @Override
+    public net.minecraft.world.entity.monster.Husk getHandle(){
+        return (net.minecraft.world.entity.monster.Husk) this.entity;
+    }
+
+    @Override
+    public void setShouldConvertInWater(boolean shouldConvertInWater) {
+        this.getHandle().setShouldConvertInWater(shouldConvertInWater);
+    }
+
+    @Override
+    public boolean convertsInWater() {
+        return this.getHandle().convertsInWater();
+    }
+
+    @Override
+    public void setEntityConversionType(EntityType entityType) {
+        this.getHandle().setEntityConversionType(entityType);
+    }
+
+    @Override
+    public EntityType getEntityConversionType() {
+        return this.getHandle().getEntityConversionType();
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
index 966587c2788b5c93be83259ddc962a89cde7cbaa..5c0fc2bdc8513b13241c65772d083ccc1a53c7b8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
+import org.bukkit.Material;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.IronGolem;
 
@@ -40,4 +41,41 @@ public class CraftIronGolem extends CraftGolem implements IronGolem {
         getHandle().setSummoner(summoner);
     }
     // Purpur end
+
+    // Canvas start
+    @Override
+    public int getCrackiness(){
+        return this.getHandle().getCrackiness().ordinal();
+    }
+
+    @Override
+    public void setFlingVelocity(double amt){
+        this.getHandle().setFlingVelocity(amt);
+    }
+
+    @Override
+    public double getFlingVelocity(){
+        return this.getHandle().getFlingVelocity();
+    }
+
+    @Override
+    public boolean canRepair() {
+        return this.getHandle().canRepair;
+    }
+
+    @Override
+    public void setCanRepair(boolean can) {
+        this.getHandle().setCanRepair(can);
+    }
+
+    @Override
+    public void offerFlower(final boolean lookingAtVillager) {
+        this.getHandle().offerFlower(lookingAtVillager);
+    }
+
+    @Override
+    public void setRepairItem(final Material material) {
+        this.getHandle().setRepairItem(material);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 5a3fce46328661965480ebcbc381de33b65cdb66..ed3b6d19821a547839bb9a83a65d59c2c66847e8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -9,9 +9,12 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+import me.dueris.canvas.entity.CraftMobType;
 import net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
+import net.minecraft.tags.FluidTags;
+import net.minecraft.tags.TagKey;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
@@ -30,6 +33,8 @@ import net.minecraft.world.entity.projectile.ThrownEgg;
 import net.minecraft.world.entity.projectile.ThrownEnderpearl;
 import net.minecraft.world.entity.projectile.ThrownExperienceBottle;
 import net.minecraft.world.entity.projectile.ThrownTrident;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.material.Fluid;
 import org.bukkit.FluidCollisionMode;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -72,6 +77,7 @@ import org.bukkit.entity.TippedArrow;
 import org.bukkit.entity.Trident;
 import org.bukkit.entity.WindCharge;
 import org.bukkit.entity.WitherSkull;
+import org.bukkit.craftbukkit.potion.*; // Canvas - change to use * due to patch error
 import org.bukkit.entity.memory.MemoryKey;
 import org.bukkit.event.entity.EntityPotionEffectEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
@@ -84,6 +90,11 @@ import org.bukkit.potion.PotionType;
 import org.bukkit.util.BlockIterator;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.Vector;
+// Canvas start
+import org.bukkit.scheduler.BukkitRunnable;
+import org.bukkit.entity.*;
+import org.bukkit.plugin.*;
+// Canvas end
 
 public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     private CraftEntityEquipment equipment;
@@ -1147,5 +1158,64 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     public void setShouldBurnInDay(boolean shouldBurnInDay) {
         getHandle().setShouldBurnInDay(shouldBurnInDay);
     }
-    // Purpur end
+
+    // Canvas start
+    @Override
+    public void setMobType(final me.dueris.canvas.entity.MobType mobType) {
+        MobType ET = CraftMobType.canvasToNMS(mobType);
+        this.getHandle().setMobType(ET);
+    }
+
+    @Override
+    public me.dueris.canvas.entity.MobType getMobType() {
+        return CraftMobType.nmsToCanvas(this.getHandle().getMobType());
+    }
+
+    @Override
+    public void jump() {
+        this.getHandle().jumpFromGround();
+    }
+
+    @Override
+    public void jumpInLiquid() {
+        if(this.getLocation().getBlock().isLiquid()){
+            if(getNmsFluidTag(this.getLocation().getBlock()) != null){
+                this.getHandle().jumpInLiquid(getNmsFluidTag(this.getLocation().getBlock()));
+            }
+        }
+    }
+
+    public TagKey<Fluid> getNmsFluidTag(Block block){
+        switch (block.getType()){
+            case WATER -> {
+                return FluidTags.WATER;
+            }
+            case LAVA -> {
+                return FluidTags.LAVA;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public void goDownInWater() {
+        this.getHandle().goDownInWater();
+    }
+
+    @Override
+    public void setWaterSlowdown(final float waterSlowdown) {
+        this.getHandle().setWaterSlowdown(waterSlowdown);
+    }
+
+    @Override
+    public float getWaterSlowdown() {
+        return this.getHandle().getWaterSlowDown();
+    }
+
+    @Override
+    public void consumeItem(final ItemStack itemStack) {
+        Level world = this.getHandle().level();
+        this.getHandle().eat(world, net.minecraft.world.item.ItemStack.fromBukkitCopy(itemStack));
+    }
+    // Purpur end -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
index 5f6a1fb323782816f706ccf7df922cb203238302..a68669ba63a107f7f11100c7572ff2ad9a9ecab5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
@@ -10,6 +10,7 @@ import org.bukkit.craftbukkit.CraftSound;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Mob;
+import org.bukkit.entity.Player;
 import org.bukkit.loot.LootTable;
 
 public abstract class CraftMob extends CraftLivingEntity implements Mob {
@@ -32,6 +33,11 @@ public abstract class CraftMob extends CraftLivingEntity implements Mob {
         }
     }
 
+    @Override
+    public boolean canBeLeashed(Player player){
+        return this.getHandle().canBeLeashed(((CraftPlayer) player).getHandle());
+    }
+
     @Override
     public CraftLivingEntity getTarget() {
         if (this.getHandle().getTarget() == null) return null;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
index e5df527d3f0b82327bcd4cb66c12baa439b4cec6..2ed41b29b83d274c1bf34a25b13658719f5f1eb0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
@@ -68,4 +68,11 @@ public class CraftMushroomCow extends CraftCow implements MushroomCow, io.paperm
     public String toString() {
         return "CraftMushroomCow";
     }
+    // Canvas start
+
+    @Override
+    public void convertToNormal(){
+        this.getHandle().convertToNormal();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
index 01d104d91de9e1319d27e39d3f474318c7809486..0a343ca2d2c3e33dc9247c0a243c8a632b5b9517 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
@@ -4,6 +4,7 @@ import com.google.common.base.Preconditions;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Panda;
 import org.bukkit.entity.Panda.Gene;
+import org.jetbrains.annotations.ApiStatus.OverrideOnly;
 
 public class CraftPanda extends CraftAnimals implements Panda {
 
@@ -144,4 +145,20 @@ public class CraftPanda extends CraftAnimals implements Panda {
 
         return net.minecraft.world.entity.animal.Panda.Gene.values()[gene.ordinal()];
     }
+    // Canvas start
+    @Override
+    public void roll(){
+        this.getHandle().rollGoal.start();
+    }
+
+    @Override
+    public void sneeze(){
+        this.getHandle().sneezGoal.start();
+    }
+
+    @Override
+    public void lieOnBack(){
+        this.getHandle().lieOnBackGoal.start();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
index 04d6cf6a1f3ae8316e3b2862c2d1b04e84a3b20a..2dd49a3accf529b85d575aa1c30edbb383a27dbe 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
@@ -4,6 +4,7 @@ import com.google.common.base.Preconditions;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Parrot;
 import org.bukkit.entity.Parrot.Variant;
+import org.jetbrains.annotations.ApiStatus.OverrideOnly;
 
 public class CraftParrot extends CraftTameableAnimal implements Parrot {
 
@@ -37,4 +38,21 @@ public class CraftParrot extends CraftTameableAnimal implements Parrot {
     public boolean isDancing() {
         return this.getHandle().isPartyParrot();
     }
+    // Canvas start
+
+    @Override
+    public void landOnShoulder(){
+        this.getHandle().landOnShoulder();
+    }
+
+    @Override
+    public void setPoisonousFood(org.bukkit.Material material){
+        this.getHandle().setPoisonousFood(material);
+    }
+
+    @Override
+    public org.bukkit.Material getPoisonousFood(){
+        return this.getHandle().getPoisonousFood();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
index 8016c810aeaf6ee953bca549bc1e7f9a85f860fc..2ef32f4f86d458404e3c698997d2f314132dc1f2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
@@ -52,8 +52,18 @@ public class CraftPig extends CraftAnimals implements Pig {
 
     @Override
     public Material getSteerMaterial() {
-        return Material.CARROT_ON_A_STICK;
+        return this.getRideItem(); // Canvas
     }
+    // Canvas start
+
+    public void setSteerMaterial(org.bukkit.Material material){
+        this.getHandle().setRideItem(material);
+    }
+
+    private org.bukkit.Material getRideItem(){
+        return this.getHandle().getRideItem();
+    }
+    // Canvas end
 
     @Override
     public net.minecraft.world.entity.animal.Pig getHandle() {
@@ -64,4 +74,11 @@ public class CraftPig extends CraftAnimals implements Pig {
     public String toString() {
         return "CraftPig";
     }
+
+    // Canvas start
+    @Override
+    public boolean isSaddled() {
+        return this.getHandle().isSaddled();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
index 49beb836d2801aadf869feefa602616daebe633f..7c4554aada7f3aa701f0d0a7a968e87c11bf2bd4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
@@ -54,4 +54,11 @@ public class CraftPigZombie extends CraftZombie implements PigZombie {
     public void setConversionTime(int time) {
         throw new UnsupportedOperationException("Not supported by this Entity.");
     }
+    // Canvas start
+
+    @Override
+    public void convertToNormal(){
+        this.getHandle().convertToNormal();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
index 03e74b29ebf0f9b9a0dbc6ffc872e22a22be20f0..e30445cf74fc4c5c381fbb71c28dff7ba977085b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
@@ -116,5 +116,11 @@ public class CraftPiglin extends CraftPiglinAbstract implements Piglin, com.dest
     public boolean isDancing() {
         return this.getHandle().isDancing();
     }
-    // Paper end
+    // Paper end -/- Canvas start
+
+    @Override
+    public void convertToZombified(){
+        this.getHandle().convertToZombified();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
index 35a8219734633529325430810e88755b2dd23125..2c41e9972ef49f04f63e85ea1b11755c2c6a25fa 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
@@ -29,4 +29,31 @@ public class CraftPufferFish extends CraftFish implements PufferFish {
     public String toString() {
         return "CraftPufferFish";
     }
+    // Canvas start
+
+    @Override
+    public void setScaleSizeSmall(float scale){
+        this.getHandle().setScaleSizeSmall(scale);
+    }
+
+    @Override
+    public void setScaleSizeMedium(float scale){
+        this.getHandle().setScaleSizeMedium(scale);
+    }
+
+    @Override
+    public void setScaleSizeLarge(float scale){
+        this.getHandle().setScaleSizeLarge(scale);
+    }
+
+    @Override
+    public void setCanPoison(boolean can){
+        this.getHandle().setCanPoison(can);
+    }
+
+    @Override
+    public boolean getCanPoison(){
+        return this.getHandle().canPoison;
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
index eb7e2902dc134847711284dd2af8abda7627c7ab..bbbea2cfcaed7204f672ad274355fc5cf7d9ce86 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
@@ -40,5 +40,10 @@ public class CraftRabbit extends CraftAnimals implements Rabbit {
     public int getMoreCarrotTicks() {
         return this.getHandle().moreCarrotTicks;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+
+    @Override
+    public boolean wantsMoreFood(){
+        return this.getHandle().moreCarrotTicks <= 0;
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
index 09796ce15658e3f7c223a265a547a51ee729ed40..216a6b64132d49e8ff265f65c04e513dacd9ac9f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
@@ -48,5 +48,11 @@ public class CraftRavager extends CraftRaider implements Ravager {
     public void setRoarTicks(int ticks) {
         this.getHandle().roarTick = ticks;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+    
+    @Override
+    public void roar(){
+        this.getHandle().roar();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
index 6f98da9be6aef35e3b5c940188b872459a383c8e..668f0c378c1836c0d4badaa066e135c03b84923c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
@@ -30,6 +30,27 @@ public class CraftSkeleton extends CraftAbstractSkeleton implements Skeleton {
             this.getHandle().startFreezeConversion(time);
         }
     }
+    // Canvas start
+    @Override
+    public void forceFreezeConvert(){
+        this.getHandle().forceFreezeConvert();
+    }
+
+    @Override
+    public void forceFreezeConvert(boolean resetConvertTimer){
+        this.getHandle().forceFreezeConvert(true);
+    }
+
+    @Override
+    public void setMaxConversionTime(int time){
+        this.getHandle().setMaxConversionTime(time);
+    }
+
+    @Override
+    public int getMaxConversionTime(){
+        return this.getHandle().getMaxConversionTime(); 
+    }
+    // Canvas end
 
     @Override
     public net.minecraft.world.entity.monster.Skeleton getHandle() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
index fbb47491dcc75f8247dee9f123f946f99ef1467f..22c16fa13734d80d7fbbb0674530a785c2aeb04d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
@@ -30,6 +30,18 @@ public class CraftSkeletonHorse extends CraftAbstractHorse implements SkeletonHo
         return this.getHandle().isTrap();
     }
 
+    // Canvas start
+    @Override
+    public void revertToHorse(){
+        this.getHandle().revertToHorse();
+    }
+
+    @Override
+    public void zombify(){
+        this.getHandle().zombify();
+    }
+    // Canvas end
+
     @Override
     public void setTrapped(boolean trapped) {
         this.getHandle().setTrap(trapped);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java
index 555337018fe218ac5a296a5e6a1d82720fee05e1..1bd1dbaea3ca3914ff137ea0ceef5f00e19f5d0b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java
@@ -97,4 +97,50 @@ public class CraftSniffer extends CraftAnimals implements Sniffer {
             case RISING -> Sniffer.State.RISING;
         };
     }
+    // Canvas start
+    @Override
+    public void setCanSearch(boolean canSearch){
+        this.getHandle().setCanSearch(canSearch);
+    }
+
+    @Override
+    public void setCanSniff(boolean canSniff){
+        this.getHandle().setCanSniff(canSniff);
+    }
+
+    @Override
+    public void setStoreExploredLocations(boolean canStore){
+        this.getHandle().setStoreExploredLocations(canStore);
+    }
+
+    @Override
+    public void setCanDig(boolean canDig){
+        this.getHandle().setCanDig(canDig);
+    }
+
+    @Override
+    public boolean getCanSearch(){
+        return this.getHandle().getCanSearch();
+    }
+
+    @Override
+    public boolean getCanSniff(){
+        return this.getHandle().getCanSniff();
+    }
+
+    @Override
+    public boolean canStoreExploredLocations(){
+        return this.getHandle().canStoreExploredLocations();
+    }
+    
+    @Override
+    public void setDiggingDropItem(org.bukkit.inventory.ItemStack item){
+        this.getHandle().setDiggingDropItem(item);
+    }
+
+    @Override
+    public org.bukkit.inventory.ItemStack getDiggingDropItem(){
+        return this.getHandle().getDiggingDropItem();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
index 4f7f6cf6ca24406570d2d29dc63dc89401119961..cf389bc8f5b23ce844f69eaa97b37394d623958b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
@@ -18,6 +18,13 @@ public class CraftSnowman extends CraftGolem implements Snowman, com.destroystok
     public void setDerp(boolean derpMode) {
         this.getHandle().setPumpkin(!derpMode);
     }
+    // Canvas start
+
+    // @Override
+    // public void shear(){
+    //     this.getHandle().shear();
+    // }
+    // Canvas end
 
     @Override
     public SnowGolem getHandle() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
index a6e3b61c391a8b266d2b030d9ba600ac6be76952..a13f1f168bee8f2dcd582876236ec7762883a726 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
@@ -18,4 +18,17 @@ public class CraftSquid extends CraftWaterMob implements Squid {
     public String toString() {
         return "CraftSquid";
     }
+    // Canvas start
+
+    @Override
+    public void setGlowingSquid() {
+        this.getHandle().setGlowingSquid();
+    }
+
+    @Override
+    public void squirtInk(){
+        this.getHandle().spawnInk();
+    }
+
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
index 9472a6f9c9584048abf1f8d11ab6254b7c7a287d..848700bf7547ac738fa819a2d15ebe6f27225ae8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
@@ -62,8 +62,15 @@ public class CraftStrider extends CraftAnimals implements Strider {
 
     @Override
     public Material getSteerMaterial() {
-        return Material.WARPED_FUNGUS_ON_A_STICK;
+        return this.getHandle().getRideItem(); // Canvas
     }
+    // Canvas start
+
+    @Override
+    public void setSteerMaterial(org.bukkit.Material material){
+        this.getHandle().setRideItem(material);
+    }
+    // Canvas end
 
     @Override
     public net.minecraft.world.entity.monster.Strider getHandle() {
@@ -74,4 +81,11 @@ public class CraftStrider extends CraftAnimals implements Strider {
     public String toString() {
         return "CraftStrider";
     }
+
+    // Canvas start
+    @Override
+    public boolean isSaddled() {
+        return this.getHandle().isSaddled();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
index d7c6a0bbc5671ea8f2488230c94df5146a1e98b9..d05a52305a79fd7bfd1b2debb2c6a70f5483c57a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
@@ -38,5 +38,21 @@ public class CraftTadpole extends CraftFish implements org.bukkit.entity.Tadpole
     public boolean getAgeLock() {
         return this.getHandle().ageLocked;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+
+    @Override
+    public void makeOld(){
+        this.getHandle().makeOld();
+    }
+
+    @Override
+    public void setCanAgeUp(boolean canAge){
+        this.getHandle().setCanAgeUp(canAge);
+    }
+
+    @Override
+    public boolean getCanAgeUp(){
+        return this.getHandle().getCanAgeUp();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
index b2747e37600cadc385e2e9e1115ba1d4ec22f5da..13befbf7452c008d8b2363911f023ecebbaa2bbf 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
@@ -58,6 +58,18 @@ public class CraftTippedArrow extends CraftArrow implements Arrow {
         this.getHandle().effects.clear();
         this.getHandle().updateColor();
     }
+    // Canvas start
+
+    @Override
+    public void setEffectDurationDivisor(final float divisor) {
+        this.getHandle().setDivisor(divisor);
+    }
+
+    @Override
+    public float getEffectDurationDivisor() {
+        return this.getHandle().getDivisor();
+    }
+    // Canvas end
 
     @Override
     public List<PotionEffect> getCustomEffects() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
index 6ace76a829c88e2e747dbbcce0a6582c615fc56d..1a5d1d67535b5e13779003eaa1570f662fa90e82 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
@@ -132,7 +132,40 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
     public void setRestocksToday(int restocksToday) {
         getHandle().numberOfRestocksToday = restocksToday;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+    @Override
+    public void restock(){
+        this.getHandle().restock();
+    }
+
+    @Override
+    public boolean needsToRestock(){
+        return this.getHandle().needsToRestock();
+    }
+
+    @Override
+    public void updateDemand() {
+        this.getHandle().updateDemand();
+    }
+
+    @Override
+    public void trySpawnGolem() {
+        this.getHandle().spawnGolemIfNeeded(
+            this.getHandle().portalWorld,
+            1,
+            1
+        );
+    }
+
+    @Override
+    public void trySpawnGolem(final int amt) {
+        this.getHandle().spawnGolemIfNeeded(
+            this.getHandle().portalWorld,
+            1,
+            amt
+        );
+    }
+    // Canvas end
 
     @Override
     public boolean sleep(Location location) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
index c284eb96a1e330078076cbe61f0f6e2ff4ed89bd..07ab77788c3ea73fc30412595e6e7b640601be6c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
@@ -86,4 +86,16 @@ public class CraftWarden extends CraftMonster implements org.bukkit.entity.Warde
             case ANGRY -> AngerLevel.ANGRY;
         };
     }
+
+    // Canvas start
+    @Override
+    public void setCanDisableShield(final boolean canDisableShield) {
+        this.getHandle().setCanDisableShield(canDisableShield);
+    }
+
+    @Override
+    public boolean getCanDisableShield() {
+        return this.getHandle().canDisableShield;
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
index 46336111dcf62a29390e724b1879c84c697076e9..d9aaf19c5a4cdf57c8c4d06c08318be40d29ec22 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
+import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.monster.ZombieVillager;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Villager;
@@ -127,7 +128,13 @@ public class CraftZombie extends CraftMonster implements Zombie {
     public boolean supportsBreakingDoors() {
         return getHandle().supportsBreakDoorGoal();
     }
-    // Paper end
+
+    // Canvas start
+    @Override
+    public void convertToGiant() {
+        this.getHandle().convertTo(EntityType.GIANT, true);
+    }
+    // Paper end -/- Canvas end
 
     @Override
     public boolean getAgeLock() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java
index 2c47ea42df327b0886358f4e209b8629d6ac859c..91e5ce627ef9143dec46ae39fb56b175e75b9b06 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java
@@ -10,6 +10,12 @@ public class CraftZombieHorse extends CraftAbstractHorse implements ZombieHorse
         super(server, entity);
     }
 
+    // Canvas start
+    public net.minecraft.world.entity.animal.horse.ZombieHorse getHandle(){
+        return (net.minecraft.world.entity.animal.horse.ZombieHorse) this.entity;
+    }
+    // Canvas end
+
     @Override
     public String toString() {
         return "CraftZombieHorse";
@@ -19,4 +25,15 @@ public class CraftZombieHorse extends CraftAbstractHorse implements ZombieHorse
     public Variant getVariant() {
         return Variant.UNDEAD_HORSE;
     }
+    // Canvas start
+    @Override
+    public void revertToHorse(){
+        this.getHandle().revertToHorse();
+    }
+    
+    @Override
+    public void skeletonify(){
+        this.getHandle().skeletonify();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
index d96399e9bf1a58db5a4a22e58abb99e7660e0694..86a67cdeb6421c469c3bb9b22aded8c44eb11ddd 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
@@ -1,16 +1,23 @@
 package org.bukkit.craftbukkit.scheduler;
 
 
+import org.bukkit.Bukkit;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.entity.Camel;
+import org.bukkit.entity.EntityType;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.player.PlayerJoinEvent;
 import org.bukkit.generator.BiomeProvider;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.plugin.PluginBase;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.plugin.PluginLoader;
 import org.bukkit.plugin.PluginLogger;
+import org.bukkit.scheduler.BukkitRunnable;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -18,7 +25,7 @@ import java.io.File;
 import java.io.InputStream;
 import java.util.List;
 
-public class MinecraftInternalPlugin extends PluginBase {
+public class MinecraftInternalPlugin extends PluginBase implements Listener {
     private boolean enabled = true;
 
     private final String pluginName;
@@ -143,4 +150,9 @@ public class MinecraftInternalPlugin extends PluginBase {
     public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
         throw new UnsupportedOperationException("Not supported.");
     }
+
+    @EventHandler
+    public void test(PlayerJoinEvent e){
+        // yeah just testing bro
+    }
 }
