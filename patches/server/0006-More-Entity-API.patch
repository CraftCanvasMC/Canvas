From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Sun, 16 Jun 2024 18:07:42 -0700
Subject: [PATCH] More Entity API


diff --git a/src/main/java/io/papermc/paper/entity/PaperSchoolableFish.java b/src/main/java/io/papermc/paper/entity/PaperSchoolableFish.java
index 41bf71d116ffc5431586ce54abba7f8def6c1dcf..e5afe1989a65870624e9408e52223201d7e841c3 100644
--- a/src/main/java/io/papermc/paper/entity/PaperSchoolableFish.java
+++ b/src/main/java/io/papermc/paper/entity/PaperSchoolableFish.java
@@ -49,4 +49,14 @@ public class PaperSchoolableFish extends CraftFish implements SchoolableFish {
 
         return (SchoolableFish) leader.getBukkitEntity();
     }
+
+    @Override
+    public void moveToLeader() {
+        this.getHandle().pathToLeader();
+    }
+
+    @Override
+    public boolean inRangeOfLeader() {
+        return this.getHandle().inRangeOfLeader();
+    }
 }
diff --git a/src/main/java/me/dueris/canvas/entity/CraftMobType.java b/src/main/java/me/dueris/canvas/entity/CraftMobType.java
new file mode 100644
index 0000000000000000000000000000000000000000..d6d56d07c46cc07224b6514a8da14228b72962db
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/entity/CraftMobType.java
@@ -0,0 +1,15 @@
+package me.dueris.canvas.entity;
+
+import net.minecraft.tags.EntityTypeTags;
+import net.minecraft.world.entity.Entity;
+import me.dueris.canvas.entity.MobType;
+
+public class CraftMobType {
+    public static MobType getMobType(Entity entity) {
+        if (entity.getType().is(EntityTypeTags.ARTHROPOD)) return MobType.ARTHROPOD;
+        if (entity.getType().is(EntityTypeTags.UNDEAD)) return MobType.UNDEAD;
+        if (entity.getType().is(EntityTypeTags.ILLAGER)) return MobType.ILLAGER;
+        if (entity.getType().is(EntityTypeTags.AQUATIC)) return MobType.WATER;
+        return MobType.UNDEFINED; // Unable to get
+    }
+}
diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index c8ccf4b847ba3803b48c26ad6e6acecb327c76c5..d69582e05166138a733e54dd11014315e369feb7 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -319,6 +319,12 @@ public class ServerPlayer extends net.minecraft.world.entity.player.Player imple
     public final void moonrise$setRealPlayer(final boolean real) {
         this.isRealPlayer = real;
     }
+    // Canvas start
+
+    public boolean hasWonGame() {
+        return wonGame;
+    }
+    // Canvas end
 
     @Override
     public final ca.spottedleaf.moonrise.patches.chunk_system.player.RegionizedPlayerChunkLoader.PlayerChunkLoaderData moonrise$getChunkLoader() {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 2b93f9b006ec01a77354d6571563fe3bf3d774c8..d49f24f21a80aaee94f3f305f856a9f2a5df56b0 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -827,7 +827,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         return this.dimensions.makeBoundingBox(this.position);
     }
 
-    protected void reapplyPosition() {
+    public void reapplyPosition() { // Canvas - protected -> public
         this.setPos(this.position.x, this.position.y, this.position.z);
     }
 
@@ -1546,7 +1546,7 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         }
     }
 
-    protected float nextStep() {
+    public float nextStep() { // Canvas - protected -> public
         return (float) ((int) this.moveDist + 1);
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
index 1cdf71a76c629bcc42da7fcc451b7031dbe644bd..7ef63a0069d610bb0149b015437804b5b5e83bf2 100644
--- a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
+++ b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
@@ -217,7 +217,9 @@ public class ExperienceOrb extends Entity {
             while (iterator.hasNext()) {
                 ExperienceOrb entityexperienceorb = (ExperienceOrb) iterator.next();
 
-                this.merge(entityexperienceorb);
+                if(this.allowMerge){
+                    this.merge(entityexperienceorb);
+                }
             }
         }
 
@@ -261,13 +263,15 @@ public class ExperienceOrb extends Entity {
             return false;
         }
     }
+    // Canvas start
+    public boolean allowMerge = true;
 
     private boolean canMerge(ExperienceOrb other) {
-        return other != this && ExperienceOrb.canMerge(other, this.getId(), this.value);
+        return other != this && ExperienceOrb.canMerge(other, this.getId(), this.value) && this.allowMerge;
     }
 
     private static boolean canMerge(ExperienceOrb orb, int seed, int amount) {
-        return !orb.isRemoved() && (orb.getId() - seed) % 40 == 0 && orb.value == amount;
+        return !orb.isRemoved() && (orb.getId() - seed) % 40 == 0 && orb.value == amount && orb.allowMerge;
     }
 
     private void merge(ExperienceOrb other) {
@@ -276,10 +280,13 @@ public class ExperienceOrb extends Entity {
             return;
         }
         // Paper end - call orb merge event
+        if(this.allowMerge && other.allowMerge) {
         this.count += other.count;
         this.age = Math.min(this.age, other.age);
         other.discard(EntityRemoveEvent.Cause.MERGE); // CraftBukkit - add Bukkit remove cause
+        }
     }
+    // Canvas end
 
     private void setUnderwaterMovement() {
         Vec3 vec3d = this.getDeltaMovement();
diff --git a/src/main/java/net/minecraft/world/entity/GlowSquid.java b/src/main/java/net/minecraft/world/entity/GlowSquid.java
index 3e2ea26c23e88c395856b65001f2895db6a52bd4..ef28d0f56192d3e85a0efde3038e760da9dc5d4f 100644
--- a/src/main/java/net/minecraft/world/entity/GlowSquid.java
+++ b/src/main/java/net/minecraft/world/entity/GlowSquid.java
@@ -57,7 +57,7 @@ public class GlowSquid extends Squid {
     }
 
     @Override
-    protected ParticleOptions getInkParticle() {
+    public ParticleOptions getInkParticle() { // Canvas - protected -> public
         return ParticleTypes.GLOW_SQUID_INK;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index b06797b805ba52adb3f7619e8768a627911cffa0..9471f09503a8e6bda4adf94a7590f49ff05b624e 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -2906,18 +2906,25 @@ public abstract class LivingEntity extends Entity implements Attackable {
         }
     }
 
-    protected void goDownInWater() {
+    public void goDownInWater() { // Canvas - protected -> public
         this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -0.03999999910593033D, 0.0D));
     }
 
-    protected void jumpInLiquid(TagKey<Fluid> fluid) {
+    public void jumpInLiquid(TagKey<Fluid> fluid) { // Canvas - protected -> public
         this.setDeltaMovement(this.getDeltaMovement().add(0.0D, 0.03999999910593033D, 0.0D));
     }
 
-    protected float getWaterSlowDown() {
-        return 0.8F;
+    // Canvas start
+    private float waterSlowdown = 0.8F;
+    public float getWaterSlowDown() { // protected -> public
+        return this.waterSlowdown;
     }
 
+    public void setWaterSlowdown(float slowdown) {
+        this.waterSlowdown = slowdown;
+    }
+    // Canvas end
+
     public boolean canStandOnFluid(FluidState state) {
         return false;
     }
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index a07cadcbd73f7058a5cf8535fb317ac0e493eeeb..fa0f8e47f6378789afb76c7c245d3ce1f0ba0e1f 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -183,6 +183,12 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
     // CraftBukkit end
 
     protected void registerGoals() {}
+    // Canvas start
+
+    public void removeGoal(Goal goal){
+        this.goalSelector.removeGoal(goal);
+    }
+    // Canvas end
 
     public static AttributeSupplier.Builder createMobAttributes() {
         return LivingEntity.createLivingAttributes().add(Attributes.FOLLOW_RANGE, 16.0D);
@@ -1785,7 +1791,7 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
     }
 
     @Override
-    protected void jumpInLiquid(TagKey<Fluid> fluid) {
+    public void jumpInLiquid(TagKey<Fluid> fluid) { // Canvas - protected -> public
         if (this.getNavigation().canFloat()) {
             super.jumpInLiquid(fluid);
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
index e8cb124d232f7316cc8c35dd8bd12f79bbcda7d6..eaa6c188863847e6a0b98769c9da8433b6fda2c5 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
@@ -50,11 +50,19 @@ public abstract class AbstractFish extends WaterAnimal implements Bucketable {
     public boolean removeWhenFarAway(double distanceSquared) {
         return !this.fromBucket() && !this.hasCustomName();
     }
+    // Canvas start
+
+    private int maxClusterSize = 8;
 
     @Override
     public int getMaxSpawnClusterSize() {
-        return 8;
+        return this.maxClusterSize;
+    }
+
+    public void setMaxSpawnClusterSize(int i){
+        this.maxClusterSize = i;
     }
+    // Canvas end
 
     @Override
     protected void defineSynchedData(SynchedEntityData.Builder builder) {
@@ -147,10 +155,18 @@ public abstract class AbstractFish extends WaterAnimal implements Bucketable {
         return SoundEvents.BUCKET_FILL_FISH;
     }
 
-    protected boolean canRandomSwim() {
-        return true;
+    public boolean canRandomSwim() { // Canvas - protected -> public
+        return this.canRandomSwim; // Canvas - use customizable value
     }
 
+    // Canvas start
+    public void setCanRandomSwim(boolean can){
+        this.canRandomSwim = can;
+    }
+
+    private boolean canRandomSwim = true;
+    // Canvas end
+
     protected abstract SoundEvent getFlopSound();
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java
index 957eb2ba3f647f70522243fedf36b921e58142bd..ed423bf4ec857ff71d87a4b761ed1109172871ec 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java
@@ -35,11 +35,19 @@ public abstract class AbstractSchoolingFish extends AbstractFish {
         return super.getMaxSpawnClusterSize();
     }
 
+    // Canvas start
     @Override
-    protected boolean canRandomSwim() {
-        return !this.isFollower();
+    public boolean canRandomSwim() {
+        return this.canRandomSwim;
     }
 
+    public void setCanRandomSwim(boolean can){
+        this.canRandomSwim = can;
+    }
+
+    private boolean canRandomSwim = true;
+    // Canvas end
+
     public boolean isFollower() {
         return this.leader != null && this.leader.isAlive();
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index 9a6ec5e465684be7f0d54b1f7e66bdf52603e442..61dda857eedb2c3d9650f981c0761029ffe9a8a4 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -119,7 +119,16 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     public static final String TAG_HAS_NECTAR = "HasNectar";
     public static final String TAG_FLOWER_POS = "flower_pos";
     public static final String TAG_HIVE_POS = "hive_pos";
-    private static final UniformInt PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);
+    public UniformInt PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39); // Canvas - private static/final -> public
+    // Canvas start - add Enderman anger customization features to EntityBee
+    public int minRangeAnger = 20;
+    public int maxRangeAnger = 39;
+    public void setPersistentAngerTime(int min, int max){
+        this.PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(min, max);
+        this.maxRangeAnger = max;
+        this.minRangeAnger = min;
+    }
+    // Canvas end
     @Nullable
     private UUID persistentAngerTarget;
     private float rollAmount;
@@ -136,14 +145,26 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     BlockPos savedFlowerPos;
     @Nullable
     public BlockPos hivePos;
-    Bee.BeePollinateGoal beePollinateGoal;
-    Bee.BeeGoToHiveGoal goToHiveGoal;
-    private Bee.BeeGoToKnownFlowerGoal goToKnownFlowerGoal;
+    // Canvas start - private -> public
+    public Bee.BeePollinateGoal beePollinateGoal;
+    public Bee.BeeGoToHiveGoal goToHiveGoal;
+    public Bee.BeeGoToKnownFlowerGoal goToKnownFlowerGoal;
     private int underWaterTicks;
+    private int minRollFl;
+    private int maxRollFl;
+
+    public void rerollFlowerLocateTimer(){
+        this.remainingCooldownBeforeLocatingNewFlower = Mth.nextInt(this.random, minRollFl, maxRollFl);
+    }
+
+    public int getFlowerLocateTimer(){
+        return this.remainingCooldownBeforeLocatingNewFlower;
+    }
+    // Canvas end
 
     public Bee(EntityType<? extends Bee> type, Level world) {
         super(type, world);
-        this.remainingCooldownBeforeLocatingNewFlower = Mth.nextInt(this.random, 20, 60);
+        this.remainingCooldownBeforeLocatingNewFlower = Mth.nextInt(this.random, minRollFl, maxRollFl); // Canvas
         final org.purpurmc.purpur.controller.FlyingMoveControllerWASD flyingController = new org.purpurmc.purpur.controller.FlyingMoveControllerWASD(this, 0.25F, 1.0F, false); // Purpur
         // Paper start - Fix MC-167279
         class BeeFlyingMoveControl extends FlyingMoveControl {
@@ -523,7 +544,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
     @Override
     public void startPersistentAngerTimer() {
-        this.setRemainingPersistentAngerTime(Bee.PERSISTENT_ANGER_TIME.sample(this.random));
+        this.setRemainingPersistentAngerTime(this.PERSISTENT_ANGER_TIME.sample(this.random)); // Canvas - use public
     }
 
     private boolean doesHiveHaveSpace(BlockPos pos) {
@@ -752,7 +773,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     }
 
     @Override
-    protected void jumpInLiquid(TagKey<Fluid> fluid) {
+    public void jumpInLiquid(TagKey<Fluid> fluid) { // Canvas - protected -> public
         this.setDeltaMovement(this.getDeltaMovement().add(0.0D, 0.01D, 0.0D));
     }
 
@@ -769,7 +790,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         this.hivePos = pos;
     }
 
-    private class BeePollinateGoal extends Bee.BaseBeeGoal {
+    public class BeePollinateGoal extends Bee.BaseBeeGoal { // Canvas - private -> public
 
         private static final int MIN_POLLINATION_TICKS = 400;
         private static final int MIN_FIND_FLOWER_RETRY_COOLDOWN = 20;
@@ -994,7 +1015,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         }
     }
 
-    private class BeeEnterHiveGoal extends Bee.BaseBeeGoal {
+    public class BeeEnterHiveGoal extends Bee.BaseBeeGoal { // Canvas - private -> public
 
         BeeEnterHiveGoal() {
             super();
@@ -1037,7 +1058,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         }
     }
 
-    private class BeeLocateHiveGoal extends Bee.BaseBeeGoal {
+    public class BeeLocateHiveGoal extends Bee.BaseBeeGoal { // Canvas - private -> public
 
         BeeLocateHiveGoal() {
             super();
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cat.java b/src/main/java/net/minecraft/world/entity/animal/Cat.java
index 765cc746e0469f24de0e84666dc5a41b3d55f472..3ebbc99bcc390e918ed694e0404dccda53864c08 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cat.java
@@ -527,6 +527,22 @@ public class Cat extends TamableAnimal implements VariantHolder<Holder<CatVarian
         }
 
     }
+    // Canvas start
+
+    public boolean allowMorningGift = true;
+
+    public void setAllowMorningGift(boolean allow){
+        this.allowMorningGift = allow;
+    }
+
+    public boolean getAllowMorningGift(){
+        return allowMorningGift;
+    }
+
+    public void giveMorningGift() {
+        // this.relaxOnOwnerGoal.giveMorningGift();
+    }
+    // Canvas end
 
     @Override
     public boolean isSteppingCarefully() {
@@ -566,7 +582,7 @@ public class Cat extends TamableAnimal implements VariantHolder<Holder<CatVarian
         }
     }
 
-    private static class CatRelaxOnOwnerGoal extends Goal {
+    public class CatRelaxOnOwnerGoal extends Goal { // Canvas - private/static -> public
 
         private final Cat cat;
         @Nullable
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cow.java b/src/main/java/net/minecraft/world/entity/animal/Cow.java
index 11510e320e4df95e2f2903a07e7ba78b27545b45..b9771dd15b6b7de6d73477a1aee1bab5dbd43bff 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cow.java
@@ -44,8 +44,12 @@ public class Cow extends Animal {
     public Cow(EntityType<? extends Cow> type, Level world) {
         super(type, world);
     }
+    // Canvas start
 
-    // Purpur start
+    public void convertToMushroom(){
+        this.convertTo(EntityType.MOOSHROOM, false);
+    }
+    // Canvas end -/- Purpur start
     @Override
     public boolean isRidable() {
         return level().purpurConfig.cowRidable;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
index ef0124ceb7cafd58c01c7f0b4b542f38a383ab88..81c57cd65009846fe56e13d4f26c98f4b8f4da75 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
@@ -239,6 +239,19 @@ public class Dolphin extends WaterAnimal {
         this.setGotFish(nbt.getBoolean("GotFish"));
         this.setMoisntessLevel(nbt.getInt("Moistness"));
     }
+    // Canvas start
+    public DolphinSwimToTreasureGoal swimToTreasureGoal;
+    public DolphinSwimWithPlayerGoal swimWithPlayerGoal;
+    public PlayWithItemsGoal playWithItemsGoal;
+    private double swimWithPlayerDistance = 4.0D;
+
+    public void setSwimWithPlayerDistance(double distance){
+        this.goalSelector.removeGoal(swimWithPlayerGoal);
+        this.swimWithPlayerDistance = distance;
+        this.swimWithPlayerGoal = new Dolphin.DolphinSwimWithPlayerGoal(this, swimWithPlayerDistance);
+        this.goalSelector.addGoal(2, this.swimWithPlayerGoal);
+    }
+    // Canvas end
 
     @Override
     protected void registerGoals() {
@@ -246,14 +259,21 @@ public class Dolphin extends WaterAnimal {
         this.goalSelector.addGoal(0, new TryFindWaterGoal(this));
         this.goalSelector.addGoal(1, new MeleeAttackGoal(this, 1.2000000476837158D, true)); // Purpur
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
-        this.goalSelector.addGoal(1, new Dolphin.DolphinSwimToTreasureGoal(this));
-        this.goalSelector.addGoal(2, new Dolphin.DolphinSwimWithPlayerGoal(this, 4.0D));
+        // Canvas start
+        this.swimToTreasureGoal = new Dolphin.DolphinSwimToTreasureGoal(this);
+        this.swimWithPlayerGoal = new Dolphin.DolphinSwimWithPlayerGoal(this, swimWithPlayerDistance);
+        this.goalSelector.addGoal(1, this.swimToTreasureGoal);
+        this.goalSelector.addGoal(2, this.swimWithPlayerGoal);
+        // Canvas end
         this.goalSelector.addGoal(4, new RandomSwimmingGoal(this, 1.0D, 10));
         this.goalSelector.addGoal(4, new RandomLookAroundGoal(this));
         this.goalSelector.addGoal(5, new LookAtPlayerGoal(this, Player.class, 6.0F));
         this.goalSelector.addGoal(5, new DolphinJumpGoal(this, 10));
         //this.goalSelector.addGoal(6, new MeleeAttackGoal(this, 1.2000000476837158D, true)); // Purpur - moved up
-        this.goalSelector.addGoal(8, new Dolphin.PlayWithItemsGoal());
+        // Canvas start
+        this.playWithItemsGoal = new Dolphin.PlayWithItemsGoal();
+        this.goalSelector.addGoal(8, this.playWithItemsGoal);
+        // Canvas end
         this.goalSelector.addGoal(8, new FollowBoatGoal(this));
         this.goalSelector.addGoal(9, new AvoidEntityGoal<>(this, Guardian.class, 8.0F, 1.0D, 1.0D));
         this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
@@ -462,7 +482,7 @@ public class Dolphin extends WaterAnimal {
         return true;
     }
 
-    private static class DolphinSwimToTreasureGoal extends Goal {
+    public static class DolphinSwimToTreasureGoal extends Goal { // Canvas - private -> public
 
         private final Dolphin dolphin;
         private boolean stuck;
@@ -554,7 +574,7 @@ public class Dolphin extends WaterAnimal {
         }
     }
 
-    private static class DolphinSwimWithPlayerGoal extends Goal {
+    public static class DolphinSwimWithPlayerGoal extends Goal { // Canvas - private -> public
 
         private final Dolphin dolphin;
         private final double speedModifier;
@@ -605,7 +625,7 @@ public class Dolphin extends WaterAnimal {
         }
     }
 
-    private class PlayWithItemsGoal extends Goal {
+    public class PlayWithItemsGoal extends Goal { // Canvas - private -> public
 
         private int cooldown;
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
index 7bec03979bb5a4c576549baba822ffb908d7a2be..04f2568a67faea04806b91fd32ad0f8a86140b1c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
+++ b/src/main/java/net/minecraft/world/entity/animal/IronGolem.java
@@ -37,6 +37,7 @@ import net.minecraft.world.entity.ai.goal.target.ResetUniversalAngerTargetGoal;
 import net.minecraft.world.entity.monster.Creeper;
 import net.minecraft.world.entity.monster.Enemy;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.item.Item; // Canvas
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.enchantment.EnchantmentHelper;
@@ -46,6 +47,8 @@ import net.minecraft.world.level.NaturalSpawner;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.material.Fluids;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.Material; // Canvas
+import org.bukkit.craftbukkit.util.CraftMagicNumbers; // Canvas
 
 public class IronGolem extends AbstractGolem implements NeutralMob {
 
@@ -227,6 +230,7 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
     @Override
     public boolean doHurtTarget(Entity target) {
         this.attackAnimationTick = 10;
+        Vec3 velocity = translateIntToVec3(getFlingVelocity()); // Canvas
         this.level().broadcastEntityEvent(this, (byte) 4);
         float f = this.getAttackDamage();
         float f1 = (int) f > 0 ? f / 2.0F + (float) this.random.nextInt((int) f) : f;
@@ -249,6 +253,7 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
 
             target.setDeltaMovement(target.getDeltaMovement().add(0.0D, 0.4000000059604645D * d2, 0.0D));
             Level world = this.level();
+            this.setRepairItem(Material.IRON_INGOT); // Canvas
 
             if (world instanceof ServerLevel) {
                 ServerLevel worldserver = (ServerLevel) world;
@@ -260,6 +265,21 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
         this.playSound(SoundEvents.IRON_GOLEM_ATTACK, 1.0F, 1.0F);
         return flag;
     }
+    // Canvas start
+    private static double yVelocity = 0.4000000059604645D;
+
+    public void setFlingVelocity(double newYVelocity) {
+        yVelocity = newYVelocity;
+    }
+
+    public double getFlingVelocity(){
+        return yVelocity;
+    }
+
+    private Vec3 translateIntToVec3(double amount) {
+        return new Vec3(0.0D, amount * yVelocity, 0.0D);
+    }
+    // Canvas end
 
     @Override
     public boolean hurt(DamageSource source, float amount) {
@@ -321,7 +341,7 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
     protected InteractionResult mobInteract(Player player, InteractionHand hand) {
         ItemStack itemstack = player.getItemInHand(hand);
 
-        if (!itemstack.is(Items.IRON_INGOT)) {
+        if (!itemstack.is(repairitem) || !canRepair) { // Canvas
             return tryRide(player, hand); // Purpur
         } else {
             float f = this.getHealth();
@@ -340,6 +360,20 @@ public class IronGolem extends AbstractGolem implements NeutralMob {
         }
     }
 
+    // Canvas start
+    public boolean canRepair = true;
+
+    public void setCanRepair(boolean can){
+        canRepair = can;
+    }
+
+    public Item repairitem = Items.IRON_INGOT;
+
+    public void setRepairItem(Material material){
+        repairitem = CraftMagicNumbers.getItem(material);
+    }
+    // Canvas end
+
     @Override
     protected void playStepSound(BlockPos pos, BlockState state) {
         this.playSound(SoundEvents.IRON_GOLEM_STEP, 1.0F, 1.0F);
diff --git a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
index e5a84dd5f1a375dd44b9d14dc7f44339bd8ddf3a..19c98866e67fdbcd8627b0d306e99750baef2626 100644
--- a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
@@ -63,8 +63,12 @@ public class MushroomCow extends Cow implements Shearable, VariantHolder<Mushroo
     public MushroomCow(EntityType<? extends MushroomCow> type, Level world) {
         super(type, world);
     }
+    // Canvas start
 
-    // Purpur start
+    public void convertToNormal(){
+        this.convertTo(EntityType.COW, false);
+    }
+    // Canvas end -/- Purpur start
     @Override
     public boolean isRidable() {
         return level().purpurConfig.mooshroomRidable;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Panda.java b/src/main/java/net/minecraft/world/entity/animal/Panda.java
index 1a0ffbe2f835cbe37ef670d01daf08fb2f48b4fa..0f45352306c07062d027a64c786090e02bf62d51 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Panda.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Panda.java
@@ -56,6 +56,7 @@ import net.minecraft.world.entity.ai.goal.TemptGoal;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
+import net.minecraft.world.entity.animal.Panda.PandaSneezeGoal; // Canvas
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.player.Player;
@@ -326,6 +327,11 @@ public class Panda extends Animal {
 
         return entitypanda;
     }
+    // Canvas start
+    public PandaSneezeGoal sneezGoal;
+    public PandaLieOnBackGoal lieOnBackGoal;
+    public PandaRollGoal rollGoal;
+    // Canvas end
 
     @Override
     protected void registerGoals() {
@@ -340,12 +346,18 @@ public class Panda extends Animal {
         this.goalSelector.addGoal(6, new Panda.PandaAvoidGoal<>(this, Player.class, 8.0F, 2.0D, 2.0D));
         this.goalSelector.addGoal(6, new Panda.PandaAvoidGoal<>(this, Monster.class, 4.0F, 2.0D, 2.0D));
         this.goalSelector.addGoal(7, new Panda.PandaSitGoal());
-        this.goalSelector.addGoal(8, new Panda.PandaLieOnBackGoal(this));
-        this.goalSelector.addGoal(8, new Panda.PandaSneezeGoal(this));
+        // Canvas start
+        this.sneezGoal = new PandaSneezeGoal(this);
+        this.goalSelector.addGoal(8, this.sneezGoal);
+        this.lieOnBackGoal = new PandaLieOnBackGoal(this);
+        this.goalSelector.addGoal(8, this.lieOnBackGoal);
+        this.rollGoal = new PandaRollGoal(this);
+        this.goalSelector.addGoal(12, this.rollGoal);
+        // Canvas end
         this.lookAtPlayerGoal = new Panda.PandaLookAtPlayerGoal(this, Player.class, 6.0F);
         this.goalSelector.addGoal(9, this.lookAtPlayerGoal);
         this.goalSelector.addGoal(10, new RandomLookAroundGoal(this));
-        this.goalSelector.addGoal(12, new Panda.PandaRollGoal(this));
+//         this.goalSelector.addGoal(12, new Panda.PandaRollGoal(this));
         this.goalSelector.addGoal(13, new FollowParentGoal(this, 1.25D));
         this.goalSelector.addGoal(14, new WaterAvoidingRandomStrollGoal(this, 1.0D));
         this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
@@ -555,7 +567,7 @@ public class Panda extends Animal {
         return Mth.lerp(tickDelta, this.rollAmountO, this.rollAmount);
     }
 
-    private void handleRoll() {
+    public void handleRoll() { // Canvas - private -> public
         ++this.rollCounter;
         if (this.rollCounter > 32) {
             this.roll(false);
@@ -1031,7 +1043,7 @@ public class Panda extends Animal {
         }
     }
 
-    private static class PandaLieOnBackGoal extends Goal {
+    public static class PandaLieOnBackGoal extends Goal { // Canvas - private -> public
 
         private final Panda panda;
         private int cooldown;
@@ -1063,7 +1075,7 @@ public class Panda extends Animal {
         }
     }
 
-    private static class PandaSneezeGoal extends Goal {
+    public static class PandaSneezeGoal extends Goal { // Canvas - private -> public
 
         private final Panda panda;
 
@@ -1133,7 +1145,7 @@ public class Panda extends Animal {
         }
     }
 
-    private static class PandaRollGoal extends Goal {
+    public static class PandaRollGoal extends Goal { // Canvas - private -> public
 
         private final Panda panda;
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Parrot.java b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
index 82310253297d3046936ff4a29583c7c25177ebee..1ee2f8d85a22df04233f26bca834213e0e6c4686 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Parrot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
@@ -222,6 +222,13 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
     public boolean isBaby() {
         return false;
     }
+    // Canvas start
+    public LandOnOwnersShoulderGoal landOnOwnersShoulderGoal;
+
+    public void landOnShoulder(){
+        this.landOnOwnersShoulderGoal.start();
+    }
+    // Canvas end
 
     @Override
     protected void registerGoals() {
@@ -234,7 +241,10 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
         this.goalSelector.addGoal(2, new SitWhenOrderedToGoal(this));
         this.goalSelector.addGoal(2, new FollowOwnerGoal(this, 1.0D, 5.0F, 1.0F));
         this.goalSelector.addGoal(2, new Parrot.ParrotWanderGoal(this, 1.0D));
-        this.goalSelector.addGoal(3, new LandOnOwnersShoulderGoal(this));
+        // Canvas start
+        this.landOnOwnersShoulderGoal = new LandOnOwnersShoulderGoal(this);
+        this.goalSelector.addGoal(3, this.landOnOwnersShoulderGoal);
+        // Canvas end
         this.goalSelector.addGoal(3, new FollowMobGoal(this, 1.0D, 3.0F, 7.0F));
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
index 4cf1fa73f082600dc1484bf6fe0b1361f65399db..8f7a945c7b18129e3ddc72778c16e2257deb3559 100644
--- a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
+++ b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
@@ -314,7 +314,7 @@ public class PolarBear extends Animal implements NeutralMob {
     }
 
     @Override
-    protected float getWaterSlowDown() {
+    public float getWaterSlowDown() { // Canvas - protected -> public
         return 0.98F;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
index c758f759ccae81b7651bfcba254f54335f2c7cc8..f5b0c28d6df4cc9a136bb29aefc6808bdf072c9f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
@@ -186,30 +186,42 @@ public class Pufferfish extends AbstractFish {
         }
 
     }
+    // Canvas start
+    public boolean canPoison = true;
 
+    public void setCanPoison(boolean can){
+        this.canPoison = can;
+    }
+
+    // Canvas end
     private void touch(Mob mob) {
+        if(this.canPoison){ // Canvas
         int i = this.getPuffState();
 
         if (mob.hurt(this.damageSources().mobAttack(this), (float) (1 + i))) {
             mob.addEffect(new MobEffectInstance(MobEffects.POISON, 60 * i, 0), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
             this.playSound(SoundEvents.PUFFER_FISH_STING, 1.0F, 1.0F);
         }
-
+        } // Canvas
     }
 
     @Override
     public void playerTouch(Player player) {
-        int i = this.getPuffState();
+        // Canvas start - implement able to poison boolean
+        if(this.canPoison){
+            int i = this.getPuffState();
 
-        if (player instanceof ServerPlayer && i > 0 && player.hurt(this.damageSources().mobAttack(this), (float) (1 + i))) {
-            if (!this.isSilent()) {
-                ((ServerPlayer) player).connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.PUFFER_FISH_STING, 0.0F));
-            }
+            if (player instanceof ServerPlayer && i > 0 && player.hurt(this.damageSources().mobAttack(this), (float) (1 + i))) {
+                if (!this.isSilent()) {
+                    ((ServerPlayer) player).connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.PUFFER_FISH_STING, 0.0F));
+                }
 
-            player.addEffect(new MobEffectInstance(MobEffects.POISON, 60 * i, 0), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
+                player.addEffect(new MobEffectInstance(MobEffects.POISON, 60 * i, 0), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
+            }
         }
 
     }
+    // Canvas end
 
     @Override
     protected SoundEvent getAmbientSound() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
index 459c0c95a27ddeb72e8714d3c2fcae1870051b3c..ae760bb471fa0ddb1322a6c1b6ca48864f32c542 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
@@ -513,7 +513,7 @@ public class Rabbit extends Animal implements VariantHolder<Rabbit.Variant> {
         return world.getBlockState(pos.below()).is(BlockTags.RABBITS_SPAWNABLE_ON) && isBrightEnoughToSpawn(world, pos);
     }
 
-    boolean wantsMoreFood() {
+    public boolean wantsMoreFood() { // Canvas - ensure public specified bc i picky
         return this.moreCarrotTicks <= 0;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Squid.java b/src/main/java/net/minecraft/world/entity/animal/Squid.java
index 3ca9a7f289d8c3f0b0df8f1cd4a5ca1254653c50..0b85322f82e36e7ac70dc838285d95d153ce7aa3 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Squid.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Squid.java
@@ -1,7 +1,10 @@
 package net.minecraft.world.entity.animal;
 
+import org.bukkit.craftbukkit.CraftParticle;
+
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ParticleOptions;
+import net.minecraft.core.particles.ParticleType;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
@@ -231,7 +234,7 @@ public class Squid extends WaterAnimal {
         return vec3.yRot(-this.yBodyRotO * (float) (Math.PI / 180.0));
     }
 
-    private void spawnInk() {
+    public void spawnInk() { // Canvas
         this.makeSound(this.getSquirtSound());
         Vec3 vec3 = this.rotateVector(new Vec3(0.0, -1.0, 0.0)).add(this.getX(), this.getY(), this.getZ());
 
@@ -242,7 +245,12 @@ public class Squid extends WaterAnimal {
         }
     }
 
-    protected ParticleOptions getInkParticle() {
+    // Canvas start
+    public void setGlowingSquid(){
+        this.convertTo(EntityType.GLOW_SQUID, true);
+    }
+    // Canvas end
+    public ParticleOptions getInkParticle() { // Canvas - protected -> public
         return ParticleTypes.SQUID_INK;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Turtle.java b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
index 15a8c4e2772e1529204e3892914e49f9a17852aa..80a4814250a7d332a7547cd94c5081f012510fd4 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Turtle.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
@@ -121,7 +121,7 @@ public class Turtle extends Animal {
     }
 
     @Override
-    protected boolean isAlwaysExperienceDropper() {
+    public boolean isAlwaysExperienceDropper() { // Canvas - protected -> public
         return this.level().purpurConfig.turtleAlwaysDropExp;
     }
 
@@ -296,7 +296,7 @@ public class Turtle extends Animal {
     }
 
     @Override
-    protected float nextStep() {
+    public float nextStep() { // Canvas - protected -> public
         return this.moveDist + 0.15F;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
index 0f9196cc26e5c670a7f3454326b762f0303f633c..3e54513561e7e77df6c16427fdd0b1c0ba46a9da 100644
--- a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
@@ -76,7 +76,7 @@ import org.slf4j.Logger;
 public class Allay extends PathfinderMob implements InventoryCarrier, VibrationSystem {
 
     private static final Logger LOGGER = LogUtils.getLogger();
-    private static final Vec3i ITEM_PICKUP_REACH = new Vec3i(1, 1, 1);
+    public Vec3i ITEM_PICKUP_REACH = new Vec3i(1, 1, 1); // Canvas
     private static final int LIFTING_ITEM_ANIMATION_DURATION = 5;
     private static final float DANCING_LOOP_DURATION = 55.0F;
     private static final float SPINNING_ANIMATION_DURATION = 15.0F;
@@ -338,8 +338,16 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         return this.getBrain().checkMemory(MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS, MemoryStatus.VALUE_PRESENT);
     }
 
+    // Canvas start
+    public boolean canInteract = true;
+
+    public void setCanInteract(boolean canInteract){
+        this.canInteract = canInteract;
+    }
+
     @Override
     protected InteractionResult mobInteract(Player player, InteractionHand hand) {
+        if(canInteract){
         ItemStack itemstack = player.getItemInHand(hand);
         ItemStack itemstack1 = this.getItemInHand(InteractionHand.MAIN_HAND);
 
@@ -380,7 +388,11 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         } else {
             return super.mobInteract(player, hand);
         }
+        }else{
+            return super.mobInteract(player, hand);
+        }
     }
+    // Canvas end
 
     public void setJukeboxPlaying(BlockPos jukeboxPos, boolean playing) {
         if (playing) {
@@ -402,7 +414,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
 
     @Override
     protected Vec3i getPickupReach() {
-        return Allay.ITEM_PICKUP_REACH;
+        return this.ITEM_PICKUP_REACH; // Canvas
     }
 
     @Override
@@ -412,7 +424,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         return !itemstack1.isEmpty() && this.level().getGameRules().getBoolean(GameRules.RULE_MOBGRIEFING) && this.inventory.canAddItem(stack) && this.allayConsidersItemEqual(itemstack1, stack);
     }
 
-    private boolean allayConsidersItemEqual(ItemStack stack, ItemStack stack2) {
+    public boolean allayConsidersItemEqual(ItemStack stack, ItemStack stack2) { // Canvas - private -> public
         return ItemStack.isSameItem(stack, stack2) && !this.hasNonMatchingPotion(stack, stack2);
     }
 
@@ -616,16 +628,16 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         return this.vibrationUser;
     }
 
-    private class VibrationUser implements VibrationSystem.User {
+    public class VibrationUser implements VibrationSystem.User { // Canvas - private -> public
 
-        private static final int VIBRATION_EVENT_LISTENER_RANGE = 16;
+        public int VIBRATION_EVENT_LISTENER_RANGE = 16; // Canvas - static/final -> public
         private final PositionSource positionSource = new EntityPositionSource(Allay.this, Allay.this.getEyeHeight());
 
         VibrationUser() {}
 
         @Override
         public int getListenerRadius() {
-            return 16;
+            return this.VIBRATION_EVENT_LISTENER_RANGE; // Canvas - Change to be customizable
         }
 
         @Override
@@ -667,7 +679,7 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
     private class JukeboxListener implements GameEventListener {
 
         private final PositionSource listenerSource;
-        private final int listenerRadius;
+        private int listenerRadius; // Canvas
 
         public JukeboxListener(final PositionSource positionsource, final int i) {
             this.listenerSource = positionsource;
@@ -679,6 +691,12 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
             return this.listenerSource;
         }
 
+        // Canvas start
+        public void setRadius(int radius){
+            this.listenerRadius = radius;
+        }
+
+        // Canvas end
         @Override
         public int getListenerRadius() {
             return this.listenerRadius;
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index e3178e2562a45f09c6567bb63112aa84fc59ea1d..a233c1efca1fac9fe5d6c5ad633e840a1a1ddb60 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -30,6 +30,7 @@ import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.effect.MobEffect; // Canvas
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.AgeableMob;
@@ -77,7 +78,29 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
     public static final int TOTAL_PLAYDEAD_TIME = 200;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Axolotl>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.AXOLOTL_ATTACKABLES, SensorType.AXOLOTL_TEMPTATIONS);
     // CraftBukkit - decompile error
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN, MemoryModuleType.IS_PANICKING});
+    // Canvas start - expand for easier readability
+    public static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, // Canvas - protected -> public
+                        MemoryModuleType.NEAREST_LIVING_ENTITIES,
+                        MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
+                        MemoryModuleType.NEAREST_VISIBLE_PLAYER,
+                         MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER,
+                         MemoryModuleType.LOOK_TARGET,
+                         MemoryModuleType.WALK_TARGET,
+                         MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
+                         MemoryModuleType.PATH,
+                         MemoryModuleType.ATTACK_TARGET,
+                         MemoryModuleType.ATTACK_COOLING_DOWN,
+                         MemoryModuleType.NEAREST_VISIBLE_ADULT,
+                         new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY,
+                            MemoryModuleType.PLAY_DEAD_TICKS,
+                            MemoryModuleType.NEAREST_ATTACKABLE,
+                            MemoryModuleType.TEMPTING_PLAYER,
+                            MemoryModuleType.TEMPTATION_COOLDOWN_TICKS,
+                            MemoryModuleType.IS_TEMPTED,
+                            MemoryModuleType.HAS_HUNTING_COOLDOWN,
+                            MemoryModuleType.IS_PANICKING
+    });
+    // Canvas end
     private static final EntityDataAccessor<Integer> DATA_VARIANT = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_PLAYING_DEAD = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> FROM_BUCKET = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
@@ -211,7 +234,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
 
     }
 
-    protected void handleAirSupply(int air) {
+    public void handleAirSupply(int air) { // Canvas - protected -> public
         if (this.isAlive() && !this.isInWaterRainOrBubble()) {
             this.setAirSupply(air - 1);
             if (this.getAirSupply() == -20) {
@@ -243,9 +266,23 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
     public void setVariant(Axolotl.Variant variant) {
         this.entityData.set(Axolotl.DATA_VARIANT, variant.getId());
     }
+    // Canvas start
+    private int varientChanceBounds = 1200;
+    public void setRareVarientChanceBound(int bound){
+        this.varientChanceBounds = bound;
+    }
+
+    public int getRareVarientChanceBound(){
+        return this.varientChanceBounds;
+    }
+
+    public void resetRareVarientChanceBound(){
+        this.varientChanceBounds = 1200;
+    }
+    // Canvas end
 
-    private static boolean useRareVariant(RandomSource random) {
-        return random.nextInt(1200) == 0;
+    public boolean useRareVariant(RandomSource random) { // Canvas - private/static -> public
+        return random.nextInt(this.varientChanceBounds) == 0; // Canvas - use customziable value
     }
 
     @Override
@@ -284,7 +321,7 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
         if (axolotl != null) {
             Axolotl.Variant axolotl_variant;
 
-            if (Axolotl.useRareVariant(this.random)) {
+            if (this.useRareVariant(this.random)) { // Canvas
                 axolotl_variant = Axolotl.Variant.getRareSpawnVariant(this.random);
             } else {
                 axolotl_variant = this.random.nextBoolean() ? this.getVariant() : ((Axolotl) entity).getVariant();
@@ -430,6 +467,36 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
 
     }
 
+    // Canvas start
+    private boolean applySupportingEffects = true;
+    private MobEffect supportingEffectType = MobEffects.REGENERATION.value();
+    private int amplifier = 1;
+
+    public boolean getApplySupportingEffects(){
+        return applySupportingEffects;
+    }
+
+    public void setApplySupportingEffects(boolean applySupportingEffects) {
+        this.applySupportingEffects = applySupportingEffects;
+    }
+
+    public void setSupportingEffectType(org.bukkit.potion.PotionEffectType potionEffectType){
+        MobEffect effect = org.bukkit.craftbukkit.potion.CraftPotionEffectType.bukkitToMinecraft(potionEffectType);
+        this.supportingEffectType = effect;
+    }
+
+    public org.bukkit.potion.PotionEffectType getSupportingPotionEffectType(){
+        return org.bukkit.craftbukkit.potion.CraftPotionEffectType.minecraftToBukkit(supportingEffectType);
+    }
+
+    public void setSupportingEffectAmplifier(int amplifier){
+        this.amplifier = amplifier;
+    }
+
+    public int getSupportingEffectAmplifier(){
+        return this.amplifier;
+    }
+
     public void applySupportingEffects(Player player) {
         MobEffectInstance mobeffect = player.getEffect(MobEffects.REGENERATION);
 
@@ -437,12 +504,14 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
             int i = mobeffect != null ? mobeffect.getDuration() : 0;
             int j = Math.min(2400, 100 + i);
 
-            player.addEffect(new MobEffectInstance(MobEffects.REGENERATION, j, 0), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.AXOLOTL); // CraftBukkit
+            player.addEffect(new MobEffectInstance(org.bukkit.craftbukkit.potion.CraftPotionEffectType.bukkitToMinecraftHolder(org.bukkit.craftbukkit.potion.CraftPotionEffectType.minecraftToBukkit(supportingEffectType)), j, amplifier), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.AXOLOTL); // CraftBukkit // Canvas
         }
 
         player.removeEffect(MobEffects.DIG_SLOWDOWN, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.AXOLOTL); // Paper - Add missing effect cause
     }
 
+    // Canvas end
+
     @Override
     public boolean requiresCustomPersistence() {
         return super.requiresCustomPersistence() || this.fromBucket();
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
index 0656e03bdd71f5d81853e817e136c8f11667c76e..51b0e2e292fc9aa9e176fd3973a05d3eaf2505c5 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
@@ -49,7 +49,19 @@ public class Tadpole extends AbstractFish {
     public static final float HITBOX_HEIGHT = 0.3F;
     public int age;
     protected static final ImmutableList<SensorType<? extends Sensor<? super Tadpole>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.HURT_BY, SensorType.FROG_TEMPTATIONS);
-    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.BREED_TARGET, MemoryModuleType.IS_PANICKING);
+    // Canvas start - expand for better readability
+    public static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, // Canvas - protected -> public
+                        MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
+                        MemoryModuleType.WALK_TARGET,
+                        MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
+                        MemoryModuleType.PATH,
+                        MemoryModuleType.NEAREST_VISIBLE_ADULT,
+                        MemoryModuleType.TEMPTATION_COOLDOWN_TICKS,
+                        MemoryModuleType.IS_TEMPTED,
+                        MemoryModuleType.TEMPTING_PLAYER,
+                        MemoryModuleType.BREED_TARGET,
+                        MemoryModuleType.IS_PANICKING);
+    // Canvas end
     public boolean ageLocked; // Paper
     private org.purpurmc.purpur.controller.WaterMoveControllerWASD purpurController; // Purpur
 
@@ -115,6 +127,12 @@ public class Tadpole extends AbstractFish {
         return (Brain<Tadpole>) super.getBrain(); // CraftBukkit - decompile error
     }
 
+    // Canvas start
+    public void makeOld(){
+        this.convertTo(EntityType.FROG, true);
+    }
+    // Canvas end
+
     @Override
     protected SoundEvent getFlopSound() {
         return SoundEvents.TADPOLE_FLOP;
@@ -250,7 +268,7 @@ public class Tadpole extends AbstractFish {
         return this.age;
     }
 
-    private void ageUp(int seconds) {
+    public void ageUp(int seconds) { // Canvas - private -> public
         if (this.ageLocked) return; // Paper
         this.setAge(this.age + seconds * 20);
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index aa548cba6134652751d73b6774e88f9f6d9ee0ed..80af1171448338b6591643b41ea43fdd60e05bfd 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -63,18 +63,42 @@ import org.bukkit.event.player.PlayerBucketFillEvent;
 public class Goat extends Animal {
 
     public static final EntityDimensions LONG_JUMPING_DIMENSIONS = EntityDimensions.scalable(0.9F, 1.3F).scale(0.7F);
-    private static final int ADULT_ATTACK_DAMAGE = 2;
-    private static final int BABY_ATTACK_DAMAGE = 1;
-    protected static final ImmutableList<SensorType<? extends Sensor<? super Goat>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.GOAT_TEMPTATIONS);
-    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.BREED_TARGET, MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, new MemoryModuleType[]{MemoryModuleType.IS_TEMPTED, MemoryModuleType.RAM_COOLDOWN_TICKS, MemoryModuleType.RAM_TARGET, MemoryModuleType.IS_PANICKING});
-    public static final int GOAT_FALL_DAMAGE_REDUCTION = 10;
-    public static final double GOAT_SCREAMING_CHANCE = 0.02D;
-    public static final double UNIHORN_CHANCE = 0.10000000149011612D;
+    // Canvas start - static/final -> public
+    private int ADULT_ATTACK_DAMAGE = 2;
+    private int BABY_ATTACK_DAMAGE = 1;
+    // Canvas end
+    public static final ImmutableList<SensorType<? extends Sensor<? super Goat>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.GOAT_TEMPTATIONS); // Canvas protected -> public
+    // Canvas start - expand ImmutableList for easier readability
+    public static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, // protected -> public
+                            MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
+                            MemoryModuleType.WALK_TARGET,
+                            MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
+                            MemoryModuleType.PATH, MemoryModuleType.ATE_RECENTLY,
+                            MemoryModuleType.BREED_TARGET,
+                            MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS,
+                            MemoryModuleType.LONG_JUMP_MID_JUMP,
+                            MemoryModuleType.TEMPTING_PLAYER,
+                            MemoryModuleType.NEAREST_VISIBLE_ADULT,
+                            MemoryModuleType.TEMPTATION_COOLDOWN_TICKS,
+                            new MemoryModuleType[]{MemoryModuleType.IS_TEMPTED,
+                                MemoryModuleType.RAM_COOLDOWN_TICKS,
+                                MemoryModuleType.RAM_TARGET,
+                                MemoryModuleType.IS_PANICKING}); 
+    // Canvas start - static/final -> public
+    public int GOAT_FALL_DAMAGE_REDUCTION = 10;
+    public double GOAT_SCREAMING_CHANCE = 0.02D;
+    public double UNIHORN_CHANCE = 0.10000000149011612D;
+    // Canvas end
     private static final EntityDataAccessor<Boolean> DATA_IS_SCREAMING_GOAT = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
     public static final EntityDataAccessor<Boolean> DATA_HAS_LEFT_HORN = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
     public static final EntityDataAccessor<Boolean> DATA_HAS_RIGHT_HORN = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
     private boolean isLoweringHead;
     private int lowerHeadTick;
+    // Canvas start
+    public boolean isLoweringHead(){
+        return this.isLoweringHead;
+    }
+    // Canvas end
 
     public Goat(EntityType<? extends Goat> type, Level world) {
         super(type, world);
@@ -148,10 +172,19 @@ public class Goat extends Animal {
         }
 
     }
+    // Canvas start
+    public void setFallDamageReduction(int fallDamageReduction){
+        this.GOAT_FALL_DAMAGE_REDUCTION = fallDamageReduction;
+    }
+
+    public int getFallDamageReduction(){
+        return this.GOAT_FALL_DAMAGE_REDUCTION;
+    }
+    // Canvas end
 
     @Override
     protected int calculateFallDamage(float fallDistance, float damageMultiplier) {
-        return super.calculateFallDamage(fallDistance, damageMultiplier) - 10;
+        return super.calculateFallDamage(fallDistance, damageMultiplier) - this.GOAT_FALL_DAMAGE_REDUCTION; // Canvas - set int to customizable int value
     }
 
     @Override
@@ -404,6 +437,24 @@ public class Goat extends Animal {
         this.entityData.set(Goat.DATA_HAS_LEFT_HORN, true);
         this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, true);
     }
+    // Canvas start
+    public void addRightHorn(){
+        this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, true);
+    }
+
+    public void removeRightHorn(){
+        this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, false);
+    }
+
+    public void addLeftHorn(){
+        this.entityData.set(Goat.DATA_HAS_LEFT_HORN, true);
+    }
+
+    public void removeLeftHorn(){
+        this.entityData.set(Goat.DATA_HAS_LEFT_HORN, false);
+    }
+
+    // Canvas end
 
     public void removeHorns() {
         this.entityData.set(Goat.DATA_HAS_LEFT_HORN, false);
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
index 4eec1fe4e5996817c26c4f7e701e97fd5d8dcf60..4652b6768c2ab1e4f65161b5fb93144ec94dd303 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -287,7 +287,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         this.addBehaviourGoals();
     }
 
-    protected void addBehaviourGoals() {
+    public void addBehaviourGoals() { // Canvas - protected -> public
         this.goalSelector.addGoal(0, new FloatGoal(this));
         this.goalSelector.addGoal(3, new TemptGoal(this, 1.25D, (itemstack) -> {
             return itemstack.is(ItemTags.HORSE_TEMPT_ITEMS);
@@ -680,9 +680,19 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         return stack.is(ItemTags.HORSE_FOOD);
     }
 
-    private void moveTail() {
+    public void moveTail() { // Canvas - private -> public
         this.tailCounter = 1;
     }
+    // Canvas start
+    public void skeletonify(){
+        this.convertTo(EntityType.SKELETON_HORSE, true);
+    }
+
+    public void zombify(){
+        this.convertTo(EntityType.ZOMBIE_HORSE, true);
+    }
+
+    // Canvas end
 
     @Override
     protected void dropEquipment() {
@@ -726,7 +736,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         }
     }
 
-    protected void followMommy() {
+    public void followMommy() { // Canvas - protected -> public
         if (this.isBred() && this.isBaby() && !this.isEating()) {
             LivingEntity entityliving = this.level().getNearestEntity(AbstractHorse.class, AbstractHorse.MOMMY_TARGETING, this, this.getX(), this.getY(), this.getZ(), this.getBoundingBox().inflate(16.0D));
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
index 7714d7f74836e5a765867fa0339c41fdce703863..e23435a7e65ba36ead21e2275685cd5ccea58f5e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
@@ -506,7 +506,7 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
     }
 
     @Override
-    protected void followMommy() {
+    public void followMommy() { // Canvas - protected -> public
         if (!this.inCaravan() && this.isBaby()) {
             super.followMommy();
         }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
index 46cb38c56073fe6c259a9ce3b5d8379e0d9a05c8..32d97baf1297510754aabe4795cfa7da6934d6e3 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
@@ -96,7 +96,7 @@ public class SkeletonHorse extends AbstractHorse {
     }
 
     @Override
-    protected void addBehaviourGoals() {
+    public void addBehaviourGoals() { // Canvas - protected -> public
         if (level().purpurConfig.skeletonHorseCanSwim) goalSelector.addGoal(0, new net.minecraft.world.entity.ai.goal.FloatGoal(this));
     }
 
@@ -109,6 +109,16 @@ public class SkeletonHorse extends AbstractHorse {
     public SoundEvent getDeathSound() {
         return SoundEvents.SKELETON_HORSE_DEATH;
     }
+    // Canvas start
+
+    public void revertToHorse(){
+        this.convertTo(EntityType.HORSE, true);
+    }
+
+    public void zombify(){
+        this.convertTo(EntityType.ZOMBIE_HORSE, true);
+    }
+    // Canvas end
 
     @Override
     protected SoundEvent getHurtSound(DamageSource source) {
@@ -184,7 +194,7 @@ public class SkeletonHorse extends AbstractHorse {
     }
 
     @Override
-    protected float getWaterSlowDown() {
+    public float getWaterSlowDown() { // Canvas - protected -> public
         return 0.96F;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
index 201471473b7ecc7489c4303a0d37b99fb4a8740f..b8fd2b737176980f4a859bfd2ecacdd0eb8ae37f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
@@ -69,6 +69,16 @@ public class ZombieHorse extends AbstractHorse {
     public boolean isSensitiveToWater() {
         return this.level().purpurConfig.zombieHorseTakeDamageFromWater;
     }
+    // Canvas start
+
+    public void revertToHorse(){
+        this.convertTo(EntityType.HORSE, true);
+    }
+
+    public void skeletonify(){
+        this.convertTo(EntityType.SKELETON_HORSE, true);
+    }
+    // Canvas end
 
     @Override
     protected boolean isAlwaysExperienceDropper() {
@@ -119,7 +129,7 @@ public class ZombieHorse extends AbstractHorse {
     }
 
     @Override
-    protected void addBehaviourGoals() {
+    public void addBehaviourGoals() { // Canvas
         if (level().purpurConfig.zombieHorseCanSwim) goalSelector.addGoal(0, new net.minecraft.world.entity.ai.goal.FloatGoal(this)); // Purpur
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java b/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
index b6f5281705ce4c7a755e3818cf6c4a2235a024f9..a192cad17decc5f38ce25cf43c2416fb12b81561 100644
--- a/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
+++ b/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
@@ -157,11 +157,11 @@ public class Sniffer extends Animal {
     }
 
     public boolean canSniff() {
-        return !this.isTempted() && !this.isPanicking() && !this.isInWater() && !this.isInLove() && this.onGround() && !this.isPassenger() && !this.isLeashed();
+        return canSniff && !this.isTempted() && !this.isPanicking() && !this.isInWater() && !this.isInLove() && this.onGround() && !this.isPassenger() && !this.isLeashed();
     }
 
     public boolean canPlayDiggingSound() {
-        return this.getState() == Sniffer.State.DIGGING || this.getState() == Sniffer.State.SEARCHING;
+        return canDig && this.getState() == Sniffer.State.DIGGING || this.getState() == Sniffer.State.SEARCHING;
     }
 
     private BlockPos getHeadBlock() {
@@ -280,15 +280,25 @@ public class Sniffer extends Animal {
     }
 
     public boolean canDig() {
-        return !this.isPanicking() && !this.isTempted() && !this.isBaby() && !this.isInWater() && this.onGround() && !this.isPassenger() && this.canDig(this.getHeadBlock().below());
+        return canDig && !this.isPanicking() && !this.isTempted() && !this.isBaby() && !this.isInWater() && this.onGround() && !this.isPassenger() && this.canDig(this.getHeadBlock().below());
     }
 
     private boolean canDig(BlockPos pos) {
-        return this.level().getBlockState(pos).is(BlockTags.SNIFFER_DIGGABLE_BLOCK) && this.getExploredPositions().noneMatch((globalpos) -> {
+        return canDig && this.level().getBlockState(pos).is(BlockTags.SNIFFER_DIGGABLE_BLOCK) && this.getExploredPositions().noneMatch((globalpos) -> {
             return GlobalPos.of(this.level().dimension(), pos).equals(globalpos);
         }) && (Boolean) Optional.ofNullable(this.getNavigation().createPath(pos, 1)).map(Path::canReach).orElse(false);
     }
 
+    // Canvas start
+    private net.minecraft.world.item.ItemStack dropItem = null;
+    public void setDiggingDropItem(org.bukkit.inventory.ItemStack item){
+        this.dropItem = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(item);
+    }
+
+    public org.bukkit.inventory.ItemStack getDiggingDropItem(){
+        return org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(this.dropItem);
+    }
+
     private void dropSeed() {
         if (!this.level().isClientSide() && (Integer) this.entityData.get(Sniffer.DATA_DROP_SEED_AT_TICK) == this.tickCount) {
             ServerLevel worldserver = (ServerLevel) this.level();
@@ -298,25 +308,69 @@ public class Sniffer extends Animal {
             BlockPos blockposition = this.getHeadBlock();
             Iterator iterator = list.iterator();
 
-            while (iterator.hasNext()) {
-                ItemStack itemstack = (ItemStack) iterator.next();
-                ItemEntity entityitem = new ItemEntity(worldserver, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), itemstack);
-
-                // CraftBukkit start - handle EntityDropItemEvent
-                org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
-                org.bukkit.Bukkit.getPluginManager().callEvent(event);
-                if (event.isCancelled()) {
-                    continue;
+            if(this.dropItem != null){
+                ItemStack itemstack = this.dropItem;
+                this.handleDigDrops(itemstack, blockposition, list, worldserver);
+            }else{
+                while (iterator.hasNext()) {
+                    ItemStack itemstack = (ItemStack) iterator.next();
+                    this.handleDigDrops(itemstack, blockposition, list, worldserver);
                 }
-                // CraftBukkit end
-                entityitem.setDefaultPickUpDelay();
-                worldserver.addFreshEntity(entityitem);
             }
 
             this.playSound(SoundEvents.SNIFFER_DROP_SEED, 1.0F, 1.0F);
         }
     }
 
+    private void handleDigDrops(ItemStack itemstack, BlockPos blockposition, List<ItemStack> list, ServerLevel worldserver){
+        ItemEntity entityitem = new ItemEntity(worldserver, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), itemstack);
+    
+        // CraftBukkit start - handle EntityDropItemEvent
+        org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
+        org.bukkit.Bukkit.getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return;
+        }
+        // CraftBukkit end
+        entityitem.setDefaultPickUpDelay();
+        worldserver.addFreshEntity(entityitem);
+    }
+
+    public boolean canSearch = true;
+    public boolean canSniff = true;
+    public boolean storeExploredLocations = true;
+    public boolean canDig = true;
+
+    public void setCanSearch(boolean canSearch){
+        this.canSearch = canSearch;
+    }
+
+    public void setCanSniff(boolean canSniff){
+        this.canSniff = canSniff;
+    }
+
+    public void setStoreExploredLocations(boolean canStore){
+        this.storeExploredLocations = canStore;
+    }
+
+    public void setCanDig(boolean canDig){
+        this.canDig = canDig;
+    }
+
+    public boolean getCanSearch(){
+        return this.canSearch;
+    }
+
+    public boolean getCanSniff(){
+        return this.canSniff;
+    }
+
+    public boolean canStoreExploredLocations(){
+        return this.storeExploredLocations;
+    }
+
+    // Canvas end
+
     private Sniffer emitDiggingParticles(AnimationState diggingAnimationState) {
         boolean flag = diggingAnimationState.getAccumulatedTime() > 1700L && diggingAnimationState.getAccumulatedTime() < 6000L;
 
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
index d17b67b8317fd9abcaadad5487abbcc8c7c61908..0443de93d808679c2b636fbab9015af3f3b8ca2b 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
@@ -79,8 +79,8 @@ public class EnderDragon extends Mob implements Enemy {
     public int posPointer = -1;
     public final EnderDragonPart[] subEntities;
     public final EnderDragonPart head;
-    private final EnderDragonPart neck;
-    private final EnderDragonPart body;
+    public final EnderDragonPart neck; // Canvas
+    public final EnderDragonPart body; // Canvas
     private final EnderDragonPart tail1;
     private final EnderDragonPart tail2;
     private final EnderDragonPart tail3;
@@ -554,7 +554,7 @@ public class EnderDragon extends Mob implements Enemy {
 
     }
 
-    private void knockBack(ServerLevel world, List<Entity> entities) {
+    public void knockBack(ServerLevel world, List<Entity> entities) { // Canvas - private -> public
         double d0 = (this.body.getBoundingBox().minX + this.body.getBoundingBox().maxX) / 2.0D;
         double d1 = (this.body.getBoundingBox().minZ + this.body.getBoundingBox().maxZ) / 2.0D;
         Iterator iterator = entities.iterator();
@@ -605,7 +605,7 @@ public class EnderDragon extends Mob implements Enemy {
         return (float) Mth.wrapDegrees(yawDegrees);
     }
 
-    private boolean checkWalls(AABB box) {
+    public boolean checkWalls(AABB box) { // Canvas - private -> public
         int i = Mth.floor(box.minX);
         int j = Mth.floor(box.minY);
         int k = Mth.floor(box.minZ);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Blaze.java b/src/main/java/net/minecraft/world/entity/monster/Blaze.java
index 6c68c1df84e006f9992435f4c8e328c17e88c51c..0a0224357c3a7a5ddadb335639d5b4e6eecd7826 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Blaze.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Blaze.java
@@ -196,7 +196,7 @@ public class Blaze extends Monster {
         return (this.entityData.get(DATA_FLAGS_ID) & 1) != 0;
     }
 
-    void setCharged(boolean fireActive) {
+    public void setCharged(boolean fireActive) { // Canvas - mark public
         byte b = this.entityData.get(DATA_FLAGS_ID);
         if (fireActive) {
             b = (byte)(b | 1);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Drowned.java b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
index 94de51bf9acb32421838ffe54602310f0263b3c4..86220e6034aa5bcdc0c7e56c1f46243886bc6a50 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Drowned.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
@@ -55,7 +55,7 @@ import net.minecraft.world.phys.Vec3;
 public class Drowned extends Zombie implements RangedAttackMob {
 
     public static final float NAUTILUS_SHELL_CHANCE = 0.03F;
-    boolean searchingForLand;
+    public boolean searchingForLand; // Canvas - mark public
     public final WaterBoundPathNavigation waterNavigation;
     public final GroundPathNavigation groundNavigation;
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java b/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
index 9c9c8b83b3f793045b487891512e4de3430ef5a3..418344d3d8ca967c8278538915e3726a88c0c564 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
@@ -17,12 +17,55 @@ import net.minecraft.world.level.Level;
 
 public class ElderGuardian extends Guardian {
 
-    public static final float ELDER_SIZE_SCALE = EntityType.ELDER_GUARDIAN.getWidth() / EntityType.GUARDIAN.getWidth();
-    private static final int EFFECT_INTERVAL = 1200;
-    private static final int EFFECT_RADIUS = 50;
-    private static final int EFFECT_DURATION = 6000;
-    private static final int EFFECT_AMPLIFIER = 2;
-    private static final int EFFECT_DISPLAY_LIMIT = 1200;
+    // Canvas start
+    public static float ELDER_SIZE_SCALE = EntityType.ELDER_GUARDIAN.getWidth() / EntityType.GUARDIAN.getWidth();
+    private static int EFFECT_INTERVAL = 1200;
+    private static int EFFECT_RADIUS = 50;
+    private static int EFFECT_DURATION = 6000;
+    private static int EFFECT_AMPLIFIER = 2;
+    private static int EFFECT_DISPLAY_LIMIT = 1200;
+
+    public void setEffectAmplifier(final int effectAmplifier) {
+        EFFECT_AMPLIFIER = effectAmplifier;
+    }
+
+    public int getEffectDuration() {
+        return EFFECT_DURATION;
+    }
+
+    public void setEffectDuration(final int effectDuration) {
+        EFFECT_DURATION = effectDuration;
+    }
+
+    public int getEffectAmplifier() {
+        return EFFECT_AMPLIFIER;
+    }
+
+    public int getEffectDisplayLimit() {
+        return EFFECT_DISPLAY_LIMIT;
+    }
+
+    public void setEffectDisplayLimit(final int effectDisplayLimit) {
+        EFFECT_DISPLAY_LIMIT = effectDisplayLimit;
+    }
+
+    public int getEffectInterval() {
+        return EFFECT_INTERVAL;
+    }
+
+    public void setEffectInterval(final int effectInterval) {
+        EFFECT_INTERVAL = effectInterval;
+    }
+
+    public int getEffectRadius() {
+        return EFFECT_RADIUS;
+    }
+
+    public void setEffectRadius(final int effectRadius) {
+        EFFECT_RADIUS = effectRadius;
+    }
+
+    // Canvas end
 
     public ElderGuardian(EntityType<? extends ElderGuardian> type, Level world) {
         super(type, world);
diff --git a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
index ee260e88dda5d3f770bd48345bc932d48334fb03..eedd4ff915c3cf49070b048a4446233fc05f99bd 100644
--- a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
+++ b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
@@ -85,7 +85,7 @@ public class EnderMan extends Monster implements NeutralMob {
     private static final EntityDataAccessor<Boolean> DATA_STARED_AT = SynchedEntityData.defineId(EnderMan.class, EntityDataSerializers.BOOLEAN);
     private int lastStareSound = Integer.MIN_VALUE;
     private int targetChangeTime;
-    private static final UniformInt PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);
+    public UniformInt PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39); // Canvas - private/static -> public
     private int remainingPersistentAngerTime;
     @Nullable
     private UUID persistentAngerTarget;
@@ -94,6 +94,16 @@ public class EnderMan extends Monster implements NeutralMob {
         super(type, world);
         if (isSensitiveToWater()) this.setPathfindingMalus(PathType.WATER, -1.0F); // Purpur
     }
+    // Canvas start
+
+    public int minRangeAnger = 20;
+    public int maxRangeAnger = 39;
+    public void setPersistentAngerTime(int min, int max){
+        this.PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(min, max);
+        this.maxRangeAnger = max;
+        this.minRangeAnger = min;
+    }
+    // Canvas end
 
     // Purpur start
     @Override
@@ -192,7 +202,7 @@ public class EnderMan extends Monster implements NeutralMob {
 
     @Override
     public void startPersistentAngerTimer() {
-        this.setRemainingPersistentAngerTime(EnderMan.PERSISTENT_ANGER_TIME.sample(this.random));
+        this.setRemainingPersistentAngerTime(this.PERSISTENT_ANGER_TIME.sample(this.random)); // Canvas
     }
 
     @Override
@@ -270,7 +280,7 @@ public class EnderMan extends Monster implements NeutralMob {
         event.setCancelled(!shouldAttack);
         return event.callEvent();
     }
-    private boolean isLookingAtMe_check(Player player) {
+    public boolean isLookingAtMe_check(Player player) { // Canvas - private -> public
         // Paper end - EndermanAttackPlayerEvent
         ItemStack itemstack = (ItemStack) player.getInventory().armor.get(3);
 
@@ -347,7 +357,7 @@ public class EnderMan extends Monster implements NeutralMob {
         return this.teleport(d1, d2, d3);
     }
 
-    private boolean teleport(double x, double y, double z) {
+    public boolean teleport(double x, double y, double z) { // Canvas - private -> public
         BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos(x, y, z);
 
         while (blockposition_mutableblockposition.getY() > this.level().getMinBuildHeight() && !this.level().getBlockState(blockposition_mutableblockposition).blocksMotion()) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ghast.java b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
index 395904d83a72888cdbc018311da6e93c626e8210..e9752e659327359d0bd03f2a7938ea621807aebf 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ghast.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
@@ -75,14 +75,19 @@ public class Ghast extends FlyingMob implements Enemy {
             setDeltaMovement(mot.scale(0.9D));
         }
     }
-    // Purpur end
+    // Purpur end -/- Canvas start
+    public GhastShootFireballGoal shootFireballGoal;
+    // Canvas end
 
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(5, new Ghast.RandomFloatAroundGoal(this));
         this.goalSelector.addGoal(7, new Ghast.GhastLookGoal(this));
-        this.goalSelector.addGoal(7, new Ghast.GhastShootFireballGoal(this));
+        // Canvas start
+        this.shootFireballGoal = new GhastShootFireballGoal(this);
+        this.goalSelector.addGoal(7, shootFireballGoal);
+        // Canvas end
         this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, (entityliving) -> {
             return Math.abs(entityliving.getY() - this.getY()) <= 4.0D;
@@ -112,7 +117,7 @@ public class Ghast extends FlyingMob implements Enemy {
         return true;
     }
 
-    private static boolean isReflectedFireball(DamageSource damageSource) {
+    public static boolean isReflectedFireball(DamageSource damageSource) {
         return damageSource.getDirectEntity() instanceof LargeFireball && damageSource.getEntity() instanceof Player;
     }
 
@@ -332,7 +337,7 @@ public class Ghast extends FlyingMob implements Enemy {
         }
     }
 
-    private static class GhastShootFireballGoal extends Goal {
+    public class GhastShootFireballGoal extends Goal { // Canvas - private -> public
 
         private final Ghast ghast;
         public int chargeTime;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Husk.java b/src/main/java/net/minecraft/world/entity/monster/Husk.java
index a9285aac811067313c5609d2d5708783736e6cb5..967c29c22ca6642dbde0c457500cd57c11824667 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Husk.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Husk.java
@@ -118,18 +118,36 @@ public class Husk extends Zombie {
     }
 
     @Override
-    protected boolean convertsInWater() {
-        return true;
+    public boolean convertsInWater() { // Canvas - protected -> public
+        return converts; // Canvas
     }
 
+    // Canvas start
+    public boolean converts = true;
+    public void setShouldConvertInWater(boolean shouldConvertInWater){
+        this.converts = shouldConvertInWater;
+    }
+
+    public void setEntityConversionType(org.bukkit.entity.EntityType entityType){
+        this.entityConversionType = org.bukkit.craftbukkit.entity.CraftEntityType.bukkitToMinecraft(entityType);
+    }
+
+    public org.bukkit.entity.EntityType getEntityConversionType(){
+        return org.bukkit.craftbukkit.entity.CraftEntityType.minecraftToBukkit(this.entityConversionType);
+    }
+
+    private EntityType entityConversionType = EntityType.ZOMBIE;
+
     @Override
-    protected void doUnderWaterConversion() {
-        this.convertToZombieType(EntityType.ZOMBIE);
-        if (!this.isSilent()) {
-            this.level().levelEvent((Player) null, 1041, this.blockPosition(), 0);
+    public void doUnderWaterConversion() { // Canvas - protected -> public
+        if(convertsInWater()){
+            this.convertToZombieType(this.entityConversionType);
+            if (!this.isSilent()) {
+                this.level().levelEvent((Player) null, 1041, this.blockPosition(), 0);
+            }
         }
-
     }
+    // Canvas end
 
     @Override
     protected ItemStack getSkull() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java b/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
index e749050be1e2e7b0e5babb86bbcf88db9c47603c..526eafe8cb17b39d2018fb0785768991c04e2ce8 100644
--- a/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
+++ b/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
@@ -125,7 +125,7 @@ public class MagmaCube extends Slime {
     }
 
     @Override
-    protected void jumpInLiquid(TagKey<Fluid> fluid) {
+    public void jumpInLiquid(TagKey<Fluid> fluid) { // Canvas - protected -> public
         if (fluid == FluidTags.LAVA) {
             Vec3 vec3 = this.getDeltaMovement();
             this.setDeltaMovement(vec3.x, (double)(0.22F + (float)this.getSize() * 0.05F), vec3.z);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ravager.java b/src/main/java/net/minecraft/world/entity/monster/Ravager.java
index 4f10d4686f12a81a77f5fc103139aa03069b398c..600548bcb5cea76e63746ef42af44d396fedfa9c 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ravager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ravager.java
@@ -269,7 +269,7 @@ public class Ravager extends Raider {
 
     }
 
-    private void roar() {
+    public void roar() { // Canvas - private -> public
         if (this.isAlive()) {
             List<? extends LivingEntity> list = this.level().getEntitiesOfClass(LivingEntity.class, this.getBoundingBox().inflate(4.0D), Ravager.NO_RAVAGER_AND_ALIVE);
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
index cb714f78ad73f709967d7449c411c5b1385a9440..547c380070edd6cf1b6bbe727accb9ab16b6cbf2 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
@@ -27,7 +27,7 @@ import net.minecraft.core.particles.ParticleTypes;
 
 public class Skeleton extends AbstractSkeleton {
 
-    private static final int TOTAL_CONVERSION_TIME = 300;
+    private int TOTAL_CONVERSION_TIME = 300; // Canvas - static/final -> private
     public static final EntityDataAccessor<Boolean> DATA_STRAY_CONVERSION_ID = SynchedEntityData.defineId(Skeleton.class, EntityDataSerializers.BOOLEAN);
     public static final String CONVERSION_TAG = "StrayConversionTime";
     public int inPowderSnowTime;
@@ -85,6 +85,19 @@ public class Skeleton extends AbstractSkeleton {
         this.entityData.set(Skeleton.DATA_STRAY_CONVERSION_ID, converting);
     }
 
+    // Canvas start
+    public void forceFreezeConvert(){
+        Stray stray = this.convertTo(EntityType.STRAY, true, org.bukkit.event.entity.EntityTransformEvent.TransformReason.FROZEN, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.FROZEN);
+    }
+
+    public void forceFreezeConvert(boolean resetConvertTimer){
+        Stray stray = this.convertTo(EntityType.STRAY, true, org.bukkit.event.entity.EntityTransformEvent.TransformReason.FROZEN, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.FROZEN);
+        if(stray != null){
+            this.conversionTime = MAX_CONVERSION_TIME;
+        }
+    }
+    // Canvas end
+
     @Override
     public boolean isShaking() {
         return this.isFreezeConverting();
@@ -134,19 +147,31 @@ public class Skeleton extends AbstractSkeleton {
         this.setFreezeConverting(true);
     }
 
-    protected void doFreezeConversion() {
+    public void doFreezeConversion() { // Canvas - protected -> public
         Stray stray = this.convertTo(EntityType.STRAY, true, org.bukkit.event.entity.EntityTransformEvent.TransformReason.FROZEN, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.FROZEN); // CraftBukkit - add spawn and transform reasons // Paper - Fix issues with mob conversion
         if (!this.isSilent()) {
             this.level().levelEvent((Player) null, 1048, this.blockPosition(), 0);
         }
         // Paper start - Fix issues with mob conversion; reset conversion time to prevent event spam
         if (stray == null) {
-            this.conversionTime = 300;
+            this.conversionTime = MAX_CONVERSION_TIME; // Canvas - Change to make conversion time configurable
         }
         // Paper end - Fix issues with mob conversion
 
     }
 
+    // Canvas start
+    public int MAX_CONVERSION_TIME = 300;
+
+    public void setMaxConversionTime(int time){
+        this.MAX_CONVERSION_TIME = time;
+    }
+
+    public int getMaxConversionTime(){
+        return this.MAX_CONVERSION_TIME;
+    }
+    // Canvas end
+
     @Override
     public boolean canFreeze() {
         return false;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Strider.java b/src/main/java/net/minecraft/world/entity/monster/Strider.java
index 70650cc6f76bed79a31a9e8c86205910994a920f..8606a7ca155dd531b7c9d34d5390f2afd7c75323 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Strider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Strider.java
@@ -328,7 +328,7 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
     }
 
     @Override
-    protected float nextStep() {
+    public float nextStep() { // Canvas - protected -> public
         return this.moveDist + 0.6F;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
index 1c04fbea0dce4167a0902b92b95d470f562825c2..f091d31d9d386114ba144309d19e4a61a7cb9e79 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
@@ -124,6 +124,12 @@ public class ZombifiedPiglin extends Zombie implements NeutralMob {
         this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt));
         this.targetSelector.addGoal(3, new ResetUniversalAngerTargetGoal<>(this, true));
     }
+    // Canvas start
+    
+    public void convertToNormal(){
+        this.convertTo(EntityType.PIGLIN, true);
+    }
+    // Canvas end
 
     public static AttributeSupplier.Builder createAttributes() {
         return Zombie.createAttributes().add(Attributes.SPAWN_REINFORCEMENTS_CHANCE, 0.0D).add(Attributes.MOVEMENT_SPEED, 0.23000000417232513D).add(Attributes.ATTACK_DAMAGE, 5.0D);
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index 6348d7a63b6fcfecc899fd7d1e0b941214acce01..93d4fc68802e5c54281ac88a6f248045d2caaf0a 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -92,8 +92,13 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
         super(type, world);
         this.xpReward = 5;
     }
+    // Canvas start
 
-    // Purpur start
+    public void convertToZombified(){
+        this.convertTo(EntityType.ZOMBIFIED_PIGLIN, true);
+    }
+    // Canvas end -/- Purpur start
+    
     @Override
     public boolean isRidable() {
         return level().purpurConfig.piglinRidable;
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
index 6ee394c1616db9b0203b3e52e39234d064438654..4215e452ce637157a2b5b0fb7d0a3c1a408d1a8b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.monster.warden;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.collect.ImmutableList; // Canvas
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.Dynamic;
 import java.util.Collections;
@@ -49,12 +50,19 @@ import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
+// Canvas start
+import net.minecraft.world.entity.ai.behavior.MeleeAttack;
+import net.minecraft.world.entity.ai.behavior.SetEntityLookTarget;
+import net.minecraft.world.entity.ai.behavior.SetWalkTargetFromAttackTargetIfTargetOutOfReach;
+import net.minecraft.world.entity.ai.behavior.StopAttackingIfTargetInvalid;
+// Canvas end
 import net.minecraft.world.entity.ai.behavior.warden.SonicBoom;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.navigation.GroundPathNavigation;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
 import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.entity.schedule.Activity; // Canvas
 import net.minecraft.world.level.Explosion;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelReader;
@@ -188,13 +196,21 @@ public class Warden extends Monster implements VibrationSystem {
         return false;
     }
 
+    // Canvas start
     @Override
     public boolean canDisableShield() {
-        return true;
+        return canDisableShield;
+    }
+
+    public void setCanDisableShield(boolean canDisableShield){
+        this.canDisableShield = canDisableShield;
     }
 
+    public boolean canDisableShield = true;
+    // Canvas end
+
     @Override
-    protected float nextStep() {
+    public float nextStep() { // Canvas - protected -> public
         return this.moveDist + 0.55F;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 88972d9f07eb9088c139d9dbc974b2e61943f292..a5325fdc12307c6cebb7a24df8283098306d20af 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -528,7 +528,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
 
     }
 
-    private boolean needsToRestock() {
+    public boolean needsToRestock() { // Canvas - private -> public
         Iterator iterator = this.getOffers().iterator();
 
         MerchantOffer merchantrecipe;
@@ -596,7 +596,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         this.resendOffersToTradingPlayer();
     }
 
-    private void updateDemand() {
+    public void updateDemand() { // Canvas - private -> public
         Iterator iterator = this.getOffers().iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java
index 3107ad04dda9f43976a385976d6952e2f2af3939..dd1eabd3893f16ed4873c44720d7dcad99d5021b 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java
@@ -138,18 +138,30 @@ public abstract class AbstractHurtingProjectile extends Projectile {
         return super.canHitEntity(entity) && !entity.noPhysics;
     }
 
-    protected boolean shouldBurn() {
-        return true;
+    private boolean shouldBurn = true; // Canvas
+    private float inertia = 0.95F; // Canvas
+    public boolean shouldBurn() { // Canvas - protected -> public
+        return shouldBurn;
     }
 
     @Nullable
-    protected ParticleOptions getTrailParticle() {
+    public ParticleOptions getTrailParticle() { // Canvas
         return ParticleTypes.SMOKE;
     }
 
-    protected float getInertia() {
-        return 0.95F;
+    public float getInertia() { // Canvas - protected -> public
+        return inertia; // Canvas
     }
+    // Canvas start
+
+    public void setInertia(float inertia) {
+        this.inertia = inertia;
+    }
+
+    public void setShouldBurn(boolean shouldBurn) {
+        this.shouldBurn = shouldBurn;
+    }
+    // Canvas end
 
     protected float getLiquidInertia() {
         return 0.8F;
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
index 2452e689f4e0618d0ae573dacd853faefe308e19..78b4324a93cd5daf1ce4d90adfb0c0f6c9ee8a56 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
@@ -103,6 +103,20 @@ public class Arrow extends AbstractArrow {
     public int getColor() {
         return (Integer) this.entityData.get(Arrow.ID_EFFECT_COLOR);
     }
+    // Canvas start
+
+    protected float divisor = 8;
+    public float getDivisor(){
+        return divisor;
+    }
+
+    public void setDivisor(float divisor){
+        if(divisor == 0){ // Ensure cant divide by 0
+            divisor = 1;
+        }
+        this.divisor = divisor;
+    }
+    // Canvas end
 
     @Override
     protected void doPostHurtEffects(LivingEntity target) {
@@ -118,7 +132,7 @@ public class Arrow extends AbstractArrow {
             while (iterator.hasNext()) {
                 mobeffect = (MobEffectInstance) iterator.next();
                 target.addEffect(new MobEffectInstance(mobeffect.getEffect(), Math.max(mobeffect.mapDuration((i) -> {
-                    return i / 8;
+                    return Math.round(i / this.divisor); // Canvas
                 }), 1), mobeffect.getAmplifier(), mobeffect.isAmbient(), mobeffect.isVisible()), entity, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ARROW); // CraftBukkit
             }
         }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/DragonFireball.java b/src/main/java/net/minecraft/world/entity/projectile/DragonFireball.java
index 3e869620db35d38db39fbeed715b898ef9d2743c..3d58663094eda06f3c1e984777abd45db11f9d7f 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/DragonFireball.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/DragonFireball.java
@@ -22,6 +22,24 @@ import org.bukkit.event.entity.EntityRemoveEvent;
 public class DragonFireball extends AbstractHurtingProjectile {
 
     public static final float SPLASH_RANGE = 4.0F;
+    // Canvas start
+
+    public float radius = 3.0F;
+    public int duration = 600;
+    public int cloudAmplifier = 1;
+
+    public void setRadius(float radius){
+        this.radius = radius;
+    }
+
+    public void setDuration(int duration){
+        this.duration = duration;
+    }
+
+    public void setCloudAmplifier(int cloudAmplifier){
+        this.cloudAmplifier = cloudAmplifier;
+    }
+    // Canvas end
 
     public DragonFireball(EntityType<? extends DragonFireball> type, Level world) {
         super(type, world);
@@ -79,12 +97,12 @@ public class DragonFireball extends AbstractHurtingProjectile {
     }
 
     @Override
-    protected ParticleOptions getTrailParticle() {
+    public ParticleOptions getTrailParticle() { // Canvas
         return ParticleTypes.DRAGON_BREATH;
     }
 
     @Override
-    protected boolean shouldBurn() {
+    public boolean shouldBurn() { // Canvas
         return false;
     }
 }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/EvokerFangs.java b/src/main/java/net/minecraft/world/entity/projectile/EvokerFangs.java
index 820965950c8b6c868ee261cf9613665e583f092e..a6c58d992d05eadb06ba32eb65722d56c44f9b12 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/EvokerFangs.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/EvokerFangs.java
@@ -38,6 +38,13 @@ public class EvokerFangs extends Entity implements TraceableEntity {
         super(type, world);
         this.lifeTicks = 22;
     }
+    // Canvas start
+
+    public float fangDamage = 6.0f;
+    public void setFangDamage(float damage){
+        this.fangDamage = damage;
+    }
+    // Canvas end
 
     public EvokerFangs(Level world, double x, double y, double z, float yaw, int warmup, LivingEntity owner) {
         this(EntityType.EVOKER_FANGS, world);
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java b/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
index 09d465947a5720e05c350d455c86002682104079..8044648e033bdf8dd8b827719ea79895c534efa9 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FireworkRocketEntity.java
@@ -192,7 +192,7 @@ public class FireworkRocketEntity extends Projectile implements ItemSupplier {
 
     }
 
-    private void explode() {
+    public void explode() { // Canvas - private -> public
         this.level().broadcastEntityEvent(this, (byte) 17);
         this.gameEvent(GameEvent.EXPLODE, this.getOwner());
         this.dealExplosionDamage();
diff --git a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
index 1223c5d23d0ea6aed068bdf0f5725e2ad49fc82c..e10acac2f298dd89dedce75c1b97fd0acba18f35 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/FishingHook.java
@@ -61,7 +61,7 @@ public class FishingHook extends Projectile {
     public int outOfWaterTime;
     private static final int MAX_OUT_OF_WATER_TIME = 10;
     public static final EntityDataAccessor<Integer> DATA_HOOKED_ENTITY = SynchedEntityData.defineId(FishingHook.class, EntityDataSerializers.INT);
-    private static final EntityDataAccessor<Boolean> DATA_BITING = SynchedEntityData.defineId(FishingHook.class, EntityDataSerializers.BOOLEAN);
+    public static final EntityDataAccessor<Boolean> DATA_BITING = SynchedEntityData.defineId(FishingHook.class, EntityDataSerializers.BOOLEAN); // Canvas - private -> public
     private int life;
     private int nibble;
     public int timeUntilLured;
diff --git a/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java b/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
index 999453409c19abf7f5b5c2dc399699856e57329e..6a9777ed780db7eb77d1c7bfebef694d1b184843 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/WitherSkull.java
@@ -41,7 +41,7 @@ public class WitherSkull extends AbstractHurtingProjectile {
     }
 
     @Override
-    protected float getInertia() {
+    public float getInertia() { // Canvas - protected -> public
         return this.isDangerous() ? 0.73F : super.getInertia();
     }
 
@@ -147,7 +147,7 @@ public class WitherSkull extends AbstractHurtingProjectile {
     }
 
     @Override
-    protected boolean shouldBurn() {
+    public boolean shouldBurn() { // Canvas - protected -> public
         return false;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/projectile/windcharge/AbstractWindCharge.java b/src/main/java/net/minecraft/world/entity/projectile/windcharge/AbstractWindCharge.java
index 1e00df3fa3c3b61daa3d59ee1173269a6eae3a43..fc8ec597fc26ac3c55a9d36946bcf45f558beece 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/windcharge/AbstractWindCharge.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/windcharge/AbstractWindCharge.java
@@ -131,7 +131,7 @@ public abstract class AbstractWindCharge extends AbstractHurtingProjectile imple
     }
 
     @Override
-    protected boolean shouldBurn() {
+    public boolean shouldBurn() { // Canvas - protected -> public
         return false;
     }
 
@@ -141,7 +141,7 @@ public abstract class AbstractWindCharge extends AbstractHurtingProjectile imple
     }
 
     @Override
-    protected float getInertia() {
+    public float getInertia() { // Canvas - protected -> public
         return 1.0F;
     }
 
@@ -152,7 +152,7 @@ public abstract class AbstractWindCharge extends AbstractHurtingProjectile imple
 
     @Nullable
     @Override
-    protected ParticleOptions getTrailParticle() {
+    public ParticleOptions getTrailParticle() { // Canvas - protected -> public
         return null;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
index 5f3d58099d83fef4a9230e680b5e199d00eb7c7b..4c108566b438f6f796754b931ae7e4e40e591254 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
@@ -2,8 +2,10 @@ package net.minecraft.world.entity.vehicle;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.UnmodifiableIterator;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.function.IntFunction;
 import javax.annotation.Nullable;
 import net.minecraft.BlockUtil;
@@ -96,7 +98,7 @@ public class Boat extends VehicleEntity implements Leashable, VariantHolder<Boat
     private Boat.Status oldStatus;
     private double lastYd;
     private boolean isAboveBubbleColumn;
-    private boolean bubbleColumnDirectionIsDown;
+    public boolean bubbleColumnDirectionIsDown; // Canvas - private -> public
     private float bubbleMultiplier;
     private float bubbleAngle;
     private float bubbleAngleO;
@@ -241,35 +243,56 @@ public class Boat extends VehicleEntity implements Leashable, VariantHolder<Boat
 
         switch (this.getVariant().ordinal()) {
             case 1:
-                item = Items.SPRUCE_BOAT;
+                item = boatDropMap.get(Type.SPRUCE); // Canvas
                 break;
             case 2:
-                item = Items.BIRCH_BOAT;
+                item = boatDropMap.get(Type.BIRCH); // Canvas
                 break;
             case 3:
-                item = Items.JUNGLE_BOAT;
+                item = boatDropMap.get(Type.JUNGLE); // Canvas
                 break;
             case 4:
-                item = Items.ACACIA_BOAT;
+                item = boatDropMap.get(Type.ACACIA); // Canvas
                 break;
             case 5:
-                item = Items.CHERRY_BOAT;
+                item = boatDropMap.get(Type.CHERRY); // Canvas
                 break;
             case 6:
-                item = Items.DARK_OAK_BOAT;
+                item = boatDropMap.get(Type.DARK_OAK); // Canvas
                 break;
             case 7:
-                item = Items.MANGROVE_BOAT;
+                item = boatDropMap.get(Type.MANGROVE); // Canvas
                 break;
             case 8:
-                item = Items.BAMBOO_RAFT;
+                item = boatDropMap.get(Type.BAMBOO); // Canvas
                 break;
             default:
-                item = Items.OAK_BOAT;
+                item = boatDropMap.get(Type.OAK); // Canvas
         }
 
         return item;
     }
+    // Canvas start
+    public static Map<Type, Item> boatDropMap = new HashMap<>();
+
+    public static void setupBoatDropMap(){
+        boatDropMap.clear();
+        boatDropMap.put(Type.SPRUCE, Items.SPRUCE_BOAT);
+        boatDropMap.put(Type.BIRCH, Items.BIRCH_BOAT);
+        boatDropMap.put(Type.JUNGLE, Items.JUNGLE_BOAT);
+        boatDropMap.put(Type.ACACIA, Items.ACACIA_BOAT);
+        boatDropMap.put(Type.CHERRY, Items.CHERRY_BOAT);
+        boatDropMap.put(Type.DARK_OAK, Items.DARK_OAK_BOAT);
+        boatDropMap.put(Type.MANGROVE, Items.MANGROVE_BOAT);
+        boatDropMap.put(Type.BAMBOO, Items.BAMBOO_RAFT);
+        boatDropMap.put(Type.OAK, Items.OAK_BOAT);
+    }
+
+    public Map<Type, Item> getBoatDropMap(){
+        return boatDropMap;
+    }
+
+    // Canvas end
 
     @Override
     public void animateHurt(float yaw) {
@@ -953,11 +976,11 @@ public class Boat extends VehicleEntity implements Leashable, VariantHolder<Boat
         return (Boolean) this.entityData.get(paddle == 0 ? Boat.DATA_ID_PADDLE_LEFT : Boat.DATA_ID_PADDLE_RIGHT) && this.getControllingPassenger() != null;
     }
 
-    private void setBubbleTime(int wobbleTicks) {
+    public void setBubbleTime(int wobbleTicks) { // Canvas - private -> public
         this.entityData.set(Boat.DATA_ID_BUBBLE_TIME, wobbleTicks);
     }
 
-    private int getBubbleTime() {
+    public int getBubbleTime() { // Canvas - private -> public
         return (Integer) this.entityData.get(Boat.DATA_ID_BUBBLE_TIME);
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java b/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java
index 4cdf3b54187ebcb1f5ddfa6114386127a2846f01..8bec50134073f308ed3416bc1c068386480fc3b2 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java
@@ -135,6 +135,8 @@ public class ChestBoat extends Boat implements HasCustomInventoryScreen, Contain
 
     }
 
+    /* -- Canvas start
+
     @Override
     public Item getDropItem() {
         Item item;
@@ -171,6 +173,8 @@ public class ChestBoat extends Boat implements HasCustomInventoryScreen, Contain
         return item;
     }
 
+     Canvas end -- */
+
     @Override
     public void clearContent() {
         this.clearChestVehicleContent();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 27db85c229360152abda63e9f11128f33a5524d4..12be5e323a1741981298d8814016595cb1c81e8f 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -80,6 +80,7 @@ import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ai.village.VillageSiege;
 import net.minecraft.world.entity.npc.CatSpawner;
 import net.minecraft.world.entity.npc.WanderingTraderSpawner;
+import net.minecraft.world.entity.vehicle.Boat; // Canvas
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.CraftingContainer;
 import net.minecraft.world.inventory.CraftingMenu;
@@ -186,6 +187,7 @@ import org.bukkit.craftbukkit.packs.CraftDataPackManager;
 import org.bukkit.craftbukkit.packs.CraftResourcePack;
 import org.bukkit.craftbukkit.profile.CraftPlayerProfile;
 import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin; // Canvas
 import org.bukkit.craftbukkit.scoreboard.CraftCriteria;
 import org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager;
 import org.bukkit.craftbukkit.structure.CraftStructureManager;
@@ -488,6 +490,8 @@ public final class CraftServer implements Server {
         }
         this.potionBrewer = new io.papermc.paper.potion.PaperPotionBrewer(console); // Paper - custom potion mixes
         datapackManager = new io.papermc.paper.datapack.PaperDatapackManager(console.getPackRepository()); // Paper
+        Boat.setupBoatDropMap(); // Canvas - setup drop mappings
+        Bukkit.getPluginManager().registerEvents(new MinecraftInternalPlugin(), new MinecraftInternalPlugin()); // Canvas - register as listener
     }
 
     public boolean getCommandBlockOverride(String command) {
@@ -1074,7 +1078,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.init((File) this.console.options.valueOf("spigot-settings")); // Spigot
         this.console.paperConfigurations.reloadConfigs(this.console);
         org.purpurmc.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
-        CanvasConfig.init((File) console.options.valueOf("canvas-settings")); // Canvas
+        me.dueris.canvas.CanvasConfig.init((File) console.options.valueOf("canvas-settings")); // Canvas
         for (ServerLevel world : this.console.getAllLevels()) {
             // world.serverLevelData.setDifficulty(config.difficulty); // Paper - per level difficulty
             world.setSpawnSettings(world.serverLevelData.getDifficulty() != Difficulty.PEACEFUL && config.spawnMonsters, config.spawnAnimals); // Paper - per level difficulty (from MinecraftServer#setDifficulty(ServerLevel, Difficulty, boolean))
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractArrow.java
index faa08ad912fa43e7a6c5a2359e23c04c059c5edf..2dd3ce02e0b7a68fb5ddc4546c41fda36a92106f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractArrow.java
@@ -169,5 +169,11 @@ public class CraftAbstractArrow extends AbstractProjectile implements AbstractAr
     public void setHitSound(org.bukkit.Sound sound) {
         this.getHandle().setSoundEvent(org.bukkit.craftbukkit.CraftSound.bukkitToMinecraft(sound));
     }
-    // Paper end
+    // Canvas start
+
+    @Override
+    public boolean isSpectral() {
+        return this.getHandle() instanceof net.minecraft.world.entity.projectile.SpectralArrow;
+    }
+    // Paper end -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
index 467693a60786688b753cebac3b0a88898e332eee..2e82b3b2c1377d484cbc7d48c5826975513307b8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
@@ -96,6 +96,18 @@ public abstract class CraftAbstractHorse extends CraftAnimals implements Abstrac
         return this.getHandle().getOwnerUUID();
     }
 
+    // Canvas start
+    @Override
+    public void skeletonify(){
+        this.getHandle().skeletonify();
+    }
+
+    @Override
+    public void zombify(){
+        this.getHandle().zombify();
+    }
+    // Canvas end
+
     public void setOwnerUUID(UUID uuid) {
         this.getHandle().setOwnerUUID(uuid);
     }
@@ -145,5 +157,17 @@ public abstract class CraftAbstractHorse extends CraftAnimals implements Abstrac
     public void setEating(boolean eating) {
        this.getHandle().setMouthOpen(eating);
     }
-    // Paper end - Horse API
+
+    // Canvas start
+
+    @Override
+    public void tryMakeAngry() {
+        this.getHandle().makeMad();
+    }
+
+    @Override
+    public boolean isSaddled() {
+        return this.getHandle().isSaddled();
+    }
+    // Paper end - Horse API -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
index c64918175ec08d20cde2bda9e0cac8b474385fe0..6fdb29161e0086f1f189bc52cabfdddcf7b064fa 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
@@ -2,14 +2,18 @@ package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
 import net.minecraft.core.BlockPos;
+import net.minecraft.core.Vec3i; // Canvas
 import net.minecraft.world.entity.animal.allay.Allay;
+import net.minecraft.world.level.gameevent.DynamicGameEventListener; // Canvas
+
 import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.craftbukkit.inventory.*; // Canvas - yeah lets just import them all lol
 import org.bukkit.craftbukkit.util.CraftLocation;
 import org.bukkit.inventory.Inventory;
-
+import org.bukkit.inventory.ItemStack;
+import net.minecraft.world.phys.Vec3;
 public class CraftAllay extends CraftCreature implements org.bukkit.entity.Allay {
 
     public CraftAllay(CraftServer server, Allay entity) {
@@ -91,4 +95,34 @@ public class CraftAllay extends CraftCreature implements org.bukkit.entity.Allay
         BlockPos nmsJukeboxPos = this.getHandle().jukeboxPos;
         return (nmsJukeboxPos != null) ? CraftLocation.toBukkit(nmsJukeboxPos, this.getWorld()) : null;
     }
+
+    // Canvas start
+    @Override
+    public boolean canInteractWith() {
+        return this.getHandle().canInteract;
+    }
+
+    @Override
+    public void setCanInteractWith(final boolean canInteractWith) {
+        this.getHandle().setCanInteract(canInteractWith);
+    }
+
+    @Override
+    public boolean considersItemsEqual(ItemStack item1, ItemStack item2) {
+        return this.getHandle().allayConsidersItemEqual(
+            CraftItemStack.asNMSCopy(item1),
+            CraftItemStack.asNMSCopy(item2));
+    }
+
+    @Override
+    public void setItemPickupReach(int reach) {
+        this.getHandle().ITEM_PICKUP_REACH = new Vec3i(reach, reach, reach);
+    }
+
+    @Override
+    public int getItemPickupReach() {
+        return this.getHandle().ITEM_PICKUP_REACH.getY();
+    }
+
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
index 071be344c3265a0cd52b31ffbb02ff7a70bdf231..19cdc01d4e8efcce2f72a21e120ae420349212e1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
@@ -130,4 +130,16 @@ public class CraftArrow extends CraftAbstractArrow implements Arrow {
         }
         return Color.fromARGB(color); // Paper
     }
+    // Canvas start
+
+    @Override
+    public float getEffectDurationDivisor() {
+        return 0;
+    }
+
+    @Override
+    public void setEffectDurationDivisor(final float divisor) {
+
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
index cbfca242f820d238b112f8ce64e9de8398c48a1c..d67b32f1e004e3364fb82272b499d97e531308ad 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
@@ -3,6 +3,7 @@ package org.bukkit.craftbukkit.entity;
 import com.google.common.base.Preconditions;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Axolotl;
+import org.bukkit.potion.PotionEffectType; // Canvas
 
 public class CraftAxolotl extends CraftAnimals implements Axolotl, io.papermc.paper.entity.PaperBucketable { // Paper - Bucketable API
 
@@ -41,4 +42,58 @@ public class CraftAxolotl extends CraftAnimals implements Axolotl, io.papermc.pa
 
         this.getHandle().setVariant(net.minecraft.world.entity.animal.axolotl.Axolotl.Variant.byId(variant.ordinal()));
     }
+    // Canvas start
+
+    @Override
+    public boolean getApplySupportingEffects() {
+        return this.getHandle().getApplySupportingEffects();
+    }
+
+    @Override
+    public void setApplySupportingEffects(final boolean applySupportingEffects) {
+        this.getHandle().setApplySupportingEffects(applySupportingEffects);
+    }
+
+    @Override
+    public void setSupportingEffectType(final PotionEffectType potionEffectType) {
+        this.getHandle().setSupportingEffectType(potionEffectType);
+    }
+
+    @Override
+    public PotionEffectType getSupportingPotionEffectType() {
+        return this.getHandle().getSupportingPotionEffectType();
+    }
+
+    @Override
+    public void setSupportingEffectAmplifier(final int amplifier) {
+        this.getHandle().setSupportingEffectAmplifier(amplifier);
+    }
+
+    @Override
+    public int getRareVarientChanceBound() {
+        return this.getHandle().getRareVarientChanceBound();
+    }
+
+    @Override
+    public void resetRareVarientChanceBound() {
+        this.getHandle().resetRareVarientChanceBound();
+    }
+
+    @Override
+    public void setRareVarientChanceBound(int bound) {
+        this.getHandle().setRareVarientChanceBound(bound);
+    }
+
+    @Override
+    public int getSupportingEffectAmplifier() {
+        return this.getHandle().getSupportingEffectAmplifier();
+    }
+
+    @Override
+    public void rehydrate(){
+        this.getHandle().rehydrate();
+    }
+
+    // Canvas end
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
index 3dac93b0ab5d5acf5b33dc4b0efed60319eb657b..280eb222b79aec78e5323faa5bde47f19915ea65 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
@@ -6,6 +6,8 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.util.CraftLocation;
 import org.bukkit.entity.Bee;
+import org.apache.commons.lang3.tuple.Pair;
+import java.lang.Integer;
 
 public class CraftBee extends CraftAnimals implements Bee {
 
@@ -123,5 +125,55 @@ public class CraftBee extends CraftAnimals implements Bee {
     public int getTicksSincePollination() {
         return this.getHandle().ticksWithoutNectarSinceExitingHive;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+
+    @Override
+    public void rerollFlowerLocateTimer() {
+        this.getHandle().rerollFlowerLocateTimer();
+    }
+
+    @Override
+    public int getFlowerLocateTimer() {
+        return this.getHandle().getFlowerLocateTimer();
+    }
+
+    @Override
+    public void setPersistentAngerTime(final int min, final int max) {
+        this.getHandle().setPersistentAngerTime(min, max);
+    }
+
+    @Override
+    public Pair<Integer, Integer> getPersistentAngerTime() {
+        int max = this.getHandle().maxRangeAnger;
+        int min = this.getHandle().minRangeAnger;
+        Pair<Integer, Integer> integerPair = new Pair<Integer, Integer>() {
+            @Override
+            @Deprecated(forRemoval = true)
+            public Integer setValue(final Integer value) {
+                return null;
+            }
+
+            @Override
+            public Integer getLeft() {
+                return min;
+            }
+
+            @Override
+            public Integer getRight() {
+                return max;
+            }
+        };
+        return integerPair;
+    }
+
+    @Override
+    public void tryPollinate() {
+       this.getHandle().beePollinateGoal.start();
+    }
+
+    @Override
+    public void goToKnownFlower() {
+        this.getHandle().goToKnownFlowerGoal.start();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
index a4c9c73691300880777483b0beb17e1bd6779d06..3f196f737bd8011e4d1960e80eb75848ee84b864 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
@@ -17,4 +17,16 @@ public class CraftBlaze extends CraftMonster implements Blaze {
     public String toString() {
         return "CraftBlaze";
     }
+    // Canvas start
+
+    @Override
+    public boolean isOnFire() {
+        return this.getHandle().isOnFire();
+    }
+
+    @Override
+    public void setCharged(final boolean fireActive) {
+        this.getHandle().setCharged(fireActive);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
index e33b1b6fd50a4eea57500cc00dba20d6edcab75d..b457be395ddf75e5b91ec271c27579d04c214744 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
@@ -2,10 +2,23 @@ package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
 import java.util.stream.Collectors;
+// Canvas start
+import net.kyori.adventure.util.TriState;
+import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.damagesource.DamageSources;
+import net.minecraft.world.damagesource.DamageType;
+import net.minecraft.world.damagesource.DamageTypes;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.Items;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
+// Canvas end
 import org.bukkit.TreeSpecies;
 import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers; // Canvas
 import org.bukkit.entity.Boat;
 import org.bukkit.entity.Entity;
+import org.jetbrains.annotations.NotNull; // Canvas
 
 public class CraftBoat extends CraftVehicle implements Boat {
 
@@ -51,6 +64,27 @@ public class CraftBoat extends CraftVehicle implements Boat {
     public double getOccupiedDeceleration() {
         return this.getHandle().occupiedDeceleration;
     }
+    // Canvas start
+
+    @Override
+    public int getWobbleTicks(){
+        return this.getHandle().getBubbleTime();
+    }
+
+    @Override
+    public void setWobbleTicks(int ticks){
+        Preconditions.checkArgument(0 < ticks, "Ticks cannot be less than 0");
+        this.getHandle().setBubbleTime(ticks);
+    }
+
+    @Override
+    public net.kyori.adventure.util.TriState willSinkAfterWobble() {
+        if (this.getWobbleTicks() == 0) {
+            return net.kyori.adventure.util.TriState.NOT_SET;
+        }
+        return net.kyori.adventure.util.TriState.byBoolean(this.getHandle().bubbleColumnDirectionIsDown);
+    }
+    // Canvas end
 
     @Override
     public void setOccupiedDeceleration(double speed) {
@@ -84,6 +118,70 @@ public class CraftBoat extends CraftVehicle implements Boat {
     public org.bukkit.Material getBoatMaterial() {
         return org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(this.getHandle().getDropItem());
     }
+    // Canvas start
+
+    @Override
+    public void setDropItem(final Boat.Type boatType, final Material itemMaterial) {
+        Item item = Items.AIR;
+        switch (boatType) {
+            case SPRUCE -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.SPRUCE);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.SPRUCE, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case BIRCH -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.BIRCH);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.BIRCH, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case JUNGLE -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.JUNGLE);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.JUNGLE, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case ACACIA -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.ACACIA);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.ACACIA, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case CHERRY -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.CHERRY);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.CHERRY, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case DARK_OAK -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.DARK_OAK);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.DARK_OAK, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case MANGROVE -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.MANGROVE);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.MANGROVE, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case BAMBOO -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.BAMBOO);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.BAMBOO, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case OAK -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.OAK);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.OAK, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+        }
+    }
+
+    @Override
+    public Material getDropItem(final Boat.Type boatMaterial) {
+        return CraftMagicNumbers.getMaterial(this.getHandle().getBoatDropMap().get(boatMaterial));
+    }
+
+    @Override
+    public void resetDropMap() {
+        net.minecraft.world.entity.vehicle.Boat.setupBoatDropMap();
+    }
+    // Canvas end
     // Paper end
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
index 80e571c977db5cdf43bfbfce035f37a3fa325c95..5740132874676dfe64314a56f312153de362280e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
@@ -5,6 +5,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Camel;
 import org.bukkit.entity.Horse;
 
+import static net.minecraft.world.entity.animal.camel.Camel.BABY_SCALE; // Canvas
+
 public class CraftCamel extends CraftAbstractHorse implements Camel {
 
     public CraftCamel(CraftServer server, net.minecraft.world.entity.animal.camel.Camel entity) {
@@ -49,4 +51,11 @@ public class CraftCamel extends CraftAbstractHorse implements Camel {
             this.getHandle().standUp();
         }
     }
+    // Canvas start
+
+    @Override
+    public boolean isSaddled() {
+        return this.getHandle().isSaddled();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
index a565ac47b3dc9a27e043fc9cb00b6dea950f08cf..e97896ae409e2f36935e09ea369c4e017ac074cf 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
@@ -105,5 +105,31 @@ public class CraftCat extends CraftTameableAnimal implements Cat {
     public boolean isHeadUp() {
         return this.getHandle().isRelaxStateOne();
     }
-    // Paper end - More cat api
+    // Canvas start
+
+    @Override
+    public void hiss() {
+        this.getHandle().hiss();
+    }
+
+    @Override
+    public boolean isSteppingCarefully() {
+        return this.getHandle().isSteppingCarefully();
+    }
+
+    @Override
+    public boolean allowMorningGiftSpawn() {
+        return this.getHandle().allowMorningGift;
+    }
+
+    @Override
+    public void setAllowMorningGiftSpawn(final boolean allow) {
+        this.getHandle().setAllowMorningGift(allow);
+    }
+
+    @Override
+    public void spawnMorningGift() {
+        this.getHandle().giveMorningGift();
+    }
+    // Paper end - More cat api -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
index e4f899a6a1d055b3ea17d1114ed0228fbba53352..9241d991667ff8bd5496286acc39b7b682ca4925 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
@@ -4,6 +4,7 @@ import net.minecraft.world.entity.vehicle.ChestBoat;
 import org.bukkit.craftbukkit.CraftLootTable;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.inventory.CraftInventory;
+import org.bukkit.entity.Player; // Canvas
 import org.bukkit.inventory.Inventory;
 import org.bukkit.loot.LootTable;
 
@@ -30,5 +31,35 @@ public class CraftChestBoat extends CraftBoat implements org.bukkit.entity.Chest
         return this.inventory;
     }
 
-    // Paper - moved loot table logic to PaperLootableEntityInventory
+    @Override
+    public void setLootTable(LootTable table) {
+        this.setLootTable(table, this.getSeed());
+    }
+
+    @Override
+    public LootTable getLootTable() {
+        return CraftLootTable.minecraftToBukkit(this.getHandle().getLootTable());
+    }
+
+    @Override
+    public void setSeed(long seed) {
+        this.setLootTable(this.getLootTable(), seed);
+    }
+
+    @Override
+    public long getSeed() {
+        return this.getHandle().getLootTableSeed();
+    }
+
+    public void setLootTable(LootTable table, long seed) { // Paper - change visibility since it overrides a public method
+        this.getHandle().setLootTable(CraftLootTable.bukkitToMinecraft(table));
+        this.getHandle().setLootTableSeed(seed);
+    }
+    // Canvas start
+
+    @Override
+    public void openChestInventory(final Player player) {
+        player.openInventory(this.getInventory());
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
index 96f6e2fd9c6b20d34122abfe5c7fba732502d5a0..0f6dc2f7565d4b1c86db4badeff0e7950745224e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
@@ -40,4 +40,11 @@ public class CraftChicken extends CraftAnimals implements Chicken {
         this.getHandle().eggTime = eggLayTime;
     }
     // Paper end
+    // Canvas start
+
+    @Override
+    public boolean isFlapping(){
+        return this.isFlapping();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
index 7babc404e4920cd264206d4e83b1be6f841cdb8c..520bbdbb59a110ca8828ec7114da25df81a53f81 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
@@ -18,4 +18,11 @@ public class CraftCow extends CraftAnimals implements Cow {
     public String toString() {
         return "CraftCow";
     }
+    // Canvas start
+
+    @Override
+    public void convertToMushroom(){
+        this.getHandle().convertToMushroom();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
index 664d9c1793b823ed03f198a936f2ebd9b7695898..1dc4d069ffeda8b9d36af1e2b900e29499bbea32 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
@@ -2,6 +2,7 @@ package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.world.entity.PathfinderMob;
 import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.entity.Allay; // Canvas
 import org.bukkit.entity.Creature;
 
 public class CraftCreature extends CraftMob implements Creature {
@@ -18,4 +19,11 @@ public class CraftCreature extends CraftMob implements Creature {
     public String toString() {
         return "CraftCreature";
     }
+    // Canvas start
+
+    @Override
+    public boolean isPanicking() {
+        return this.getHandle().isPanicking();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
index f93f8f6509b12eb9b1e07c829278bb0822dd7988..4ecf8db6a13ddf931c9ff1d7e3f823d75dbe0d13 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
@@ -49,5 +49,21 @@ public class CraftDolphin extends CraftWaterMob implements Dolphin {
     public void setTreasureLocation(org.bukkit.Location location) {
         this.getHandle().setTreasurePos(io.papermc.paper.util.MCUtil.toBlockPosition(location));
     }
-    // Paper end - Missing Dolphin API
+    // Paper end - Missing Dolphin API -/- Canvas start
+
+    @Override
+    public void swimToTreasure(){
+        this.getHandle().swimToTreasureGoal.start();
+    }
+
+    @Override
+    public void setSwimWithPlayerDistance(double distance){
+        this.getHandle().setSwimWithPlayerDistance(distance);
+    }
+
+    @Override
+    public void tryPlayWithItems(){
+        this.getHandle().playWithItemsGoal.start();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDragonFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDragonFireball.java
index b884c6b0808f80222b1dbf13b855891fd80320af..24563651209026fdd55f39cfe40e5db104554463 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDragonFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDragonFireball.java
@@ -12,4 +12,40 @@ public class CraftDragonFireball extends CraftFireball implements DragonFireball
     public String toString() {
         return "CraftDragonFireball";
     }
+    // Canvas start
+
+    public net.minecraft.world.entity.projectile.DragonFireball getHandle(){
+        return (net.minecraft.world.entity.projectile.DragonFireball) entity;
+    }
+
+    @Override
+    public void setEffectRadius(float radius){
+        this.getHandle().setRadius(radius);
+    }
+
+    @Override
+    public float getEffectRadius(){
+        return this.getHandle().radius;
+    }
+
+    @Override
+    public int getCloudAmplifier(){
+        return this.getHandle().cloudAmplifier;
+    }
+
+    @Override
+    public void setCloudAmplifier(int cloudAmplifier){
+        this.getHandle().setCloudAmplifier(cloudAmplifier);
+    }
+
+    @Override
+    public int getCloudDuration(){
+        return this.getHandle().duration;
+    }
+
+    @Override
+    public void setCloudDuration(int duration){
+        this.getHandle().setDuration(duration);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
index 51fc4acae9f20e8891069704e4a27f212b870766..8b7a1fcc3b1ccfb5435dc54380f6a09bf44ece23 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
@@ -18,4 +18,16 @@ public class CraftDrowned extends CraftZombie implements Drowned, com.destroysto
     public String toString() {
         return "CraftDrowned";
     }
+    // Canvas start
+
+    @Override
+    public boolean isSearchingForLand() {
+        return this.getHandle().searchingForLand;
+    }
+
+    @Override
+    public void setSearchingForLand(boolean searching) {
+        this.getHandle().setSearchingForLand(searching);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftElderGuardian.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftElderGuardian.java
index 0e5d7ba2a30b2110723b2a83ac08617d4de9a4ac..feaf3db43b7717b4a637703a3414708a640c3a7b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftElderGuardian.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftElderGuardian.java
@@ -18,4 +18,61 @@ public class CraftElderGuardian extends CraftGuardian implements ElderGuardian {
     public boolean isElder() {
         return true;
     }
+    // Canvas start
+
+    @Override
+    public net.minecraft.world.entity.monster.ElderGuardian getHandle(){
+        return (net.minecraft.world.entity.monster.ElderGuardian) super.getHandle();
+    }
+
+    @Override
+    public void setEffectAmplifier(final int effectAmplifier) {
+        this.getHandle().setEffectAmplifier(effectAmplifier);
+    }
+
+    @Override
+    public int getEffectDuration() {
+        return this.getHandle().getEffectDuration();
+    }
+
+    @Override
+    public void setEffectDuration(final int effectDuration) {
+        this.getHandle().setEffectDuration(effectDuration);
+    }
+
+    @Override
+    public int getEffectAmplifier() {
+        return this.getHandle().getEffectAmplifier();
+    }
+
+    @Override
+    public int getEffectDisplayLimit() {
+        return this.getHandle().getEffectDisplayLimit();
+    }
+
+    @Override
+    public void setEffectDisplayLimit(final int effectDisplayLimit) {
+        this.getHandle().setEffectDisplayLimit(effectDisplayLimit);
+    }
+
+    @Override
+    public int getEffectInterval() {
+        return this.getHandle().getEffectInterval();
+    }
+
+    @Override
+    public void setEffectInterval(final int effectInterval) {
+        this.getHandle().setEffectInterval(effectInterval);
+    }
+
+    @Override
+    public int getEffectRadius() {
+        return this.getHandle().getEffectRadius();
+    }
+
+    @Override
+    public void setEffectRadius(final int effectRadius) {
+        this.getHandle().setEffectRadius(effectRadius);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
index 7b7b89e67d53ed70efae714192c5fa32977f3d9c..57116193bcb2c1e83da2b3b408275e870d4ec171 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
@@ -2,7 +2,10 @@ package org.bukkit.craftbukkit.entity;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.ImmutableSet.Builder;
+import java.util.ArrayList; // Canvas
+import java.util.List; // Canvas
 import java.util.Set;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase;
 import org.bukkit.boss.BossBar;
@@ -12,6 +15,7 @@ import org.bukkit.craftbukkit.boss.CraftDragonBattle;
 import org.bukkit.entity.ComplexEntityPart;
 import org.bukkit.entity.EnderDragon;
 import org.bukkit.entity.EnderDragon.Phase;
+import org.bukkit.entity.Entity; // Canvas
 
 public class CraftEnderDragon extends CraftMob implements EnderDragon, CraftEnemy {
 
@@ -64,9 +68,11 @@ public class CraftEnderDragon extends CraftMob implements EnderDragon, CraftEnem
         return battle != null ? battle.getBossBar() : null;
     }
 
+    DragonBattle dragonBattle = this.getHandle().getDragonFight() != null ? new CraftDragonBattle(this.getHandle().getDragonFight()) : null; // Canvas
+
     @Override
     public DragonBattle getDragonBattle() {
-        return this.getHandle().getDragonFight() != null ? new CraftDragonBattle(this.getHandle().getDragonFight()) : null;
+        return this.dragonBattle; // Canvas
     }
 
     @Override
@@ -90,5 +96,33 @@ public class CraftEnderDragon extends CraftMob implements EnderDragon, CraftEnem
             this.getHandle().setPodium(io.papermc.paper.util.MCUtil.toBlockPos(location));
         }
     }
+    // Canvas start
+
+    @Override
+    public void setDragonBattle(final DragonBattle dragonBattle) {
+        this.dragonBattle = dragonBattle;
+    }
+
+    @Override
+    public void knockback(final List<Entity> entities) {
+        List<net.minecraft.world.entity.Entity> entityList = new ArrayList<>();
+        for (Entity T : entities) {
+            entityList.add(((CraftEntity) T).getHandle());
+        }
+        this.getHandle().knockBack((ServerLevel) this.getHandle().level(), entityList);
+    }
+
+    @Override
+    public void knockback(final Entity entity) {
+        List<net.minecraft.world.entity.Entity> entities = new ArrayList<>();
+        entities.add(((CraftEntity) entity).getHandle());
+        this.getHandle().knockBack((ServerLevel) this.getHandle().level(), entities);
+    }
+
+    @Override
+    public boolean inWall() {
+        return this.getHandle().inWall;
+    }
+    // Canvas end
     // Paper end - Allow changing the EnderDragon podium
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
index 983b9d6ddb58eff297e96e5c8b28ec427efa267d..934b19534708f811c18443200abebe2669de4c66 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import com.google.common.base.Preconditions;
 import net.minecraft.world.entity.monster.EnderMan;
 import net.minecraft.world.level.block.state.BlockState;
+import org.apache.commons.lang3.tuple.Pair; // Canvas
+import org.bukkit.Location; // Canvas
 import org.bukkit.Material;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.craftbukkit.CraftServer;
@@ -10,6 +12,7 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Enderman;
 import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player; // Canvas
 import org.bukkit.material.MaterialData;
 
 public class CraftEnderman extends CraftMonster implements Enderman {
@@ -60,7 +63,53 @@ public class CraftEnderman extends CraftMonster implements Enderman {
     public void setHasBeenStaredAt(boolean hasBeenStaredAt) {
         this.getHandle().setHasBeenStaredAt(hasBeenStaredAt);
     }
-    // Paper end
+    // Canavs start
+
+    @Override
+    public void teleportTowards(final int x, final int y, final int z) {
+        Preconditions.checkArgument(new Location(this.getWorld(), x, y, z) != null, "location cannot be null");
+        this.getHandle().teleport(x, y, z);
+    }
+
+    @Override
+    public void setPersistentAngerTime(final int min, final int max) {
+        this.getHandle().setPersistentAngerTime(min, max);
+    }
+
+    @Override
+    public Pair<Integer, Integer> getPersistentAngerTime() {
+        int max = this.getHandle().maxRangeAnger;
+        int min = this.getHandle().minRangeAnger;
+        Pair<Integer, Integer> integerPair = new Pair<Integer, Integer>() {
+            @Override
+            @Deprecated(forRemoval = true)
+            public Integer setValue(final Integer value) {
+                return null;
+            }
+
+            @Override
+            public Integer getLeft() {
+                return min;
+            }
+
+            @Override
+            public Integer getRight() {
+                return max;
+            }
+        };
+        return integerPair;
+    }
+
+    @Override
+    public void playStareSound() {
+        this.getHandle().playStareSound();
+    }
+
+    @Override
+    public boolean isLookingAtMe(final Player player) {
+        return this.getHandle().isLookingAtMe_check(((CraftPlayer) player).getHandle());
+    }
+    // Paper end -/- Canvas end
 
     @Override
     public EnderMan getHandle() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index 4b7d38a5ac6247c6e9d71ac7f3b65765ed3cf3ee..da07c7d324c866881dc54e7cdce57d1758831749 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -16,6 +16,63 @@ import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.server.network.ServerPlayerConnection;
 import net.minecraft.world.entity.Entity;
+// Canvas start
+import net.minecraft.world.entity.ExperienceOrb;
+import net.minecraft.world.entity.FlyingMob;
+import net.minecraft.world.entity.GlowSquid;
+import net.minecraft.world.entity.Interaction;
+import net.minecraft.world.entity.LightningBolt;
+import net.minecraft.world.entity.LivingEntity;
+import net.minecraft.world.entity.Marker;
+import net.minecraft.world.entity.MoverType;
+import net.minecraft.world.entity.PathfinderMob;
+import net.minecraft.world.entity.TamableAnimal;
+import net.minecraft.world.entity.ambient.AmbientCreature;
+import net.minecraft.world.entity.ambient.Bat;
+import net.minecraft.world.entity.animal.AbstractFish;
+import net.minecraft.world.entity.animal.AbstractGolem;
+import net.minecraft.world.entity.animal.Animal;
+import net.minecraft.world.entity.animal.Bee;
+import net.minecraft.world.entity.animal.Cat;
+import net.minecraft.world.entity.animal.Chicken;
+import net.minecraft.world.entity.animal.Cod;
+import net.minecraft.world.entity.animal.Cow;
+import net.minecraft.world.entity.animal.Dolphin;
+import net.minecraft.world.entity.animal.Fox;
+import net.minecraft.world.entity.animal.IronGolem;
+import net.minecraft.world.entity.animal.MushroomCow;
+import net.minecraft.world.entity.animal.Ocelot;
+import net.minecraft.world.entity.animal.Panda;
+import net.minecraft.world.entity.animal.Parrot;
+import net.minecraft.world.entity.animal.Pig;
+import net.minecraft.world.entity.animal.PolarBear;
+import net.minecraft.world.entity.animal.Pufferfish;
+import net.minecraft.world.entity.animal.Rabbit;
+import net.minecraft.world.entity.animal.Salmon;
+import net.minecraft.world.entity.animal.Sheep;
+import net.minecraft.world.entity.animal.SnowGolem;
+import net.minecraft.world.entity.animal.Squid;
+import net.minecraft.world.entity.animal.TropicalFish;
+import net.minecraft.world.entity.animal.Turtle;
+import net.minecraft.world.entity.animal.WaterAnimal;
+import net.minecraft.world.entity.animal.Wolf;
+import net.minecraft.world.entity.animal.allay.Allay;
+import net.minecraft.world.entity.animal.axolotl.Axolotl;
+import net.minecraft.world.entity.animal.camel.Camel;
+import net.minecraft.world.entity.animal.frog.Frog;
+import net.minecraft.world.entity.animal.frog.Tadpole;
+import net.minecraft.world.entity.animal.goat.Goat;
+import net.minecraft.world.entity.animal.horse.AbstractChestedHorse;
+import net.minecraft.world.entity.animal.horse.AbstractHorse;
+import net.minecraft.world.entity.animal.horse.Donkey;
+import net.minecraft.world.entity.animal.horse.Horse;
+import net.minecraft.world.entity.animal.horse.Llama;
+import net.minecraft.world.entity.animal.horse.Mule;
+import net.minecraft.world.entity.animal.horse.SkeletonHorse;
+import net.minecraft.world.entity.animal.horse.TraderLlama;
+import net.minecraft.world.entity.animal.horse.ZombieHorse;
+import net.minecraft.world.entity.animal.sniffer.Sniffer;
+// Canvas end
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
 import net.minecraft.world.entity.projectile.AbstractArrow;
@@ -152,6 +209,39 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     public Vector getVelocity() {
         return CraftVector.toBukkit(this.entity.getDeltaMovement());
     }
+    // Canvas start - movement api
+
+    @Override
+    public void step(){
+        this.step(1);
+    }
+
+    @Override
+    public void step(int steps){
+        for(int i = 0; i < steps; i++){
+            double x = this.getLocation().getDirection().getX();
+            double y = this.getLocation().getDirection().getY();
+            double z = this.getLocation().getDirection().getZ();
+
+            this.getHandle().move(MoverType.SELF, new Vec3(x, y, z));
+        }
+    }
+
+    @Override
+    public void setDeltaMovement(double x, double y, double z){
+        this.getHandle().setDeltaMovement(x, y, z);
+    }
+
+    @Override
+    public void reapplyPosition(){
+        this.getHandle().reapplyPosition();
+    }
+
+    @Override
+    public void turn(double cursorDeltaX, double cursorDeltaY){
+        this.getHandle().turn(cursorDeltaX, cursorDeltaY);
+    }
+    // Canvas end
 
     @Override
     public void setVelocity(Vector velocity) {
@@ -881,6 +971,13 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     public void setPortalCooldown(int cooldown) {
         this.getHandle().portalCooldown = cooldown;
     }
+    // Canvas - why not have "isInPortalCooldown?"
+
+    @Override
+    public boolean isInPortalCooldown(){
+        return this.getHandle().portalCooldown > 0;
+    }
+    // Canvas end
 
     @Override
     public Set<String> getScoreboardTags() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvokerFangs.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvokerFangs.java
index 19b368cc862cd7e3e1f0e89401a7d099e3eaefa3..48445a267a93740e73e65228b8290c9f2d005666 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvokerFangs.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvokerFangs.java
@@ -44,4 +44,16 @@ public class CraftEvokerFangs extends CraftEntity implements EvokerFangs {
 
         this.getHandle().warmupDelayTicks = delay;
     }
+    // Canvas start
+
+    @Override
+    public float getFangDamage() {
+        return this.getHandle().fangDamage;
+    }
+
+    @Override
+    public void setFangDamage(final float fangDamage) {
+        this.getHandle().setFangDamage(fangDamage);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
index 650e4a01cecc4cc08e7ff9ebcc4c367084351f21..8d4a81bb4d9e684fd41a7bc9989cc55558109a21 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
@@ -51,4 +51,16 @@ public class CraftExperienceOrb extends CraftEntity implements ExperienceOrb {
     public String toString() {
         return "CraftExperienceOrb";
     }
+    // Canvas start - allow configure can merge for xp orbs
+
+    @Override
+    public void setAllowMerge(final boolean allowMerge) {
+        this.getHandle().allowMerge = allowMerge;
+    }
+
+    @Override
+    public boolean allowMerge() {
+        return this.getHandle().allowMerge;
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
index 43d7bea201a52cfeacf60c75caa28dfd2c4ff164..8fcc7d2b372effdf7b1ca2b11c3ba3d5a573abe6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
@@ -1,11 +1,12 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
+// Canvas start
 import net.minecraft.world.entity.projectile.AbstractHurtingProjectile;
 import net.minecraft.world.phys.Vec3;
+// Canvas end
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Fireball;
-import org.bukkit.projectiles.ProjectileSource;
 import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 
@@ -40,6 +41,28 @@ public class CraftFireball extends AbstractProjectile implements Fireball {
     public Vector getDirection() {
         return this.getAcceleration();
     }
+    // Canvas start
+
+    @Override
+    public void setShouldBurn(final boolean should) {
+        this.getHandle().setShouldBurn(should);
+    }
+
+    @Override
+    public boolean shouldBurn() {
+        return this.getHandle().shouldBurn();
+    }
+
+    @Override
+    public void setInertia(final float inertia) {
+        this.getHandle().setInertia(inertia);
+    }
+
+    @Override
+    public float getInertia() {
+        return this.getHandle().getInertia();
+    }
+    // Canvas end
 
     @Override
     public void setDirection(Vector direction) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
index 759b6e54db93792c9862b1f1625118ac6fa49d7a..3367675d09a030cfdb8b9bb5df2a82c6325f6dbd 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFirework.java
@@ -120,6 +120,13 @@ public class CraftFirework extends CraftProjectile implements Firework {
     public void detonate() {
         this.setLife(this.getMaxLife() + 1);
     }
+    // Canvas start
+
+    @Override
+    public void explode() {
+        this.getHandle().explode();
+    }
+    // Canvas end
 
     @Override
     public boolean isDetonated() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
index eb10f94d5ed8ca89d3786138647dd43357609a6c..818970c09f748d6fa16e8ad0f5bccd6e1c89dd12 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
@@ -19,4 +19,26 @@ public class CraftFish extends CraftWaterMob implements Fish, io.papermc.paper.e
     public String toString() {
         return "CraftFish";
     }
+    // Canvas start
+
+    @Override
+    public void setCanRandomSwim(boolean can) {
+        this.getHandle().setCanRandomSwim(can);
+    }
+
+    @Override
+    public boolean getCanRandomSwim() {
+        return this.getHandle().canRandomSwim();
+    }
+
+    @Override
+    public int getMaxSpawnClusterSize() {
+        return this.getHandle().getMaxSpawnClusterSize();
+    }
+
+    @Override
+    public void setMaxSpawnClusterSize(int size) {
+        this.getHandle().setMaxSpawnClusterSize(size);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
index e0d65df2e5b4c14abeb89a5f72cc2d9fa034dcf5..05c91193dafcc925c3f129e897bef351f5cb90d8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFishHook.java
@@ -161,6 +161,13 @@ public class CraftFishHook extends CraftProjectile implements FishHook {
         Preconditions.checkArgument(chance >= 0 && chance <= 1, "The bite chance must be between 0 and 1");
         this.biteChance = chance;
     }
+    // Canvas start
+
+    @Override
+    public boolean isBiting() {
+        return this.getHandle().getEntityData().get(FishingHook.DATA_BITING);
+    }
+    // Canvas end
 
     @Override
     public boolean isInOpenWater() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
index 4b0aac4362b773f30dfe7c1867fad98fc30b414c..187490b43d16638755a72257f496db275b3f37f2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
@@ -40,6 +40,13 @@ public class CraftFrog extends CraftAnimals implements org.bukkit.entity.Frog {
             this.getHandle().setTongueTarget(((CraftEntity) target).getHandle());
         }
     }
+    // Canvas start
+    
+    @Override
+    public void youngify(){
+        this.getHandle().convertTo(net.minecraft.world.entity.EntityType.TADPOLE, true);
+    }
+    // Canvas end
 
     @Override
     public Variant getVariant() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
index 97fa4e1e70203194bd939618b2fad92665af6d59..4c873d3633a85d9035db8f8a1687a9ee43724059 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
@@ -40,5 +40,12 @@ public class CraftGhast extends CraftFlying implements Ghast, CraftEnemy {
         com.google.common.base.Preconditions.checkArgument(explosionPower >= 0 && explosionPower <= 127, "The explosion power has to be between 0 and 127");
         this.getHandle().setExplosionPower(explosionPower);
     }
+    // Canvas start
+
+    @Override
+    public void shootFireBall() {
+        this.getHandle().shootFireballGoal.start();
+    }
+    // Canvas end
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
index 253a0d2f987163cbbb28d261674b47137cbbcbe2..1a83da2deb1d9a7ca2e5bccae9db83f07630c1d9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
+import net.minecraft.world.entity.EntityType; // Canvas
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.GlowSquid;
 
@@ -30,4 +31,11 @@ public class CraftGlowSquid extends CraftSquid implements GlowSquid {
         Preconditions.checkArgument(darkTicksRemaining >= 0, "darkTicksRemaining must be >= 0");
         this.getHandle().setDarkTicks(darkTicksRemaining);
     }
+    // Canvas start
+
+    @Override
+    public void setNonGlowingSquid() {
+        this.getHandle().convertTo(EntityType.SQUID, true);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
index 2c21de478bff9cdf13ba46cd041831d54c11e924..65293b92bd223f82a41cd0bae45ab34218be860d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
@@ -54,5 +54,34 @@ public class CraftGoat extends CraftAnimals implements Goat {
     public void ram(@org.jetbrains.annotations.NotNull org.bukkit.entity.LivingEntity entity) {
         this.getHandle().ram(((CraftLivingEntity) entity).getHandle());
     }
-    // Paper end
+    // Paper end -/- Canvas start
+
+    public boolean isLoweringHead(){
+        return this.getHandle().isLoweringHead();
+    }
+
+    public void setFallDamageReduction(int fallDamageReduction){
+        this.getHandle().setFallDamageReduction(fallDamageReduction);
+    }
+
+    public int getFallDamageReduction(){
+        return this.getHandle().getFallDamageReduction();
+    }
+
+    public void addRightHorn(){
+        this.getHandle().addRightHorn();
+    }
+
+    public void removeRightHorn(){
+        this.getHandle().removeRightHorn();
+    }
+
+    public void addLeftHorn(){
+        this.getHandle().addLeftHorn();
+    }
+
+    public void removeLeftHorn(){
+        this.getHandle().removeLeftHorn();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHusk.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHusk.java
index 4822c744cc2614ffd2b5fc44f897205c47557965..f4a605476c52d79ab202609648e884957c2d3749 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHusk.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHusk.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
 import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.entity.EntityType; // Canvas
 import org.bukkit.entity.Husk;
 
 public class CraftHusk extends CraftZombie implements Husk {
@@ -13,4 +14,31 @@ public class CraftHusk extends CraftZombie implements Husk {
     public String toString() {
         return "CraftHusk";
     }
+    // Canvas start
+
+    @Override
+    public net.minecraft.world.entity.monster.Husk getHandle(){
+        return (net.minecraft.world.entity.monster.Husk) this.entity;
+    }
+
+    @Override
+    public void setShouldConvertInWater(boolean shouldConvertInWater) {
+        this.getHandle().setShouldConvertInWater(shouldConvertInWater);
+    }
+
+    @Override
+    public boolean convertsInWater() {
+        return this.getHandle().convertsInWater();
+    }
+
+    @Override
+    public void setEntityConversionType(EntityType entityType) {
+        this.getHandle().setEntityConversionType(entityType);
+    }
+
+    @Override
+    public EntityType getEntityConversionType() {
+        return this.getHandle().getEntityConversionType();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
index 966587c2788b5c93be83259ddc962a89cde7cbaa..5df6e961386a32e50f9f6adc064edd20f6fd735e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftIronGolem.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
+import org.bukkit.Material; // Canvas
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.IronGolem;
 
@@ -40,4 +41,41 @@ public class CraftIronGolem extends CraftGolem implements IronGolem {
         getHandle().setSummoner(summoner);
     }
     // Purpur end
+    // Canvas start
+
+    @Override
+    public int getCrackiness(){
+        return this.getHandle().getCrackiness().ordinal();
+    }
+
+    @Override
+    public void setFlingVelocity(double amt){
+        this.getHandle().setFlingVelocity(amt);
+    }
+
+    @Override
+    public double getFlingVelocity(){
+        return this.getHandle().getFlingVelocity();
+    }
+
+    @Override
+    public boolean canRepair() {
+        return this.getHandle().canRepair;
+    }
+
+    @Override
+    public void setCanRepair(boolean can) {
+        this.getHandle().setCanRepair(can);
+    }
+
+    @Override
+    public void offerFlower(final boolean lookingAtVillager) {
+        this.getHandle().offerFlower(lookingAtVillager);
+    }
+
+    @Override
+    public void setRepairItem(final Material material) {
+        this.getHandle().setRepairItem(material);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 9add2ba364e80815ec9c530b984e1619b6607bb8..35ddb14f4f747978951941ccf10640e1c26c75c3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -72,6 +72,7 @@ import org.bukkit.entity.TippedArrow;
 import org.bukkit.entity.Trident;
 import org.bukkit.entity.WindCharge;
 import org.bukkit.entity.WitherSkull;
+import org.bukkit.craftbukkit.potion.*; // Canvas - change to use * due to patch error
 import org.bukkit.entity.memory.MemoryKey;
 import org.bukkit.event.entity.EntityPotionEffectEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
@@ -83,6 +84,11 @@ import org.bukkit.potion.PotionType;
 import org.bukkit.util.BlockIterator;
 import org.bukkit.util.RayTraceResult;
 import org.bukkit.util.Vector;
+// Canvas start
+import org.bukkit.scheduler.BukkitRunnable;
+import org.bukkit.entity.*;
+import org.bukkit.plugin.*;
+// Canvas end
 
 public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     private CraftEntityEquipment equipment;
@@ -1200,5 +1206,59 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     public void setShouldBurnInDay(final boolean shouldBurnInDay) {
         this.getHandle().setShouldBurnInDay(shouldBurnInDay);
     }
-    // Purpur end - API for any mob to burn daylight
+
+    // Canvas start
+
+    @Override
+    public me.dueris.canvas.entity.MobType getMobType() {
+        return me.dueris.canvas.entity.CraftMobType.getMobType(this.getHandle());
+    }
+
+    @Override
+    public void jump() {
+        this.getHandle().jumpFromGround();
+    }
+
+    @Override
+    public void jumpInLiquid() {
+        if(this.getLocation().getBlock().isLiquid()){
+            if(getNmsFluidTag(this.getLocation().getBlock()) != null){
+                this.getHandle().jumpInLiquid(this.getNmsFluidTag(this.getLocation().getBlock()));
+            }
+        }
+    }
+
+    public net.minecraft.tags.TagKey<net.minecraft.world.level.material.Fluid> getNmsFluidTag(Block block){
+        switch (block.getType()){
+            case WATER -> {
+                return net.minecraft.tags.FluidTags.WATER;
+            }
+            case LAVA -> {
+                return net.minecraft.tags.FluidTags.LAVA;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public void goDownInWater() {
+        this.getHandle().goDownInWater();
+    }
+
+    @Override
+    public void setWaterSlowdown(final float waterSlowdown) {
+        this.getHandle().setWaterSlowdown(waterSlowdown);
+    }
+
+    @Override
+    public float getWaterSlowdown() {
+        return this.getHandle().getWaterSlowDown();
+    }
+
+    @Override
+    public void consumeItem(final ItemStack itemStack) {
+        net.minecraft.world.level.Level world = this.getHandle().level();
+        this.getHandle().eat(world, net.minecraft.world.item.ItemStack.fromBukkitCopy(itemStack));
+    }
+    // Purpur end - API for any mob to burn daylight -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
index deb66c04abefb4a88521483db1612e494bd27164..2d50c8e5e7d3d9a50f14d19fcb6d5e35fb3253cd 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
@@ -31,6 +31,13 @@ public abstract class CraftMob extends CraftLivingEntity implements Mob {
         }
     }
 
+    // Canvas start
+    @Override
+    public boolean canBeLeashed(){
+        return this.getHandle().canBeLeashed();
+    }
+
+    // Canvas end
     @Override
     public CraftLivingEntity getTarget() {
         if (this.getHandle().getTarget() == null) return null;
@@ -47,6 +54,14 @@ public abstract class CraftMob extends CraftLivingEntity implements Mob {
     public boolean isAware() {
         return this.getHandle().aware;
     }
+    // Canvas start
+
+    @Override
+    public void convertTo(org.bukkit.entity.EntityType entityType, boolean keepEquipment){
+        net.minecraft.world.entity.EntityType ENT = org.bukkit.craftbukkit.entity.CraftEntityType.bukkitToMinecraft(entityType);
+        this.getHandle().convertTo(ENT, keepEquipment);
+    }
+    // Canvas end
 
     @Override
     public Sound getAmbientSound() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
index 5c5b64bd058684520fa175bfd10622ff57856b7c..2384f5ebcf68867578e09b7beb9868f61980325b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
@@ -150,4 +150,11 @@ public class CraftMushroomCow extends CraftCow implements MushroomCow, io.paperm
     public String toString() {
         return "CraftMushroomCow";
     }
+    // Canvas start
+
+    @Override
+    public void convertToNormal(){
+        this.getHandle().convertToNormal();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
index 01d104d91de9e1319d27e39d3f474318c7809486..289b6893ae5bd533d92773dc850fb817b96ae9da 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
@@ -144,4 +144,21 @@ public class CraftPanda extends CraftAnimals implements Panda {
 
         return net.minecraft.world.entity.animal.Panda.Gene.values()[gene.ordinal()];
     }
+    // Canvas start
+
+    @Override
+    public void roll(){
+        this.getHandle().rollGoal.start();
+    }
+
+    @Override
+    public void sneeze(){
+        this.getHandle().sneezGoal.start();
+    }
+
+    @Override
+    public void lieOnBack(){
+        this.getHandle().lieOnBackGoal.start();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
index 04d6cf6a1f3ae8316e3b2862c2d1b04e84a3b20a..22f651a770be73de6e262faa64b624da039247fb 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
@@ -37,4 +37,11 @@ public class CraftParrot extends CraftTameableAnimal implements Parrot {
     public boolean isDancing() {
         return this.getHandle().isPartyParrot();
     }
+    // Canvas start
+
+    @Override
+    public void landOnShoulder(){
+        this.getHandle().landOnShoulder();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
index 49beb836d2801aadf869feefa602616daebe633f..7c4554aada7f3aa701f0d0a7a968e87c11bf2bd4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
@@ -54,4 +54,11 @@ public class CraftPigZombie extends CraftZombie implements PigZombie {
     public void setConversionTime(int time) {
         throw new UnsupportedOperationException("Not supported by this Entity.");
     }
+    // Canvas start
+
+    @Override
+    public void convertToNormal(){
+        this.getHandle().convertToNormal();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
index 5124a383b60b2c8de89fa992547d0c61db760c21..482e3c51a7008dbc37818ddc9fa1e27ad1a30b7b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
@@ -116,5 +116,11 @@ public class CraftPiglin extends CraftPiglinAbstract implements Piglin, com.dest
     public boolean isDancing() {
         return this.getHandle().isDancing();
     }
-    // Paper end
+    // Paper end -/- Canvas start
+
+    @Override
+    public void convertToZombified(){
+        this.getHandle().convertToZombified();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
index 35a8219734633529325430810e88755b2dd23125..3e288e7ed5f21b9109ebbce02e1a70daea1cac69 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
@@ -29,4 +29,16 @@ public class CraftPufferFish extends CraftFish implements PufferFish {
     public String toString() {
         return "CraftPufferFish";
     }
+    // Canvas start
+
+    @Override
+    public void setCanPoison(boolean can){
+        this.getHandle().setCanPoison(can);
+    }
+
+    @Override
+    public boolean getCanPoison(){
+        return this.getHandle().canPoison;
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
index 519ef701a7d6534f7cb516f6296b95ee521f661d..f92a20008ed8428b64a09d91f07dcdc674bc66e9 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
@@ -39,5 +39,10 @@ public class CraftRabbit extends CraftAnimals implements Rabbit {
     public int getMoreCarrotTicks() {
         return this.getHandle().moreCarrotTicks;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+
+    @Override
+    public boolean wantsMoreFood(){
+        return this.getHandle().moreCarrotTicks <= 0;
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
index 09796ce15658e3f7c223a265a547a51ee729ed40..216a6b64132d49e8ff265f65c04e513dacd9ac9f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
@@ -48,5 +48,11 @@ public class CraftRavager extends CraftRaider implements Ravager {
     public void setRoarTicks(int ticks) {
         this.getHandle().roarTick = ticks;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+    
+    @Override
+    public void roar(){
+        this.getHandle().roar();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
index 6f98da9be6aef35e3b5c940188b872459a383c8e..a7bc2bda409804314c1bbf7817b964059de554ae 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
@@ -30,6 +30,28 @@ public class CraftSkeleton extends CraftAbstractSkeleton implements Skeleton {
             this.getHandle().startFreezeConversion(time);
         }
     }
+    // Canvas start
+
+    @Override
+    public void forceFreezeConvert(){
+        this.getHandle().forceFreezeConvert();
+    }
+
+    @Override
+    public void forceFreezeConvert(boolean resetConvertTimer){
+        this.getHandle().forceFreezeConvert(true);
+    }
+
+    @Override
+    public void setMaxConversionTime(int time){
+        this.getHandle().setMaxConversionTime(time);
+    }
+
+    @Override
+    public int getMaxConversionTime(){
+        return this.getHandle().getMaxConversionTime(); 
+    }
+    // Canvas end
 
     @Override
     public net.minecraft.world.entity.monster.Skeleton getHandle() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
index fbb47491dcc75f8247dee9f123f946f99ef1467f..fcc85ee3572ba80866cb3256040ec38b5b8034ce 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
@@ -30,6 +30,18 @@ public class CraftSkeletonHorse extends CraftAbstractHorse implements SkeletonHo
         return this.getHandle().isTrap();
     }
 
+    // Canvas start
+    @Override
+    public void revertToHorse(){
+        this.getHandle().revertToHorse();
+    }
+
+    @Override
+    public void zombify(){
+        this.getHandle().zombify();
+    }
+
+    // Canvas end
     @Override
     public void setTrapped(boolean trapped) {
         this.getHandle().setTrap(trapped);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java
index 555337018fe218ac5a296a5e6a1d82720fee05e1..3d039dc0cbe76197d87a6dec44dd2a3374db1e17 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java
@@ -97,4 +97,51 @@ public class CraftSniffer extends CraftAnimals implements Sniffer {
             case RISING -> Sniffer.State.RISING;
         };
     }
+    // Canvas start
+
+    @Override
+    public void setCanSearch(boolean canSearch){
+        this.getHandle().setCanSearch(canSearch);
+    }
+
+    @Override
+    public void setCanSniff(boolean canSniff){
+        this.getHandle().setCanSniff(canSniff);
+    }
+
+    @Override
+    public void setStoreExploredLocations(boolean canStore){
+        this.getHandle().setStoreExploredLocations(canStore);
+    }
+
+    @Override
+    public void setCanDig(boolean canDig){
+        this.getHandle().setCanDig(canDig);
+    }
+
+    @Override
+    public boolean getCanSearch(){
+        return this.getHandle().getCanSearch();
+    }
+
+    @Override
+    public boolean getCanSniff(){
+        return this.getHandle().getCanSniff();
+    }
+
+    @Override
+    public boolean canStoreExploredLocations(){
+        return this.getHandle().canStoreExploredLocations();
+    }
+    
+    @Override
+    public void setDiggingDropItem(org.bukkit.inventory.ItemStack item){
+        this.getHandle().setDiggingDropItem(item);
+    }
+
+    @Override
+    public org.bukkit.inventory.ItemStack getDiggingDropItem(){
+        return this.getHandle().getDiggingDropItem();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
index a6e3b61c391a8b266d2b030d9ba600ac6be76952..70ce5df37825ede03f8387aa4c35d0c58bd74463 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
@@ -18,4 +18,16 @@ public class CraftSquid extends CraftWaterMob implements Squid {
     public String toString() {
         return "CraftSquid";
     }
+    // Canvas start
+
+    @Override
+    public void setGlowingSquid() {
+        this.getHandle().setGlowingSquid();
+    }
+
+    @Override
+    public void squirtInk(){
+        this.getHandle().spawnInk();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
index d7c6a0bbc5671ea8f2488230c94df5146a1e98b9..cb2b6b1587354e25a3f7450d6340091e1700d5fe 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
@@ -38,5 +38,11 @@ public class CraftTadpole extends CraftFish implements org.bukkit.entity.Tadpole
     public boolean getAgeLock() {
         return this.getHandle().ageLocked;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+
+    @Override
+    public void makeOld(){
+        this.getHandle().makeOld();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
index 6ace76a829c88e2e747dbbcce0a6582c615fc56d..bcd98e4037732eaa16cff17aa1591b8781cc28a1 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
@@ -3,6 +3,7 @@ package org.bukkit.craftbukkit.entity;
 import com.google.common.base.Preconditions;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.registries.Registries;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.monster.Zombie;
 import net.minecraft.world.entity.npc.VillagerProfession;
 import net.minecraft.world.entity.npc.VillagerType;
@@ -132,7 +133,41 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
     public void setRestocksToday(int restocksToday) {
         getHandle().numberOfRestocksToday = restocksToday;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+
+    @Override
+    public void restock(){
+        this.getHandle().restock();
+    }
+
+    @Override
+    public boolean needsToRestock(){
+        return this.getHandle().needsToRestock();
+    }
+
+    @Override
+    public void updateDemand() {
+        this.getHandle().updateDemand();
+    }
+
+    @Override
+    public void trySpawnGolem() {
+        this.getHandle().spawnGolemIfNeeded(
+            (ServerLevel) this.getHandle().level(),
+            1,
+            1
+        );
+    }
+
+    @Override
+    public void trySpawnGolem(final int amt) {
+        this.getHandle().spawnGolemIfNeeded(
+            (ServerLevel) this.getHandle().level(),
+            1,
+            amt
+        );
+    }
+    // Canvas end
 
     @Override
     public boolean sleep(Location location) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
index c284eb96a1e330078076cbe61f0f6e2ff4ed89bd..f1ce90c8a9aaa4068aebd8dfe1292709324cde3e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
@@ -86,4 +86,16 @@ public class CraftWarden extends CraftMonster implements org.bukkit.entity.Warde
             case ANGRY -> AngerLevel.ANGRY;
         };
     }
+    // Canvas start
+
+    @Override
+    public void setCanDisableShield(final boolean canDisableShield) {
+        this.getHandle().setCanDisableShield(canDisableShield);
+    }
+
+    @Override
+    public boolean getCanDisableShield() {
+        return this.getHandle().canDisableShield;
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
index 46336111dcf62a29390e724b1879c84c697076e9..77646404b92f4806628a01c93b5e377d554e58e8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
+import net.minecraft.world.entity.EntityType; // Canvas
 import net.minecraft.world.entity.monster.ZombieVillager;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Villager;
@@ -127,7 +128,13 @@ public class CraftZombie extends CraftMonster implements Zombie {
     public boolean supportsBreakingDoors() {
         return getHandle().supportsBreakDoorGoal();
     }
-    // Paper end
+    // Canvas start
+
+    @Override
+    public void convertToGiant() {
+        this.getHandle().convertTo(EntityType.GIANT, true);
+    }
+    // Paper end -/- Canvas end
 
     @Override
     public boolean getAgeLock() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java
index 2c47ea42df327b0886358f4e209b8629d6ac859c..38b5e9d49c9ce399a54d2e586b7a121ae42e59eb 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java
@@ -10,6 +10,12 @@ public class CraftZombieHorse extends CraftAbstractHorse implements ZombieHorse
         super(server, entity);
     }
 
+    // Canvas start
+    public net.minecraft.world.entity.animal.horse.ZombieHorse getHandle(){
+        return (net.minecraft.world.entity.animal.horse.ZombieHorse) this.entity;
+    }
+
+    // Canvas end
     @Override
     public String toString() {
         return "CraftZombieHorse";
@@ -19,4 +25,16 @@ public class CraftZombieHorse extends CraftAbstractHorse implements ZombieHorse
     public Variant getVariant() {
         return Variant.UNDEAD_HORSE;
     }
+    // Canvas start
+
+    @Override
+    public void revertToHorse(){
+        this.getHandle().revertToHorse();
+    }
+    
+    @Override
+    public void skeletonify(){
+        this.getHandle().skeletonify();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
index 66bdac50130f523f9dc4379b103b7a469f9ca36b..999d895c536b0ab03ded0166f178acee2801d04a 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
@@ -5,6 +5,11 @@ import org.bukkit.Server;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.configuration.file.FileConfiguration;
+// Canvas start
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.player.PlayerJoinEvent;
+// Canvas end
 import org.bukkit.generator.BiomeProvider;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.plugin.PluginBase;
@@ -18,7 +23,7 @@ import java.io.File;
 import java.io.InputStream;
 import java.util.List;
 
-public class MinecraftInternalPlugin extends PluginBase {
+public class MinecraftInternalPlugin extends PluginBase implements Listener { // Canvas - make listener
     private boolean enabled = true;
 
     private final String pluginName;
@@ -150,4 +155,11 @@ public class MinecraftInternalPlugin extends PluginBase {
         throw new UnsupportedOperationException("Not supported.");
     }
     // Paper end - lifecycle events
+    // Canvas start
+
+    @EventHandler
+    public void test(PlayerJoinEvent e){
+        // yeah just testing bro
+    }
+    // Canvas end
 }
