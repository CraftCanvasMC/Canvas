From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Wed, 19 Jun 2024 21:40:35 -0700
Subject: [PATCH] Multithreaded WorldTicking


diff --git a/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedThreadedTaskQueue.java b/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedThreadedTaskQueue.java
index 3e8401b1b1f833c4f01bc87059a2f48d761d989f..251951bcd0014c26f9411f5adabfeda559193854 100644
--- a/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedThreadedTaskQueue.java
+++ b/src/main/java/ca/spottedleaf/concurrentutil/executor/standard/PrioritisedThreadedTaskQueue.java
@@ -1,13 +1,14 @@
 package ca.spottedleaf.concurrentutil.executor.standard;
 
 import java.util.ArrayDeque;
+import java.util.concurrent.ConcurrentLinkedDeque;
 import java.util.concurrent.atomic.AtomicLong;
 
 public class PrioritisedThreadedTaskQueue implements PrioritisedExecutor {
 
-    protected final ArrayDeque<PrioritisedTask>[] queues = new ArrayDeque[Priority.TOTAL_SCHEDULABLE_PRIORITIES]; {
+    protected final ConcurrentLinkedDeque<PrioritisedTask>[] queues = new ConcurrentLinkedDeque[Priority.TOTAL_SCHEDULABLE_PRIORITIES]; { // Canvas
         for (int i = 0; i < Priority.TOTAL_SCHEDULABLE_PRIORITIES; ++i) {
-            this.queues[i] = new ArrayDeque<>();
+            this.queues[i] = new ConcurrentLinkedDeque<>(); // Canvas
         }
     }
 
@@ -88,11 +89,11 @@ public class PrioritisedThreadedTaskQueue implements PrioritisedExecutor {
     }
 
     protected PrioritisedTask poll(final Priority minPriority) {
-        final ArrayDeque<PrioritisedTask>[] queues = this.queues;
+        final ConcurrentLinkedDeque<PrioritisedTask>[] queues = this.queues;
         synchronized (queues) {
             final int max = minPriority.priority;
             for (int i = 0; i <= max; ++i) {
-                final ArrayDeque<PrioritisedTask> queue = queues[i];
+                final ConcurrentLinkedDeque<PrioritisedTask> queue = queues[i]; // Canvas
                 PrioritisedTask task;
                 while ((task = queue.pollFirst()) != null) {
                     if (task.trySetCompleting(i)) {
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/EntityLookup.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/EntityLookup.java
index 3a8c192d1aed186ff506d69e3960e3b2792ddbd1..22f13d8aaca65ac58038a29f11ef6968297a3fd5 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/EntityLookup.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/level/entity/EntityLookup.java
@@ -8,6 +8,7 @@ import ca.spottedleaf.moonrise.common.util.WorldUtil;
 import ca.spottedleaf.moonrise.patches.chunk_system.entity.ChunkSystemEntity;
 import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.FullChunkStatus;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.util.AbortableIterationConsumer;
 import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
@@ -30,6 +31,7 @@ import java.util.List;
 import java.util.NoSuchElementException;
 import java.util.Objects;
 import java.util.UUID;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
@@ -174,6 +176,12 @@ public abstract class EntityLookup implements LevelEntityGetter<Entity> {
             return Arrays.copyOf(this.accessibleEntities.getRawData(), this.accessibleEntities.size(), Entity[].class);
         }
     }
+    // Canvas start
+
+    public int entityCount() {
+        return this.accessibleEntities.size();
+    }
+    // Canvas end
 
     @Override
     public <U extends Entity> void get(final EntityTypeTest<Entity, U> filter, final AbortableIterationConsumer<U> action) {
@@ -210,6 +218,7 @@ public abstract class EntityLookup implements LevelEntityGetter<Entity> {
             }
         }
     }
+    private ConcurrentLinkedQueue<Runnable> statusChangesQue = new ConcurrentLinkedQueue<>(); // Canvas
 
     public void entityStatusChange(final Entity entity, final ChunkEntitySlices slices, final Visibility oldVisibility, final Visibility newVisibility, final boolean moved,
                                    final boolean created, final boolean destroyed) {
@@ -224,7 +233,8 @@ public abstract class EntityLookup implements LevelEntityGetter<Entity> {
         final boolean entityStatusUpdateBefore = slices == null ? false : slices.startPreventingStatusUpdates();
 
         if (entityStatusUpdateBefore) {
-            LOGGER.error("Cannot update chunk status for entity " + entity + " since entity chunk (" + slices.chunkX + "," + slices.chunkZ + ") is receiving update", new Throwable());
+            // LOGGER.error("Cannot update chunk status for entity " + entity + " since entity chunk (" + slices.chunkX + "," + slices.chunkZ + ") is receiving update", new Throwable()); // Canvas
+            statusChangesQue.add(() -> entityStatusChange(entity, slices, oldVisibility, newVisibility, moved, created, destroyed)); // Canvas
             return;
         }
 
@@ -302,6 +312,11 @@ public abstract class EntityLookup implements LevelEntityGetter<Entity> {
         } finally {
             if (slices != null) {
                 slices.stopPreventingStatusUpdates(false);
+                // Canvas start
+                ConcurrentLinkedQueue<Runnable> clone = new ConcurrentLinkedQueue<>(statusChangesQue);
+                statusChangesQue.clear();
+                clone.forEach(Runnable::run);
+                // Canvas end
             }
         }
     }
@@ -444,7 +459,13 @@ public abstract class EntityLookup implements LevelEntityGetter<Entity> {
             LOGGER.warn("Cannot remove entity " + entity + " from null entity slices (" + sectionX + "," + sectionZ + ")");
         } else {
             if (slices.isPreventingStatusUpdates()) {
-                throw new IllegalStateException("Attempting to remove entity " + entity + " from entity slices (" + sectionX + "," + sectionZ + ") that is receiving status updates");
+                // Canvas start
+               ((ServerLevel)entity.level()).concurrentChunkTaskScheduler.schedule(() -> {
+                    removeEntity(entity);
+                });
+                return;
+                // throw new IllegalStateException("Attempting to remove entity " + entity + " from entity slices (" + sectionX + "," + sectionZ + ") that is receiving status updates");
+                // Canvas end
             }
             if (!slices.removeEntity(entity, sectionY)) {
                 LOGGER.warn("Failed to remove entity " + entity + " from entity slices (" + sectionX + "," + sectionZ + ")");
@@ -1041,4 +1062,4 @@ public abstract class EntityLookup implements LevelEntityGetter<Entity> {
         @Override
         public void onRemove(final Entity.RemovalReason reason) {}
     }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/player/RegionizedPlayerChunkLoader.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/player/RegionizedPlayerChunkLoader.java
index a88c7113652b268c0fdc355710b00f452f9b5431..2f8dc7f6aaa3a23ab3ce342c45951076f20df332 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/player/RegionizedPlayerChunkLoader.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/player/RegionizedPlayerChunkLoader.java
@@ -18,6 +18,7 @@ import it.unimi.dsi.fastutil.longs.LongArrayList;
 import it.unimi.dsi.fastutil.longs.LongComparator;
 import it.unimi.dsi.fastutil.longs.LongHeapPriorityQueue;
 import it.unimi.dsi.fastutil.longs.LongOpenHashSet;
+import me.dueris.canvas.thread.TickTaskHolder;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.network.protocol.game.ClientboundForgetLevelChunkPacket;
 import net.minecraft.network.protocol.game.ClientboundSetChunkCacheCenterPacket;
@@ -36,6 +37,9 @@ import net.minecraft.world.level.chunk.status.ChunkStatus;
 import net.minecraft.world.level.levelgen.BelowZeroRetrogen;
 import java.lang.invoke.VarHandle;
 import java.util.ArrayDeque;
+import java.util.Arrays;
+import java.util.Objects;
+import java.util.concurrent.ConcurrentLinkedDeque;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.function.Function;
@@ -321,7 +325,7 @@ public final class RegionizedPlayerChunkLoader {
 
         private boolean canGenerateChunks = true;
 
-        private final ArrayDeque<ChunkHolderManager.TicketOperation<?, ?>> delayedTicketOps = new ArrayDeque<>();
+        private final ConcurrentLinkedDeque<ChunkHolderManager.TicketOperation<?, ?>> delayedTicketOps = new ConcurrentLinkedDeque<>(); // Canvas
         private final LongOpenHashSet sentChunks = new LongOpenHashSet();
 
         private static final byte CHUNK_TICKET_STAGE_NONE           = 0;
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkHolderManager.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkHolderManager.java
index 5576924839c9c5a42a8c430c30cb5a6275ae6f23..7dd8e4b5897c03304eb51074bdcc114a33069e93 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkHolderManager.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkHolderManager.java
@@ -49,6 +49,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 import java.util.PrimitiveIterator;
+import java.util.concurrent.ConcurrentLinkedDeque;
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
@@ -79,7 +80,7 @@ public final class ChunkHolderManager {
     private final ChunkTaskScheduler taskScheduler;
     private long currentTick;
 
-    private final ArrayDeque<NewChunkHolder> pendingFullLoadUpdate = new ArrayDeque<>();
+    private final ConcurrentLinkedDeque<NewChunkHolder> pendingFullLoadUpdate = new ConcurrentLinkedDeque<>(); // Canvas
     private final ObjectRBTreeSet<NewChunkHolder> autoSaveQueue = new ObjectRBTreeSet<>((final NewChunkHolder c1, final NewChunkHolder c2) -> {
         if (c1 == c2) {
             return 0;
@@ -1009,7 +1010,7 @@ public final class ChunkHolderManager {
         }
         if (!io.papermc.paper.util.TickThread.isTickThread()) {
             this.taskScheduler.scheduleChunkTask(() -> {
-                final ArrayDeque<NewChunkHolder> pendingFullLoadUpdate = ChunkHolderManager.this.pendingFullLoadUpdate;
+                final ConcurrentLinkedDeque<NewChunkHolder> pendingFullLoadUpdate = ChunkHolderManager.this.pendingFullLoadUpdate; // Canvas
                 for (int i = 0, len = changedFullStatus.size(); i < len; ++i) {
                     pendingFullLoadUpdate.add(changedFullStatus.get(i));
                 }
@@ -1017,7 +1018,7 @@ public final class ChunkHolderManager {
                 ChunkHolderManager.this.processPendingFullUpdate();
             }, PrioritisedExecutor.Priority.HIGHEST);
         } else {
-            final ArrayDeque<NewChunkHolder> pendingFullLoadUpdate = this.pendingFullLoadUpdate;
+            final ConcurrentLinkedDeque<NewChunkHolder> pendingFullLoadUpdate = this.pendingFullLoadUpdate; // Canvas
             for (int i = 0, len = changedFullStatus.size(); i < len; ++i) {
                 pendingFullLoadUpdate.add(changedFullStatus.get(i));
             }
@@ -1351,7 +1352,7 @@ public final class ChunkHolderManager {
 
     // only call on tick thread
     private boolean processPendingFullUpdate() {
-        final ArrayDeque<NewChunkHolder> pendingFullLoadUpdate = this.pendingFullLoadUpdate;
+        final ConcurrentLinkedDeque<NewChunkHolder> pendingFullLoadUpdate = this.pendingFullLoadUpdate; // Canvas
 
         boolean ret = false;
 
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkTaskScheduler.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkTaskScheduler.java
index bfb53d1f2f96539fbe62946252faa506188560a1..ce2e45fa16f774b3c6f04d3354959a327f71a0d4 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkTaskScheduler.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ChunkTaskScheduler.java
@@ -21,6 +21,7 @@ import ca.spottedleaf.moonrise.patches.chunk_system.server.ChunkSystemMinecraftS
 import ca.spottedleaf.moonrise.patches.chunk_system.status.ChunkSystemChunkStep;
 import ca.spottedleaf.moonrise.patches.chunk_system.util.ParallelSearchRadiusIteration;
 import com.mojang.logging.LogUtils;
+import java.util.concurrent.LinkedBlockingDeque;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -855,7 +856,7 @@ public final class ChunkTaskScheduler {
         return true;
     }
 
-    public static final ArrayDeque<ChunkInfo> WAITING_CHUNKS = new ArrayDeque<>(); // stack
+    public static final LinkedBlockingDeque<ChunkInfo> WAITING_CHUNKS = new LinkedBlockingDeque<>(); // stack // Canvas
 
     public static final class ChunkInfo {
 
diff --git a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ThreadedTicketLevelPropagator.java b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ThreadedTicketLevelPropagator.java
index 310a8f80debadd64c2d962ebf83b7d0505ce6e42..e853fa9995751343835800cba29a0f92befe0a19 100644
--- a/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ThreadedTicketLevelPropagator.java
+++ b/src/main/java/ca/spottedleaf/moonrise/patches/chunk_system/scheduling/ThreadedTicketLevelPropagator.java
@@ -16,6 +16,8 @@ import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.List;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentLinkedDeque;
 import java.util.concurrent.locks.LockSupport;
 
 public abstract class ThreadedTicketLevelPropagator {
@@ -752,7 +754,7 @@ public abstract class ThreadedTicketLevelPropagator {
 
     private static final class Propagator {
 
-        private static final ArrayDeque<Propagator> CACHED_PROPAGATORS = new ArrayDeque<>();
+        private static final ConcurrentLinkedDeque<Propagator> CACHED_PROPAGATORS = new ConcurrentLinkedDeque<>(); // Canvas
         private static final int MAX_PROPAGATORS = Runtime.getRuntime().availableProcessors() * 2;
 
         private static Propagator acquirePropagator() {
diff --git a/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java b/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java
index 8932968b6c071b0d85ef34d1f562a7b42eb1156e..4c7212d166ee436368a4327467ccedf84a7cf003 100644
--- a/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java
+++ b/src/main/java/com/destroystokyo/paper/util/maplist/EntityList.java
@@ -2,6 +2,8 @@ package com.destroystokyo.paper.util.maplist;
 
 import it.unimi.dsi.fastutil.ints.Int2IntOpenHashMap;
 import net.minecraft.world.entity.Entity;
+
+import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
 import java.util.NoSuchElementException;
@@ -85,7 +87,7 @@ public final class EntityList implements Iterable<Entity> {
         // Canvas start
         // return this.entities[index];
         int i = 0;
-        for (Entity element : this.handle) {
+        for (Entity element : new ArrayList<>(this.handle)) { // Canvas
             if (i == index) {
                 return element;
             }
@@ -98,12 +100,7 @@ public final class EntityList implements Iterable<Entity> {
     public Entity[] getRawData() {
         // Canvas start
         // return this.entities;
-        Entity[] entityArray = new Entity[this.size()];
-        int i = 0;
-        for (Entity entity : this.handle) {
-            entityArray[i++] = entity;
-        }
-        return entityArray;
+        return this.handle.toArray(new Entity[0]); // Canvas
         // Canvas end
     }
 
diff --git a/src/main/java/io/papermc/paper/chunk/SingleThreadChunkRegionManager.java b/src/main/java/io/papermc/paper/chunk/SingleThreadChunkRegionManager.java
index a5f706d6f716b2a463ae58adcde69d9e665c7733..3a74bde3857b34afeb7e4c18c0e2ccf877615a11 100644
--- a/src/main/java/io/papermc/paper/chunk/SingleThreadChunkRegionManager.java
+++ b/src/main/java/io/papermc/paper/chunk/SingleThreadChunkRegionManager.java
@@ -212,21 +212,19 @@ public final class SingleThreadChunkRegionManager {
         region.dead = true;
 
         // destroy region state
-        for (final Iterator<RegionSection> iterator = region.sections.unsafeIterator(IteratorSafeOrderedReferenceSet.ITERATOR_FLAG_SEE_ADDITIONS); iterator.hasNext();) {
-            final RegionSection aliveSection = iterator.next();
+        for (final RegionSection aliveSection : region.sections) { // Canvas
             if (!aliveSection.hasChunks()) {
                 throw new IllegalStateException("Alive section '" + aliveSection.toStringWithRegion() + "' has no chunks!");
             }
             if (!this.regionsBySection.remove(aliveSection.regionCoordinate, aliveSection)) {
                 throw new IllegalStateException("Cannot remove alive section '" +
-                        aliveSection.toStringWithRegion() + "' from section state! State at section coordinate: " +
-                        this.regionsBySection.get(aliveSection.regionCoordinate));
+                    aliveSection.toStringWithRegion() + "' from section state! State at section coordinate: " + // Canvas
+                    this.regionsBySection.get(aliveSection.regionCoordinate)); // Canvas
             }
         }
 
         // rebuild regions
-        for (final Iterator<RegionSection> iterator = region.sections.unsafeIterator(IteratorSafeOrderedReferenceSet.ITERATOR_FLAG_SEE_ADDITIONS); iterator.hasNext();) {
-            final RegionSection aliveSection = iterator.next();
+        for (final RegionSection aliveSection : region.sections) { // Canvas
             this.getOrCreateAndMergeSection(aliveSection.getSectionX(), aliveSection.getSectionZ(), aliveSection);
         }
     }
@@ -245,10 +243,6 @@ public final class SingleThreadChunkRegionManager {
             this.regionData = regionManager.regionDataSupplier.get();
         }
 
-        public IteratorSafeOrderedReferenceSet.Iterator<RegionSection> getSections() {
-            return this.sections.iterator(IteratorSafeOrderedReferenceSet.ITERATOR_FLAG_SEE_ADDITIONS);
-        }
-
         protected final double getDeadSectionPercent() {
             return (double)this.deadSections.size() / (double)this.sections.size();
         }
@@ -307,9 +301,7 @@ public final class SingleThreadChunkRegionManager {
                 this.regionManager.removeFromRecalcQueue(this);
             }
 
-            for (final Iterator<RegionSection> iterator = this.sections.unsafeIterator(IteratorSafeOrderedReferenceSet.ITERATOR_FLAG_SEE_ADDITIONS); iterator.hasNext();) {
-                final RegionSection section = iterator.next();
-
+            for (final RegionSection section : this.sections) { // Canvas
                 if (!mergeTarget.addRegionSection(section)) {
                     throw new IllegalStateException("Target cannot contain source's sections! Source " + this + ", target " + mergeTarget);
                 }
@@ -350,7 +342,7 @@ public final class SingleThreadChunkRegionManager {
 
             ret.append("sectionCount=").append(this.sections.size()).append(',');
             ret.append("sections=[");
-            for (final Iterator<RegionSection> iterator = this.sections.unsafeIterator(IteratorSafeOrderedReferenceSet.ITERATOR_FLAG_SEE_ADDITIONS); iterator.hasNext();) {
+            for (final Iterator<RegionSection> iterator = this.sections.iterator(); iterator.hasNext();) { // Canvas
                 final RegionSection section = iterator.next();
                 ret.append(section);
                 if (iterator.hasNext()) {
diff --git a/src/main/java/io/papermc/paper/command/MSPTCommand.java b/src/main/java/io/papermc/paper/command/MSPTCommand.java
index 8b5293b0c696ef21d0101493ffa41b60bf0bc86b..945f827e061d03b78948ea78a029c489017085a9 100644
--- a/src/main/java/io/papermc/paper/command/MSPTCommand.java
+++ b/src/main/java/io/papermc/paper/command/MSPTCommand.java
@@ -81,7 +81,7 @@ public final class MSPTCommand extends Command {
         return true;
     }
 
-    private static List<Component> eval(long[] times) {
+    public static List<Component> eval(long[] times) { // Canvas - private -> public
         long min = Integer.MAX_VALUE;
         long max = 0L;
         long total = 0L;
@@ -96,7 +96,7 @@ public final class MSPTCommand extends Command {
         return Arrays.asList(getColor(avgD), getColor(minD), getColor(maxD));
     }
 
-    private static Component getColor(double avg) {
+    public static Component getColor(double avg) { // Canvas - private -> public
         return text(DF.format(avg), avg >= 50 ? RED : avg >= 40 ? YELLOW : GREEN);
     }
 }
diff --git a/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java b/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
index 777b789fdcdf297309cfb36fc7f77e3fdb6327ca..73e3166785ff92511b974e2c28c72a503851639f 100644
--- a/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
+++ b/src/main/java/io/papermc/paper/command/subcommands/EntityCommand.java
@@ -103,6 +103,7 @@ public final class EntityCommand implements PaperSubcommand {
             Map<ResourceLocation, Integer> nonEntityTicking = Maps.newHashMap();
             ServerChunkCache chunkProviderServer = world.getChunkSource();
             world.getAllEntities().forEach(e -> {
+                if (e == null) return; // Canvas
                 ResourceLocation key = EntityType.getKey(e.getType());
 
                 MutablePair<Integer, Map<ChunkPos, Integer>> info = list.computeIfAbsent(key, k -> MutablePair.of(0, Maps.newHashMap()));
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
index 3aa3b0be2285def7a068f1f440ee5b7736f1d96c..05b68873a216766b4185c226860ffc9653094756 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
@@ -39,7 +39,7 @@ class PaperEventManager {
         if (event.getHandlers().getRegisteredListeners().length == 0) return;
         if (event.isAsynchronous() && this.server.isPrimaryThread()) {
             throw new IllegalStateException(event.getEventName() + " may only be triggered asynchronously.");
-        } else if (!event.isAsynchronous() && !this.server.isPrimaryThread() && !this.server.isStopping()) {
+        } else if (!event.isAsynchronous() && !this.server.isPrimaryThread() && !this.server.isStopping() && !Thread.currentThread().getName().startsWith("WorldTicker")) { // Canvas - multithreaded world ticking
             throw new IllegalStateException(event.getEventName() + " may only be triggered synchronously.");
         }
 
diff --git a/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java b/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java
index 62484ebf4550b05182f693a3180bbac5d5fd906d..566609789ab52b891f00de31d5645865e540819e 100644
--- a/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java
+++ b/src/main/java/io/papermc/paper/threadedregions/EntityScheduler.java
@@ -9,6 +9,7 @@ import org.bukkit.craftbukkit.entity.CraftEntity;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.concurrent.ConcurrentLinkedDeque;
 import java.util.function.Consumer;
 
 /**
@@ -44,7 +45,7 @@ public final class EntityScheduler {
     private final Object stateLock = new Object();
     private final Long2ObjectOpenHashMap<List<ScheduledTask>> oneTimeDelayed = new Long2ObjectOpenHashMap<>();
 
-    private final ArrayDeque<ScheduledTask> currentlyExecuting = new ArrayDeque<>();
+    private final ConcurrentLinkedDeque<ScheduledTask> currentlyExecuting = new ConcurrentLinkedDeque<>(); // Canvas
 
     public EntityScheduler(final CraftEntity entity) {
         this.entity = Validate.notNull(entity);
diff --git a/src/main/java/io/papermc/paper/util/maplist/IteratorSafeOrderedReferenceSet.java b/src/main/java/io/papermc/paper/util/maplist/IteratorSafeOrderedReferenceSet.java
index 0fd814f1d65c111266a2b20f86561839a4cef755..0683fb9b39deba8986841e8e2287c5d61e139ad1 100644
--- a/src/main/java/io/papermc/paper/util/maplist/IteratorSafeOrderedReferenceSet.java
+++ b/src/main/java/io/papermc/paper/util/maplist/IteratorSafeOrderedReferenceSet.java
@@ -1,334 +1,84 @@
 package io.papermc.paper.util.maplist;
 
-import it.unimi.dsi.fastutil.objects.Reference2IntLinkedOpenHashMap;
-import it.unimi.dsi.fastutil.objects.Reference2IntMap;
-import org.bukkit.Bukkit;
-import java.util.Arrays;
-import java.util.NoSuchElementException;
+import java.lang.ref.WeakReference;
+import java.util.Iterator;
+import java.util.Set;
+import java.util.concurrent.CopyOnWriteArraySet;
 
-public final class IteratorSafeOrderedReferenceSet<E> {
-
-    public static final int ITERATOR_FLAG_SEE_ADDITIONS = 1 << 0;
-
-    protected final Reference2IntLinkedOpenHashMap<E> indexMap;
-    protected int firstInvalidIndex = -1;
-
-    /* list impl */
-    protected E[] listElements;
-    protected int listSize;
-
-    protected final double maxFragFactor;
-
-    protected int iteratorCount;
-
-    private final boolean threadRestricted;
+public class IteratorSafeOrderedReferenceSet<T> implements Iterable<T> {
+    private final Set<WeakReference<T>> set;
+    private final Set<T> cachedValueSet;
 
     public IteratorSafeOrderedReferenceSet() {
-        this(16, 0.75f, 16, 0.2);
+        this.set = new CopyOnWriteArraySet<>();
+        this.cachedValueSet = new CopyOnWriteArraySet<>();
     }
 
-    public IteratorSafeOrderedReferenceSet(final boolean threadRestricted) {
-        this(16, 0.75f, 16, 0.2, threadRestricted);
-    }
-
-    public IteratorSafeOrderedReferenceSet(final int setCapacity, final float setLoadFactor, final int arrayCapacity,
-                                           final double maxFragFactor) {
-        this(setCapacity, setLoadFactor, arrayCapacity, maxFragFactor, false);
-    }
-    public IteratorSafeOrderedReferenceSet(final int setCapacity, final float setLoadFactor, final int arrayCapacity,
-                                           final double maxFragFactor, final boolean threadRestricted) {
-        this.indexMap = new Reference2IntLinkedOpenHashMap<>(setCapacity, setLoadFactor);
-        this.indexMap.defaultReturnValue(-1);
-        this.maxFragFactor = maxFragFactor;
-        this.listElements = (E[])new Object[arrayCapacity];
-        this.threadRestricted = threadRestricted;
-    }
-
-    /*
-    public void check() {
-        int iterated = 0;
-        ReferenceOpenHashSet<E> check = new ReferenceOpenHashSet<>();
-        if (this.listElements != null) {
-            for (int i = 0; i < this.listSize; ++i) {
-                Object obj = this.listElements[i];
-                if (obj != null) {
-                    iterated++;
-                    if (!check.add((E)obj)) {
-                        throw new IllegalStateException("contains duplicate");
-                    }
-                    if (!this.contains((E)obj)) {
-                        throw new IllegalStateException("desync");
-                    }
-                }
-            }
-        }
-
-        if (iterated != this.size()) {
-            throw new IllegalStateException("Size is mismatched! Got " + iterated + ", expected " + this.size());
-        }
-
-        check.clear();
-        iterated = 0;
-        for (final java.util.Iterator<E> iterator = this.unsafeIterator(IteratorSafeOrderedReferenceSet.ITERATOR_FLAG_SEE_ADDITIONS); iterator.hasNext();) {
-            final E element = iterator.next();
-            iterated++;
-            if (!check.add(element)) {
-                throw new IllegalStateException("contains duplicate (iterator is wrong)");
-            }
-            if (!this.contains(element)) {
-                throw new IllegalStateException("desync (iterator is wrong)");
-            }
-        }
-
-        if (iterated != this.size()) {
-            throw new IllegalStateException("Size is mismatched! (iterator is wrong) Got " + iterated + ", expected " + this.size());
+    public synchronized boolean add(T element) {
+        if (element == null) {
+            throw new NullPointerException("Element cannot be null");
         }
-    }
-    */
-
-    protected final boolean allowSafeIteration() {
-        return !this.threadRestricted || Bukkit.isPrimaryThread();
-    }
-
-    protected final double getFragFactor() {
-        return 1.0 - ((double)this.indexMap.size() / (double)this.listSize);
+        cleanUp();
+        cachedValueSet.add(element);
+        return set.add(new WeakReference<>(element));
     }
 
-    public int createRawIterator() {
-        if (this.allowSafeIteration()) {
-            ++this.iteratorCount;
+    public synchronized boolean remove(T element) {
+        if (element == null) {
+            throw new NullPointerException("Element cannot be null");
         }
-        if (this.indexMap.isEmpty()) {
-            return -1;
-        } else {
-            return this.firstInvalidIndex == 0 ? this.indexMap.getInt(this.indexMap.firstKey()) : 0;
-        }
-    }
-
-    public int advanceRawIterator(final int index) {
-        final E[] elements = this.listElements;
-        int ret = index + 1;
-        for (int len = this.listSize; ret < len; ++ret) {
-            if (elements[ret] != null) {
-                return ret;
+        cleanUp();
+        cachedValueSet.remove(element);
+        for (WeakReference<T> ref : set) {
+            T obj = ref.get();
+            if (obj != null && obj.equals(element)) {
+                return set.remove(ref);
             }
         }
-
-        return -1;
+        return false;
     }
 
-    public void finishRawIterator() {
-        if (this.allowSafeIteration() && --this.iteratorCount == 0) {
-            if (this.getFragFactor() >= this.maxFragFactor) {
-                this.defrag();
-            }
+    public synchronized boolean contains(T element) {
+        if (element == null) {
+            throw new NullPointerException("Element cannot be null");
         }
-    }
-
-    public boolean remove(final E element) {
-        final int index = this.indexMap.removeInt(element);
-        if (index >= 0) {
-            if (this.firstInvalidIndex < 0 || index < this.firstInvalidIndex) {
-                this.firstInvalidIndex = index;
-            }
-            if (this.listElements[index] != element) {
-                throw new IllegalStateException();
-            }
-            this.listElements[index] = null;
-            if (this.allowSafeIteration() && this.iteratorCount == 0 && this.getFragFactor() >= this.maxFragFactor) {
-                this.defrag();
+        cleanUp();
+        for (WeakReference<T> ref : set) {
+            T obj = ref.get();
+            if (obj != null && obj.equals(element)) {
+                return true;
             }
-            //this.check();
-            return true;
         }
         return false;
     }
 
-    public boolean contains(final E element) {
-        return this.indexMap.containsKey(element);
-    }
-
-    public boolean add(final E element) {
-        final int listSize = this.listSize;
-
-        final int previous = this.indexMap.putIfAbsent(element, listSize);
-        if (previous != -1) {
-            return false;
-        }
-
-        if (listSize >= this.listElements.length) {
-            this.listElements = Arrays.copyOf(this.listElements, listSize * 2);
-        }
-        this.listElements[listSize] = element;
-        this.listSize = listSize + 1;
-
-        //this.check();
-        return true;
-    }
-
-    protected void defrag() {
-        if (this.firstInvalidIndex < 0) {
-            return; // nothing to do
-        }
-
-        if (this.indexMap.isEmpty()) {
-            Arrays.fill(this.listElements, 0, this.listSize, null);
-            this.listSize = 0;
-            this.firstInvalidIndex = -1;
-            //this.check();
-            return;
-        }
-
-        final E[] backingArray = this.listElements;
-
-        int lastValidIndex;
-        java.util.Iterator<Reference2IntMap.Entry<E>> iterator;
-
-        if (this.firstInvalidIndex == 0) {
-            iterator = this.indexMap.reference2IntEntrySet().fastIterator();
-            lastValidIndex = 0;
-        } else {
-            lastValidIndex = this.firstInvalidIndex;
-            final E key = backingArray[lastValidIndex - 1];
-            iterator = this.indexMap.reference2IntEntrySet().fastIterator(new Reference2IntMap.Entry<E>() {
-                @Override
-                public int getIntValue() {
-                    throw new UnsupportedOperationException();
-                }
-
-                @Override
-                public int setValue(int i) {
-                    throw new UnsupportedOperationException();
-                }
-
-                @Override
-                public E getKey() {
-                    return key;
-                }
-            });
-        }
-
-        while (iterator.hasNext()) {
-            final Reference2IntMap.Entry<E> entry = iterator.next();
-
-            final int newIndex = lastValidIndex++;
-            backingArray[newIndex] = entry.getKey();
-            entry.setValue(newIndex);
+    private synchronized void cleanUp() {
+        Iterator<WeakReference<T>> it = set.iterator();
+        while (it.hasNext()) {
+            WeakReference<T> ref = it.next();
+            if (ref.get() == null) {
+                it.remove();
+            }
         }
-
-        // cleanup end
-        Arrays.fill(backingArray, lastValidIndex, this.listSize, null);
-        this.listSize = lastValidIndex;
-        this.firstInvalidIndex = -1;
-        //this.check();
-    }
-
-    public E rawGet(final int index) {
-        return this.listElements[index];
-    }
-
-    public int size() {
-        // always returns the correct amount - listSize can be different
-        return this.indexMap.size();
-    }
-
-    public IteratorSafeOrderedReferenceSet.Iterator<E> iterator() {
-        return this.iterator(0);
-    }
-
-    public IteratorSafeOrderedReferenceSet.Iterator<E> iterator(final int flags) {
-        if (this.allowSafeIteration()) {
-            ++this.iteratorCount;
+        Iterator<T> elIt = cachedValueSet.iterator();
+        while (elIt.hasNext()) {
+            T ref = elIt.next();
+            if (ref == null) {
+                elIt.remove();
+            }
         }
-        return new BaseIterator<>(this, true, (flags & ITERATOR_FLAG_SEE_ADDITIONS) != 0 ? Integer.MAX_VALUE : this.listSize);
     }
 
-    public java.util.Iterator<E> unsafeIterator() {
-        return this.unsafeIterator(0);
-    }
-    public java.util.Iterator<E> unsafeIterator(final int flags) {
-        return new BaseIterator<>(this, false, (flags & ITERATOR_FLAG_SEE_ADDITIONS) != 0 ? Integer.MAX_VALUE : this.listSize);
+    @Override
+    public synchronized Iterator<T> iterator() {
+        cleanUp();
+        return cachedValueSet.iterator();
     }
 
-    public static interface Iterator<E> extends java.util.Iterator<E> {
-
-        public void finishedIterating();
-
+    public synchronized int size() {
+        cleanUp();
+        return set.size();
     }
 
-    protected static final class BaseIterator<E> implements IteratorSafeOrderedReferenceSet.Iterator<E> {
-
-        protected final IteratorSafeOrderedReferenceSet<E> set;
-        protected final boolean canFinish;
-        protected final int maxIndex;
-        protected int nextIndex;
-        protected E pendingValue;
-        protected boolean finished;
-        protected E lastReturned;
-
-        protected BaseIterator(final IteratorSafeOrderedReferenceSet<E> set, final boolean canFinish, final int maxIndex) {
-            this.set = set;
-            this.canFinish = canFinish;
-            this.maxIndex = maxIndex;
-        }
-
-        @Override
-        public boolean hasNext() {
-            if (this.finished) {
-                return false;
-            }
-            if (this.pendingValue != null) {
-                return true;
-            }
-
-            final E[] elements = this.set.listElements;
-            int index, len;
-            for (index = this.nextIndex, len = Math.min(this.maxIndex, this.set.listSize); index < len; ++index) {
-                final E element = elements[index];
-                if (element != null) {
-                    this.pendingValue = element;
-                    this.nextIndex = index + 1;
-                    return true;
-                }
-            }
-
-            this.nextIndex = index;
-            return false;
-        }
-
-        @Override
-        public E next() {
-            if (!this.hasNext()) {
-                throw new NoSuchElementException();
-            }
-            final E ret = this.pendingValue;
-
-            this.pendingValue = null;
-            this.lastReturned = ret;
-
-            return ret;
-        }
-
-        @Override
-        public void remove() {
-            final E lastReturned = this.lastReturned;
-            if (lastReturned == null) {
-                throw new IllegalStateException();
-            }
-            this.lastReturned = null;
-            this.set.remove(lastReturned);
-        }
-
-        @Override
-        public void finishedIterating() {
-            if (this.finished || !this.canFinish) {
-                throw new IllegalStateException();
-            }
-            this.lastReturned = null;
-            this.finished = true;
-            if (this.set.allowSafeIteration()) {
-                this.set.finishRawIterator();
-            }
-        }
-    }
 }
+
diff --git a/src/main/java/io/papermc/paper/util/player/NearbyPlayers.java b/src/main/java/io/papermc/paper/util/player/NearbyPlayers.java
index c3ce8a42dddd76b7189ad5685b23f9d9f8ccadb3..43e7e2b78b7b2ec9ced2f89d1ab72981634ef765 100644
--- a/src/main/java/io/papermc/paper/util/player/NearbyPlayers.java
+++ b/src/main/java/io/papermc/paper/util/player/NearbyPlayers.java
@@ -9,6 +9,7 @@ import net.minecraft.core.BlockPos;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.level.ChunkPos;
+import net.minecraft.server.MinecraftServer;
 
 public final class NearbyPlayers {
 
@@ -34,6 +35,7 @@ public final class NearbyPlayers {
     private final ServerLevel world;
     private final Reference2ReferenceOpenHashMap<ServerPlayer, TrackedPlayer[]> players = new Reference2ReferenceOpenHashMap<>();
     private final Long2ReferenceOpenHashMap<TrackedChunk> byChunk = new Long2ReferenceOpenHashMap<>();
+    private static final ReferenceList<ServerPlayer> emptyList = new ReferenceList<>(); // Canvas
 
     public NearbyPlayers(final ServerLevel world) {
         this.world = world;
@@ -91,24 +93,28 @@ public final class NearbyPlayers {
     }
 
     public ReferenceList<ServerPlayer> getPlayers(final BlockPos pos, final NearbyMapType type) {
+        if (MinecraftServer.getServer().getPlayerList().hasPlayers) return emptyList; // Canvas - if there are no players dont waste time checking
         final TrackedChunk chunk = this.byChunk.get(CoordinateUtils.getChunkKey(pos));
 
         return chunk == null ? null : chunk.players[type.ordinal()];
     }
 
     public ReferenceList<ServerPlayer> getPlayers(final ChunkPos pos, final NearbyMapType type) {
+        if (MinecraftServer.getServer().getPlayerList().hasPlayers) return emptyList; // Canvas - if there are no players dont waste time checking
         final TrackedChunk chunk = this.byChunk.get(CoordinateUtils.getChunkKey(pos));
 
         return chunk == null ? null : chunk.players[type.ordinal()];
     }
 
     public ReferenceList<ServerPlayer> getPlayersByChunk(final int chunkX, final int chunkZ, final NearbyMapType type) {
+        if (MinecraftServer.getServer().getPlayerList().hasPlayers) return emptyList; // Canvas - if there are no players dont waste time checking
         final TrackedChunk chunk = this.byChunk.get(CoordinateUtils.getChunkKey(chunkX, chunkZ));
 
         return chunk == null ? null : chunk.players[type.ordinal()];
     }
 
     public ReferenceList<ServerPlayer> getPlayersByBlock(final int blockX, final int blockZ, final NearbyMapType type) {
+        if (MinecraftServer.getServer().getPlayerList().hasPlayers) return emptyList; // Canvas - if there are no players dont waste time checking
         final TrackedChunk chunk = this.byChunk.get(CoordinateUtils.getChunkKey(blockX >> 4, blockZ >> 4));
 
         return chunk == null ? null : chunk.players[type.ordinal()];
diff --git a/src/main/java/me/dueris/canvas/CanvasConfig.java b/src/main/java/me/dueris/canvas/CanvasConfig.java
index 6efae16d152200660787716094061ffd760410fd..24f00e8ec31a7cf4ef554c778cebbe340970135a 100644
--- a/src/main/java/me/dueris/canvas/CanvasConfig.java
+++ b/src/main/java/me/dueris/canvas/CanvasConfig.java
@@ -3,6 +3,7 @@ package me.dueris.canvas;
 import com.google.common.base.Throwables;
 import com.google.common.collect.ImmutableMap;
 import com.mojang.datafixers.util.Pair;
+import me.dueris.canvas.command.CanvasCommand;
 import net.kyori.adventure.bossbar.BossBar;
 import net.kyori.adventure.text.minimessage.MiniMessage;
 import net.minecraft.core.registries.BuiltInRegistries;
@@ -52,7 +53,7 @@ public class CanvasConfig {
     private static File CONFIG_FILE;
     public static YamlConfiguration config;
 
-    private static Map<String, Command> commands;
+    private static Map<String, Command> commands = new HashMap<>();
 
     public static int version;
     static boolean verbose;
@@ -70,6 +71,8 @@ public class CanvasConfig {
         config.options().header(HEADER);
         config.options().copyDefaults(true);
 
+        commands.put("canvas", new CanvasCommand("canvas"));
+
         version = getInt("config-version", 33);
         set("config-version", 33);
 
diff --git a/src/main/java/me/dueris/canvas/command/CanvasCommand.java b/src/main/java/me/dueris/canvas/command/CanvasCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..ed61195a49ddd7e377cbd2f30d5deee5a883de78
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/command/CanvasCommand.java
@@ -0,0 +1,232 @@
+package me.dueris.canvas.command;
+
+import java.io.File;
+import java.math.BigDecimal;
+import java.math.RoundingMode;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashMap;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+import com.mojang.datafixers.util.Pair;
+import me.dueris.canvas.world.TickManagerHolder;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.TextComponent;
+import net.kyori.adventure.text.format.TextColor;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.ServerTickRateManager;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.TickRateManager;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+import org.bukkit.craftbukkit.CraftServer;
+import org.purpurmc.purpur.PurpurConfig;
+
+import static net.kyori.adventure.text.Component.text;
+import static net.kyori.adventure.text.format.NamedTextColor.GOLD;
+import static net.kyori.adventure.text.format.NamedTextColor.GRAY;
+import static net.kyori.adventure.text.format.NamedTextColor.GREEN;
+import static net.kyori.adventure.text.format.NamedTextColor.RED;
+import static net.kyori.adventure.text.format.NamedTextColor.YELLOW;
+
+public class CanvasCommand extends Command {
+    public CanvasCommand(String name) {
+        super(name);
+        this.description = "Canvas related commands";
+        this.usageMessage = "/canvas [tps | version]";
+        this.setPermission("bukkit.command.canvas");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return Stream.of("tps", "version")
+                    .filter(arg -> arg.startsWith(args[0].toLowerCase()))
+                    .collect(Collectors.toList());
+        }
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+        CraftServer server = (CraftServer) sender.getServer();
+        List<Pair<ServerTickRateManager, Float>> tpsValues = server.getServer().getAllTickRateManagers().stream().map(ServerTickRateManager::toTpsPair).toList();
+
+        Pair<ServerTickRateManager, Float> minMSPT = tpsValues.stream()
+            .min(Comparator.comparing(Pair::getSecond))
+            .orElseThrow(() -> new RuntimeException("List is empty"));
+
+        Pair<ServerTickRateManager, Float> maxMSPT = tpsValues.stream()
+            .max(Comparator.comparing(Pair::getSecond))
+            .orElseThrow(() -> new RuntimeException("List is empty"));
+
+        Float median = Float.valueOf((minMSPT.getSecond() + maxMSPT.getSecond()) / 2);
+        Float min = minMSPT.getSecond();
+        Float max = maxMSPT.getSecond();
+
+        if (args.length != 1) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        if (args[0].equalsIgnoreCase("tps")) {
+            TextComponent base = Component.text("").color(TextColor.color(0x4EA2ED));
+            sender.sendMessage(base.append(
+                Component.text("==================================")));
+            sender.sendMessage(base.append(
+                Component.text("Server Status Report"))
+                .color(TextColor.color(6860008)));
+            sender.sendMessage(base.append(
+                Component.text(" - Online Players: "))
+                .color(TextColor.color(0x2F8FE9))
+                .append(base.append(
+                    Component.text(String.valueOf(server.getOnlinePlayers().size())).color(TextColor.color(10407396)))));
+            sender.sendMessage(base.append(
+                Component.text(" - Running TickHolders: "))
+                .color(TextColor.color(0x2F8FE9))
+                .append(base.append(
+                    Component.text(String.valueOf(server.getServer().getAllTickRateManagers().size())).color(TextColor.color(10407396)))));
+            sender.sendMessage(base.append(
+                Component.text(" - Lowest TickHolder TPS:"))
+                .color(TextColor.color(0x2F8FE9))
+                .append(base.append(
+                    Component.text(" ").append(createColoredComponent(simplifyNumber(min.doubleValue()).toString(), simplifyNumber(min.doubleValue()).floatValue())))));
+            sender.sendMessage(base.append(
+                Component.text(" - Median TickHolder TPS:"))
+                .color(TextColor.color(0x2F8FE9))
+                .append(base.append(
+                    Component.text(" ").append(createColoredComponent(simplifyNumber(median.doubleValue()).toString(), simplifyNumber(median.doubleValue()).floatValue())))));
+            sender.sendMessage(base.append(
+                Component.text(" - Highest TickHolder TPS:"))
+                .color(TextColor.color(0x2F8FE9))
+                .append(base.append(
+                    Component.text(" ").append(createColoredComponent(simplifyNumber(max.doubleValue()).toString(), simplifyNumber(max.doubleValue()).floatValue())))));
+
+            sender.sendMessage(base.append(Component.text("==================================")));
+            List<Pair<ServerTickRateManager, Long>> top3Pairs = server.getServer().getAllTickRateManagers().stream().map(ServerTickRateManager::toNanoPair)
+                .sorted(Comparator.comparing(Pair<ServerTickRateManager, Long>::getSecond))
+                .limit(3)
+                .collect(Collectors.toList());
+            sender.sendMessage(base.append(
+                Component.text("Detailed Status Report ").append(Component.text("(Highest 3)").color(TextColor.color(6860008))))
+                .color(TextColor.color(0x2F8FE9)));
+            for (Pair<ServerTickRateManager, Long> pair : top3Pairs) {
+                TickManagerHolder ticker = pair.getFirst().getHolder();
+                Integer chunkCount = ticker instanceof ServerLevel level ? level.getChunkSource().getLoadedChunksCount() : 0;
+                Integer playerCount = ticker instanceof ServerLevel level ? level.players().size() : 0;
+                Integer entityCount = ticker instanceof ServerLevel level ? level.moonrise$getEntityLookup().entityCount() : 0;
+                sender.sendMessage(base.append(
+                    Component.text(" - TickHolder Level ").append(Component.text("[{}]".replace("{}", ticker.getHolderName())).color(TextColor.color(10407396))))
+                );
+                sender.sendMessage(base.append(
+                    Component.text("   ").append(
+                        getColor((double) ticker.getNanoSecondsFromLastTick() / 1_000_000)
+                        .append(base.append(Component.text(" MSPT at ")))
+                        .append(createColoredComponent(simplifyNumber(ticker.getTps()).toString(), ticker.getTps()))
+                        .append(base.append(Component.text(" TPS")))
+                    )
+                ));
+                sender.sendMessage(base.append(
+                    Component.text("   ").append(
+                        base.append(Component.text("Chunks: ").append(Component.text(chunkCount.toString()).color(TextColor.color(10407396))))
+                        .append(base.append(Component.text(" Players: ").append(Component.text(playerCount.toString()).color(TextColor.color(10407396)))))
+                        .append(base.append(Component.text(" Entities: ").append(Component.text(entityCount.toString()).color(TextColor.color(10407396)))))
+                    )
+                ));
+            }
+
+            sender.sendMessage(base.append(Component.text("==================================")));
+        } else if (args[0].equalsIgnoreCase("version")) {
+            Command verCmd = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+            if (verCmd != null) {
+                return verCmd.execute(sender, commandLabel, new String[0]);
+            }
+        }
+
+        return true;
+    }
+
+    public Component createColoredUtilComponent(String text, float value) {
+        float clampedValue = Math.max(0, Math.min(100, value));
+        float ratio = clampedValue / 100.0f;
+
+        int red, green;
+
+        if (ratio <= 0.18) {
+            red = 0;
+            green = 255;
+        } else if (ratio <= 0.5) {
+            float normalizedRatio = (ratio - 0.18f) / (0.5f - 0.18f);
+            red = (int) (normalizedRatio * 255);
+            green = 255;
+        } else {
+            float normalizedRatio = (ratio - 0.5f) / (1.0f - 0.5f);
+            red = 255;
+            green = (int) ((1.0f - normalizedRatio) * 255);
+        }
+
+        TextColor color = TextColor.color(red, green, 0);
+        return Component.text(text).color(color);
+    }
+
+    public static Double makeMsptReadable(double number) {
+        if (number >= 1.0) {
+            return Double.parseDouble(String.format("%.2f", number));
+        }
+
+        double precision = 0.1;
+        while (number < precision) {
+            precision /= 10;
+        }
+
+        return Math.round(number / precision) * precision;
+    }
+
+    public static List<Component> eval(long[] times) {
+        long min = Long.MAX_VALUE;
+        long max = 0L;
+        long total = 0L;
+        for (long value : times) {
+            if (value > 0L && value < min) min = value;
+            if (value > max) max = value;
+            total += value;
+        }
+        double avgD = total / (double) times.length * 1.0E-6D;
+        double minD = min * 1.0E-6D;
+        double maxD = max * 1.0E-6D;
+        return java.util.Arrays.asList(getColor(avgD), getColor(minD), getColor(maxD));
+    }
+
+    public static Component getColor(double avg) {
+        return text(makeMsptReadable(avg).toString(), avg >= 50 ? RED : avg >= 40 ? YELLOW : GREEN);
+    }
+
+    public static Double simplifyNumber(double number) {
+        if (number >= 1.0) {
+            return Math.round(number * 100.0) / 100.0;
+        }
+
+        double precision = 0.1;
+        while (number < precision) {
+            precision /= 10;
+        }
+
+        return Math.round(number / precision) * precision;
+    }
+
+    public Component createColoredComponent(String text, float value) {
+        float clampedValue = Math.max(0, Math.min(20, value));
+        float ratio = clampedValue / 20.0f;
+
+        int red = (int) ((1 - ratio) * 255);
+        int green = (int) (ratio * 255);
+
+        TextColor color = TextColor.color(red, green, 0);
+        return Component.text(text).color(color);
+    }
+}
diff --git a/src/main/java/me/dueris/canvas/thread/NamedTickThreadFactory.java b/src/main/java/me/dueris/canvas/thread/NamedTickThreadFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..65a1d87f48d8d9bdaea763bd14136591a9938bf9
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/thread/NamedTickThreadFactory.java
@@ -0,0 +1,63 @@
+package me.dueris.canvas.thread;
+
+import com.mojang.logging.LogUtils;
+import io.papermc.paper.util.TickThread;
+import org.slf4j.Logger;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class NamedTickThreadFactory implements ThreadFactory { // Extends the functionality of the NamedThreadFactory by vanilla
+    private static final Logger LOGGER = LogUtils.getLogger();
+    private final ThreadGroup group;
+    private final AtomicInteger threadNumber = new AtomicInteger(1);
+    private final String namePrefix;
+    private int priority;
+    private boolean daemon;
+
+    public NamedTickThreadFactory(String name) {
+        SecurityManager securityManager = System.getSecurityManager();
+        this.group = securityManager != null ? securityManager.getThreadGroup() : Thread.currentThread().getThreadGroup();
+        this.namePrefix = name + "-";
+        this.priority = 5;
+        this.daemon = false;
+    }
+
+    public NamedTickThreadFactory(String name, int priority){
+        SecurityManager securityManager = System.getSecurityManager();
+        this.group = securityManager != null ? securityManager.getThreadGroup() : Thread.currentThread().getThreadGroup();
+        this.namePrefix = name + "-";
+        this.priority = priority;
+        this.daemon = false;
+    }
+
+    public NamedTickThreadFactory(String name, int priority, String threadName){
+        SecurityManager securityManager = System.getSecurityManager();
+        this.group = securityManager != null ? securityManager.getThreadGroup() : Thread.currentThread().getThreadGroup();
+        this.namePrefix = name + "-";
+        this.priority = priority;
+        this.daemon = false;
+    }
+
+    public NamedTickThreadFactory(String name, int priority, String threadName, boolean daemon){
+        SecurityManager securityManager = System.getSecurityManager();
+        this.group = securityManager != null ? securityManager.getThreadGroup() : Thread.currentThread().getThreadGroup();
+        this.namePrefix = name + "-";
+        this.priority = priority;
+        this.daemon = daemon;
+    }
+
+    @Override
+    public Thread newThread(Runnable runnable) {
+        TickThread thread = new TickThread(runnable, namePrefix + this.threadNumber.getAndIncrement());
+        thread.setDaemon(daemon);
+        thread.setUncaughtExceptionHandler((threadx, throwable) -> {
+            LOGGER.error("Caught exception in thread {} from {}", threadx, runnable);
+            LOGGER.error("", throwable);
+        });
+        if (thread.getPriority() != priority) {
+            thread.setPriority(priority);
+        }
+
+        return thread;
+    }
+}
diff --git a/src/main/java/me/dueris/canvas/thread/ScheduledTask.java b/src/main/java/me/dueris/canvas/thread/ScheduledTask.java
new file mode 100644
index 0000000000000000000000000000000000000000..2cc5415c50c9c6aaf143a8a29c6e4ae0ea58bff3
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/thread/ScheduledTask.java
@@ -0,0 +1,25 @@
+package me.dueris.canvas.thread;
+
+public class ScheduledTask {
+    Runnable runnable;
+    boolean onMain;
+    TickTaskHolder.Timing timing;
+    
+    public ScheduledTask(Runnable runnable, boolean onMain, TickTaskHolder.Timing timing) {
+        this.runnable = runnable;
+        this.onMain = onMain;
+        this.timing = timing;
+    }
+
+    public boolean canRun(TickTaskHolder.Timing timing) {
+        return this.timing == timing;
+    }
+
+    public boolean serverLevel() {
+        return !this.onMain;
+    }
+
+    public void run() {
+        this.runnable.run();
+    }
+}
diff --git a/src/main/java/me/dueris/canvas/thread/TickTaskHolder.java b/src/main/java/me/dueris/canvas/thread/TickTaskHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..0bc048f7096429440685bcd6309f34c0ea7a609c
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/thread/TickTaskHolder.java
@@ -0,0 +1,13 @@
+package me.dueris.canvas.thread;
+
+public interface TickTaskHolder {
+    public void scheduleTickTask(Runnable runnable, Timing timing, State state);
+
+    public static enum Timing {
+        END_TICK, PRE_TICK, PRE_ENTITY, POST_ENTITY;
+    }
+
+    public static enum State {
+        SERVER_LEVEL, MAIN;
+    }
+}
diff --git a/src/main/java/me/dueris/canvas/thread/WorldTickThread.java b/src/main/java/me/dueris/canvas/thread/WorldTickThread.java
new file mode 100644
index 0000000000000000000000000000000000000000..0dbd245466f965a80c1736a49d574c6827f2fdea
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/thread/WorldTickThread.java
@@ -0,0 +1,26 @@
+package me.dueris.canvas.thread;
+
+import io.papermc.paper.util.TickThread;
+
+public abstract class WorldTickThread extends TickThread implements TickTaskHolder{
+
+    public WorldTickThread(final String name) {
+        super(name);
+    }
+
+    public abstract void stopWorld();
+
+    public abstract void runWorld();
+
+    public abstract void scheduleTickTask(Runnable runnable, Timing timing, TickTaskHolder.State state);
+
+    @Override
+    public void run() {
+        this.runWorld();
+    }
+
+    @Override
+    public void start() {
+        super.start();
+    }
+}
diff --git a/src/main/java/me/dueris/canvas/thread/chunk/ConcurrentChunkTaskScheduler.java b/src/main/java/me/dueris/canvas/thread/chunk/ConcurrentChunkTaskScheduler.java
new file mode 100644
index 0000000000000000000000000000000000000000..e8e325231fad0b43957c7b65a4aaee5c7e9328df
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/thread/chunk/ConcurrentChunkTaskScheduler.java
@@ -0,0 +1,24 @@
+package me.dueris.canvas.thread.chunk;
+
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.LinkedBlockingQueue;
+
+public class ConcurrentChunkTaskScheduler {
+    private final BlockingQueue<Runnable> taskQueue = new LinkedBlockingQueue<>();
+
+    public void schedule(Runnable task) {
+        taskQueue.add(task);
+    }
+
+    public void tick() {
+        Runnable task;
+        while ((task = taskQueue.poll()) != null) {
+            try {
+                task.run();
+            } catch (Throwable throwable) {
+                if (throwable instanceof ThreadDeath) throw throwable;
+                else throwable.printStackTrace();
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/me/dueris/canvas/world/TickManagerHolder.java b/src/main/java/me/dueris/canvas/world/TickManagerHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..812ca23a793e3adeea4f3fbf5d60c0b954a9c03a
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/world/TickManagerHolder.java
@@ -0,0 +1,21 @@
+package me.dueris.canvas.world;
+
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.server.players.PlayerList;
+import net.minecraft.world.TickRateManager;
+
+public interface TickManagerHolder {
+    public PlayerList getPlayerList();
+
+    public CommandSourceStack createCommandSourceStack();
+
+    public void onTickRateChanged();
+
+    public TickRateManager getManager();
+
+    public Float getTps();
+
+    public Long getNanoSecondsFromLastTick();
+
+    public String getHolderName();
+}
diff --git a/src/main/java/net/minecraft/commands/Commands.java b/src/main/java/net/minecraft/commands/Commands.java
index 97ea831870c9312675c2acee170293a175ca6b51..b280db999bcef60e40e23ac469f4ea5e26b1ee49 100644
--- a/src/main/java/net/minecraft/commands/Commands.java
+++ b/src/main/java/net/minecraft/commands/Commands.java
@@ -363,6 +363,7 @@ public class Commands {
                 });
             }
         } catch (Exception exception) {
+            exception.printStackTrace(); // Canvas - lets print command stacktraces
             if (throwCommandError) throw exception;
             MutableComponent ichatmutablecomponent = Component.literal(exception.getMessage() == null ? exception.getClass().getName() : exception.getMessage());
 
diff --git a/src/main/java/net/minecraft/core/BlockPos.java b/src/main/java/net/minecraft/core/BlockPos.java
index a64e5997b94cc8173f0512d1e282355f14f098ec..d1c657c69ae1d6254ea4b8f68930257084858d71 100644
--- a/src/main/java/net/minecraft/core/BlockPos.java
+++ b/src/main/java/net/minecraft/core/BlockPos.java
@@ -9,6 +9,7 @@ import it.unimi.dsi.fastutil.longs.LongSet;
 import java.util.ArrayDeque;
 import java.util.Optional;
 import java.util.Queue;
+import java.util.concurrent.ConcurrentLinkedDeque;
 import java.util.function.BiConsumer;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
@@ -512,7 +513,7 @@ public class BlockPos extends Vec3i {
     public static int breadthFirstTraversal(
         BlockPos pos, int maxDepth, int maxIterations, BiConsumer<BlockPos, Consumer<BlockPos>> nextQueuer, Predicate<BlockPos> callback
     ) {
-        Queue<Pair<BlockPos, Integer>> queue = new ArrayDeque<>();
+        Queue<Pair<BlockPos, Integer>> queue = new ConcurrentLinkedDeque<>(); // Canvas
         LongSet longSet = new LongOpenHashSet();
         queue.add(Pair.of(pos, 0));
         int i = 0;
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
index 1a37654aff9a9c86c9f7af10a1cf721371f0c5ec..2ede26ce0ce71282ef259360ec7128641f41b82f 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
@@ -2,6 +2,9 @@ package net.minecraft.network.protocol.game;
 
 import it.unimi.dsi.fastutil.shorts.ShortIterator;
 import it.unimi.dsi.fastutil.shorts.ShortSet;
+import java.util.Iterator;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.function.BiConsumer;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
@@ -18,18 +21,18 @@ public class ClientboundSectionBlocksUpdatePacket implements Packet<ClientGamePa
     public static final StreamCodec<FriendlyByteBuf, ClientboundSectionBlocksUpdatePacket> STREAM_CODEC = Packet.codec(ClientboundSectionBlocksUpdatePacket::write, ClientboundSectionBlocksUpdatePacket::new);
     private static final int POS_IN_SECTION_BITS = 12;
     private final SectionPos sectionPos;
-    private final short[] positions;
+    private final Short[] positions;
     private final BlockState[] states;
 
-    public ClientboundSectionBlocksUpdatePacket(SectionPos sectionPos, ShortSet positions, LevelChunkSection section) {
+    public ClientboundSectionBlocksUpdatePacket(SectionPos sectionPos, ConcurrentLinkedQueue<Short> positions, LevelChunkSection section) {
         this.sectionPos = sectionPos;
         int i = positions.size();
 
-        this.positions = new short[i];
+        this.positions = new Short[i];
         this.states = new BlockState[i];
         int j = 0;
 
-        for (ShortIterator shortiterator = positions.iterator(); shortiterator.hasNext(); ++j) {
+        for (Iterator shortiterator = positions.iterator(); shortiterator.hasNext(); ++j) {
             short short0 = (Short) shortiterator.next();
 
             this.positions[j] = short0;
@@ -39,9 +42,9 @@ public class ClientboundSectionBlocksUpdatePacket implements Packet<ClientGamePa
     }
 
     // CraftBukkit start - Add constructor
-    public ClientboundSectionBlocksUpdatePacket(SectionPos sectionposition, ShortSet shortset, BlockState[] states) {
+    public ClientboundSectionBlocksUpdatePacket(SectionPos sectionposition, ConcurrentLinkedQueue<Short> shortset, BlockState[] states) {
         this.sectionPos = sectionposition;
-        this.positions = shortset.toShortArray();
+        this.positions = shortset.toArray(new Short[0]);
         this.states = states;
     }
     // CraftBukkit end
@@ -50,7 +53,7 @@ public class ClientboundSectionBlocksUpdatePacket implements Packet<ClientGamePa
         this.sectionPos = SectionPos.of(buf.readLong());
         int i = buf.readVarInt();
 
-        this.positions = new short[i];
+        this.positions = new Short[i];
         this.states = new BlockState[i];
 
         for (int j = 0; j < i; ++j) {
@@ -63,9 +66,9 @@ public class ClientboundSectionBlocksUpdatePacket implements Packet<ClientGamePa
     }
 
     // Paper start - Multi Block Change API
-    public ClientboundSectionBlocksUpdatePacket(SectionPos sectionPos, it.unimi.dsi.fastutil.shorts.Short2ObjectMap<BlockState> blockChanges) {
+    public ClientboundSectionBlocksUpdatePacket(SectionPos sectionPos, ConcurrentHashMap<Short, ?> blockChanges) {
         this.sectionPos = sectionPos;
-        this.positions = blockChanges.keySet().toShortArray();
+        this.positions = blockChanges.keySet().toArray(new Short[0]);
         this.states = blockChanges.values().toArray(new BlockState[0]);
     }
     // Paper end - Multi Block Change API
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 708f9b7db91913201cdb955f38af9b4bbbf835df..3662c784a63434402be49ae057e2a619918012bc 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -13,6 +13,7 @@ import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
+import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
 import it.unimi.dsi.fastutil.longs.LongIterator;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
@@ -40,12 +41,18 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.NoSuchElementException;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Executor;
+import java.util.concurrent.Executors;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
@@ -54,6 +61,9 @@ import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+import me.dueris.canvas.thread.NamedTickThreadFactory;
+import me.dueris.canvas.thread.WorldTickThread;
+import me.dueris.canvas.world.TickManagerHolder;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.FileUtil;
@@ -121,6 +131,7 @@ import net.minecraft.util.profiling.metrics.storage.MetricsPersister;
 import net.minecraft.util.thread.ReentrantBlockableEventLoop;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.RandomSequences;
+import net.minecraft.world.TickRateManager;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.ai.village.VillageSiege;
 import net.minecraft.world.entity.npc.CatSpawner;
@@ -198,7 +209,7 @@ import org.bukkit.event.server.ServerLoadEvent;
 
 import co.aikar.timings.MinecraftTimings; // Paper
 
-public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements ServerInfo, ChunkIOErrorReporter, CommandSource, AutoCloseable, ca.spottedleaf.moonrise.patches.chunk_system.server.ChunkSystemMinecraftServer { // Paper - rewrite chunk system
+public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements ServerInfo, ChunkIOErrorReporter, CommandSource, AutoCloseable, ca.spottedleaf.moonrise.patches.chunk_system.server.ChunkSystemMinecraftServer, TickManagerHolder { // Paper - rewrite chunk system // Canvas
 
     private static MinecraftServer SERVER; // Paper
     public static final Logger LOGGER = LogUtils.getLogger();
@@ -208,7 +219,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private static final int TICK_STATS_SPAN = 100;
     private static final long OVERLOADED_THRESHOLD_NANOS = 30L * TimeUtil.NANOSECONDS_PER_SECOND / 20L; // CraftBukkit
     private static final int OVERLOADED_TICKS_THRESHOLD = 20;
-    private static final long OVERLOADED_WARNING_INTERVAL_NANOS = 10L * TimeUtil.NANOSECONDS_PER_SECOND;
+    public static final long OVERLOADED_WARNING_INTERVAL_NANOS = 10L * TimeUtil.NANOSECONDS_PER_SECOND; // Canvas - private -> public
     private static final int OVERLOADED_TICKS_WARNING_INTERVAL = 100;
     private static final long STATUS_EXPIRE_TIME_NANOS = 5L * TimeUtil.NANOSECONDS_PER_SECOND;
     private static final long PREPARE_LEVELS_DEFAULT_DELAY_NANOS = 10L * TimeUtil.NANOSECONDS_PER_MILLISECOND;
@@ -244,10 +255,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private final LayeredRegistryAccess<RegistryLayer> registries;
     private Map<ResourceKey<Level>, ServerLevel> levels;
     private PlayerList playerList;
-    private volatile boolean running;
+    public volatile boolean running; // Canvas
     private volatile boolean isRestarting = false; // Paper - flag to signify we're attempting to restart
     private boolean stopped;
-    private int tickCount;
+    public int tickCount; // Canvas
     private int ticksUntilAutosave;
     protected final Proxy proxy;
     private boolean onlineMode;
@@ -292,7 +303,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private String serverId;
     public MinecraftServer.ReloadableResources resources;
     private final StructureTemplateManager structureTemplateManager;
-    private final ServerTickRateManager tickRateManager;
+    public final ServerTickRateManager tickRateManager; // Canvas
     protected WorldData worldData;
     public PotionBrewing potionBrewing;
     private volatile boolean isSaving;
@@ -313,9 +324,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     // Spigot start
     public static final int TPS = 20;
     public static final int TICK_TIME = 1000000000 / MinecraftServer.TPS;
-    private static final int SAMPLE_INTERVAL = 20; // Paper - improve server tick loop
+    public static final int SAMPLE_INTERVAL = 20; // Paper - improve server tick loop // Canvas
     @Deprecated(forRemoval = true) // Paper
-    public final double[] recentTps = new double[ 4 ]; // Purpur
+    public final Double[] recentTps = new Double[ 4 ]; // Purpur // Canvas
     // Spigot end
     public final io.papermc.paper.configuration.PaperConfigurations paperConfigurations; // Paper - add paper configuration files
     public static long currentTickLong = 0L; // Paper - track current tick as a long
@@ -346,6 +357,17 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         thread.start();
         return s0;
     }
+    // Canvas start - Multithreaded WorldTicking
+
+    public List<ServerTickRateManager> getAllTickRateManagers() {
+        List<ServerTickRateManager> managers = new ArrayList<>();
+        managers.add(this.tickRateManager);
+        this.getAllLevels().forEach(level -> {
+            managers.add((ServerTickRateManager) level.tickRateManager());
+        });
+        return managers;
+    }
+    // Canvas end
 
     // Paper start - rewrite chunk system
     private volatile Throwable chunkSystemCrash;
@@ -974,7 +996,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     }
 
     // CraftBukkit start
-    private boolean hasStopped = false;
+    public boolean hasStopped = false; // Canvas
     private boolean hasLoggedStop = false; // Paper - Debugging
     public volatile boolean hasFullyShutdown = false; // Paper
     private final Object stopLock = new Object();
@@ -1098,6 +1120,25 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.onServerExit();
         // Paper end - Improved watchdog support
     }
+    // Canvas start
+
+    private final LinkedBlockingQueue<WorldTickThread> currentWorldThreads = new LinkedBlockingQueue<>();
+    public void shutdownTickers() {
+        for (final WorldTickThread currentWorldThread : currentWorldThreads) {
+            currentWorldThread.stopWorld();
+            try {
+                currentWorldThread.join();
+            } catch (InterruptedException e) {
+                throw new RuntimeException(e);
+            }
+        }
+    }
+
+    @Override
+    public ServerTickRateManager getManager() {
+        return tickRateManager;
+    }
+    // Canvas end
 
     public String getLocalIp() {
         return this.localIp;
@@ -1157,7 +1198,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         private final java.math.BigDecimal[] samples;
         private final long[] times;
 
-        RollingAverage(int size) {
+        public RollingAverage(int size) { // Canvas
             this.size = size;
             this.time = size * SEC_IN_NANO;
             this.total = dec(TPS).multiply(dec(SEC_IN_NANO)).multiply(dec(size));
@@ -1191,7 +1232,40 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private static final java.math.BigDecimal TPS_BASE = new java.math.BigDecimal(1E9).multiply(new java.math.BigDecimal(SAMPLE_INTERVAL));
     // Paper end
     // Spigot End
+        // Canvas start
+    public BooleanSupplier shouldKeepTicking;
+    private boolean shouldTickLevels = false;
+    private long lastNanoTickTime = 0L;
+
+    public void stopWorlds() {
+        this.getAllLevels().forEach(ServerLevel::stopWorld);
+
+        this.getAllLevels().forEach(level -> {
+            try {
+                // level.latch.await();
+                LOGGER.info("ServerLevel \"{}\" stopped successfully!".replace("{}", level.getWorld().getKey().asString()));
+            } catch (Throwable throwable) {
+                throw new IllegalStateException("Shutdown process for WorldTicker was interupted!");
+            }
+        });
+    }
+
+    @Override
+    public Float getTps() {
+        return Double.valueOf(tps5s.getAverage()).floatValue();
+    }
+
+    @Override
+    public Long getNanoSecondsFromLastTick() {
+        return this.lastNanoTickTime;
+    }
+
+    @Override
+    public String getHolderName() {
+        return "MinecraftServer";
+    }
 
+    // Canvas end
     protected void runServer() {
         try {
             long serverStartTime = Util.getNanos(); // Paper
@@ -1212,12 +1286,24 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             // anything at 3+ won't be caught here but also will trip watchdog....
             // tasks are default scheduled at -1 + delay, and first tick will tick at 1
             String doneTime = String.format(java.util.Locale.ROOT, "%.3fs", (double) (Util.getNanos() - serverStartTime) / 1.0E9D);
+            // Canvas start - rewrite world ticking
+            LOGGER.info("Canvas: Starting Multithreaded WorldTickers");
+            try {
+                for (ServerLevel level : this.getAllLevels()) {
+                    this.currentWorldThreads.add(level);
+                    level.start();
+                }
+            } catch (Throwable throwable) {
+                throw new IllegalStateException("Failed to start WorldTickers");
+            }
+            // Canvas end
             LOGGER.info("Done ({})! For help, type \"help\"", doneTime);
+            this.shouldTickLevels = true; // Canvas
             // Paper end
 
             org.spigotmc.WatchdogThread.tick(); // Paper
             org.spigotmc.WatchdogThread.hasStarted = true; // Paper
-            Arrays.fill( this.recentTps, 20 );
+            Arrays.fill( this.recentTps, 20D ); // Canvas
             // Paper start - further improve server tick loop
             long tickSection = Util.getNanos();
             long currentTime;
@@ -1299,9 +1385,14 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 this.nextTickTimeNanos += i;
                 //this.startMetricsRecordingTick(); // Purpur
                 //this.profiler.push("tick"); // Purpur
-                this.tickServer(flag ? () -> {
+                // Canvas start
+                shouldKeepTicking = flag ? () -> {
                     return false;
-                } : this::haveTime);
+                } : this::haveTime;
+                long iA = Util.getNanos();
+                this.tickServer(shouldKeepTicking);
+                this.lastNanoTickTime = Util.getNanos() - iA;
+                // Canvas end
                 // Paper start - rewrite chunk system
                 final Throwable crash = this.chunkSystemCrash;
                 if (crash != null) {
@@ -1313,7 +1404,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 this.mayHaveDelayedTasks = true;
                 this.delayedTasksMaxNextTickTimeNanos = Math.max(Util.getNanos() + i, this.nextTickTimeNanos);
                 // Purpur start
-                if (!org.purpurmc.purpur.PurpurConfig.tpsCatchup) {
+                if (!org.purpurmc.purpur.PurpurConfig.tpsCatchup || this.tickRateManager().isUnlockedTickRate()) { // Canvas
                     this.nextTickTimeNanos = currentTime + i;
                     this.delayedTasksMaxNextTickTimeNanos = nextTickTimeNanos;
                 }
@@ -1354,6 +1445,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         } finally {
             try {
                 this.stopped = true;
+                // Canvas start
+                LOGGER.info("Waiting for ServerLevel processes to finish..");
+                this.shutdownTickers();
+                // Canvas end
                 this.stopServer();
             } catch (Throwable throwable1) {
                 MinecraftServer.LOGGER.error("Exception stopping the server", throwable1);
@@ -1428,19 +1523,19 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return crashreport;
     }
 
-    private boolean haveTime() {
+    public boolean haveTime() { // Canvas
         // CraftBukkit start
         if (isOversleep) return canOversleep(); // Paper - because of our changes, this logic is broken
         return this.forceTicks || this.runningTask() || Util.getNanos() < (this.mayHaveDelayedTasks ? this.delayedTasksMaxNextTickTimeNanos : this.nextTickTimeNanos);
     }
 
     // Paper start
-    boolean isOversleep = false;
+    public boolean isOversleep = false; // Canvas
     private boolean canOversleep() {
         return this.mayHaveDelayedTasks && Util.getNanos() < this.delayedTasksMaxNextTickTimeNanos;
     }
 
-    private boolean canSleepForTickNoOversleep() {
+    public boolean canSleepForTickNoOversleep() { // Canvas
         return this.forceTicks || this.runningTask() || Util.getNanos() < this.nextTickTimeNanos;
     }
     // Paper end
@@ -1472,8 +1567,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         });
     }
 
-    protected void waitUntilNextTick() {
+    public void waitUntilNextTick() { // Canvas
         //this.executeAll(); // Paper - move this into the tick method for timings
+        if (this.tickRateManager.isUnlockedTickRate()) return; // Canvas - allow uncapping the tickrate
         this.managedBlock(() -> {
             return !this.canSleepForTickNoOversleep(); // Paper - move oversleep into full server tick
         });
@@ -1588,9 +1684,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         // Paper start - move oversleep into full server tick
         //isOversleep = true;MinecraftTimings.serverOversleep.startTiming(); // Purpur
-        this.managedBlock(() -> {
-            return !this.canOversleep();
-        });
+        // Canvas start - screw oversleeping we go BRRRRRRRRRRRRRRRRRRRRRRRR
+        // this.managedBlock(() -> {
+        //     return !this.canOversleep();
+        // });
+        // Canvas end
         //isOversleep = false;MinecraftTimings.serverOversleep.stopTiming(); // Purpur
         // Paper end
         new com.destroystokyo.paper.event.server.ServerTickStartEvent(this.tickCount+1).callEvent(); // Paper - Server Tick Events
@@ -1667,6 +1765,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return Math.max(100, (int) (f * 300.0F));
     }
 
+    @Override // Canvas
     public void onTickRateChanged() {
         int i = this.computeNextAutosaveInterval();
 
@@ -1717,9 +1816,12 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         //MinecraftTimings.bukkitSchedulerTimer.stopTiming(); // Spigot // Paper // Purpur
         // Paper start - Folia scheduler API
         ((io.papermc.paper.threadedregions.scheduler.FoliaGlobalRegionScheduler) Bukkit.getGlobalRegionScheduler()).tick();
-        getAllLevels().forEach(level -> {
+        // Canvas
+        Iterable<ServerLevel> allLevels = getAllLevels();
+        for (ServerLevel level : allLevels) {
+        // Canvas
             for (final Entity entity : level.getEntities().getAll()) {
-                if (entity.isRemoved()) {
+                if (entity == null || entity.isRemoved()) {
                     continue;
                 }
                 final org.bukkit.craftbukkit.entity.CraftEntity bukkit = entity.getBukkitEntityRaw();
@@ -1727,7 +1829,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     bukkit.taskScheduler.executeTick();
                 }
             }
-        });
+        } // Canvas
         // Paper end - Folia scheduler API
         io.papermc.paper.adventure.providers.ClickCallbackProviderImpl.CALLBACK_MANAGER.handleQueue(this.tickCount); // Paper
         //this.profiler.push("commandFunctions"); // Purpur
@@ -1748,7 +1850,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         //MinecraftTimings.timeUpdateTimer.startTiming(); // Spigot // Paper // Purpur
         // Send time updates to everyone, it will get the right time from the world the player is in.
         // Paper start - Perf: Optimize time updates
-        for (final ServerLevel level : this.getAllLevels()) {
+        /* for (final ServerLevel level : this.getAllLevels()) { // Canvas
             final boolean doDaylight = level.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT);
             final long dayTime = level.getDayTime();
             long worldTime = level.getGameTime();
@@ -1763,45 +1865,58 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     new ClientboundSetTimePacket(worldTime, playerTime, doDaylight);
                 entityplayer.connection.send(packet); // Add support for per player time
             }
-        }
+        } */ // Canvas
         // Paper end - Perf: Optimize time updates
         //MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot // Paper // Purpur
 
-        this.isIteratingOverLevels = true; // Paper - Throw exception on world create while being ticked
-        Iterator iterator = this.getAllLevels().iterator(); // Paper - Throw exception on world create while being ticked; move down
-        while (iterator.hasNext()) {
+        // this.isIteratingOverLevels = true; // Paper - Throw exception on world create while being ticked // Canvas
+        /* // Canvas start - Multithreaded WorldTicking // Canvas - i decided to rewrite all of world ticking!
+        Iterator iterator = this.getAllLevels().iterator();
+        final AtomicBoolean finishedTicking = new AtomicBoolean(false);
+        List<com.mojang.datafixers.util.Pair<Runnable, ServerLevel>> worldTicks = new ArrayList();
+        while (iterator.hasNext() && !finishedTicking.get()){
             ServerLevel worldserver = (ServerLevel) iterator.next();
             worldserver.hasPhysicsEvent = org.bukkit.event.block.BlockPhysicsEvent.getHandlerList().getRegisteredListeners().length > 0; // Paper - BlockPhysicsEvent
             worldserver.hasEntityMoveEvent = io.papermc.paper.event.entity.EntityMoveEvent.getHandlerList().getRegisteredListeners().length > 0; // Paper - Add EntityMoveEvent
             net.minecraft.world.level.block.entity.HopperBlockEntity.skipHopperEvents = worldserver.paperConfig().hopper.disableMoveEvent || org.bukkit.event.inventory.InventoryMoveItemEvent.getHandlerList().getRegisteredListeners().length == 0; // Paper - Perf: Optimize Hoppers
             worldserver.hasRidableMoveEvent = org.purpurmc.purpur.event.entity.RidableMoveEvent.getHandlerList().getRegisteredListeners().length > 0; // Purpur
 
-            /*this.profiler.push(() -> { // Purpur
+            this.profiler.push(() -> { // Purpur
                 String s = String.valueOf(worldserver);
 
                 return s + " " + String.valueOf(worldserver.dimension().location());
-            });*/ // Purpur
-            /* Drop global time updates
+            }); // Purpur
+             Drop global time updates
             if (this.tickCount % 20 == 0) {
                 //this.profiler.push("timeSync"); // Purpur
                 this.synchronizeTime(worldserver);
                 //this.profiler.pop(); // Purpur
             }
-            // CraftBukkit end */
+            // CraftBukkit end
 
             //this.profiler.push("tick"); // Purpur
 
             try {
+                // Canvas start
+                if (worldserver == null) {
+                    finishedTicking.set(true);
+                    break;
+                }
+
+                Pair<Runnable, ServerLevel> tick = worldserver.tick(shouldKeepTicking, tickCount);
+                // Canvas end
                 //worldserver.timings.doTick.startTiming(); // Spigot // Purpur
-                worldserver.tick(shouldKeepTicking);
+                // worldserver.tick(shouldKeepTicking); // Canvas
                 // Paper start
-                for (final io.papermc.paper.chunk.SingleThreadChunkRegionManager regionManager : worldserver.getChunkSource().chunkMap.regionManagers) {
+                for (final io.papermc.paper.chunk.SingleThreadChunkRegionManager regionManager : worldserver.getChunkSource().chunkMap.regionManagers) { // Canvas
                     regionManager.recalculateRegions();
-                }
+                } // Canvas
                 // Paper end
                 //worldserver.timings.doTick.stopTiming(); // Spigot // Purpur
+                if (tick != null) worldTicks.add(tick); // Canvas
             } catch (Throwable throwable) {
-                CrashReport crashreport = CrashReport.forThrowable(throwable, "Exception ticking world");
+                if(throwable instanceof NoSuchElementException) return; // Canvas
+                CrashReport crashreport = CrashReport.forThrowable(throwable, "Exception preparing WorldTick!"); // Canvas
 
                 worldserver.fillReportDetails(crashreport);
                 throw new ReportedException(crashreport);
@@ -1809,9 +1924,33 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
             //this.profiler.pop(); // Purpur
             //this.profiler.pop(); // Purpur
-            worldserver.explosionDensityCache.clear(); // Paper - Optimize explosions
+            // worldserver.explosionDensityCache.clear(); // Paper - Optimize explosions // Canvas
         }
         this.isIteratingOverLevels = false; // Paper - Throw exception on world create while being ticked
+        // Canvas start - Multithreaded WorldTicking
+        List<CompletableFuture<Void>> futureTicks = new ArrayList();
+        for(com.mojang.datafixers.util.Pair<Runnable, ServerLevel> tick : worldTicks){
+            futureTicks.add(CompletableFuture.runAsync(() -> {
+                try {
+                    tick.getFirst().run();
+                } catch (Exception throwable) {
+                    CrashReport report = CrashReport.forThrowable(throwable, "Exception ticking world!");
+                    tick.getSecond().fillReportDetails(report);
+                    throw new ReportedException(report);
+                }
+            }, this.worldTickerPool));
+        }
+            CompletableFuture<Void> allTicks = CompletableFuture.allOf(futureTicks.toArray(new CompletableFuture[0]));
+        // try {
+        //     allTicks.get();
+        // } catch (InterruptedException | ExecutionException e) {
+        //     e.printStackTrace();
+        // }
+        // Run scheduled main thread tasks now */ // Canvas
+        for (ServerLevel level : allLevels) {
+            level.tickMainThread(shouldKeepTicking);
+        }
+        // Canvas end
 
         //this.profiler.popPush("connection"); // Purpur
         // MinecraftTimings.connectionTimer.startTiming(); // Spigot // Paper // Purpur
@@ -1834,7 +1973,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         //MinecraftTimings.tickablesTimer.stopTiming(); // Spigot // Paper // Purpur
 
         //this.profiler.popPush("send chunks"); // Purpur
-        iterator = this.playerList.getPlayers().iterator();
+        Iterator<ServerPlayer> iterator = this.playerList.getPlayers().iterator(); // Canvas
 
         while (iterator.hasNext()) {
             ServerPlayer entityplayer = (ServerPlayer) iterator.next();
@@ -1898,6 +2037,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         Map<ResourceKey<Level>, ServerLevel> newLevels = Maps.newLinkedHashMap(oldLevels);
         newLevels.put(level.dimension(), level);
         this.levels = Collections.unmodifiableMap(newLevels);
+        if (this.shouldTickLevels) level.runWorld(); // Canvas
     }
 
     public void removeLevel(ServerLevel level) {
@@ -1905,6 +2045,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         Map<ResourceKey<Level>, ServerLevel> newLevels = Maps.newLinkedHashMap(oldLevels);
         newLevels.remove(level.dimension());
         this.levels = Collections.unmodifiableMap(newLevels);
+        if (this.shouldTickLevels) level.stopWorld(); // Canvas
     }
     // CraftBukkit end
 
@@ -2150,6 +2291,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return this.stopped;
     }
 
+    @Override // Canvas
     public PlayerList getPlayerList() {
         return this.playerList;
     }
@@ -2494,6 +2636,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return this.resources.managers.getCommands();
     }
 
+    @Override // Canvas
     public CommandSourceStack createCommandSourceStack() {
         ServerLevel worldserver = this.overworld();
 
diff --git a/src/main/java/net/minecraft/server/PlayerAdvancements.java b/src/main/java/net/minecraft/server/PlayerAdvancements.java
index fc87e3cfff1221a6cbaf3463ce972870f17c776a..72a410bc5adc64fabb5a3ed9c2686cf7bc44c136 100644
--- a/src/main/java/net/minecraft/server/PlayerAdvancements.java
+++ b/src/main/java/net/minecraft/server/PlayerAdvancements.java
@@ -24,6 +24,8 @@ import java.util.LinkedHashMap;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.function.BiConsumer;
 import javax.annotation.Nullable;
 import net.minecraft.FileUtil;
@@ -54,10 +56,10 @@ public class PlayerAdvancements {
     private final PlayerList playerList;
     private final Path playerSavePath;
     private AdvancementTree tree;
-    private final Map<AdvancementHolder, AdvancementProgress> progress = new LinkedHashMap();
-    private final Set<AdvancementHolder> visible = new HashSet();
-    private final Set<AdvancementHolder> progressChanged = new HashSet();
-    private final Set<AdvancementNode> rootsToUpdate = new HashSet();
+    private final ConcurrentHashMap<AdvancementHolder, AdvancementProgress> progress = new ConcurrentHashMap();
+    private final Set<AdvancementHolder> visible = new io.netty.util.internal.ConcurrentSet<>();
+    private final ConcurrentLinkedQueue<AdvancementHolder> progressChanged = new ConcurrentLinkedQueue();
+    private final ConcurrentLinkedQueue<AdvancementNode> rootsToUpdate = new ConcurrentLinkedQueue();
     private ServerPlayer player;
     @Nullable
     private AdvancementHolder lastSelectedTab;
diff --git a/src/main/java/net/minecraft/server/ServerTickRateManager.java b/src/main/java/net/minecraft/server/ServerTickRateManager.java
index 37dcf3dc3e50afd85912a7496c828576a38a4e9c..d0e0e940dcf99855d9905409f8646a47f261e76f 100644
--- a/src/main/java/net/minecraft/server/ServerTickRateManager.java
+++ b/src/main/java/net/minecraft/server/ServerTickRateManager.java
@@ -1,5 +1,7 @@
 package net.minecraft.server;
 
+import com.mojang.datafixers.util.Pair;
+import me.dueris.canvas.world.TickManagerHolder;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.game.ClientboundTickingStatePacket;
 import net.minecraft.network.protocol.game.ClientboundTickingStepPacket;
@@ -14,9 +16,10 @@ public class ServerTickRateManager extends TickRateManager {
     private long sprintTimeSpend = 0L;
     private long scheduledCurrentSprintTicks = 0L;
     private boolean previousIsFrozen = false;
-    private final MinecraftServer server;
+    private final TickManagerHolder server; // Canvas
+    private boolean unlocked = false; // Canvas
 
-    public ServerTickRateManager(MinecraftServer server) {
+    public ServerTickRateManager(TickManagerHolder server) { // Canvas
         this.server = server;
     }
 
@@ -24,6 +27,33 @@ public class ServerTickRateManager extends TickRateManager {
         return this.scheduledCurrentSprintTicks > 0L;
     }
 
+    // Canvas start
+
+    public TickManagerHolder getHolder() {
+        return server;
+    }
+
+    public Pair<ServerTickRateManager, Float> toTpsPair() {
+        return new Pair<>(this, getHolder().getTps());
+    }
+
+    public Pair<ServerTickRateManager, Long> toNanoPair() {
+        return new Pair<>(this, getHolder().getNanoSecondsFromLastTick());
+    }
+
+    public void unlock() {
+        this.unlocked = true;
+    }
+
+    public void lock() {
+        this.unlocked = false;
+    }
+
+    public boolean isUnlockedTickRate() {
+        return unlocked;
+    }
+    // Canvas end
+
     @Override
     public void setFrozen(boolean frozen) {
         super.setFrozen(frozen);
diff --git a/src/main/java/net/minecraft/server/commands/TickCommand.java b/src/main/java/net/minecraft/server/commands/TickCommand.java
index 5ce845a9cd84c355e2716dfcb0b62686c783c9f9..30c4dbdfdcedf440518e316a2dbb440b29e50d26 100644
--- a/src/main/java/net/minecraft/server/commands/TickCommand.java
+++ b/src/main/java/net/minecraft/server/commands/TickCommand.java
@@ -13,7 +13,6 @@ import net.minecraft.server.ServerTickRateManager;
 import net.minecraft.util.TimeUtil;
 
 public class TickCommand {
-    private static final float MAX_TICKRATE = 10000.0F;
     private static final String DEFAULT_TICKRATE = String.valueOf(20);
 
     public static void register(CommandDispatcher<CommandSourceStack> dispatcher) {
@@ -24,11 +23,27 @@ public class TickCommand {
                 .then(
                     Commands.literal("rate")
                         .then(
-                            Commands.argument("rate", FloatArgumentType.floatArg(1.0F, 10000.0F))
+                            Commands.argument("rate", FloatArgumentType.floatArg(1.0F)) // Canvas - remove cap on tick cmd
                                 .suggests((context, suggestionsBuilder) -> SharedSuggestionProvider.suggest(new String[]{DEFAULT_TICKRATE}, suggestionsBuilder))
                                 .executes(context -> setTickingRate(context.getSource(), FloatArgumentType.getFloat(context, "rate")))
                         )
                 )
+                // Canvas start - allow uncapping the tickrate
+                .then(
+                    Commands.literal("unlock")
+                        .executes(context -> {
+                            context.getSource().getServer().getAllTickRateManagers().forEach(ServerTickRateManager::unlock);
+                            return 1;
+                        })
+                )
+                .then(
+                    Commands.literal("lock")
+                        .executes(context -> {
+                            context.getSource().getServer().getAllTickRateManagers().forEach(ServerTickRateManager::lock);
+                            return 1;
+                        })
+                )
+                // Canvas end
                 .then(
                     Commands.literal("step")
                         .executes(context -> step(context.getSource(), 1))
@@ -60,8 +75,13 @@ public class TickCommand {
     }
 
     private static int setTickingRate(CommandSourceStack source, float rate) {
-        ServerTickRateManager serverTickRateManager = source.getServer().tickRateManager();
-        serverTickRateManager.setTickRate(rate);
+        // Canvas start
+        source.getServer().getAllTickRateManagers().forEach(tickRateManager -> {
+            tickRateManager.setTickRate(rate);
+        });
+        // ServerTickRateManager serverTickRateManager = source.getServer().tickRateManager();
+        // serverTickRateManager.setTickRate(rate);
+        // Canvas end
         String string = String.format("%.1f", rate);
         source.sendSuccess(() -> Component.translatable("commands.tick.rate.success", string), true);
         return (int)rate;
@@ -98,8 +118,16 @@ public class TickCommand {
     }
 
     private static int sprint(CommandSourceStack source, int ticks) {
-        boolean bl = source.getServer().tickRateManager().requestGameToSprint(ticks);
-        if (bl) {
+        // Canvas start
+        boolean[] success = {true};
+        source.getServer().getAllTickRateManagers().forEach(tickRateManager -> {
+            if (!tickRateManager.requestGameToSprint(ticks)) {
+                success[0] = false;
+            }
+        });
+        // boolean bl = source.getServer().tickRateManager().requestGameToSprint(ticks);
+        if (success[0]) {
+        // Canvas end
             source.sendSuccess(() -> Component.translatable("commands.tick.sprint.stop.success"), true);
         }
 
@@ -108,7 +136,21 @@ public class TickCommand {
     }
 
     private static int setFreeze(CommandSourceStack source, boolean frozen) {
-        ServerTickRateManager serverTickRateManager = source.getServer().tickRateManager();
+        // Canvas start
+        source.getServer().getAllTickRateManagers().forEach(tickRateManager -> {
+            if (frozen) {
+                if (tickRateManager.isSprinting()) {
+                    tickRateManager.stopSprinting();
+                }
+
+                if (tickRateManager.isSteppingForward()) {
+                    tickRateManager.stopStepping();
+                }
+            }
+
+            tickRateManager.setFrozen(frozen);
+        });
+        /* ServerTickRateManager serverTickRateManager = source.getServer().tickRateManager();
         if (frozen) {
             if (serverTickRateManager.isSprinting()) {
                 serverTickRateManager.stopSprinting();
@@ -120,6 +162,7 @@ public class TickCommand {
         }
 
         serverTickRateManager.setFrozen(frozen);
+        */ // Canvas end
         if (frozen) {
             source.sendSuccess(() -> Component.translatable("commands.tick.status.frozen"), true);
         } else {
@@ -130,9 +173,17 @@ public class TickCommand {
     }
 
     private static int step(CommandSourceStack source, int steps) {
-        ServerTickRateManager serverTickRateManager = source.getServer().tickRateManager();
-        boolean bl = serverTickRateManager.stepGameIfPaused(steps);
-        if (bl) {
+        // Canvas start
+        boolean[] success = {true};
+        source.getServer().getAllTickRateManagers().forEach(tickRateManager -> {
+            if (!tickRateManager.stepGameIfPaused(steps)) {
+                success[0] = false;
+            }
+        });
+        // ServerTickRateManager serverTickRateManager = source.getServer().tickRateManager();
+        // boolean bl = serverTickRateManager.stepGameIfPaused(steps);
+        if (success[0]) {
+        // Canvas end
             source.sendSuccess(() -> Component.translatable("commands.tick.step.success", steps), true);
         } else {
             source.sendFailure(Component.translatable("commands.tick.step.fail"));
@@ -142,9 +193,17 @@ public class TickCommand {
     }
 
     private static int stopStepping(CommandSourceStack source) {
-        ServerTickRateManager serverTickRateManager = source.getServer().tickRateManager();
-        boolean bl = serverTickRateManager.stopStepping();
-        if (bl) {
+        // Canvas start
+        boolean[] success = {true};
+        source.getServer().getAllTickRateManagers().forEach(tickRateManager -> {
+            if (!tickRateManager.stopStepping()) {
+                success[0] = false;
+            }
+        });
+        // ServerTickRateManager serverTickRateManager = source.getServer().tickRateManager();
+        // boolean bl = serverTickRateManager.stopStepping();
+        if (success[0]) {
+        // Canvas end
             source.sendSuccess(() -> Component.translatable("commands.tick.step.stop.success"), true);
             return 1;
         } else {
@@ -154,9 +213,17 @@ public class TickCommand {
     }
 
     private static int stopSprinting(CommandSourceStack source) {
-        ServerTickRateManager serverTickRateManager = source.getServer().tickRateManager();
-        boolean bl = serverTickRateManager.stopSprinting();
-        if (bl) {
+        // Canvas start
+        boolean[] success = {true};
+        source.getServer().getAllTickRateManagers().forEach(tickRateManager -> {
+            if (!tickRateManager.stopSprinting()) {
+                success[0] = false;
+            }
+        });
+        // ServerTickRateManager serverTickRateManager = source.getServer().tickRateManager();
+        // boolean bl = serverTickRateManager.stopSprinting();
+        if (success[0]) {
+        // Canvas end
             source.sendSuccess(() -> Component.translatable("commands.tick.sprint.stop.success"), true);
             return 1;
         } else {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 3a7e3d8543d95416e60f2f5dc36388ec291ba01a..0b1d80d900572967a29a243d8e0fe40499b6d4cc 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -256,6 +256,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             return false;
         }
         org.purpurmc.purpur.PurpurConfig.registerCommands();
+        me.dueris.canvas.CanvasConfig.registerCommands(); // Canvas
         // Purpur end
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // Paper - load version history now
 
diff --git a/src/main/java/net/minecraft/server/level/ChunkHolder.java b/src/main/java/net/minecraft/server/level/ChunkHolder.java
index 0048077dedd19adc6c5a88e7d916d88a71662115..fdbd0ec64fb3fa34f3cce1d05b92f447e46bb68b 100644
--- a/src/main/java/net/minecraft/server/level/ChunkHolder.java
+++ b/src/main/java/net/minecraft/server/level/ChunkHolder.java
@@ -5,6 +5,7 @@ import it.unimi.dsi.fastutil.shorts.ShortSet;
 import java.util.BitSet;
 import java.util.List;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.Executor;
 import java.util.function.IntConsumer;
 import java.util.function.IntSupplier;
@@ -39,7 +40,7 @@ public class ChunkHolder extends GenerationChunkHolder implements ca.spottedleaf
     private final LevelHeightAccessor levelHeightAccessor;
     // Paper - rewrite chunk system
     private boolean hasChangedSections;
-    private final ShortSet[] changedBlocksPerSection;
+    private final ConcurrentLinkedQueue<Short>[] changedBlocksPerSection;
     private final BitSet blockChangedLightSectionFilter;
     private final BitSet skyChangedLightSectionFilter;
     private final LevelLightEngine lightEngine;
@@ -164,7 +165,7 @@ public class ChunkHolder extends GenerationChunkHolder implements ca.spottedleaf
         this.playerProvider = playersWatchingChunkProvider;
         // Paper - rewrite chunk system
         this.setTicketLevel(level);
-        this.changedBlocksPerSection = new ShortSet[world.getSectionsCount()];
+        this.changedBlocksPerSection = new ConcurrentLinkedQueue[world.getSectionsCount()]; // Canvas
         this.chunkMap = (ChunkMap)playersWatchingChunkProvider; // Paper
     }
 
@@ -265,7 +266,7 @@ public class ChunkHolder extends GenerationChunkHolder implements ca.spottedleaf
             if (i < 0 || i >= this.changedBlocksPerSection.length) return; // CraftBukkit - SPIGOT-6086, SPIGOT-6296
             if (this.changedBlocksPerSection[i] == null) {
                 this.hasChangedSections = true;
-                this.changedBlocksPerSection[i] = new ShortOpenHashSet();
+                this.changedBlocksPerSection[i] = new ConcurrentLinkedQueue<>();
             }
 
             this.changedBlocksPerSection[i].add(SectionPos.sectionRelativePos(pos));
@@ -318,7 +319,7 @@ public class ChunkHolder extends GenerationChunkHolder implements ca.spottedleaf
                 list = this.moonrise$getPlayers(false); // Paper - rewrite chunk system
 
                 for (int i = 0; i < this.changedBlocksPerSection.length; ++i) {
-                    ShortSet shortset = this.changedBlocksPerSection[i];
+                    ConcurrentLinkedQueue<Short> shortset = this.changedBlocksPerSection[i];
 
                     if (shortset != null) {
                         this.changedBlocksPerSection[i] = null;
@@ -327,7 +328,7 @@ public class ChunkHolder extends GenerationChunkHolder implements ca.spottedleaf
                             SectionPos sectionposition = SectionPos.of(chunk.getPos(), j);
 
                             if (shortset.size() == 1) {
-                                BlockPos blockposition = sectionposition.relativeToBlockPos(shortset.iterator().nextShort());
+                                BlockPos blockposition = sectionposition.relativeToBlockPos(shortset.iterator().next());
                                 BlockState iblockdata = world.getBlockState(blockposition);
 
                                 this.broadcast(list, new ClientboundBlockUpdatePacket(blockposition, iblockdata));
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 686f3d8c91e1ffc0c7ffe1cd9bcf5df5503cb938..512cc5e1790fea82b45378857f2d8ce1ae0cabf5 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -28,6 +28,7 @@ import java.io.Writer;
 import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.HashMap;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Locale;
@@ -39,6 +40,9 @@ import java.util.Set;
 import java.util.concurrent.CancellationException;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.CompletionException;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.Executor;
 import java.util.concurrent.atomic.AtomicInteger;
 import java.util.function.BooleanSupplier;
@@ -62,6 +66,7 @@ import net.minecraft.network.protocol.game.ClientboundChunksBiomesPacket;
 import net.minecraft.network.protocol.game.ClientboundSetChunkCacheCenterPacket;
 import net.minecraft.server.level.progress.ChunkProgressListener;
 import net.minecraft.server.network.ServerPlayerConnection;
+import net.minecraft.util.ByIdMap;
 import net.minecraft.util.CsvOutput;
 import net.minecraft.util.Mth;
 import net.minecraft.util.StaticCache2D;
@@ -139,9 +144,9 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     public final AtomicInteger tickingGenerated; // Paper - public
     private final String storageName;
     private final PlayerMap playerMap;
-    public final Int2ObjectMap<ChunkMap.TrackedEntity> entityMap;
-    private final Long2ByteMap chunkTypeCache;
-    private final Long2LongMap chunkSaveCooldowns;
+    public final ConcurrentHashMap<Integer, TrackedEntity> entityMap; // Canvas
+    private final ConcurrentHashMap<Long, Byte> chunkTypeCache; // Canvas
+    private final ConcurrentHashMap<Long, Byte> chunkSaveCooldowns;
     // Paper - rewrite chunk system
     public int serverViewDistance;
     public final WorldGenContext worldGenContext; // Paper - public
@@ -229,9 +234,9 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         this.toDrop = new LongOpenHashSet();
         this.tickingGenerated = new AtomicInteger();
         this.playerMap = new PlayerMap();
-        this.entityMap = new Int2ObjectOpenHashMap();
-        this.chunkTypeCache = new Long2ByteOpenHashMap();
-        this.chunkSaveCooldowns = new Long2LongOpenHashMap();
+        this.entityMap = new ConcurrentHashMap<>(); // Canvas
+        this.chunkTypeCache = new ConcurrentHashMap<>(); // Canvas
+        this.chunkSaveCooldowns = new ConcurrentHashMap<>(); // Canvas
         // Paper - rewrite chunk system
         Path path = session.getDimensionPath(world.dimension());
 
@@ -848,7 +853,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
 
     public void move(ServerPlayer player) {
-        ObjectIterator objectiterator = this.entityMap.values().iterator();
+        Iterator<TrackedEntity> objectiterator = this.entityMap.values().iterator();
 
         while (objectiterator.hasNext()) {
             ChunkMap.TrackedEntity playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) objectiterator.next();
@@ -941,7 +946,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
                         ServerPlayer entityplayer = (ServerPlayer) entity;
 
                         this.updatePlayerStatus(entityplayer, true);
-                        ObjectIterator objectiterator = this.entityMap.values().iterator();
+                        Iterator<TrackedEntity> objectiterator = this.entityMap.values().iterator(); // Canvas
 
                         while (objectiterator.hasNext()) {
                             ChunkMap.TrackedEntity playerchunkmap_entitytracker1 = (ChunkMap.TrackedEntity) objectiterator.next();
@@ -961,7 +966,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         org.spigotmc.AsyncCatcher.catchOp("entity untrack"); // Spigot
         if (entity instanceof ServerPlayer entityplayer) {
             this.updatePlayerStatus(entityplayer, false);
-            ObjectIterator objectiterator = this.entityMap.values().iterator();
+            Iterator<TrackedEntity> objectiterator = this.entityMap.values().iterator(); // Canvas
 
             while (objectiterator.hasNext()) {
                 ChunkMap.TrackedEntity playerchunkmap_entitytracker = (ChunkMap.TrackedEntity) objectiterator.next();
@@ -983,7 +988,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
         List<ServerPlayer> list = Lists.newArrayList();
         List<ServerPlayer> list1 = this.level.players();
-        ObjectIterator objectiterator = this.entityMap.values().iterator();
+        Iterator objectiterator = this.entityMap.values().iterator(); // Canvas
         //this.level.timings.tracker1.startTiming(); // Paper // Purpur
 
         ChunkMap.TrackedEntity playerchunkmap_entitytracker;
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index adf79eb40c62e56311533de6c919f77e81ab4284..0fea0ab4f63750cb03c7c8e8b1cb3a5d11b8e1ec 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -3,13 +3,19 @@ package net.minecraft.server.level;
 import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
+
+import io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet;
+
 import java.io.File;
 import java.io.IOException;
 import java.util.Arrays;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
@@ -68,8 +74,8 @@ public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moon
     @VisibleForDebug
     private NaturalSpawner.SpawnState lastSpawnState;
     // Paper start
-    public final io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<LevelChunk> tickingChunks = new io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<>(4096, 0.75f, 4096, 0.15, true);
-    public final io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<LevelChunk> entityTickingChunks = new io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<>(4096, 0.75f, 4096, 0.15, true);
+    public final io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<LevelChunk> tickingChunks = new io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<>(); // Canvas
+    public final io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<LevelChunk> entityTickingChunks = new io.papermc.paper.util.maplist.IteratorSafeOrderedReferenceSet<>(); // Canvas
     final com.destroystokyo.paper.util.concurrent.WeakSeqLock loadedChunkMapSeqLock = new com.destroystokyo.paper.util.concurrent.WeakSeqLock();
     final it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap<LevelChunk> loadedChunkMap = new it.unimi.dsi.fastutil.longs.Long2ObjectOpenHashMap<>(8192, 0.5f);
     long chunkFutureAwaitCounter;
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index fe2d82a173f27039d8f96fec1ad1f6a5650b0661..593e6eccd63aebbc2dc2a3861ae31486e2f232ae 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -10,6 +10,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Objects;
 import java.util.Set;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.function.Consumer;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 8931206a4c15f71b3bb52dddb588aecbfa3ae5b6..4512c6e3fcaedc9b17199f7ee8685233b082b00a 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -6,11 +6,16 @@ import com.google.common.collect.Lists;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.datafixers.util.Pair;
 import com.mojang.logging.LogUtils;
+
+import io.netty.channel.EventLoop;
+import io.netty.util.internal.ConcurrentSet;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.longs.LongSet;
 import it.unimi.dsi.fastutil.longs.LongSets;
 import it.unimi.dsi.fastutil.objects.Object2IntMap.Entry;
+import me.dueris.canvas.thread.chunk.ConcurrentChunkTaskScheduler;
+import me.dueris.canvas.world.TickManagerHolder;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
@@ -22,6 +27,7 @@ import java.io.Writer;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.List;
@@ -30,6 +36,10 @@ import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.CopyOnWriteArrayList;
+import java.util.concurrent.CountDownLatch;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.function.Function;
@@ -42,6 +52,7 @@ import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportType;
 import net.minecraft.Util;
+import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -61,6 +72,7 @@ import net.minecraft.network.protocol.game.ClientboundExplodePacket;
 import net.minecraft.network.protocol.game.ClientboundLevelEventPacket;
 import net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket;
 import net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket;
+import net.minecraft.network.protocol.game.ClientboundSetTimePacket;
 import net.minecraft.network.protocol.game.ClientboundSoundEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundSoundPacket;
 import net.minecraft.network.protocol.game.DebugPackets;
@@ -68,7 +80,10 @@ import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.ServerScoreboard;
+import net.minecraft.server.ServerTickRateManager;
+import net.minecraft.server.TickTask;
 import net.minecraft.server.level.progress.ChunkProgressListener;
+import net.minecraft.server.players.PlayerList;
 import net.minecraft.server.players.SleepStatus;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundSource;
@@ -78,6 +93,7 @@ import net.minecraft.util.CsvOutput;
 import net.minecraft.util.Mth;
 import net.minecraft.util.ProgressListener;
 import net.minecraft.util.RandomSource;
+import net.minecraft.util.TimeUtil;
 import net.minecraft.util.Unit;
 import net.minecraft.util.datafix.DataFixTypes;
 import net.minecraft.util.profiling.ProfilerFiller;
@@ -171,6 +187,7 @@ import net.minecraft.world.phys.shapes.BooleanOp;
 import net.minecraft.world.phys.shapes.Shapes;
 import net.minecraft.world.phys.shapes.VoxelShape;
 import net.minecraft.world.ticks.LevelTicks;
+import org.bukkit.command.defaults.ReloadCommand;
 import org.slf4j.Logger;
 import org.bukkit.Bukkit;
 import org.bukkit.WeatherType;
@@ -183,14 +200,14 @@ import org.bukkit.event.weather.LightningStrikeEvent;
 import org.bukkit.event.world.TimeSkipEvent;
 // CraftBukkit end
 
-public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel, ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemLevelReader { // Paper - rewrite chunk system
+public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel, ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemLevelReader, TickManagerHolder { // Paper - rewrite chunk system // Canvas
 
     public static final BlockPos END_SPAWN_POINT = new BlockPos(100, 50, 0);
     public static final IntProvider RAIN_DELAY = UniformInt.of(12000, 180000);
     public static final IntProvider RAIN_DURATION = UniformInt.of(12000, 24000);
     private static final IntProvider THUNDER_DELAY = UniformInt.of(12000, 180000);
     public static final IntProvider THUNDER_DURATION = UniformInt.of(3600, 15600);
-    private static final Logger LOGGER = LogUtils.getLogger();
+    public static final Logger LOGGER = LogUtils.getLogger(); // Canvas - private -> public
     private static final int EMPTY_TIME_NO_TICK = 300;
     private static final int MAX_SCHEDULED_TICKS_PER_TICK = 65536;
     final List<ServerPlayer> players;
@@ -211,7 +228,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     final Set<Mob> navigatingMobs;
     volatile boolean isUpdatingNavigations;
     protected final Raids raids;
-    private final ObjectLinkedOpenHashSet<BlockEventData> blockEvents;
+    private final CopyOnWriteArrayList<BlockEventData> blockEvents; // Canvas
     private final List<BlockEventData> blockEventsToReschedule;
     private boolean handlingTick;
     private final List<CustomSpawner> customSpawners;
@@ -224,6 +241,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     private double preciseTime; // Purpur
     private boolean forceTime; // Purpur
     private final RandomSequences randomSequences;
+    public ServerTickRateManager tickRateManager; // Canvas
 
     // CraftBukkit start
     public final LevelStorageSource.LevelStorageAccess convertable;
@@ -232,6 +250,15 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     public boolean hasEntityMoveEvent; // Paper - Add EntityMoveEvent
     private final alternate.current.wire.WireHandler wireHandler = new alternate.current.wire.WireHandler(this); // Paper - optimize redstone (Alternate Current)
     public boolean hasRidableMoveEvent = false; // Purpur
+    // Canvas start - Multithreaded WorldTicking
+    public Thread currentTickingThread = null;
+
+    public static Throwable getAddToWorldStackTrace(Entity entity) {
+        final Throwable thr = new Throwable(entity + " Added to world at " + new java.util.Date());
+        io.papermc.paper.util.StacktraceDeobfuscator.INSTANCE.deobfuscateThrowable(thr);
+        return thr;
+    }
+    // Canvas end
 
     public LevelChunk getChunkIfLoaded(int x, int z) {
         return this.chunkSource.getChunkAtIfLoadedImmediately(x, z); // Paper - Use getChunkIfLoadedImmediately
@@ -511,12 +538,13 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
         this.uuid = WorldUUID.getUUID(convertable_conversionsession.levelDirectory.path().toFile());
         // CraftBukkit end
         this.players = Lists.newArrayList();
+        this.tickRateManager = new ServerTickRateManager(this);
         this.entityTickList = new EntityTickList();
         this.blockTicks = new LevelTicks<>(this::isPositionTickingWithEntitiesLoaded, this.getProfilerSupplier());
         this.fluidTicks = new LevelTicks<>(this::isPositionTickingWithEntitiesLoaded, this.getProfilerSupplier());
         this.pathTypesByPosCache = new PathTypeCache();
-        this.navigatingMobs = new ObjectOpenHashSet();
-        this.blockEvents = new ObjectLinkedOpenHashSet();
+        this.navigatingMobs = ConcurrentHashMap.newKeySet();
+        this.blockEvents = new CopyOnWriteArrayList<>();
         this.blockEventsToReschedule = new ArrayList(64);
         this.dragonParts = new Int2ObjectOpenHashMap();
         this.tickTime = flag1;
@@ -642,133 +670,373 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
     public StructureManager structureManager() {
         return this.structureManager;
     }
+    // Canvas start - Rewrite world ticking
 
-    public void tick(BooleanSupplier shouldKeepTicking) {
-        //ProfilerFiller gameprofilerfiller = this.getProfiler(); // Purpur
+    public volatile boolean running = false;
+    public final CountDownLatch latch = new CountDownLatch(1);
+    private long nextTickTimeNanos;
+    private long lastOverloadWarningNanos;
+    public int tickCount = 0;
+    public int currentTick;
+    public long currentTickLong;
+    private long taskExecutionStartNanos;
+    private long idleTimeNanos;
+    private long delayedTasksMaxNextTickTimeNanos;
+    private boolean mayHaveDelayedTasks;
+    public boolean lagging = false;
+    public Long lastNanoTickTime = 0L;
+    public final Double[] recentTps = new Double[1];
+    private EventLoop eventLoop;
+    public long currentTime;
+    public ConcurrentChunkTaskScheduler concurrentChunkTaskScheduler = new ConcurrentChunkTaskScheduler();
+    private net.minecraft.util.debugchart.SampleLogger tickTimeLogger;
+    private net.minecraft.util.debugchart.DebugSampleSubscriptionTracker debugSampleSubscriptionTracker;
+    public final MinecraftServer.RollingAverage tps5s = new MinecraftServer.RollingAverage(5);
+    private static final java.math.BigDecimal TPS_BASE = new java.math.BigDecimal(1E9).multiply(new java.math.BigDecimal(MinecraftServer.SAMPLE_INTERVAL));
+
+    @Override
+    public PlayerList getPlayerList() {
+        return this.server.getPlayerList();
+    }
+
+    @Override
+    public CommandSourceStack createCommandSourceStack() {
+        return this.server.createCommandSourceStack();
+    }
+
+    @Override
+    public void onTickRateChanged() {
+        server.onTickRateChanged();
+    }
+
+    @Override
+    public ServerTickRateManager getManager() {
+        return tickRateManager;
+    }
+
+    @Override
+    public Float getTps() {
+        return Double.valueOf(tps5s.getAverage()).floatValue();
+    }
 
-        this.handlingTick = true;
-        TickRateManager tickratemanager = this.tickRateManager();
-        boolean flag = tickratemanager.runsNormally();
+    @Override
+    public Long getNanoSecondsFromLastTick() {
+        return this.lastNanoTickTime;
+    }
 
-        if (flag) {
-            //gameprofilerfiller.push("world border"); // Purpur
-            this.getWorldBorder().tick();
-            //gameprofilerfiller.popPush("weather"); // Purpur
-            this.advanceWeatherCycle();
+    @Override
+    public String getHolderName() {
+        return this.dimension.location().toString();
+    }
+
+    private void startMeasuringTaskExecutionTime() {
+        if (server.isTickTimeLoggingEnabled()) {
+            this.taskExecutionStartNanos = Util.getNanos();
+            this.idleTimeNanos = 0L;
         }
 
-        int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
-        long j;
+    }
 
-        if (this.purpurConfig.playersSkipNight && this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
-            // CraftBukkit start
-            j = this.levelData.getDayTime() + 24000L;
-            TimeSkipEvent event = new TimeSkipEvent(this.getWorld(), TimeSkipEvent.SkipReason.NIGHT_SKIP, (j - j % 24000L) - this.getDayTime());
-            if (this.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)) {
-                this.getCraftServer().getPluginManager().callEvent(event);
-                if (!event.isCancelled()) {
-                    this.setDayTime(this.getDayTime() + event.getSkipAmount());
+    private void finishMeasuringTaskExecutionTime() {
+        if (server.isTickTimeLoggingEnabled()) {
+            net.minecraft.util.debugchart.SampleLogger samplelogger = this.tickTimeLogger;
+
+            samplelogger.logPartialSample(Util.getNanos() - this.taskExecutionStartNanos - this.idleTimeNanos, net.minecraft.util.debugchart.TpsDebugDimensions.SCHEDULED_TASKS.ordinal());
+            samplelogger.logPartialSample(this.idleTimeNanos, net.minecraft.util.debugchart.TpsDebugDimensions.IDLE.ordinal());
+        }
+
+    }
+
+    public void tickMainThread(BooleanSupplier shouldKeepTicking) {
+        for (final io.papermc.paper.chunk.SingleThreadChunkRegionManager regionManager : getChunkSource().chunkMap.regionManagers) {
+            regionManager.recalculateRegions();
+        }
+        getChunkSource().tick(shouldKeepTicking, true);
+        explosionDensityCache.clear();
+        this.runMainThreadTasks();
+        this.concurrentChunkTaskScheduler.tick();
+    }
+
+    @Override
+    public void stopWorld() {
+        this.running = false;
+        try {
+            LOGGER.info("Stopping ServerLevel({})...", this.dimension().location().toString());
+            latch.await();
+        } catch (InterruptedException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    @Override
+    public void runWorld() {
+        long tickSection = Util.getNanos();
+        this.running = true;
+        this.eventLoop = new EventLoop(this);
+        this.debugSampleSubscriptionTracker = new net.minecraft.util.debugchart.DebugSampleSubscriptionTracker(this.getPlayerList());
+        this.tickTimeLogger = new net.minecraft.util.debugchart.RemoteSampleLogger(net.minecraft.util.debugchart.TpsDebugDimensions.values().length, this.debugSampleSubscriptionTracker, net.minecraft.util.debugchart.RemoteDebugSampleType.TICK_TIME);
+        while (this.running) {
+            try {
+                long tickDuration;
+                currentTime = Util.getNanos();
+                if (ReloadCommand.isReloading) continue; // Dont tick worlds during reload
+                if (!server.isPaused() && this.tickRateManager.isSprinting() && this.tickRateManager.checkShouldSprintThisTick()) {
+                    tickDuration = 0L;
+                    this.nextTickTimeNanos = Util.getNanos();
+                    this.lastOverloadWarningNanos = this.nextTickTimeNanos;
+                } else {
+                    tickDuration = this.tickRateManager().nanosecondsPerTick();
+                    long elapsedTime = Util.getNanos() - this.nextTickTimeNanos;
+
+                    if (elapsedTime > 20 + 20L * tickDuration && this.nextTickTimeNanos - this.lastOverloadWarningNanos >= MinecraftServer.OVERLOADED_WARNING_INTERVAL_NANOS + 100L * tickDuration) {
+                        long ticksBehind = elapsedTime / tickDuration;
+
+                        if (server.server.getWarnOnOverload() && tickCount > 300) LOGGER.warn("Can't keep up! Is the world overloaded? Running {}ms or {} ticks behind. ServerLevelIdentifier: {identifier}"
+                            .replace("{identifier}", this.getWorld().getKey().asString()), elapsedTime / TimeUtil.NANOSECONDS_PER_MILLISECOND, ticksBehind);
+                        this.nextTickTimeNanos += ticksBehind * tickDuration;
+                        this.lastOverloadWarningNanos = this.nextTickTimeNanos;
+                    }
                 }
-            }
+                ++this.currentTickLong;
+                currentTime = Util.getNanos();
+                if (++this.currentTick % MinecraftServer.SAMPLE_INTERVAL == 0) {
+                    final long diff = currentTime - tickSection;
+                    final java.math.BigDecimal currentTps = TPS_BASE.divide(new java.math.BigDecimal(diff), 30, java.math.RoundingMode.HALF_UP);
+                    tps5s.add(currentTps, diff);
+
+                    this.recentTps[0] = tps5s.getAverage();
+                    lagging = recentTps[0] < org.purpurmc.purpur.PurpurConfig.laggingThreshold;
+                    tickSection = currentTime;
+                }
+                this.nextTickTimeNanos += tickDuration;
 
-            if (!event.isCancelled()) {
-                this.wakeUpAllPlayers();
-            }
-            // CraftBukkit end
-            if (this.getGameRules().getBoolean(GameRules.RULE_WEATHER_CYCLE) && this.isRaining()) {
-                this.resetWeatherCycle();
+                BooleanSupplier supplier = tickDuration == 0L ? () -> {
+                    return false;
+                } : this::haveTime;
+                long i = Util.getNanos();
+                this.tick(supplier, ++tickCount).run();
+                this.lastNanoTickTime = Util.getNanos() - i;
+                this.mayHaveDelayedTasks = true;
+                this.delayedTasksMaxNextTickTimeNanos = Math.max(Util.getNanos() + tickDuration, this.nextTickTimeNanos);
+                if (!org.purpurmc.purpur.PurpurConfig.tpsCatchup || this.tickRateManager.isUnlockedTickRate()) { // Canvas
+                    this.nextTickTimeNanos = currentTime + nextTickTimeNanos;
+                    this.delayedTasksMaxNextTickTimeNanos = nextTickTimeNanos;
+                }
+                this.startMeasuringTaskExecutionTime();
+                this.waitUntilNextTick();
+                this.finishMeasuringTaskExecutionTime();
+            } catch (Throwable throwable) {
+                throwable.printStackTrace();
             }
         }
+        latch.countDown();
+    }
 
-        this.updateSkyBrightness();
-        if (flag) {
-            this.tickTime();
-        }
-
-        //gameprofilerfiller.popPush("tickPending"); // Purpur
-        //this.timings.scheduledBlocks.startTiming(); // Paper // Purpur
-        if (!this.isDebug() && flag) {
-            j = this.getGameTime();
-            //gameprofilerfiller.push("blockTicks"); // Purpur
-            this.blockTicks.tick(j, paperConfig().environment.maxBlockTicks, this::tickBlock); // Paper - configurable max block ticks
-            //gameprofilerfiller.popPush("fluidTicks"); // Purpur
-            this.fluidTicks.tick(j, paperConfig().environment.maxFluidTicks, this::tickFluid); // Paper - configurable max fluid ticks
-            //gameprofilerfiller.pop(); // Purpur
+    public void waitUntilNextTick() {
+        if (this.tickRateManager.isUnlockedTickRate()) return;
+        eventLoop.managedBlock(() -> !(server.forceTicks || eventLoop.getRunningTask() || Util.getNanos() < this.nextTickTimeNanos));
+    }
+
+    public boolean haveTime() {
+        if (server.forceTicks) {
+            return true;
         }
-        //this.timings.scheduledBlocks.stopTiming(); // Paper // Purpur
+        if (server.isOversleep) return this.mayHaveDelayedTasks && Util.getNanos() < this.delayedTasksMaxNextTickTimeNanos;
+        return server.forceTicks || eventLoop.getRunningTask() || Util.getNanos() < (this.mayHaveDelayedTasks ? this.delayedTasksMaxNextTickTimeNanos : this.nextTickTimeNanos);
+    }
+
+    private static class EventLoop extends net.minecraft.util.thread.ReentrantBlockableEventLoop<net.minecraft.server.TickTask> {
+        private final ServerLevel level;
 
-        //gameprofilerfiller.popPush("raid"); // Purpur
-        if (flag) {
-            // this.timings.raids.startTiming(); // Paper - timings // Purpur
-            this.raids.tick();
-            // this.timings.raids.stopTiming(); // Paper - timings // Purpur
+        public EventLoop(ServerLevel level) {
+            super("ServerLevel_" + level.dimension().location().toString());
+            this.level = level;
         }
 
-        //gameprofilerfiller.popPush("chunkSource"); // Purpur
-        //this.timings.chunkProviderTick.startTiming(); // Paper - timings // Purpur
-        this.getChunkSource().tick(shouldKeepTicking, true);
-        //this.timings.chunkProviderTick.stopTiming(); // Paper - timings // Purpur
-        //gameprofilerfiller.popPush("blockEvents"); // Purpur
-        if (flag) {
-            // this.timings.doSounds.startTiming(); // Spigot // Purpur
-            this.runBlockEvents();
-            // this.timings.doSounds.stopTiming(); // Spigot // Purpur
+        @Override
+        protected TickTask wrapRunnable(Runnable runnable) {
+            if (level.server.hasStopped && Thread.currentThread().equals(level.server.shutdownThread)) {
+                runnable.run();
+                runnable = () -> {};
+            }
+            return new TickTask(level.tickCount, runnable);
         }
 
-        this.handlingTick = false;
-        //gameprofilerfiller.pop(); // Purpur
-        boolean flag1 = !paperConfig().unsupportedSettings.disableWorldTickingWhenEmpty || !this.players.isEmpty() || !this.getForcedChunks().isEmpty(); // CraftBukkit - this prevents entity cleanup, other issues on servers with no players // Paper - restore this
+        @Override
+        protected boolean shouldRun(TickTask ticktask) {
+            return ticktask.getTick() + 3 < level.tickCount || level.server.haveTime();
+        }
 
-        if (flag1) {
-            this.resetEmptyTime();
+        @Override
+        protected Thread getRunningThread() {
+            return Thread.currentThread();
         }
 
-        if (flag1 || this.emptyTime++ < 300) {
-            //gameprofilerfiller.push("entities"); // Purpur
-            //this.timings.tickEntities.startTiming(); // Spigot // Purpur
-            if (this.dragonFight != null && flag) {
-                //gameprofilerfiller.push("dragonFight"); // Purpur
-                this.dragonFight.tick();
+        public boolean getRunningTask() {
+            return this.runningTask();
+        }
+
+    }
+    // Canvas end
+
+    public Runnable tick(BooleanSupplier shouldKeepTicking, int tickCount) { // Canvas - Multithreaded WorldTicking
+        // Canvas start - Multithreaded WorldTicking
+        return () -> {
+            // Ensure it still ticks time
+            final boolean doDaylight = this.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT);
+            final long dayTime = this.getDayTime();
+            long worldTime = this.getGameTime();
+            final ClientboundSetTimePacket worldPacket = new ClientboundSetTimePacket(worldTime, dayTime, doDaylight);
+            for (Player entityhuman : this.players()) {
+                if (!(entityhuman instanceof ServerPlayer) || (!this.isForceTime() && (tickCount + entityhuman.getId()) % 20 != 0)) {
+                    continue;
+                }
+                ServerPlayer entityplayer = (ServerPlayer) entityhuman;
+                long playerTime = entityplayer.getPlayerTime();
+                ClientboundSetTimePacket packet = (playerTime == dayTime) ? worldPacket :
+                    new ClientboundSetTimePacket(worldTime, playerTime, doDaylight);
+                entityplayer.connection.send(packet);
+            }
+            this.handlingTick = true;
+            this.runAllWithTiming(me.dueris.canvas.thread.TickTaskHolder.Timing.PRE_TICK); // Canvas
+            //ProfilerFiller gameprofilerfiller = this.getProfiler(); // Purpur
+            // Moved from MinecraftSever
+            this.hasPhysicsEvent = org.bukkit.event.block.BlockPhysicsEvent.getHandlerList().getRegisteredListeners().length > 0; // Paper - BlockPhysicsEvent
+            this.hasEntityMoveEvent = io.papermc.paper.event.entity.EntityMoveEvent.getHandlerList().getRegisteredListeners().length > 0; // Paper - Add EntityMoveEvent
+            net.minecraft.world.level.block.entity.HopperBlockEntity.skipHopperEvents = this.paperConfig().hopper.disableMoveEvent || org.bukkit.event.inventory.InventoryMoveItemEvent.getHandlerList().getRegisteredListeners().length == 0; // Paper - Perf: Optimize Hoppers
+            this.hasRidableMoveEvent = org.purpurmc.purpur.event.entity.RidableMoveEvent.getHandlerList().getRegisteredListeners().length > 0; // Purpur
+            // Move end
+            // Canvas end
+            TickRateManager tickratemanager = this.tickRateManager();
+            boolean flag = tickratemanager.runsNormally();
+
+            if (flag) {
+                //gameprofilerfiller.push("world border"); // Purpur
+                this.getWorldBorder().tick();
+                //gameprofilerfiller.popPush("weather"); // Purpur
+                this.advanceWeatherCycle();
+            }
+
+            int i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
+            long j;
+
+            if (this.purpurConfig.playersSkipNight && this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
+                // CraftBukkit start
+                j = this.levelData.getDayTime() + 24000L;
+                TimeSkipEvent event = new TimeSkipEvent(this.getWorld(), TimeSkipEvent.SkipReason.NIGHT_SKIP, (j - j % 24000L) - this.getDayTime());
+                if (this.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT)) {
+                    this.getCraftServer().getPluginManager().callEvent(event);
+                    if (!event.isCancelled()) {
+                        this.setDayTime(this.getDayTime() + event.getSkipAmount());
+                    }
+                }
+
+                if (!event.isCancelled()) {
+                    this.wakeUpAllPlayers();
+                }
+                // CraftBukkit end
+                if (this.getGameRules().getBoolean(GameRules.RULE_WEATHER_CYCLE) && this.isRaining()) {
+                    this.resetWeatherCycle();
+                }
+            }
+
+            this.updateSkyBrightness();
+            if (flag) {
+                this.tickTime();
+            }
+
+            //gameprofilerfiller.popPush("tickPending"); // Purpur
+            //this.timings.scheduledBlocks.startTiming(); // Paper // Purpur
+            if (!this.isDebug() && flag) {
+                j = this.getGameTime();
+                //gameprofilerfiller.push("blockTicks"); // Purpur
+                this.blockTicks.tick(j, paperConfig().environment.maxBlockTicks, this::tickBlock); // Paper - configurable max block ticks
+                //gameprofilerfiller.popPush("fluidTicks"); // Purpur
+                this.fluidTicks.tick(j, paperConfig().environment.maxFluidTicks, this::tickFluid); // Paper - configurable max fluid ticks
                 //gameprofilerfiller.pop(); // Purpur
             }
+            //this.timings.scheduledBlocks.stopTiming(); // Paper // Purpur
 
-            org.spigotmc.ActivationRange.activateEntities(this); // Spigot
-            //this.timings.entityTick.startTiming(); // Spigot // Purpur
-            this.entityTickList.forEach((entity) -> {
-                if (!entity.isRemoved()) {
-                    if (false && this.shouldDiscardEntity(entity)) { // CraftBukkit - We prevent spawning in general, so this butchering is not needed
-                        entity.discard();
-                    } else if (!tickratemanager.isEntityFrozen(entity)) {
-                        //gameprofilerfiller.push("checkDespawn"); // Purpur
-                        entity.checkDespawn();
-                        //gameprofilerfiller.pop(); // Purpur
-                        if (true || this.chunkSource.chunkMap.getDistanceManager().inEntityTickingRange(entity.chunkPosition().toLong())) { // Paper - rewrite chunk system
-                            Entity entity1 = entity.getVehicle();
+            //gameprofilerfiller.popPush("raid"); // Purpur
+            if (flag) {
+                // this.timings.raids.startTiming(); // Paper - timings // Purpur
+                this.raids.tick();
+                // this.timings.raids.stopTiming(); // Paper - timings // Purpur
+            }
 
-                            if (entity1 != null) {
-                                if (!entity1.isRemoved() && entity1.hasPassenger(entity)) {
-                                    return;
-                                }
+            //gameprofilerfiller.popPush("chunkSource"); // Purpur
+            //this.timings.chunkProviderTick.startTiming(); // Paper - timings // Purpur
+            // this.getChunkSource().tick(shouldKeepTicking, true); // Canvas
+            //this.timings.chunkProviderTick.stopTiming(); // Paper - timings // Purpur
+            //gameprofilerfiller.popPush("blockEvents"); // Purpur
+            if (flag) {
+                // this.timings.doSounds.startTiming(); // Spigot // Purpur
+                this.runBlockEvents();
+                // this.timings.doSounds.stopTiming(); // Spigot // Purpur
+            }
 
-                                entity.stopRiding();
-                            }
+            // this.handlingTick = false; // Canvas
+            //gameprofilerfiller.pop(); // Purpur
+            boolean flag1 = !paperConfig().unsupportedSettings.disableWorldTickingWhenEmpty || !this.players.isEmpty() || !this.getForcedChunks().isEmpty(); // CraftBukkit - this prevents entity cleanup, other issues on servers with no players // Paper - restore this
 
-                            //gameprofilerfiller.push("tick"); // Purpur
-                            this.guardEntityTick(this::tickNonPassenger, entity);
+            if (flag1) {
+                this.resetEmptyTime();
+            }
+
+            if (flag1 || this.emptyTime++ < 300) {
+                //gameprofilerfiller.push("entities"); // Purpur
+                //this.timings.tickEntities.startTiming(); // Spigot // Purpur
+                if (this.dragonFight != null && flag) {
+                    //gameprofilerfiller.push("dragonFight"); // Purpur
+                    this.dragonFight.tick();
+                    //gameprofilerfiller.pop(); // Purpur
+                }
+
+                org.spigotmc.ActivationRange.activateEntities(this); // Spigot
+                //this.timings.entityTick.startTiming(); // Spigot // Purpur
+                this.runAllWithTiming(me.dueris.canvas.thread.TickTaskHolder.Timing.PRE_ENTITY); // Canvas
+                this.entityTickList.forEach((entity) -> {
+                    if (!entity.isRemoved()) {
+                        if (false && this.shouldDiscardEntity(entity)) { // CraftBukkit - We prevent spawning in general, so this butchering is not needed
+                            entity.discard();
+                        } else if (!tickratemanager.isEntityFrozen(entity)) {
+                            //gameprofilerfiller.push("checkDespawn"); // Purpur
+                            if (entity.isRemoved()) return; // Canvas - if we despawned, dont tick it!
+                            entity.checkDespawn();
                             //gameprofilerfiller.pop(); // Purpur
+                            if (true || this.chunkSource.chunkMap.getDistanceManager().inEntityTickingRange(entity.chunkPosition().toLong())) { // Paper - rewrite chunk system
+                                Entity entity1 = entity.getVehicle();
+
+                                if (entity1 != null) {
+                                    if (!entity1.isRemoved() && entity1.hasPassenger(entity)) {
+                                        return;
+                                    }
+
+                                    entity.stopRiding();
+                                }
+
+                                //gameprofilerfiller.push("tick"); // Purpur
+                                this.guardEntityTick(this::tickNonPassenger, entity);
+                                //gameprofilerfiller.pop(); // Purpur
+                            }
                         }
                     }
-                }
-            });
-            //this.timings.entityTick.stopTiming(); // Spigot // Purpur
-            //this.timings.tickEntities.stopTiming(); // Spigot // Purpur
-            //gameprofilerfiller.pop(); // Purpur
-            this.tickBlockEntities();
-        }
+                });
+                this.runAllWithTiming(me.dueris.canvas.thread.TickTaskHolder.Timing.POST_ENTITY); // Canvas
+                //this.timings.entityTick.stopTiming(); // Spigot // Purpur
+                //this.timings.tickEntities.stopTiming(); // Spigot // Purpur
+                //gameprofilerfiller.pop(); // Purpur
+                this.tickBlockEntities();
+            }
 
-        //gameprofilerfiller.push("entityManagement"); // Purpur
-        // Paper - rewrite chunk system
-        //gameprofilerfiller.pop(); // Purpur
+            //gameprofilerfiller.push("entityManagement"); // Purpur
+            // Paper - rewrite chunk system
+            //gameprofilerfiller.pop(); // Purpur
+            // Canvas start
+            this.runAllWithTiming(me.dueris.canvas.thread.TickTaskHolder.Timing.END_TICK); // Canvas
+            this.handlingTick = false;
+        };
+        // Canvas end
     }
 
     @Override
@@ -1936,7 +2204,7 @@ public class ServerLevel extends Level implements WorldGenLevel, ca.spottedleaf.
 
     @Override
     public TickRateManager tickRateManager() {
-        return this.server.tickRateManager();
+        return this.tickRateManager;
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/players/PlayerList.java b/src/main/java/net/minecraft/server/players/PlayerList.java
index 10c59d30da3c4713fb7cdcf2e600508c0dd3acf0..34758c86b3bcf9e5e54e3990458260606d17643d 100644
--- a/src/main/java/net/minecraft/server/players/PlayerList.java
+++ b/src/main/java/net/minecraft/server/players/PlayerList.java
@@ -25,6 +25,7 @@ import java.util.UUID;
 import java.util.function.Function;
 import java.util.function.Predicate;
 import javax.annotation.Nullable;
+import me.dueris.canvas.thread.TickTaskHolder;
 import net.minecraft.ChatFormatting;
 import net.minecraft.FileUtil;
 import net.minecraft.commands.CommandSourceStack;
@@ -137,6 +138,7 @@ public abstract class PlayerList {
     private static final SimpleDateFormat BAN_DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd 'at' HH:mm:ss z");
     private final MinecraftServer server;
     public final List<ServerPlayer> players = new java.util.concurrent.CopyOnWriteArrayList(); // CraftBukkit - ArrayList -> CopyOnWriteArrayList: Iterator safety
+    public boolean hasPlayers = false; // Canvas
     private final Map<UUID, ServerPlayer> playersByUUID = Maps.newHashMap();
     private final UserBanList bans;
     private final IpBanList ipBans;
@@ -327,6 +329,7 @@ public abstract class PlayerList {
 
         // entityplayer.connection.send(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(this.players)); // CraftBukkit - replaced with loop below
         this.players.add(player);
+        this.hasPlayers = true; // Canvas
         this.playersByName.put(player.getScoreboardName().toLowerCase(java.util.Locale.ROOT), player); // Spigot
         this.playersByUUID.put(player.getUUID(), player);
         // this.broadcastAll(ClientboundPlayerInfoUpdatePacket.createPlayerInitializing(List.of(entityplayer))); // CraftBukkit - replaced with loop below
@@ -653,6 +656,11 @@ public abstract class PlayerList {
         entityplayer.retireScheduler(); // Paper - Folia schedulers
         entityplayer.getAdvancements().stopListening();
         this.players.remove(entityplayer);
+        // Canvas start
+        if (this.players.isEmpty()) {
+            this.hasPlayers = false;
+        }
+        // Canvas end
         this.playersByName.remove(entityplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
         this.server.getCustomBossEvents().onPlayerDisconnect(entityplayer);
         UUID uuid = entityplayer.getUUID();
@@ -809,6 +817,11 @@ public abstract class PlayerList {
     public ServerPlayer respawn(ServerPlayer entityplayer, boolean flag, Entity.RemovalReason entity_removalreason, RespawnReason reason, Location location) {
         entityplayer.stopRiding(); // CraftBukkit
         this.players.remove(entityplayer);
+        // Canvas start
+        if (this.players.isEmpty()) {
+            this.hasPlayers = false;
+        }
+        // Canvas end
         this.playersByName.remove(entityplayer.getScoreboardName().toLowerCase(java.util.Locale.ROOT)); // Spigot
         entityplayer.serverLevel().removePlayerImmediately(entityplayer, entity_removalreason);
         /* CraftBukkit start
@@ -890,6 +903,7 @@ public abstract class PlayerList {
         if (!entityplayer.connection.isDisconnected()) {
             worldserver.addRespawnedPlayer(entityplayer1);
             this.players.add(entityplayer1);
+            this.hasPlayers = true; // Canvas
             this.playersByName.put(entityplayer1.getScoreboardName().toLowerCase(java.util.Locale.ROOT), entityplayer1); // Spigot
             this.playersByUUID.put(entityplayer1.getUUID(), entityplayer1);
         }
diff --git a/src/main/java/net/minecraft/util/ThreadingDetector.java b/src/main/java/net/minecraft/util/ThreadingDetector.java
index 84b3a37fe2a4597312c26abded08a45e7218cd17..f321015a7fd5bfb76964b5ab788d5b78d8af6da9 100644
--- a/src/main/java/net/minecraft/util/ThreadingDetector.java
+++ b/src/main/java/net/minecraft/util/ThreadingDetector.java
@@ -33,19 +33,23 @@ public class ThreadingDetector {
 
         try {
             this.stackTraceLock.lock();
-            if (!this.lock.tryAcquire()) {
-                this.threadThatFailedToAcquire = Thread.currentThread();
-                bl = true;
-                this.stackTraceLock.unlock();
+            // Canvas start
+            if(!(Thread.currentThread() instanceof io.papermc.paper.util.TickThread)){
+                if (!this.lock.tryAcquire()) {
+                    this.threadThatFailedToAcquire = Thread.currentThread();
+                    bl = true;
+                    this.stackTraceLock.unlock();
 
-                try {
-                    this.lock.acquire();
-                } catch (InterruptedException var6) {
-                    Thread.currentThread().interrupt();
-                }
+                    try {
+                        this.lock.acquire();
+                    } catch (InterruptedException var6) {
+                        Thread.currentThread().interrupt();
+                    }
 
-                throw this.fullException;
+                    throw this.fullException;
+                }
             }
+            // Canvas end
         } finally {
             if (!bl) {
                 this.stackTraceLock.unlock();
diff --git a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
index 43487a9ee202c5b0e5a416519939111f77b3059c..3430ddfcad954e9e4f95fe2e6bbb0ed78f5295b6 100644
--- a/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
+++ b/src/main/java/net/minecraft/util/thread/BlockableEventLoop.java
@@ -122,6 +122,7 @@ public abstract class BlockableEventLoop<R extends Runnable> implements Profiler
         } else if (this.blockingCount == 0 && !this.shouldRun(runnable)) {
             return false;
         } else {
+            if (this.pendingRunnables.isEmpty()) return false; // Canvas
             this.doRunTask(this.pendingRunnables.remove());
             return true;
         }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 05d6c3fa8cac3dfc391ae566dd8e7215b3b5b55c..ea4391a0fea5ac9d01f09f2a8b732c756e06a438 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -4659,6 +4659,18 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
         this.setPosRaw(x, y, z, false);
     }
     public final void setPosRaw(double x, double y, double z, boolean forceBoundingBoxUpdate) {
+        // Canvas start - ensure section status is caught
+        if (this.updatingSectionStatus) {
+            final double fx = x;
+            final double fy = y;
+            final double fz = z;
+            ((ServerLevel)this.level()).chunkSource.mainThreadProcessor.execute(() -> {
+                this.setPosRaw(fx, fy, fz, forceBoundingBoxUpdate);
+            });
+            return;
+        }
+        // Canvas end
+        // Paper end - Block invalid positions and bounding box
         // Paper start - rewrite chunk system
         if (this.updatingSectionStatus) {
             LOGGER.error(
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java
index 1ec4ba9799cccb6337a63d8287e269b102f59aa1..c13a9ca90ccef003417e02dff863c1f5c57e3a40 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java
@@ -2,11 +2,14 @@ package net.minecraft.world.entity.ai.attributes;
 
 import com.google.common.collect.Multimap;
 import com.mojang.logging.LogUtils;
+import io.netty.util.internal.ConcurrentSet;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;
+import java.util.UUID;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
@@ -20,8 +23,8 @@ import org.slf4j.Logger;
 public class AttributeMap {
     private static final Logger LOGGER = LogUtils.getLogger();
     private final Map<Holder<Attribute>, AttributeInstance> attributes = new Object2ObjectOpenHashMap<>();
-    private final Set<AttributeInstance> attributesToSync = new ObjectOpenHashSet<>();
-    private final Set<AttributeInstance> attributesToUpdate = new ObjectOpenHashSet<>();
+    private final Set<AttributeInstance> attributesToSync = new ConcurrentSet<>();
+    private final Set<AttributeInstance> attributesToUpdate = new ConcurrentSet<>();
     private final AttributeSupplier supplier;
     private final net.minecraft.world.entity.LivingEntity entity; // Purpur
 
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
index 41c8dd01fe8741783625b3be215ae8e33adeb661..45edef048d4619c857ab1d221a3036dbead9bdc6 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
@@ -911,7 +911,15 @@ public class Boat extends VehicleEntity implements Leashable, VariantHolder<Boat
     public InteractionResult interact(Player player, InteractionHand hand) {
         InteractionResult enuminteractionresult = super.interact(player, hand);
 
-        return enuminteractionresult != InteractionResult.PASS ? enuminteractionresult : (player.isSecondaryUseActive() ? InteractionResult.PASS : (this.outOfControlTicks < 60.0F ? (!this.level().isClientSide ? (player.startRiding(this) ? InteractionResult.CONSUME : InteractionResult.PASS) : InteractionResult.SUCCESS) : InteractionResult.PASS));
+        // Canvas start
+        if (player.isSecondaryUseActive()) return InteractionResult.PASS;
+        if (this.outOfControlTicks < 60.0F) {
+            if (!this.level().isClientSide())
+                return player.startRiding(this) ? InteractionResult.CONSUME : InteractionResult.PASS;
+            return InteractionResult.SUCCESS;
+        }
+        return InteractionResult.PASS;
+        // Canvas end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 91106cab35f1b219e28e833b7a0735fb0e016bb5..737f51ad59a81ea63ee2b74b380ab8613d5a0f83 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -10,9 +10,10 @@ import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.function.Supplier;
 import javax.annotation.Nullable;
+import me.dueris.canvas.thread.TickTaskHolder;
+import me.dueris.canvas.thread.WorldTickThread;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
-import net.minecraft.ReportedException;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -25,14 +26,13 @@ import net.minecraft.core.registries.Registries;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.resources.ResourceKey;
 import net.minecraft.resources.ResourceLocation;
-import io.papermc.paper.util.MCUtil;
+import me.dueris.canvas.thread.ScheduledTask;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.FullChunkStatus;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
 import net.minecraft.sounds.SoundEvents;
 import net.minecraft.sounds.SoundSource;
-import net.minecraft.util.AbortableIterationConsumer;
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.StringRepresentable;
@@ -42,8 +42,6 @@ import net.minecraft.world.TickRateManager;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.damagesource.DamageSources;
 import net.minecraft.world.entity.Entity;
-import net.minecraft.world.entity.boss.EnderDragonPart;
-import net.minecraft.world.entity.boss.enderdragon.EnderDragon;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
@@ -102,7 +100,7 @@ import org.bukkit.entity.SpawnCategory;
 import org.bukkit.event.block.BlockPhysicsEvent;
 // CraftBukkit end
 
-public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemLevel, ca.spottedleaf.moonrise.patches.chunk_system.world.ChunkSystemEntityGetter { // Paper - rewrite chunk system
+public abstract class Level extends WorldTickThread implements LevelAccessor, AutoCloseable, ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemLevel, ca.spottedleaf.moonrise.patches.chunk_system.world.ChunkSystemEntityGetter { // Paper - rewrite chunk system // Canvas
 
     public static final Codec<ResourceKey<Level>> RESOURCE_KEY_CODEC = ResourceKey.codec(Registries.DIMENSION);
     public static final ResourceKey<Level> OVERWORLD = ResourceKey.create(Registries.DIMENSION, ResourceLocation.withDefaultNamespace("overworld"));
@@ -138,10 +136,12 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
     public final boolean isClientSide;
     private final WorldBorder worldBorder;
     private final BiomeManager biomeManager;
-    private final ResourceKey<Level> dimension;
+    public final ResourceKey<Level> dimension; // Canvas
     private final RegistryAccess registryAccess;
     private final DamageSources damageSources;
     private long subTickCount;
+    public java.util.concurrent.LinkedBlockingQueue<me.dueris.canvas.thread.ScheduledTask> scheduledTasks = new java.util.concurrent.LinkedBlockingQueue<>();
+    public int taskCount = 0;
 
     // CraftBukkit start Added the following
     private final CraftWorld world;
@@ -231,6 +231,57 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
     public CraftServer getCraftServer() {
         return (CraftServer) Bukkit.getServer();
     }
+    // Canvas start - scheduler tasks
+
+    @Override
+    public void scheduleTickTask(Runnable runnable, Timing timing, TickTaskHolder.State state) {
+        this.scheduledTasks.add(new ScheduledTask(runnable, state.equals(TickTaskHolder.State.MAIN), timing));
+        taskCount++;
+    }
+
+    public void runAllScheduledTasks() {
+        if (taskCount == 0) return;
+        List<ScheduledTask> tasksToRun = new java.util.ArrayList<>(this.scheduledTasks);
+        this.scheduledTasks.clear();
+
+        for (ScheduledTask task : tasksToRun) {
+            task.run();
+            taskCount--;
+        }
+    }
+
+    public void runAllWithTiming(Timing timing) {
+        if (taskCount == 0) return;
+        Iterator<ScheduledTask> iterator = this.scheduledTasks.iterator();
+        while (iterator.hasNext()) {
+            ScheduledTask task = iterator.next();
+            if (task == null) break;
+            if (task.canRun(timing) && task.serverLevel()) {
+                iterator.remove();
+                task.run();
+                taskCount--;
+            }
+        }
+    }
+
+    public void runMainThreadTasks() {
+        if (taskCount == 0) return;
+        Iterator<ScheduledTask> iterator = this.scheduledTasks.iterator();
+        while (iterator.hasNext()) {
+            ScheduledTask task = iterator.next();
+            if (task == null) break;
+            if (!task.serverLevel()) {
+                iterator.remove();
+                task.run();
+                taskCount--;
+            }
+        }
+    }
+
+    public ScheduledTask[] getMainThreadTasks() {
+        return (ScheduledTask[]) this.scheduledTasks.stream().filter(s -> !s.serverLevel()).toArray().clone();
+    }
+    // Canvas end
 
     // Paper start - Use getChunkIfLoadedImmediately
     @Override
@@ -303,6 +354,16 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
     // Paper end - rewrite chunk system
 
     protected Level(WritableLevelData worlddatamutable, ResourceKey<Level> resourcekey, RegistryAccess iregistrycustom, Holder<DimensionType> holder, Supplier<ProfilerFiller> supplier, boolean flag, boolean flag1, long i, int j, org.bukkit.generator.ChunkGenerator gen, org.bukkit.generator.BiomeProvider biomeProvider, org.bukkit.World.Environment env, java.util.function.Function<org.spigotmc.SpigotWorldConfig, io.papermc.paper.configuration.WorldConfiguration> paperWorldConfigCreator, java.util.concurrent.Executor executor) { // Paper - create paper world config & Anti-Xray
+        // Canvas start
+        super(resourcekey.location().toString());
+        this.setUncaughtExceptionHandler((thread1, throwable) -> {
+            ServerLevel.LOGGER.error("Uncaught exception in WorldTicker thread", throwable);
+        });
+        this.setPriority(Thread.NORM_PRIORITY + 2);
+        if (Runtime.getRuntime().availableProcessors() > 4) {
+            this.setPriority(8);
+        }
+        // Canvas end
         this.spigotConfig = new org.spigotmc.SpigotWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName()); // Spigot
         this.paperConfig = paperWorldConfigCreator.apply(this.spigotConfig); // Paper - create paper world config
         this.purpurConfig = new org.purpurmc.purpur.PurpurWorldConfig(((net.minecraft.world.level.storage.PrimaryLevelData) worlddatamutable).getLevelName(), env); // Purpur
@@ -982,6 +1043,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
     public void addBlockEntityTicker(TickingBlockEntity ticker) {
         (this.tickingBlockEntities ? this.pendingBlockEntityTickers : this.blockEntityTickers).add(ticker);
     }
+    private it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<TickingBlockEntity> toRemove = new it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<TickingBlockEntity>(); // Canvas
 
     protected void tickBlockEntities() {
         //ProfilerFiller gameprofilerfiller = this.getProfiler(); // Purpur
@@ -1001,7 +1063,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
         boolean flag = this.tickRateManager().runsNormally();
 
         int tilesThisCycle = 0;
-        var toRemove = new it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<TickingBlockEntity>(); // Paper - Fix MC-117075; use removeAll
+        // var toRemove = new it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<TickingBlockEntity>(); // Paper - Fix MC-117075; use removeAll // Canvas
         toRemove.add(null); // Paper - Fix MC-117075
         for (tileTickPosition = 0; tileTickPosition < this.blockEntityTickers.size(); tileTickPosition++) { // Paper - Disable tick limiters
             this.tileTickPosition = (this.tileTickPosition < this.blockEntityTickers.size()) ? this.tileTickPosition : 0;
@@ -1018,6 +1080,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable, ca.spottedl
             }
         }
         this.blockEntityTickers.removeAll(toRemove); // Paper - Fix MC-117075
+        toRemove.clear(); // Canvas
 
         //this.timings.tileEntityTick.stopTiming(); // Spigot // Purpur
         this.tickingBlockEntities = false;
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
index f2e11bff414b521295bde721e01ae2166a6a3fd6..592c54040f28b49a5e36ac380fd246653dc40936 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunkSection.java
@@ -19,8 +19,8 @@ public class LevelChunkSection {
     public static final int SECTION_HEIGHT = 16;
     public static final int SECTION_SIZE = 4096;
     public static final int BIOME_CONTAINER_BITS = 2;
-    short nonEmptyBlockCount; // Paper - package private
-    private short tickingBlockCount;
+    public short nonEmptyBlockCount; // Paper - package private // Canvas - Implement noisium; why?
+    public short tickingBlockCount; // Canvas - AT
     private short tickingFluidCount;
     public final PalettedContainer<BlockState> states;
     // CraftBukkit start - read/write
@@ -203,17 +203,13 @@ public class LevelChunkSection {
     // CraftBukkit end
 
     public void fillBiomesFromNoise(BiomeResolver biomeSupplier, Climate.Sampler sampler, int x, int y, int z) {
-        PalettedContainer<Holder<Biome>> datapaletteblock = this.biomes.recreate();
-        boolean flag = true;
+        // Canvas start - Implement noisium; micro optimization
+        PalettedContainer<Holder<Biome>> palette = this.biomes.recreate();
 
-        for (int l = 0; l < 4; ++l) {
-            for (int i1 = 0; i1 < 4; ++i1) {
-                for (int j1 = 0; j1 < 4; ++j1) {
-                    datapaletteblock.getAndSetUnchecked(l, i1, j1, biomeSupplier.getNoiseBiome(x + l, y + i1, z + j1, sampler));
-                }
-            }
-        }
+        for (int y1 = 0; y1 < 4; ++y1) for (int z1 = 0; z1 < 4; ++z1) for (int x1 = 0; x1 < 4; ++x1)
+            palette.getAndSetUnchecked(x1, y1, z1, biomeSupplier.getNoiseBiome(x + x1, y + y1, z + z1, sampler));
 
-        this.biomes = datapaletteblock;
+        this.biomes = palette;
+        // Canvas end - Implement noisium; micro optimization
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
index 926c81a25180d508d662eb3fa35f771636164694..51d10fd15b56c48a36ce111ca4d6b154bbee937f 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -29,8 +29,8 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
     private final PaletteResize<T> dummyPaletteResize = (newSize, added) -> 0;
     public final IdMap<T> registry;
     private final T @org.jetbrains.annotations.Nullable [] presetValues; // Paper - Anti-Xray - Add preset values
-    private volatile PalettedContainer.Data<T> data;
-    private final PalettedContainer.Strategy strategy;
+    public volatile PalettedContainer.Data<T> data; // Canvas - AT (private -> public)
+    public final PalettedContainer.Strategy strategy; // Canvas - AT (private -> public)
     // private final ThreadingDetector threadingDetector = new ThreadingDetector("PalettedContainer"); // Paper - unused
 
     public void acquire() {
@@ -386,7 +386,7 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
         void accept(T object, int count);
     }
 
-    static record Data<T>(PalettedContainer.Configuration<T> configuration, BitStorage storage, Palette<T> palette) {
+    public static record Data<T>(PalettedContainer.Configuration<T> configuration, BitStorage storage, Palette<T> palette) { // Canvas - AT (package-private -> public)
         public void copyFrom(Palette<T> palette, BitStorage storage) {
             for (int i = 0; i < storage.getSize(); i++) {
                 T object = palette.valueFor(storage.get(i));
diff --git a/src/main/java/net/minecraft/world/level/entity/EntityTickList.java b/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
index d8b4196adf955f8d414688dc451caac2d9c609d9..931467c580afc6b7e323f0cc4ef54010c1cee869 100644
--- a/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
+++ b/src/main/java/net/minecraft/world/level/entity/EntityTickList.java
@@ -4,13 +4,15 @@ import it.unimi.dsi.fastutil.ints.Int2ObjectLinkedOpenHashMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap.Entry;
+import java.util.Iterator;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.function.Consumer;
 import javax.annotation.Nullable;
 import net.minecraft.world.entity.Entity;
 
 public class EntityTickList {
-    private final ca.spottedleaf.moonrise.common.list.IteratorSafeOrderedReferenceSet<net.minecraft.world.entity.Entity> entities = new ca.spottedleaf.moonrise.common.list.IteratorSafeOrderedReferenceSet<>(); // Paper - rewrite chunk system
-
+    // private final ca.spottedleaf.moonrise.common.list.IteratorSafeOrderedReferenceSet<net.minecraft.world.entity.Entity> entities = new ca.spottedleaf.moonrise.common.list.IteratorSafeOrderedReferenceSet<>(); // Paper - rewrite chunk system
+    private final ConcurrentLinkedQueue<Entity> entities = new ConcurrentLinkedQueue<>(); // Canvas
     private void ensureActiveIsNotIterated() {
         // Paper - rewrite chunk system
     }
@@ -33,13 +35,13 @@ public class EntityTickList {
         // Paper start - rewrite chunk system
         // To ensure nothing weird happens with dimension travelling, do not iterate over new entries...
         // (by dfl iterator() is configured to not iterate over new entries)
-        final ca.spottedleaf.moonrise.common.list.IteratorSafeOrderedReferenceSet.Iterator<Entity> iterator = this.entities.iterator();
+        Iterator<Entity> iterator = this.entities.iterator();
         try {
             while (iterator.hasNext()) {
                 action.accept(iterator.next());
             }
         } finally {
-            iterator.finishedIterating();
+            // iterator.finishedIterating();
         }
         // Paper end - rewrite chunk system
     }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
index 68be0d51aa64b5d917fb53dbbbdf8966d4f4abd8..a4787332acb2962648e5553a267be0c830f4e4a9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -51,6 +51,7 @@ import org.apache.commons.lang3.mutable.MutableObject;
 
 public final class NoiseBasedChunkGenerator extends ChunkGenerator {
 
+    public static boolean NOISIUM = true; // Canvas - Implement noisium
     public static final MapCodec<NoiseBasedChunkGenerator> CODEC = RecordCodecBuilder.mapCodec((instance) -> {
         return instance.group(BiomeSource.CODEC.fieldOf("biome_source").forGetter((chunkgeneratorabstract) -> {
             return chunkgeneratorabstract.biomeSource;
@@ -377,6 +378,20 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
 
                                 iblockdata = this.debugPreliminarySurfaceLevel(noisechunk, j4, j3, i5, iblockdata);
                                 if (iblockdata != NoiseBasedChunkGenerator.AIR && !SharedConstants.debugVoidTerrain(chunk.getPos())) {
+                                    if (NOISIUM) {
+                                        // Canvas start - Implement noisium
+                                        chunksection.nonEmptyBlockCount++;
+
+                                        if (!iblockdata.getFluidState().isEmpty()) chunksection.nonEmptyBlockCount++;
+                                        if (iblockdata.isRandomlyTicking()) chunksection.tickingBlockCount++;
+
+                                        chunksection.states.data.storage().set(
+                                                chunksection.states.strategy.getIndex(k4, k3, j5),
+                                                chunksection.states.data.palette().idFor(iblockdata)
+                                        );
+                                        // Canvas end - Implement noisium
+                                    }
+
                                     chunksection.setBlockState(k4, k3, j5, iblockdata, false);
                                     heightmap.update(k4, j3, j5, iblockdata);
                                     heightmap1.update(k4, j3, j5, iblockdata);
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
index 52fcf1b92854e5c67c51a83d31b4a136413b54e0..dfd162547c851529b33ad79362cfbb3c246d6463 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseSettings.java
@@ -8,7 +8,12 @@ import net.minecraft.core.QuartPos;
 import net.minecraft.world.level.LevelHeightAccessor;
 import net.minecraft.world.level.dimension.DimensionType;
 
-public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int noiseSizeVertical) {
+// Canvas start - Implement noisium
+public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int noiseSizeVertical, int cellHeight, int cellWidth) {
+    public NoiseSettings(int minY, int height, int noiseSizeHorizontal, int noiseSizeVertical) {
+        this(minY, height, noiseSizeHorizontal, noiseSizeVertical, QuartPos.toBlock(noiseSizeHorizontal), QuartPos.toBlock(noiseSizeVertical));
+    }
+// Canvas end - Implement noisium
     public static final Codec<NoiseSettings> CODEC = RecordCodecBuilder.<NoiseSettings>create(
             instance -> instance.group(
                         Codec.intRange(DimensionType.MIN_Y, DimensionType.MAX_Y).fieldOf("min_y").forGetter(NoiseSettings::minY),
@@ -44,11 +49,11 @@ public record NoiseSettings(int minY, int height, int noiseSizeHorizontal, int n
     }
 
     public int getCellHeight() {
-        return QuartPos.toBlock(this.noiseSizeVertical());
+        return this.cellHeight; // Canvas - Implement noisium
     }
 
     public int getCellWidth() {
-        return QuartPos.toBlock(this.noiseSizeHorizontal());
+        return this.cellWidth; // Canvas - Implement noisium
     }
 
     public NoiseSettings clampToHeightAccessor(LevelHeightAccessor world) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java b/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
index afdbc74a3012fa717f59ecef613567338d285b7b..94b7fc27eb01260cb8565913dabb75753f82e6ca 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/material/MaterialRuleList.java
@@ -12,9 +12,7 @@ public record MaterialRuleList(List<NoiseChunk.BlockStateFiller> materialRuleLis
     public BlockState calculate(DensityFunction.FunctionContext pos) {
         for (NoiseChunk.BlockStateFiller blockStateFiller : this.materialRuleList) {
             BlockState blockState = blockStateFiller.calculate(pos);
-            if (blockState != null) {
-                return blockState;
-            }
+            if (blockState == null) continue; return blockState; // Canvas - Implement noisium
         }
 
         return null;
diff --git a/src/main/java/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java b/src/main/java/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
index 106af2b2c7ff72c7549975aef75cdcff8d9a7d97..98f4a1c60f90e7ef6f43e48f2ec82d8034076767 100644
--- a/src/main/java/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
+++ b/src/main/java/net/minecraft/world/level/redstone/CollectingNeighborUpdater.java
@@ -4,6 +4,8 @@ import com.mojang.logging.LogUtils;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.NoSuchElementException;
+import java.util.concurrent.ConcurrentLinkedDeque;
 import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
@@ -16,7 +18,7 @@ public class CollectingNeighborUpdater implements NeighborUpdater {
     private static final Logger LOGGER = LogUtils.getLogger();
     private final Level level;
     private final int maxChainedNeighborUpdates;
-    private final ArrayDeque<CollectingNeighborUpdater.NeighborUpdates> stack = new ArrayDeque<>();
+    private final ConcurrentLinkedDeque<NeighborUpdates> stack = new ConcurrentLinkedDeque<>(); // Canvas
     private final List<CollectingNeighborUpdater.NeighborUpdates> addedThisLayer = new ArrayList<>();
     private int count = 0;
 
@@ -55,10 +57,11 @@ public class CollectingNeighborUpdater implements NeighborUpdater {
             if (bl) {
                 this.addedThisLayer.add(entry);
             } else {
+                if (entry == null) return; // Canvas
                 this.stack.push(entry);
             }
         } else if (this.count - 1 == this.maxChainedNeighborUpdates) {
-            LOGGER.error("Too many chained neighbor updates. Skipping the rest. First skipped position: " + pos.toShortString());
+            LOGGER.error("Too many chained neighbor updates. Skipping the rest. First skipped position: {}", pos.toShortString()); // Canvas
         }
 
         if (!bl) {
@@ -70,6 +73,7 @@ public class CollectingNeighborUpdater implements NeighborUpdater {
         try {
             while (!this.stack.isEmpty() || !this.addedThisLayer.isEmpty()) {
                 for (int i = this.addedThisLayer.size() - 1; i >= 0; i--) {
+                    if (this.addedThisLayer.get(i) == null) continue; // Canvas
                     this.stack.push(this.addedThisLayer.get(i));
                 }
 
@@ -78,7 +82,17 @@ public class CollectingNeighborUpdater implements NeighborUpdater {
 
                 while (this.addedThisLayer.isEmpty()) {
                     if (!neighborUpdates.runNext(this.level)) {
+                        // Canvas start
+                        if (!this.stack.isEmpty()) {
+                        try {
                         this.stack.pop();
+                        } catch (NoSuchElementException e) {
+                            // Ignore throw, its fineeeee
+                        } catch (Throwable e) {
+                            throw e;
+                        }
+                        }
+                        // Canvas end
                         break;
                     }
                 }
diff --git a/src/main/java/net/minecraft/world/ticks/LevelChunkTicks.java b/src/main/java/net/minecraft/world/ticks/LevelChunkTicks.java
index c42c0d1e4da30aa15f32d4ca524aeabd26fc50cf..9d1af7d11de934692976d6c4f82c90c8fcd28d08 100644
--- a/src/main/java/net/minecraft/world/ticks/LevelChunkTicks.java
+++ b/src/main/java/net/minecraft/world/ticks/LevelChunkTicks.java
@@ -9,6 +9,7 @@ import java.util.Optional;
 import java.util.PriorityQueue;
 import java.util.Queue;
 import java.util.Set;
+import java.util.concurrent.PriorityBlockingQueue;
 import java.util.function.BiConsumer;
 import java.util.function.Function;
 import java.util.function.Predicate;
@@ -19,7 +20,7 @@ import net.minecraft.nbt.ListTag;
 import net.minecraft.world.level.ChunkPos;
 
 public class LevelChunkTicks<T> implements SerializableTickContainer<T>, TickContainerAccess<T>, ca.spottedleaf.moonrise.patches.chunk_system.ticks.ChunkSystemLevelChunkTicks { // Paper - rewrite chunk system
-    private final Queue<ScheduledTick<T>> tickQueue = new PriorityQueue<>(ScheduledTick.DRAIN_ORDER);
+    private final Queue<ScheduledTick<T>> tickQueue = new PriorityBlockingQueue<>(11, ScheduledTick.DRAIN_ORDER); // Canvas
     @Nullable
     private List<SavedTick<T>> pendingTicks;
     private final Set<ScheduledTick<?>> ticksPerPosition = new ObjectOpenCustomHashSet<>(ScheduledTick.UNIQUE_TICK_HASH);
diff --git a/src/main/java/net/minecraft/world/ticks/LevelTicks.java b/src/main/java/net/minecraft/world/ticks/LevelTicks.java
index a6d62abd3102770652f914b9d697c6d3c2533cfc..59a419eae9fc3cfe1060de2ce636cf186545d42d 100644
--- a/src/main/java/net/minecraft/world/ticks/LevelTicks.java
+++ b/src/main/java/net/minecraft/world/ticks/LevelTicks.java
@@ -11,11 +11,15 @@ import it.unimi.dsi.fastutil.objects.ObjectOpenCustomHashSet;
 import java.util.ArrayDeque;
 import java.util.ArrayList;
 import java.util.Comparator;
+import java.util.Iterator;
 import java.util.List;
 import java.util.LongSummaryStatistics;
+import java.util.Map;
 import java.util.PriorityQueue;
 import java.util.Queue;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentLinkedDeque;
 import java.util.function.BiConsumer;
 import java.util.function.LongPredicate;
 import java.util.function.Predicate;
@@ -32,10 +36,10 @@ public class LevelTicks<T> implements LevelTickAccess<T> {
     private static final Comparator<LevelChunkTicks<?>> CONTAINER_DRAIN_ORDER = (a, b) -> ScheduledTick.INTRA_TICK_DRAIN_ORDER.compare(a.peek(), b.peek());
     private final LongPredicate tickCheck;
     private final Supplier<ProfilerFiller> profiler;
-    private final Long2ObjectMap<LevelChunkTicks<T>> allContainers = new Long2ObjectOpenHashMap<>();
-    private final Long2LongMap nextTickForContainer = Util.make(new Long2LongOpenHashMap(), map -> map.defaultReturnValue(Long.MAX_VALUE));
+    private final ConcurrentHashMap<Long, LevelChunkTicks<T>> allContainers = new ConcurrentHashMap<>();
+    private final ConcurrentHashMap<Long, Long> nextTickForContainer = new ConcurrentHashMap<>();
     private final Queue<LevelChunkTicks<T>> containersToTick = new PriorityQueue<>(CONTAINER_DRAIN_ORDER);
-    private final Queue<ScheduledTick<T>> toRunThisTick = new ArrayDeque<>();
+    private final Queue<ScheduledTick<T>> toRunThisTick = new ConcurrentLinkedDeque<>(); // Canvas
     private final List<ScheduledTick<T>> alreadyRunThisTick = new ArrayList<>();
     private final Set<ScheduledTick<?>> toRunThisTickSet = new ObjectOpenCustomHashSet<>(ScheduledTick.UNIQUE_TICK_HASH);
     private final BiConsumer<LevelChunkTicks<T>, ScheduledTick<T>> chunkScheduleUpdater = (chunkTickScheduler, tick) -> {
@@ -100,12 +104,12 @@ public class LevelTicks<T> implements LevelTickAccess<T> {
     }
 
     private void sortContainersToTick(long time) {
-        ObjectIterator<Entry> objectIterator = Long2LongMaps.fastIterator(this.nextTickForContainer);
+        Iterator<Map.Entry<Long, Long>> objectIterator = this.nextTickForContainer.entrySet().iterator();
 
         while (objectIterator.hasNext()) {
-            Entry entry = objectIterator.next();
-            long l = entry.getLongKey();
-            long m = entry.getLongValue();
+            Map.Entry<Long, Long> entry = objectIterator.next();
+            long l = entry.getKey();
+            long m = entry.getValue();
             if (m <= time) {
                 LevelChunkTicks<T> levelChunkTicks = this.allContainers.get(l);
                 if (levelChunkTicks == null) {
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 997ec241139dca9d26c85caf776fe5d4189bcd03..9db1e80508264ae3d79e327a4c8811cc6e2f3a8a 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1226,6 +1226,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         io.papermc.paper.command.PaperCommands.registerCommands(this.console); // Paper
         org.purpurmc.purpur.PurpurConfig.registerCommands(); // Purpur
+        me.dueris.canvas.CanvasConfig.registerCommands(); // Canvas
         this.overrideAllCommandBlockCommands = this.commandsConfiguration.getStringList("command-block-overrides").contains("*");
         this.ignoreVanillaPermissions = this.commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index 0056843aabf3a46251eda8667ddb43da59c9d0ab..4627877d1099c1efee7134b4bcd76a36c5dfb3cb 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -169,6 +169,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     public int getEntityCount() {
         int ret = 0;
         for (net.minecraft.world.entity.Entity entity : world.getEntities().getAll()) {
+            if (entity == null) continue; // Canvas
             if (entity.isChunkLoaded()) {
                 ++ret;
             }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 495dcc05623ce974812b7749f5550ddb91ed4f04..5da270c90219383e67369f56bcab6859bfbf7d54 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -32,6 +32,8 @@ import java.util.Set;
 import java.util.UUID;
 import java.util.WeakHashMap;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import javax.annotation.Nullable;
@@ -1003,20 +1005,20 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
     public void sendMultiBlockChange(final Map<? extends io.papermc.paper.math.Position, BlockData> blockChanges) {
         if (this.getHandle().connection == null) return;
 
-        Map<SectionPos, it.unimi.dsi.fastutil.shorts.Short2ObjectMap<net.minecraft.world.level.block.state.BlockState>> sectionMap = new HashMap<>();
+        Map<SectionPos, ConcurrentHashMap<Short, net.minecraft.world.level.block.state.BlockState>> sectionMap = new HashMap<>();
 
         for (Map.Entry<? extends io.papermc.paper.math.Position, BlockData> entry : blockChanges.entrySet()) {
             BlockData blockData = entry.getValue();
             BlockPos blockPos = io.papermc.paper.util.MCUtil.toBlockPos(entry.getKey());
             SectionPos sectionPos = SectionPos.of(blockPos);
 
-            it.unimi.dsi.fastutil.shorts.Short2ObjectMap<net.minecraft.world.level.block.state.BlockState> sectionData = sectionMap.computeIfAbsent(sectionPos, key -> new it.unimi.dsi.fastutil.shorts.Short2ObjectArrayMap<>());
+            ConcurrentHashMap<Short, net.minecraft.world.level.block.state.BlockState> sectionData = sectionMap.computeIfAbsent(sectionPos, key -> new ConcurrentHashMap<>());
             sectionData.put(SectionPos.sectionRelativePos(blockPos), ((CraftBlockData) blockData).getState());
         }
 
-        for (Map.Entry<SectionPos, it.unimi.dsi.fastutil.shorts.Short2ObjectMap<net.minecraft.world.level.block.state.BlockState>> entry : sectionMap.entrySet()) {
+        for (Map.Entry<SectionPos, ConcurrentHashMap<Short, net.minecraft.world.level.block.state.BlockState>> entry : sectionMap.entrySet()) {
             SectionPos sectionPos = entry.getKey();
-            it.unimi.dsi.fastutil.shorts.Short2ObjectMap<net.minecraft.world.level.block.state.BlockState> blockData = entry.getValue();
+            ConcurrentHashMap<Short, net.minecraft.world.level.block.state.BlockState> blockData = entry.getValue();
 
             net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket packet = new net.minecraft.network.protocol.game.ClientboundSectionBlocksUpdatePacket(sectionPos, blockData);
             this.getHandle().connection.send(packet);
@@ -1060,10 +1062,10 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         this.sendBlockChanges(blocks);
     }
 
-    private record ChunkSectionChanges(ShortSet positions, List<net.minecraft.world.level.block.state.BlockState> blockData) {
+    private record ChunkSectionChanges(ConcurrentLinkedQueue<Short> positions, List<net.minecraft.world.level.block.state.BlockState> blockData) {
 
         public ChunkSectionChanges() {
-            this(new ShortArraySet(), new ArrayList<>());
+            this(new ConcurrentLinkedQueue(), new ArrayList<>());
         }
     }
 
diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
index 284ba621fcf28d2a0b2a4184506550639a1ef894..f293c2bb586a6a570ad014a492f226cb10752dff 100644
--- a/src/main/java/org/spigotmc/WatchdogThread.java
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -6,6 +6,8 @@ import java.lang.management.ThreadInfo;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+
 import org.bukkit.Bukkit;
 
 public class WatchdogThread extends Thread
@@ -62,17 +64,33 @@ public class WatchdogThread extends Thread
             WatchdogThread.instance.stopping = true;
         }
     }
+    private static final long TIME_THRESHOLD = 45_000_000_000L; // Canvas
 
     @Override
     public void run()
     {
         while ( !this.stopping )
         {
-            //
             // Paper start
             Logger log = Bukkit.getServer().getLogger();
             long currentTime = WatchdogThread.monotonicMillis();
             MinecraftServer server = MinecraftServer.getServer();
+            // Canvas start
+            long curTime = System.nanoTime();
+            server.getAllLevels().forEach(level -> {
+                long elapsedTime = curTime - level.currentTime;
+
+                    if (elapsedTime >= TIME_THRESHOLD && level.running) {
+                        log.log(Level.SEVERE, "------------------------------");
+                        log.log(Level.SEVERE, "Well it seems something went wrong! A ServerLevel is crashing, wonderful.");
+                        for (final StackTraceElement stackTraceElement : level.getStackTrace()) {
+                            log.log(Level.SEVERE, "\t\t" + stackTraceElement.toString());
+                        }
+                        dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( level.getId(), Integer.MAX_VALUE ), log );
+                        log.log(Level.SEVERE, "------------------------------");
+                    }
+            });
+            // Canvas end
             if ( this.lastTick != 0 && this.timeoutTime > 0 && WatchdogThread.hasStarted && (!server.isRunning() || (currentTime > this.lastTick + this.earlyWarningEvery && !DISABLE_WATCHDOG) )) // Paper - add property to disable
             {
                 boolean isLongTimeout = currentTime > lastTick + timeoutTime || (!server.isRunning() && !server.hasStopped() && currentTime > lastTick + 1000);
@@ -190,7 +208,7 @@ public class WatchdogThread extends Thread
             }
         }
         log.log( Level.SEVERE, "\tStack:" );
-        //
+
         for ( StackTraceElement stack : io.papermc.paper.util.StacktraceDeobfuscator.INSTANCE.deobfuscateStacktrace(thread.getStackTrace()) ) // Paper
         {
             log.log( Level.SEVERE, "\t\t" + stack );
