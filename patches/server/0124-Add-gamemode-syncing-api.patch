From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris MC <purplewolf.mc1@gmail.com>
Date: Fri, 17 Nov 2023 20:58:10 +0000
Subject: [PATCH] Add gamemode syncing api


diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index e806dce9d9aa43069fa5d6d8f53084ef1df3efc2..81204da89eba7d4e391b7b8bbc94608e79f8f744 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -263,6 +263,64 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         this.perm.recalculatePermissions();
     }
+    // Canvas start - more player api
+
+    /**
+     * For those seeing this source, its documented what it means
+     * in the API interface, please see that for details on how
+     * this works and what this means
+     */
+    @Override
+    public void setClientGamemode(GameMode gamemode){
+        this.getHandle().connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.CHANGE_GAME_MODE, this.getGamemodeInt(gamemode)));
+    }
+
+    /**
+     * For those seeing this source, its documented what it means
+     * in the API interface, please see that for details on how
+     * this works and what this means
+     */
+    @Override
+    public void setServerGamemode(GameMode gamemode){
+        final GameMode lastGamemode = this.getGameMode();
+        this.setGameMode(gamemode);
+        this.getHandle().connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.CHANGE_GAME_MODE, this.getGamemodeInt(lastGamemode)));
+    }
+
+    private int getGamemodeInt(GameMode gamemode){
+        switch(gamemode){
+            case SURVIVAL -> {
+                return 0;
+            }
+
+            case CREATIVE -> {
+                return 1;
+            }
+
+            case SPECTATOR -> {
+                return 3;
+            }
+
+            case ADVENTURE -> {
+                return 2;
+            }
+
+            default -> {
+                return 0;
+            }
+        }
+    }
+
+    /**
+     * For those seeing this source, its documented what it means
+     * in the API interface, please see that for details on how
+     * this works and what this means
+     */
+    @Override
+    public void resyncGamemode(){
+        this.setGameMode(this.getGameMode());
+    }
+    // Canvas end
 
     @Override
     public boolean isOnline() {
