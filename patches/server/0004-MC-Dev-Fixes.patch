From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <122416109+Dueris@users.noreply.github.com>
Date: Sun, 14 Apr 2024 17:38:33 +0000
Subject: [PATCH] MC Dev Fixes


diff --git a/src/main/java/net/minecraft/FileUtil.java b/src/main/java/net/minecraft/FileUtil.java
index e8e65394aac658604debefb3a11eaaab003af7fe..aeceb050d279ff66f3922a182b4f4bc54c8764a5 100644
--- a/src/main/java/net/minecraft/FileUtil.java
+++ b/src/main/java/net/minecraft/FileUtil.java
@@ -107,33 +107,87 @@ public class FileUtil {
     public static DataResult<List<String>> decomposePath(String path) {
         int i = path.indexOf(47);
         if (i == -1) {
-            return switch (path) {
-                case "", ".", ".." -> DataResult.error(() -> "Invalid path '" + path + "'");
-                default -> !isValidStrictPathSegment(path) ? DataResult.error(() -> "Invalid path '" + path + "'") : DataResult.success(List.of(path));
-            };
+            // Canvas start - decompile issue
+            byte var8 = -1;
+            switch(path.hashCode()) {
+            case 0:
+                if (path.equals("")) {
+                var8 = 0;
+                }
+                break;
+            case 46:
+                if (path.equals(".")) {
+                    var8 = 1;
+                }
+                break;
+            case 1472:
+                if (path.equals("..")) {
+                    var8 = 2;
+                }
+            }
+    
+            DataResult var10000;
+            switch(var8) {
+            case 0:
+            case 1:
+            case 2:
+                var10000 = DataResult.error(() -> {
+                    return "Invalid path '" + path + "'";
+                });
+                break;
+            default:
+                var10000 = !isValidStrictPathSegment(path) ? DataResult.error(() -> {
+                    return "Invalid path '" + path + "'";
+                }) : DataResult.success(List.of(path));
+            }
+    
+            return var10000;
         } else {
-            List<String> list = new ArrayList<>();
+            List<String> list = new ArrayList();
             int j = 0;
             boolean bl = false;
-
-            while (true) {
+    
+            while(true) {
                 String string = path.substring(j, i);
-                switch (string) {
-                    case "":
-                    case ".":
-                    case "..":
-                        return DataResult.error(() -> "Invalid segment '" + string + "' in path '" + path + "'");
+                byte var7 = -1;
+                switch(string.hashCode()) {
+                case 0:
+                    if (string.equals("")) {
+                    var7 = 0;
+                    }
+                    break;
+                case 46:
+                    if (string.equals(".")) {
+                    var7 = 1;
+                    }
+                    break;
+                case 1472:
+                    if (string.equals("..")) {
+                    var7 = 2;
+                    }
                 }
-
+    
+                switch(var7) {
+                case 0:
+                case 1:
+                case 2:
+                    return DataResult.error(() -> {
+                    return "Invalid segment '" + string + "' in path '" + path + "'";
+                    });
+                }
+            // Canvas end
+    
                 if (!isValidStrictPathSegment(string)) {
-                    return DataResult.error(() -> "Invalid segment '" + string + "' in path '" + path + "'");
+                    return DataResult.error(() -> {
+                    return "Invalid segment '" + string + "' in path '" + path + "'";
+                    });
                 }
-
+    
                 list.add(string);
                 if (bl) {
                     return DataResult.success(list);
                 }
-
+    
                 j = i + 1;
                 i = path.indexOf(47, j);
                 if (i == -1) {
