From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Sat, 28 Dec 2024 14:55:20 -0800
Subject: [PATCH] Optimize PalettedContainer packing


diff --git a/src/main/java/net/minecraft/util/SimpleBitStorage.java b/src/main/java/net/minecraft/util/SimpleBitStorage.java
index d99ec470b4653beab630999a5b2c1a6428b20c38..82e50ec79046f23bfc9b279afa776137aeb7d9c5 100644
--- a/src/main/java/net/minecraft/util/SimpleBitStorage.java
+++ b/src/main/java/net/minecraft/util/SimpleBitStorage.java
@@ -2,6 +2,7 @@ package net.minecraft.util;
 
 import java.util.function.IntConsumer;
 import javax.annotation.Nullable;
+import net.minecraft.world.level.chunk.Palette;
 import org.apache.commons.lang3.Validate;
 
 public class SimpleBitStorage implements BitStorage {
@@ -472,4 +473,43 @@ public class SimpleBitStorage implements BitStorage {
             super(message);
         }
     }
+    // Canvas start
+
+    public <T> void lithium$compact(Palette<T> srcPalette, Palette<T> dstPalette, short[] out) {
+        if (this.size >= Short.MAX_VALUE) {
+            throw new IllegalStateException("Array too large");
+        }
+
+        if (this.size != out.length) {
+            throw new IllegalStateException("Array size mismatch");
+        }
+
+        short[] mappings = new short[(int) (this.mask + 1)];
+
+        int idx = 0;
+
+        for (long word : this.data) {
+            long bits = word;
+
+            for (int elementIdx = 0; elementIdx < this.valuesPerLong; ++elementIdx) {
+                int value = (int) (bits & this.mask);
+                int remappedId = mappings[value];
+
+                if (remappedId == 0) {
+                    remappedId = dstPalette.idFor(srcPalette.valueFor(value)) + 1;
+                    mappings[value] = (short) remappedId;
+                }
+
+                out[idx] = (short) (remappedId - 1);
+                bits >>= this.bits;
+
+                ++idx;
+
+                if (idx >= this.size) {
+                    return;
+                }
+            }
+        }
+    }
+    // Canvas end
 }
diff --git a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
index 1ee524d865559a32f5f6adfae089e14d74ba77df..12cab029d6dbbe0fc86d25a3e943b10965476097 100644
--- a/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/PalettedContainer.java
@@ -32,6 +32,22 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
     private final T @org.jetbrains.annotations.Nullable [] presetValues; // Paper - Anti-Xray - Add preset values
     public volatile PalettedContainer.Data<T> data; // Paper - optimise collisions - public
     public final PalettedContainer.Strategy strategy; // Canvas - private -> public
+    // Canvas start
+    private static final ThreadLocal<short[]> CACHED_ARRAY_4096 = ThreadLocal.withInitial(() -> new short[4096]);
+    private static final ThreadLocal<short[]> CACHED_ARRAY_64 = ThreadLocal.withInitial(() -> new short[64]);
+
+    private Optional<LongStream> asOptional(long[] data) {
+        return Optional.of(Arrays.stream(data));
+    }
+
+    private short[] getOrCreate(int size) {
+        return switch (size) {
+            case 64 -> CACHED_ARRAY_64.get();
+            case 4096 -> CACHED_ARRAY_4096.get();
+            default -> new short[size];
+        };
+    }
+    // Canvas end
     // private final ThreadingDetector threadingDetector = new ThreadingDetector("PalettedContainer"); // Paper - unused
 
     public void acquire() {
@@ -346,32 +362,55 @@ public class PalettedContainer<T> implements PaletteResize<T>, PalettedContainer
     }
 
     @Override
-    public synchronized PalettedContainerRO.PackedData<T> pack(IdMap<T> idList, PalettedContainer.Strategy paletteProvider) { // Paper - synchronize
+    // Canvas start - optimize impl
+    public synchronized PalettedContainerRO.PackedData<T> pack(IdMap<T> idList, PalettedContainer.Strategy provider) { // Paper - synchronize
         this.acquire();
 
-        PalettedContainerRO.PackedData var12;
-        try {
-            HashMapPalette<T> hashMapPalette = new HashMapPalette<>(idList, this.data.storage.getBits(), this.dummyPaletteResize);
-            int i = paletteProvider.size();
-            int[] is = new int[i];
-            this.data.storage.unpack(is);
-            swapPalette(is, id -> hashMapPalette.idFor(this.data.palette.valueFor(id)));
-            int j = paletteProvider.calculateBitsForSerialization(idList, hashMapPalette.getSize());
-            Optional<LongStream> optional;
-            if (j != 0) {
-                SimpleBitStorage simpleBitStorage = new SimpleBitStorage(j, i, is);
-                optional = Optional.of(Arrays.stream(simpleBitStorage.getRaw()));
+        // The palette that will be serialized
+        LithiumHashPalette<T> hashPalette = null;
+        Optional<LongStream> data = Optional.empty();
+        List<T> elements = null;
+
+        final Palette<T> palette = this.data.palette();
+        final BitStorage storage = this.data.storage();
+        if (storage instanceof ZeroBitStorage || palette.getSize() == 1) {
+            // If the palette only contains one entry, don't attempt to repack it.
+            elements = List.of(palette.valueFor(0));
+        } else if (palette instanceof LithiumHashPalette<T> lithiumHashPalette) {
+            hashPalette = lithiumHashPalette;
+        }
+
+        if (elements == null) {
+            LithiumHashPalette<T> compactedPalette = new LithiumHashPalette<>(idList, storage.getBits(), this.dummyPaletteResize);
+            short[] array = this.getOrCreate(provider.size());
+
+            ((SimpleBitStorage) storage).lithium$compact(this.data.palette(), compactedPalette, array);
+
+            // If the palette didn't change during compaction, do a simple copy of the data array
+            if (hashPalette != null && hashPalette.getSize() == compactedPalette.getSize() && storage.getBits() == provider.calculateBitsForSerialization(idList, hashPalette.getSize())) { // paletteSize can de-sync from palette - see https://github.com/CaffeineMC/lithium-fabric/issues/279
+                data = this.asOptional(storage.getRaw().clone());
+                elements = hashPalette.getElements();
             } else {
-                optional = Optional.empty();
-            }
+                int bits = provider.calculateBitsForSerialization(idList, compactedPalette.getSize());
+                if (bits != 0) {
+                    // Re-pack the integer array as the palette has changed size
+                    SimpleBitStorage copy = new SimpleBitStorage(bits, array.length);
+                    for (int i = 0; i < array.length; ++i) {
+                        copy.set(i, array[i]);
+                    }
 
-            var12 = new PalettedContainerRO.PackedData<>(hashMapPalette.getEntries(), optional);
-        } finally {
-            this.release();
+                    // We don't need to clone the data array as we are the sole owner of it
+                    data = this.asOptional(copy.getRaw());
+                }
+
+                elements = compactedPalette.getElements();
+            }
         }
 
-        return var12;
+        this.release();
+        return new PalettedContainerRO.PackedData<>(elements, data);
     }
+    // Canvas end
 
     private static <T> void swapPalette(int[] is, IntUnaryOperator applier) {
         int i = -1;
