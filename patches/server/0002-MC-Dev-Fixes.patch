From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Wed, 24 Jan 2024 09:19:40 +0000
Subject: [PATCH] MC-Dev Fixes


diff --git a/src/main/java/net/minecraft/FileUtil.java b/src/main/java/net/minecraft/FileUtil.java
index 83baed311b26961b34c301cad9d2239d188393a5..4ce295adf59f1f3171f28d4a17907f8bd6157df2 100644
--- a/src/main/java/net/minecraft/FileUtil.java
+++ b/src/main/java/net/minecraft/FileUtil.java
@@ -103,48 +103,87 @@ public class FileUtil {
     public static DataResult<List<String>> decomposePath(String path) {
         int i = path.indexOf(47);
         if (i == -1) {
+            // Canvas start - decompile issue
+            byte var8 = -1;
+            switch(path.hashCode()) {
+            case 0:
+                if (path.equals("")) {
+                var8 = 0;
+                }
+                break;
+            case 46:
+                if (path.equals(".")) {
+                    var8 = 1;
+                }
+                break;
+            case 1472:
+                if (path.equals("..")) {
+                    var8 = 2;
+                }
+            }
+    
             DataResult var10000;
-            switch (path) {
-                case "":
-                case ".":
-                case "..":
-                    var10000 = DataResult.error(() -> {
-                        return "Invalid path '" + path + "'";
-                    });
-                    break;
-                default:
-                    var10000 = !isValidStrictPathSegment(path) ? DataResult.error(() -> {
-                        return "Invalid path '" + path + "'";
-                    }) : DataResult.success(List.of(path));
+            switch(var8) {
+            case 0:
+            case 1:
+            case 2:
+                var10000 = DataResult.error(() -> {
+                    return "Invalid path '" + path + "'";
+                });
+                break;
+            default:
+                var10000 = !isValidStrictPathSegment(path) ? DataResult.error(() -> {
+                    return "Invalid path '" + path + "'";
+                }) : DataResult.success(List.of(path));
             }
-
+    
             return var10000;
         } else {
-            List<String> list = new ArrayList<>();
+            List<String> list = new ArrayList();
             int j = 0;
             boolean bl = false;
-
+    
             while(true) {
-                switch (path.substring(j, i)) {
-                    case "":
-                    case ".":
-                    case "..":
-                        return DataResult.error(() -> {
-                            return "Invalid segment '" + string + "' in path '" + path + "'";
-                        });
+                String string = path.substring(j, i);
+                byte var7 = -1;
+                switch(string.hashCode()) {
+                case 0:
+                    if (string.equals("")) {
+                    var7 = 0;
+                    }
+                    break;
+                case 46:
+                    if (string.equals(".")) {
+                    var7 = 1;
+                    }
+                    break;
+                case 1472:
+                    if (string.equals("..")) {
+                    var7 = 2;
+                    }
                 }
-
+    
+                switch(var7) {
+                case 0:
+                case 1:
+                case 2:
+                    return DataResult.error(() -> {
+                    return "Invalid segment '" + string + "' in path '" + path + "'";
+                    });
+                }
+            // Canvas end
+    
                 if (!isValidStrictPathSegment(string)) {
                     return DataResult.error(() -> {
-                        return "Invalid segment '" + string + "' in path '" + path + "'";
+                    return "Invalid segment '" + string + "' in path '" + path + "'";
                     });
                 }
-
+    
                 list.add(string);
                 if (bl) {
                     return DataResult.success(list);
                 }
-
+    
                 j = i + 1;
                 i = path.indexOf(47, j);
                 if (i == -1) {
