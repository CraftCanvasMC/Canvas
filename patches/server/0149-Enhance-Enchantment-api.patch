From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sat, 25 Nov 2023 12:36:34 -0800
Subject: [PATCH] Enhance Enchantment api


diff --git a/src/main/java/net/minecraft/world/item/enchantment/Enchantment.java b/src/main/java/net/minecraft/world/item/enchantment/Enchantment.java
index 7ff3741e189905637f96ed7ff99e1de0af0d43c0..acc0650087849362646dfab1eadd5c149f05f0d6 100644
--- a/src/main/java/net/minecraft/world/item/enchantment/Enchantment.java
+++ b/src/main/java/net/minecraft/world/item/enchantment/Enchantment.java
@@ -78,8 +78,16 @@ public abstract class Enchantment {
     }
 
     public final boolean isCompatibleWith(Enchantment other) {
-        return this.checkCompatibility(other) && other.checkCompatibility(this);
+        return canConflict ? this.checkCompatibility(other) && other.checkCompatibility(this) : true; // Canvas
     }
+    // Canvas start
+
+    public boolean canConflict = true;
+
+    public void setCanConflict(boolean canConflict){
+        this.canConflict = canConflict;
+    }
+    // Canvas end
 
     protected boolean checkCompatibility(Enchantment other) {
         return this != other;
diff --git a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
index a38149b8883195736ec6093aeb54971a89ec056c..1d32b09fc6ac6171b37ca5c279b7bea10e126445 100644
--- a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
+++ b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
@@ -1,6 +1,8 @@
 package org.bukkit.craftbukkit.enchantments;
 
+import me.dueris.canvas.world.damage.CraftDamageSource;
 import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.world.damagesource.DamageSources;
 import net.minecraft.world.item.enchantment.BindingCurseEnchantment;
 import net.minecraft.world.item.enchantment.VanishingCurseEnchantment;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
@@ -31,37 +33,39 @@ public class CraftEnchantment extends Enchantment {
     @Override
     public EnchantmentTarget getItemTarget() {
         switch (this.target.category) {
-        case ARMOR:
-            return EnchantmentTarget.ARMOR;
-        case ARMOR_FEET:
-            return EnchantmentTarget.ARMOR_FEET;
-        case ARMOR_HEAD:
-            return EnchantmentTarget.ARMOR_HEAD;
-        case ARMOR_LEGS:
-            return EnchantmentTarget.ARMOR_LEGS;
-        case ARMOR_CHEST:
-            return EnchantmentTarget.ARMOR_TORSO;
-        case DIGGER:
-            return EnchantmentTarget.TOOL;
-        case WEAPON:
-            return EnchantmentTarget.WEAPON;
-        case BOW:
-            return EnchantmentTarget.BOW;
-        case FISHING_ROD:
-            return EnchantmentTarget.FISHING_ROD;
-        case BREAKABLE:
-            return EnchantmentTarget.BREAKABLE;
-        case WEARABLE:
-            return EnchantmentTarget.WEARABLE;
-        case TRIDENT:
-            return EnchantmentTarget.TRIDENT;
-        case CROSSBOW:
-            return EnchantmentTarget.CROSSBOW;
-        case VANISHABLE:
-            return EnchantmentTarget.VANISHABLE;
-        case BOW_AND_CROSSBOW: return EnchantmentTarget.BOW_AND_CROSSBOW; // Purpur
-        default:
-            return null;
+            // Canvas start - fix indent
+            case ARMOR:
+                return EnchantmentTarget.ARMOR;
+            case ARMOR_FEET:
+                return EnchantmentTarget.ARMOR_FEET;
+            case ARMOR_HEAD:
+                return EnchantmentTarget.ARMOR_HEAD;
+            case ARMOR_LEGS:
+                return EnchantmentTarget.ARMOR_LEGS;
+            case ARMOR_CHEST:
+                return EnchantmentTarget.ARMOR_TORSO;
+            case DIGGER:
+                return EnchantmentTarget.TOOL;
+            case WEAPON:
+                return EnchantmentTarget.WEAPON;
+            case BOW:
+                return EnchantmentTarget.BOW;
+            case FISHING_ROD:
+                return EnchantmentTarget.FISHING_ROD;
+            case BREAKABLE:
+                return EnchantmentTarget.BREAKABLE;
+            case WEARABLE:
+                return EnchantmentTarget.WEARABLE;
+            case TRIDENT:
+                return EnchantmentTarget.TRIDENT;
+            case CROSSBOW:
+                return EnchantmentTarget.CROSSBOW;
+            case VANISHABLE:
+                return EnchantmentTarget.VANISHABLE;
+            case BOW_AND_CROSSBOW: return EnchantmentTarget.BOW_AND_CROSSBOW; // Purpur
+            default:
+                return null;
+            // Canvas end
         }
     }
 
@@ -84,86 +88,88 @@ public class CraftEnchantment extends Enchantment {
     public String getName() {
         // PAIL: migration paths
         switch (BuiltInRegistries.ENCHANTMENT.getId(this.target)) {
-        case 0:
-            return "PROTECTION_ENVIRONMENTAL";
-        case 1:
-            return "PROTECTION_FIRE";
-        case 2:
-            return "PROTECTION_FALL";
-        case 3:
-            return "PROTECTION_EXPLOSIONS";
-        case 4:
-            return "PROTECTION_PROJECTILE";
-        case 5:
-            return "OXYGEN";
-        case 6:
-            return "WATER_WORKER";
-        case 7:
-            return "THORNS";
-        case 8:
-            return "DEPTH_STRIDER";
-        case 9:
-            return "FROST_WALKER";
-        case 10:
-            return "BINDING_CURSE";
-        case 11:
-            return "SOUL_SPEED";
-        case 12:
-            return "SWIFT_SNEAK";
-        case 13:
-            return "DAMAGE_ALL";
-        case 14:
-            return "DAMAGE_UNDEAD";
-        case 15:
-            return "DAMAGE_ARTHROPODS";
-        case 16:
-            return "KNOCKBACK";
-        case 17:
-            return "FIRE_ASPECT";
-        case 18:
-            return "LOOT_BONUS_MOBS";
-        case 19:
-            return "SWEEPING_EDGE";
-        case 20:
-            return "DIG_SPEED";
-        case 21:
-            return "SILK_TOUCH";
-        case 22:
-            return "DURABILITY";
-        case 23:
-            return "LOOT_BONUS_BLOCKS";
-        case 24:
-            return "ARROW_DAMAGE";
-        case 25:
-            return "ARROW_KNOCKBACK";
-        case 26:
-            return "ARROW_FIRE";
-        case 27:
-            return "ARROW_INFINITE";
-        case 28:
-            return "LUCK";
-        case 29:
-            return "LURE";
-        case 30:
-            return "LOYALTY";
-        case 31:
-            return "IMPALING";
-        case 32:
-            return "RIPTIDE";
-        case 33:
-            return "CHANNELING";
-        case 34:
-            return "MULTISHOT";
-        case 35:
-            return "QUICK_CHARGE";
-        case 36:
-            return "PIERCING";
-        case 37:
-            return "MENDING";
-        case 38:
-            return "VANISHING_CURSE";
-        default:
-            return "UNKNOWN_ENCHANT_" + BuiltInRegistries.ENCHANTMENT.getId(this.target);
+            // Canvas start - fix indent
+            case 0:
+                return "PROTECTION_ENVIRONMENTAL";
+            case 1:
+                return "PROTECTION_FIRE";
+            case 2:
+                return "PROTECTION_FALL";
+            case 3:
+                return "PROTECTION_EXPLOSIONS";
+            case 4:
+                return "PROTECTION_PROJECTILE";
+            case 5:
+                return "OXYGEN";
+            case 6:
+                return "WATER_WORKER";
+            case 7:
+                return "THORNS";
+            case 8:
+                return "DEPTH_STRIDER";
+            case 9:
+                return "FROST_WALKER";
+            case 10:
+                return "BINDING_CURSE";
+            case 11:
+                return "SOUL_SPEED";
+            case 12:
+                return "SWIFT_SNEAK";
+            case 13:
+                return "DAMAGE_ALL";
+            case 14:
+                return "DAMAGE_UNDEAD";
+            case 15:
+                return "DAMAGE_ARTHROPODS";
+            case 16:
+                return "KNOCKBACK";
+            case 17:
+                return "FIRE_ASPECT";
+            case 18:
+                return "LOOT_BONUS_MOBS";
+            case 19:
+                return "SWEEPING_EDGE";
+            case 20:
+                return "DIG_SPEED";
+            case 21:
+                return "SILK_TOUCH";
+            case 22:
+                return "DURABILITY";
+            case 23:
+                return "LOOT_BONUS_BLOCKS";
+            case 24:
+                return "ARROW_DAMAGE";
+            case 25:
+                return "ARROW_KNOCKBACK";
+            case 26:
+                return "ARROW_FIRE";
+            case 27:
+                return "ARROW_INFINITE";
+            case 28:
+                return "LUCK";
+            case 29:
+                return "LURE";
+            case 30:
+                return "LOYALTY";
+            case 31:
+                return "IMPALING";
+            case 32:
+                return "RIPTIDE";
+            case 33:
+                return "CHANNELING";
+            case 34:
+                return "MULTISHOT";
+            case 35:
+                return "QUICK_CHARGE";
+            case 36:
+                return "PIERCING";
+            case 37:
+                return "MENDING";
+            case 38:
+                return "VANISHING_CURSE";
+            default:
+                return "UNKNOWN_ENCHANT_" + BuiltInRegistries.ENCHANTMENT.getId(this.target);
+            // Canvas end
         }
     }
 
@@ -190,7 +196,18 @@ public class CraftEnchantment extends Enchantment {
         CraftEnchantment ench = (CraftEnchantment) other;
         return !this.target.isCompatibleWith(ench.target);
     }
-    // Paper start
+    // Canvas start
+
+    @Override
+    public void setCanConflict(boolean canConflict){
+        this.getHandle().setCanConflict(canConflict);
+    }
+
+    @Override
+    public boolean getCanConflict(){
+        return this.getHandle().canConflict;
+    }
+    // Canvas end -/- Paper start
     @Override
     public net.kyori.adventure.text.Component displayName(int level) {
         return io.papermc.paper.adventure.PaperAdventure.asAdventure(getHandle().getFullname(level));
