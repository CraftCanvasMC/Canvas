From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris MC <purplewolf.mc1@gmail.com>
Date: Wed, 1 Nov 2023 08:18:44 +0000
Subject: [PATCH] Add even more Entity apis


diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
index 2ccfaab0a02cf5ff9779e250fb79a75a9852e10d..5d5ca33f80c64812f30422d17875e9cc65a22bec 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
@@ -57,12 +57,19 @@ public abstract class AbstractFish extends WaterAnimal implements Bucketable {
     public boolean removeWhenFarAway(double distanceSquared) {
         return !this.fromBucket() && !this.hasCustomName();
     }
+    // Canvas start
+    private int maxClusterSize = 8;
 
     @Override
     public int getMaxSpawnClusterSize() {
-        return 8;
+        return this.maxClusterSize;
     }
 
+    public void setMaxSpawnClusterSize(int i){
+        this.maxClusterSize = i;
+    }
+    // Canvas end
+
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
@@ -151,10 +158,18 @@ public abstract class AbstractFish extends WaterAnimal implements Bucketable {
         return SoundEvents.BUCKET_FILL_FISH;
     }
 
-    protected boolean canRandomSwim() {
-        return true;
+    public boolean canRandomSwim() { // Canvas - protected -> public
+        return this.canRandomSwim; // Canvas - use customizable value
     }
 
+    // Canvas start
+    public void setCanRandomSwim(boolean can){
+        this.canRandomSwim = can;
+    }
+
+    private boolean canRandomSwim = true;
+    // Canvas end
+
     protected abstract SoundEvent getFlopSound();
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java
index 86b437836cb4b1f6e8ca9acd5f1f93b925cf9e51..a4800322d72f368ba67cdad8f79881daec6765f6 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java
@@ -36,11 +36,19 @@ public abstract class AbstractSchoolingFish extends AbstractFish {
         return super.getMaxSpawnClusterSize();
     }
 
+    // Canvas start - apply AbstractFish patches
     @Override
-    protected boolean canRandomSwim() {
-        return !this.isFollower();
+    public boolean canRandomSwim() {
+        return this.canRandomSwim;
     }
 
+    public void setCanRandomSwim(boolean can){
+        this.canRandomSwim = can;
+    }
+
+    private boolean canRandomSwim = true;
+    // Canvas end
+
     public boolean isFollower() {
         return this.leader != null && this.leader.isAlive();
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index 65cbefce01a5da26892e4a91929c70d9f3510ac4..45239b6114b175edf8ed4052b60c203753765880 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -68,6 +68,7 @@ import net.minecraft.world.entity.ai.util.AirRandomPos;
 import net.minecraft.world.entity.ai.util.HoverRandomPos;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiRecord;
+import net.minecraft.world.entity.animal.Bee.BeeLocateHiveGoal;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.crafting.Ingredient;
@@ -123,7 +124,16 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     public static final String TAG_HAS_NECTAR = "HasNectar";
     public static final String TAG_FLOWER_POS = "FlowerPos";
     public static final String TAG_HIVE_POS = "HivePos";
-    private static final UniformInt PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);
+    public UniformInt PERSISTENT_ANGER_TIME; // Canvas - private static/final -> public
+    // Canvas start - add Enderman anger customization features
+    public int minRangeAnger = 20;
+    public int maxRangeAnger = 39;
+    public void setPersistentAngerTime(int min, int max){
+        this.PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(min, max);
+        this.maxRangeAnger = max;
+        this.minRangeAnger = min;
+    }
+    // Canvas end
     @Nullable
     private UUID persistentAngerTarget;
     private float rollAmount;
@@ -140,14 +150,26 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     BlockPos savedFlowerPos;
     @Nullable
     public BlockPos hivePos;
-    Bee.BeePollinateGoal beePollinateGoal;
-    Bee.BeeGoToHiveGoal goToHiveGoal;
-    private Bee.BeeGoToKnownFlowerGoal goToKnownFlowerGoal;
+    public Bee.BeePollinateGoal beePollinateGoal; // Canvas - private -> public
+    public Bee.BeeGoToHiveGoal goToHiveGoal;
+    public Bee.BeeGoToKnownFlowerGoal goToKnownFlowerGoal; // Canvas - private -> public
     private int underWaterTicks;
+    // Canvas start
+    private int minRollFl;
+    private int maxRollFl;
+
+    public void rerollFlowerLocateTimer(){
+        this.remainingCooldownBeforeLocatingNewFlower = Mth.nextInt(this.random, minRollFl, maxRollFl);
+    }
+
+    public int getFlowerLocateTimer(){
+        return this.remainingCooldownBeforeLocatingNewFlower;
+    }
+    // Canvas end
 
     public Bee(EntityType<? extends Bee> type, Level world) {
         super(type, world);
-        this.remainingCooldownBeforeLocatingNewFlower = Mth.nextInt(this.random, 20, 60);
+        this.remainingCooldownBeforeLocatingNewFlower = Mth.nextInt(this.random, minRollFl, maxRollFl); // Canvas
         final org.purpurmc.purpur.controller.FlyingMoveControllerWASD flyingController = new org.purpurmc.purpur.controller.FlyingMoveControllerWASD(this, 0.25F, 1.0F, false); // Purpur
         // Paper start - apply gravity to bees when they get stuck in the void, fixes MC-167279
         class BeeFlyingMoveControl extends FlyingMoveControl {
@@ -231,18 +253,29 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     public float getWalkTargetValue(BlockPos pos, LevelReader world) {
         return world.getBlockState(pos).isAir() ? 10.0F : 0.0F;
     }
+    // Canvas start
+    
+    public BeeLocateHiveGoal locateHiveGoal;
+    public BeeEnterHiveGoal enterHiveGoal;
+    // Canvas end
 
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(0, new Bee.BeeAttackGoal(this, 1.399999976158142D, true));
-        this.goalSelector.addGoal(1, new Bee.BeeEnterHiveGoal());
+        // Canvas start
+        this.enterHiveGoal = new Bee.BeeEnterHiveGoal();
+        this.goalSelector.addGoal(1, this.enterHiveGoal);
+        // Canvas end
         this.goalSelector.addGoal(2, new BreedGoal(this, 1.0D));
         this.goalSelector.addGoal(3, new TemptGoal(this, 1.25D, Ingredient.of(ItemTags.FLOWERS), false));
         this.beePollinateGoal = new Bee.BeePollinateGoal();
         this.goalSelector.addGoal(4, this.beePollinateGoal);
         this.goalSelector.addGoal(5, new FollowParentGoal(this, 1.25D));
-        this.goalSelector.addGoal(5, new Bee.BeeLocateHiveGoal());
+        // Canvas start
+        this.locateHiveGoal = new Bee.BeeLocateHiveGoal();
+        this.goalSelector.addGoal(5, this.locateHiveGoal);
+        // Canvas end
         this.goToHiveGoal = new Bee.BeeGoToHiveGoal();
         this.goalSelector.addGoal(5, this.goToHiveGoal);
         this.goToKnownFlowerGoal = new Bee.BeeGoToKnownFlowerGoal();
@@ -515,7 +548,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
     @Override
     public void startPersistentAngerTimer() {
-        this.setRemainingPersistentAngerTime(Bee.PERSISTENT_ANGER_TIME.sample(this.random));
+        this.setRemainingPersistentAngerTime(this.PERSISTENT_ANGER_TIME.sample(this.random)); // Canvas - use public
     }
 
     private boolean doesHiveHaveSpace(BlockPos pos) {
@@ -767,7 +800,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         return pos.closerThan(this.blockPosition(), (double) distance);
     }
 
-    private class BeePollinateGoal extends Bee.BaseBeeGoal {
+    public class BeePollinateGoal extends Bee.BaseBeeGoal { // Canvas - private -> public
 
         private static final int MIN_POLLINATION_TICKS = 400;
         private static final int MIN_FIND_FLOWER_RETRY_COOLDOWN = 20;
@@ -992,7 +1025,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         }
     }
 
-    private class BeeEnterHiveGoal extends Bee.BaseBeeGoal {
+    public class BeeEnterHiveGoal extends Bee.BaseBeeGoal { // Canvas - private -> public
 
         BeeEnterHiveGoal() {
             super();
@@ -1037,7 +1070,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         }
     }
 
-    private class BeeLocateHiveGoal extends Bee.BaseBeeGoal {
+    public class BeeLocateHiveGoal extends Bee.BaseBeeGoal { // Canvas - private -> public
 
         BeeLocateHiveGoal() {
             super();
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index d1f9cec3469aa382534c0b0282ce48a94b0e05e3..3bd418d1600d952488472069f91c40676c2fc887 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -84,7 +84,29 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
     public static final int TOTAL_PLAYDEAD_TIME = 200;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Axolotl>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.AXOLOTL_ATTACKABLES, SensorType.AXOLOTL_TEMPTATIONS);
     // CraftBukkit - decompile error
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN, MemoryModuleType.IS_PANICKING});
+    // Canvas start - expand for easier readability
+    public static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, // Canvas - protected -> public
+                        MemoryModuleType.NEAREST_LIVING_ENTITIES,
+                        MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
+                        MemoryModuleType.NEAREST_VISIBLE_PLAYER,
+                         MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER,
+                         MemoryModuleType.LOOK_TARGET,
+                         MemoryModuleType.WALK_TARGET,
+                         MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
+                         MemoryModuleType.PATH,
+                         MemoryModuleType.ATTACK_TARGET,
+                         MemoryModuleType.ATTACK_COOLING_DOWN,
+                         MemoryModuleType.NEAREST_VISIBLE_ADULT,
+                         new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY,
+                            MemoryModuleType.PLAY_DEAD_TICKS,
+                            MemoryModuleType.NEAREST_ATTACKABLE,
+                            MemoryModuleType.TEMPTING_PLAYER,
+                            MemoryModuleType.TEMPTATION_COOLDOWN_TICKS,
+                            MemoryModuleType.IS_TEMPTED,
+                            MemoryModuleType.HAS_HUNTING_COOLDOWN,
+                            MemoryModuleType.IS_PANICKING
+    });
+    // Canvas end
     private static final EntityDataAccessor<Integer> DATA_VARIANT = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_PLAYING_DEAD = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> FROM_BUCKET = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java b/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
index 9417ce67cc231d5bfa6813f78ec27196eed423c8..e420f677b3f47d743b5ac6a833c05713be32989f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
@@ -70,8 +70,29 @@ import org.joml.Vector3f;
 public class Frog extends Animal implements VariantHolder<FrogVariant> {
     public static final Ingredient TEMPTATION_ITEM = Ingredient.of(Items.SLIME_BALL);
     protected static final ImmutableList<SensorType<? extends Sensor<? super Frog>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.HURT_BY, SensorType.FROG_ATTACKABLES, SensorType.FROG_TEMPTATIONS, SensorType.IS_IN_WATER);
-    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.BREED_TARGET, MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.IS_IN_WATER, MemoryModuleType.IS_PREGNANT, MemoryModuleType.IS_PANICKING, MemoryModuleType.UNREACHABLE_TONGUE_TARGETS);
-    private static final EntityDataAccessor<FrogVariant> DATA_VARIANT_ID = SynchedEntityData.defineId(Frog.class, EntityDataSerializers.FROG_VARIANT);
+    // Canvas start - expand for better readability
+    public static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, // Canvas - protected -> public
+                        MemoryModuleType.NEAREST_LIVING_ENTITIES,
+                        MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
+                        MemoryModuleType.WALK_TARGET,
+                        MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
+                        MemoryModuleType.PATH,
+                        MemoryModuleType.BREED_TARGET,
+                        MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS,
+                        MemoryModuleType.LONG_JUMP_MID_JUMP,
+                        MemoryModuleType.ATTACK_TARGET,
+                        MemoryModuleType.TEMPTING_PLAYER,
+                        MemoryModuleType.TEMPTATION_COOLDOWN_TICKS,
+                        MemoryModuleType.IS_TEMPTED,
+                        MemoryModuleType.HURT_BY,
+                        MemoryModuleType.HURT_BY_ENTITY,
+                        MemoryModuleType.NEAREST_ATTACKABLE,
+                        MemoryModuleType.IS_IN_WATER,
+                        MemoryModuleType.IS_PREGNANT,
+                        MemoryModuleType.IS_PANICKING,
+                        MemoryModuleType.UNREACHABLE_TONGUE_TARGETS);
+    // Canvas end
+    private static final EntityDataAccessor<FrogVariant> DATA_VARIANT_ID = SynchedEntityData.defineId(Frog.class,EntityDataSerializers.FROG_VARIANT);
     private static final EntityDataAccessor<OptionalInt> DATA_TONGUE_TARGET_ID = SynchedEntityData.defineId(Frog.class, EntityDataSerializers.OPTIONAL_UNSIGNED_INT);
     private static final int FROG_FALL_DAMAGE_REDUCTION = 5;
     public static final String VARIANT_KEY = "variant";
@@ -125,7 +146,6 @@ public class Frog extends Animal implements VariantHolder<FrogVariant> {
     public boolean isControllable() {
         return level().purpurConfig.frogControllable;
     }
-
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
@@ -157,6 +177,12 @@ public class Frog extends Animal implements VariantHolder<FrogVariant> {
         return (Brain<Frog>) super.getBrain(); // Paper - decompile fix
     }
 
+    // Canvas start
+    public void youngify(){
+        this.convertTo(EntityType.TADPOLE, true);
+    }
+    // Canvas end
+
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
index 6b012bea26e8ef0c04571f43da67f6e108188830..c47bfa8990f39bfa6a275b5e48215f17758e0ce0 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
@@ -43,7 +43,19 @@ public class Tadpole extends AbstractFish {
     public static float HITBOX_HEIGHT = 0.3F;
     public int age;
     protected static final ImmutableList<SensorType<? extends Sensor<? super Tadpole>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.HURT_BY, SensorType.FROG_TEMPTATIONS);
-    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.BREED_TARGET, MemoryModuleType.IS_PANICKING);
+    // Canvas start - expand for better readability
+    public static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, // Canvas - protected -> public
+                        MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
+                        MemoryModuleType.WALK_TARGET,
+                        MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
+                        MemoryModuleType.PATH,
+                        MemoryModuleType.NEAREST_VISIBLE_ADULT,
+                        MemoryModuleType.TEMPTATION_COOLDOWN_TICKS,
+                        MemoryModuleType.IS_TEMPTED,
+                        MemoryModuleType.TEMPTING_PLAYER,
+                        MemoryModuleType.BREED_TARGET,
+                        MemoryModuleType.IS_PANICKING);
+    // Canvas end
     public boolean ageLocked; // Paper
     private org.purpurmc.purpur.controller.WaterMoveControllerWASD purpurController; // Purpur
 
@@ -109,6 +121,12 @@ public class Tadpole extends AbstractFish {
         return (Brain<Tadpole>) super.getBrain(); // CraftBukkit - decompile error
     }
 
+    // Canvas start
+    public void makeOld(){
+        this.convertTo(EntityType.FROG, true);
+    }
+    // Canvas end
+
     @Override
     protected SoundEvent getFlopSound() {
         return SoundEvents.TADPOLE_FLOP;
@@ -248,7 +266,7 @@ public class Tadpole extends AbstractFish {
         return this.age;
     }
 
-    private void ageUp(int seconds) {
+    public void ageUp(int seconds) { // Canvas - private -> public
         if (this.ageLocked) return; // Paper
         this.setAge(this.age + seconds * 20);
     }
@@ -261,36 +279,48 @@ public class Tadpole extends AbstractFish {
 
     }
 
+    // Canvas start
+    private boolean canAge = true;
+    public void setCanAgeUp(boolean canAge){
+        this.canAge = canAge;
+    }
+
+    public boolean getCanAgeUp(){
+        return this.canAge;
+    }
+
     private void ageUp() {
         Level world = this.level();
 
         if (world instanceof ServerLevel) {
-            ServerLevel worldserver = (ServerLevel) world;
-            Frog frog = (Frog) EntityType.FROG.create(this.level());
-
-            if (frog != null) {
-                frog.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
-                frog.finalizeSpawn(worldserver, this.level().getCurrentDifficultyAt(frog.blockPosition()), MobSpawnType.CONVERSION, (SpawnGroupData) null, (CompoundTag) null);
-                frog.setNoAi(this.isNoAi());
-                if (this.hasCustomName()) {
-                    frog.setCustomName(this.getCustomName());
-                    frog.setCustomNameVisible(this.isCustomNameVisible());
-                }
-
-                frog.setPersistenceRequired();
-                // CraftBukkit start
-                if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTransformEvent(this, frog, org.bukkit.event.entity.EntityTransformEvent.TransformReason.METAMORPHOSIS).isCancelled()) {
-                    this.setAge(0); // Sets the age to 0 for avoid a loop if the event is canceled
-                    return;
+            if(this.canAge){
+                ServerLevel worldserver = (ServerLevel) world;
+                Frog frog = (Frog) EntityType.FROG.create(this.level());
+    
+                if (frog != null) {
+                    frog.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
+                    frog.finalizeSpawn(worldserver, this.level().getCurrentDifficultyAt(frog.blockPosition()), MobSpawnType.CONVERSION, (SpawnGroupData) null, (CompoundTag) null);
+                    frog.setNoAi(this.isNoAi());
+                    if (this.hasCustomName()) {
+                        frog.setCustomName(this.getCustomName());
+                        frog.setCustomNameVisible(this.isCustomNameVisible());
+                    }
+    
+                    frog.setPersistenceRequired();
+                    // CraftBukkit start
+                    if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTransformEvent(this, frog, org.bukkit.event.entity.EntityTransformEvent.TransformReason.METAMORPHOSIS).isCancelled()) {
+                        this.setAge(0); // Sets the age to 0 for avoid a loop if the event is canceled
+                        return;
+                    }
+                    // CraftBukkit end
+                    this.playSound(SoundEvents.TADPOLE_GROW_UP, 0.15F, 1.0F);
+                    worldserver.addFreshEntityWithPassengers(frog, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.METAMORPHOSIS); // CraftBukkit - add SpawnReason
+                    this.discard();
                 }
-                // CraftBukkit end
-                this.playSound(SoundEvents.TADPOLE_GROW_UP, 0.15F, 1.0F);
-                worldserver.addFreshEntityWithPassengers(frog, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.METAMORPHOSIS); // CraftBukkit - add SpawnReason
-                this.discard();
             }
         }
-
     }
+    // Canvas end
 
     private int getTicksLeftUntilAdult() {
         return Math.max(0, Tadpole.ticksToBeFrog - this.age);
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
index f9cdd066e6b0cf3c0a62eee32e0fa423a2e2cd45..fb080fcb0ea31bad2dbf19219ccf73c83e089f35 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -200,9 +200,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         return (0.44999998807907104D + random.nextDouble() * 0.3D + random.nextDouble() * 0.3D + random.nextDouble() * 0.3D) * 0.25D;
     }
 
-    // Canvas start
-    public RunAroundLikeCrazyGoal runAroundLikeCrazyGoal;
-    // Canvas end
+    public RunAroundLikeCrazyGoal runAroundLikeCrazyGoal; // Canvas
 
     @Override
     protected void registerGoals() {
@@ -636,10 +634,20 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         return AbstractHorse.FOOD_ITEMS.test(stack);
     }
 
-    private void moveTail() {
+    public void moveTail() { // Canvas - private -> public
         this.tailCounter = 1;
     }
 
+    // Canvas start
+    public void skeletonify(){
+        this.convertTo(EntityType.SKELETON_HORSE, true);
+    }
+
+    public void zombify(){
+        this.convertTo(EntityType.ZOMBIE_HORSE, true);
+    }
+    // Canvas end
+
     @Override
     protected void dropEquipment() {
         super.dropEquipment();
@@ -682,7 +690,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         }
     }
 
-    protected void followMommy() {
+    public void followMommy() { // Canvas - protected -> public
         if (this.isBred() && this.isBaby() && !this.isEating()) {
             LivingEntity entityliving = this.level().getNearestEntity(AbstractHorse.class, AbstractHorse.MOMMY_TARGETING, this, this.getX(), this.getY(), this.getZ(), this.getBoundingBox().inflate(16.0D));
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
index 9288327a365bc67c5bb8ed6aa23b78c725d5ba40..40804d1006711bc62e967a5c7b23e4d37d11261e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
@@ -548,7 +548,7 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
     }
 
     @Override
-    protected void followMommy() {
+    public void followMommy() { // Canvas - protected -> public
         if (!this.inCaravan() && this.isBaby()) {
             super.followMommy();
         }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
index eba99d9b2e7b803d883078ef90249d8a19b5baa4..69ee7ff9804814c19690a1e3d86c21cf87c81f47 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
@@ -91,6 +91,15 @@ public class SkeletonHorse extends AbstractHorse {
     public SoundEvent getDeathSound() {
         return SoundEvents.SKELETON_HORSE_DEATH;
     }
+    // Canvas start
+    public void revertToHorse(){
+        this.convertTo(EntityType.HORSE, true);
+    }
+
+    public void zombify(){
+        this.convertTo(EntityType.ZOMBIE_HORSE, true);
+    }
+    // Canvas end
 
     @Override
     protected SoundEvent getHurtSound(DamageSource source) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
index 8919fba7ff88b3e0fa1070675f314867ab927364..0f66b910bed8c83c3994f964b9af6978fc3e3565 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
@@ -58,6 +58,15 @@ public class ZombieHorse extends AbstractHorse {
     public boolean isSensitiveToWater() {
         return this.level().purpurConfig.zombieHorseTakeDamageFromWater;
     }
+    // Canvas start
+    public void revertToHorse(){
+        this.convertTo(EntityType.HORSE, true);
+    }
+
+    public void skeletonify(){
+        this.convertTo(EntityType.SKELETON_HORSE, true);
+    }
+    // Canvas end
 
     @Override
     protected boolean isAlwaysExperienceDropper() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java b/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
index 784b69e03225965b9fd85d3b68b95fd086725f12..ea4677845ae4fb55fbc250fdc6167c08e9ecfc9b 100644
--- a/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
+++ b/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
@@ -273,29 +273,42 @@ public class Sniffer extends Animal {
 
     public Sniffer transitionTo(Sniffer.State state) {
         switch (state) {
-            case SCENTING:
-                this.setState(Sniffer.State.SCENTING).onScentingStart();
-                break;
-            case SNIFFING:
-                this.playSound(SoundEvents.SNIFFER_SNIFFING, 1.0F, 1.0F);
-                this.setState(Sniffer.State.SNIFFING);
-                break;
-            case DIGGING:
-                this.setState(Sniffer.State.DIGGING).onDiggingStart();
-                break;
-            case RISING:
+            case SCENTING -> {
+                if(canSearch){
+                    this.setState(Sniffer.State.SCENTING).onScentingStart();
+                    break;
+                }
+            }
+            case SNIFFING -> {
+                if(canSniff){
+                    this.playSound(SoundEvents.SNIFFER_SNIFFING, 1.0F, 1.0F);
+                    this.setState(Sniffer.State.SNIFFING);
+                    break;
+                }
+            }
+            case DIGGING -> {
+                if(canDig){
+                    this.setState(Sniffer.State.DIGGING).onDiggingStart();
+                    break;
+                }
+            }
+            case RISING -> {
                 this.playSound(SoundEvents.SNIFFER_DIGGING_STOP, 1.0F, 1.0F);
                 this.setState(Sniffer.State.RISING);
                 break;
-            case FEELING_HAPPY:
+            }
+            case FEELING_HAPPY -> {
                 this.playSound(SoundEvents.SNIFFER_HAPPY, 1.0F, 1.0F);
                 this.setState(Sniffer.State.FEELING_HAPPY);
                 break;
-            case IDLING:
+            }
+            case IDLING -> {
                 this.setState(Sniffer.State.IDLING);
                 break;
-            case SEARCHING:
+            }
+            case SEARCHING -> {
                 this.setState(Sniffer.State.SEARCHING);
+            }
         }
 
         return this;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
index 50e055479c194994dcd2227c5d70159098635380..a45eea96de7c89d1a414b4289862cb8a1dcd6136 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
@@ -96,6 +96,18 @@ public abstract class CraftAbstractHorse extends CraftAnimals implements Abstrac
         return this.getHandle().getOwnerUUID();
     }
 
+    // Canvas start
+    @Override
+    public void skeletonify(){
+        this.getHandle().skeletonify();
+    }
+
+    @Override
+    public void zombify(){
+        this.getHandle().zombify();
+    }
+    // Canvas end
+
     public void setOwnerUUID(UUID uuid) {
         this.getHandle().setOwnerUUID(uuid);
     }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
index d542abc254d9308a8c77f183317696535f9e127e..67fd9102d0472c44ffc8d089cf157a5705185ea0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
@@ -84,11 +84,17 @@ public class CraftAxolotl extends CraftAnimals implements Axolotl, io.papermc.pa
     public void setRareVarientChanceBound(int bound) {
         this.getHandle().setRareVarientChanceBound(bound);
     }
+
     @Override
     public int getSupportingEffectAmplifier() {
         return this.getHandle().getSupportingEffectAmplifier();
     }
 
+    @Override
+    public void rehydrate(){
+        this.getHandle().rehydrate();
+    }
+
     // Canvas end
 
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
index 3dac93b0ab5d5acf5b33dc4b0efed60319eb657b..2d0912392f25c98b464f26f3a83d29dae548b14d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
@@ -6,6 +6,8 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.util.CraftLocation;
 import org.bukkit.entity.Bee;
+import org.apache.commons.lang3.tuple.Pair;
+import java.lang.Integer;
 
 public class CraftBee extends CraftAnimals implements Bee {
 
@@ -123,5 +125,65 @@ public class CraftBee extends CraftAnimals implements Bee {
     public int getTicksSincePollination() {
         return this.getHandle().ticksWithoutNectarSinceExitingHive;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+
+    @Override
+    public void rerollFlowerLocateTimer() {
+        this.getHandle().rerollFlowerLocateTimer();
+    }
+
+    @Override
+    public int getFlowerLocateTimer() {
+        return this.getHandle().getFlowerLocateTimer();
+    }
+
+    @Override
+    public void setPersistentAngerTime(final int min, final int max) {
+        this.getHandle().setPersistentAngerTime(min, max);
+    }
+
+    @Override
+    public Pair<Integer, Integer> getPersistentAngerTime() {
+        int max = this.getHandle().maxRangeAnger;
+        int min = this.getHandle().minRangeAnger;
+        Pair<Integer, Integer> integerPair = new Pair<Integer, Integer>() {
+            @Override
+            @Deprecated(forRemoval = true)
+            public Integer setValue(final Integer value) {
+                return null;
+            }
+
+            @Override
+            public Integer getLeft() {
+                return min;
+            }
+
+            @Override
+            public Integer getRight() {
+                return max;
+            }
+        };
+        return integerPair;
+    }
+
+    @Override
+    public void tryEnterClosestHive() {
+        this.getHandle().enterHiveGoal.start();
+    }
+
+    @Override
+    public void tryPollinate() {
+       this.getHandle().beePollinateGoal.start();
+    }
+
+    @Override
+    public void goToKnownFlower() {
+        this.getHandle().goToKnownFlowerGoal.start();
+    }
+
+    @Override
+    public void tryFindNewHive() {
+        this.getHandle().locateHiveGoal.start();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
index eb10f94d5ed8ca89d3786138647dd43357609a6c..818970c09f748d6fa16e8ad0f5bccd6e1c89dd12 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
@@ -19,4 +19,26 @@ public class CraftFish extends CraftWaterMob implements Fish, io.papermc.paper.e
     public String toString() {
         return "CraftFish";
     }
+    // Canvas start
+
+    @Override
+    public void setCanRandomSwim(boolean can) {
+        this.getHandle().setCanRandomSwim(can);
+    }
+
+    @Override
+    public boolean getCanRandomSwim() {
+        return this.getHandle().canRandomSwim();
+    }
+
+    @Override
+    public int getMaxSpawnClusterSize() {
+        return this.getHandle().getMaxSpawnClusterSize();
+    }
+
+    @Override
+    public void setMaxSpawnClusterSize(int size) {
+        this.getHandle().setMaxSpawnClusterSize(size);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
index 65131d153b78a0787b977b9f65c15cfcbd395d11..99997fe11961908875de83f38d3f35457b1c65dc 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
@@ -51,6 +51,13 @@ public class CraftFrog extends CraftAnimals implements org.bukkit.entity.Frog {
 
         this.getHandle().setVariant(CraftVariant.bukkitToMinecraft(variant));
     }
+    // Canvas start
+    
+    @Override
+    public void youngify(){
+        this.getHandle().youngify();
+    }
+    // Canvas end
 
     public static class CraftVariant {
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
index fbb47491dcc75f8247dee9f123f946f99ef1467f..22c16fa13734d80d7fbbb0674530a785c2aeb04d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
@@ -30,6 +30,18 @@ public class CraftSkeletonHorse extends CraftAbstractHorse implements SkeletonHo
         return this.getHandle().isTrap();
     }
 
+    // Canvas start
+    @Override
+    public void revertToHorse(){
+        this.getHandle().revertToHorse();
+    }
+
+    @Override
+    public void zombify(){
+        this.getHandle().zombify();
+    }
+    // Canvas end
+
     @Override
     public void setTrapped(boolean trapped) {
         this.getHandle().setTrap(trapped);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
index d7c6a0bbc5671ea8f2488230c94df5146a1e98b9..d05a52305a79fd7bfd1b2debb2c6a70f5483c57a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
@@ -38,5 +38,21 @@ public class CraftTadpole extends CraftFish implements org.bukkit.entity.Tadpole
     public boolean getAgeLock() {
         return this.getHandle().ageLocked;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+
+    @Override
+    public void makeOld(){
+        this.getHandle().makeOld();
+    }
+
+    @Override
+    public void setCanAgeUp(boolean canAge){
+        this.getHandle().setCanAgeUp(canAge);
+    }
+
+    @Override
+    public boolean getCanAgeUp(){
+        return this.getHandle().getCanAgeUp();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java
index 2c47ea42df327b0886358f4e209b8629d6ac859c..91e5ce627ef9143dec46ae39fb56b175e75b9b06 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java
@@ -10,6 +10,12 @@ public class CraftZombieHorse extends CraftAbstractHorse implements ZombieHorse
         super(server, entity);
     }
 
+    // Canvas start
+    public net.minecraft.world.entity.animal.horse.ZombieHorse getHandle(){
+        return (net.minecraft.world.entity.animal.horse.ZombieHorse) this.entity;
+    }
+    // Canvas end
+
     @Override
     public String toString() {
         return "CraftZombieHorse";
@@ -19,4 +25,15 @@ public class CraftZombieHorse extends CraftAbstractHorse implements ZombieHorse
     public Variant getVariant() {
         return Variant.UNDEAD_HORSE;
     }
+    // Canvas start
+    @Override
+    public void revertToHorse(){
+        this.getHandle().revertToHorse();
+    }
+    
+    @Override
+    public void skeletonify(){
+        this.getHandle().skeletonify();
+    }
+    // Canvas end
 }
