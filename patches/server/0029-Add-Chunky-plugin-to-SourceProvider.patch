From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sun, 12 Nov 2023 13:06:50 -0800
Subject: [PATCH] Add Chunky plugin to SourceProvider


diff --git a/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java b/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
index 6141f716b15ad47ac2ac4c9ce92a3897b3ad8807..0cdfa9230e12cc5b835cdd1426fcee75e71d1372 100644
--- a/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
+++ b/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
@@ -5,6 +5,7 @@ import io.papermc.paper.configuration.PaperConfigurations;
 import io.papermc.paper.plugin.entrypoint.Entrypoint;
 import io.papermc.paper.plugin.entrypoint.LaunchEntryPointHandler;
 import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.source.ChunkyProviderSource;
 import io.papermc.paper.plugin.provider.type.paper.PaperPluginParent;
 import joptsimple.OptionSet;
 import net.minecraft.server.dedicated.DedicatedServer;
@@ -104,6 +105,7 @@ public class PluginInitializerManager {
         @SuppressWarnings("unchecked")
         java.util.List<Path> files = ((java.util.List<File>) optionSet.valuesOf("add-plugin")).stream().map(File::toPath).toList();
         io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(io.papermc.paper.plugin.provider.source.PluginFlagProviderSource.INSTANCE, files);
+        // io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(ChunkyProviderSource.INSTANCE, new File("cache", "chunky.jar").toPath()); // Canvas - include Chunky // Disable Chunky provider
         io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(io.papermc.paper.plugin.provider.source.SparkProviderSource.INSTANCE, new File("cache", "spark.jar").toPath()); // Purpur
     }
 
diff --git a/src/main/java/io/papermc/paper/plugin/provider/source/ChunkyProviderSource.java b/src/main/java/io/papermc/paper/plugin/provider/source/ChunkyProviderSource.java
new file mode 100644
index 0000000000000000000000000000000000000000..437373e85f3ec84c1a08cd9c4a33e1dd78224b8c
--- /dev/null
+++ b/src/main/java/io/papermc/paper/plugin/provider/source/ChunkyProviderSource.java
@@ -0,0 +1,73 @@
+package io.papermc.paper.plugin.provider.source;
+
+import com.mojang.logging.LogUtils;
+import io.papermc.paper.plugin.entrypoint.Entrypoint;
+import io.papermc.paper.plugin.entrypoint.EntrypointHandler;
+import io.papermc.paper.plugin.entrypoint.LaunchEntryPointHandler;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import me.dueris.canvas.CanvasConfig;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.slf4j.Logger;
+import java.io.File;
+import java.net.URL;
+import java.net.URLConnection;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.StandardCopyOption;
+
+public class ChunkyProviderSource extends FileProviderSource{
+    public static final ChunkyProviderSource INSTANCE = new ChunkyProviderSource();
+
+    private static final Logger LOGGER = LogUtils.getClassLogger();
+
+    public ChunkyProviderSource() {
+        super("File '%s' specified by Canvas"::formatted);
+    }
+
+    @Override
+    public void registerProviders(EntrypointHandler entrypointHandler, Path context) throws Exception {
+        if(CanvasConfig.wantChunky){
+            if (Boolean.getBoolean("Canvas.IReallyDontWantChunky")) {
+                return;
+            }
+
+            if (hasChunky()) {
+                LOGGER.info("Canvas: Using user-provided chunky plugin instead of our own.");
+                return;
+            }
+
+            try {
+
+                File file = context.toFile();
+                file.getParentFile().mkdirs();
+
+                boolean shouldDownload = false;
+
+                if (!file.exists()) {
+                    shouldDownload = true;
+                }
+
+                if (shouldDownload) {
+                    URLConnection urlConnection = new URL("https://cdn.modrinth.com/data/fALzjamp/versions/B0xkCkk4/Chunky-1.3.92.jar").openConnection();
+                    urlConnection.setReadTimeout(5000);
+                    urlConnection.setConnectTimeout(5000);
+                    Files.copy(urlConnection.getInputStream(), file.toPath(), StandardCopyOption.REPLACE_EXISTING);
+                }
+
+                super.registerProviders(entrypointHandler, context);
+
+            } catch (Throwable e) {
+                LOGGER.error("Canvas: Failed to download and install chunky plugin", e);
+            }
+        }
+    }
+
+    private static boolean hasChunky() {
+        for (PluginProvider<JavaPlugin> provider : LaunchEntryPointHandler.INSTANCE.get(Entrypoint.PLUGIN).getRegisteredProviders()) {
+            if (provider.getMeta().getName().equalsIgnoreCase("chunky")) {
+                return true;
+            }
+        }
+        return false;
+    }
+}
diff --git a/src/main/java/me/dueris/canvas/CanvasConfig.java b/src/main/java/me/dueris/canvas/CanvasConfig.java
index 5493cf68dcee9bad64f9c318c668f41e9b897b0d..f76c3033744f8fcbeec9e442e81438e28085ba06 100644
--- a/src/main/java/me/dueris/canvas/CanvasConfig.java
+++ b/src/main/java/me/dueris/canvas/CanvasConfig.java
@@ -171,6 +171,7 @@ public class CanvasConfig {
     public static boolean disableMixin = false;
     public static boolean obfuscateIps = false;
     public static boolean bypassStartupCheck = false;
+    public static boolean wantChunky = true;
 
     private static void mixin(){
         disableMixin = getBoolean("mixin.disableMixins", disableMixin);
@@ -181,4 +182,7 @@ public class CanvasConfig {
     private static void general(){
         bypassStartupCheck = getBoolean("bypassStartupCheck", bypassStartupCheck);
     }
+    private static void plugins(){
+        wantChunky = getBoolean("plugins.use_provided_chunky", wantChunky);
+    }
 }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 55b9aba743c298a995b94ae222fde43b34e8c51d..9640c2a34fd330ad23bf76b7244dc7a6836e31d7 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -54,6 +54,7 @@ import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
+import me.dueris.canvas.CanvasConfig;
 import net.minecraft.CrashReport;
 import net.minecraft.ReportedException;
 import net.minecraft.SharedConstants;
@@ -152,6 +153,7 @@ import net.minecraft.world.level.levelgen.feature.ConfiguredFeature;
 import net.minecraft.world.level.levelgen.structure.templatesystem.StructureTemplateManager;
 import net.minecraft.world.level.storage.WorldData;
 import net.minecraft.world.level.storage.loot.LootDataManager;
+import org.bukkit.World;
 import org.slf4j.Logger;
 
 // CraftBukkit start
@@ -1153,6 +1155,18 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
             // Spigot start
             // Paper start - move done tracking
+            // Canvas start
+                for(World world : Bukkit.getWorlds()){
+                    if(CanvasConfig.wantChunky){
+                        Bukkit.dispatchCommand(new CraftServer.SilentCommandSender(), "chunky radius 35");
+                        Bukkit.dispatchCommand(new CraftServer.SilentCommandSender(), "chunky shape circle");
+                        Bukkit.dispatchCommand(new CraftServer.SilentCommandSender(), "chunky quiet 20");
+                        Bukkit.dispatchCommand(new CraftServer.SilentCommandSender(), "chunky start %w"
+                            .replace("%w", world.getName())
+                        );
+                    }
+                }
+            // Canvas end
             LOGGER.info("Running delayed init tasks");
             this.server.getScheduler().mainThreadHeartbeat(this.tickCount); // run all 1 tick delay tasks during init,
             // this is going to be the first thing the tick process does anyways, so move done and run it after
