From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sat, 25 Nov 2023 12:36:55 -0800
Subject: [PATCH] Create DamageSource api


diff --git a/src/main/java/me/dueris/canvas/world/damage/CraftDamageSource.java b/src/main/java/me/dueris/canvas/world/damage/CraftDamageSource.java
new file mode 100644
index 0000000000000000000000000000000000000000..c706a3acc6c614323d870ebdddbc778d6935387b
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/world/damage/CraftDamageSource.java
@@ -0,0 +1,15 @@
+package me.dueris.canvas.world.damage;
+
+import net.minecraft.world.damagesource.DamageType;
+
+public class CraftDamageSource implements DamageSource{
+    private net.minecraft.world.damagesource.DamageSource handle;
+
+    public CraftDamageSource(net.minecraft.world.damagesource.DamageSource handle){
+        this.handle = handle;
+    }
+
+    public net.minecraft.world.damagesource.DamageSource getHandle(){
+        return handle;
+    }
+}
diff --git a/src/main/java/me/dueris/canvas/world/damage/CraftDamageSources.java b/src/main/java/me/dueris/canvas/world/damage/CraftDamageSources.java
new file mode 100644
index 0000000000000000000000000000000000000000..ec7970754fcff2da949b38e977ecf1f3525d13d7
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/world/damage/CraftDamageSources.java
@@ -0,0 +1,329 @@
+package me.dueris.canvas.world.damage;
+
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftArrow;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.entity.CraftFireball;
+import org.bukkit.craftbukkit.entity.CraftFirework;
+import org.bukkit.craftbukkit.entity.CraftLivingEntity;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.entity.CraftWitherSkull;
+import org.bukkit.craftbukkit.util.CraftVector;
+import org.bukkit.entity.AbstractArrow;
+import org.bukkit.entity.Entity;
+import org.bukkit.entity.Fireball;
+import org.bukkit.entity.Firework;
+import org.bukkit.entity.LivingEntity;
+import org.bukkit.entity.Player;
+import org.bukkit.entity.WitherSkull;
+import org.bukkit.util.Vector;
+import javax.annotation.Nullable;
+
+public class CraftDamageSources implements DamageSources{
+    private CraftWorld world;
+    public CraftDamageSources(CraftWorld world){
+        this.world = world;
+    }
+
+    @Override
+    public CraftDamageSource sweetBerryBush() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().sweetBerryBush()
+        );
+    }
+
+    @Override
+    public CraftDamageSource inFire() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().inFire()
+        );
+    }
+
+    @Override
+    public CraftDamageSource lightningBolt() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().lightningBolt()
+        );
+    }
+
+    @Override
+    public CraftDamageSource onFire() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().onFire()
+        );
+    }
+
+    @Override
+    public CraftDamageSource lava() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().lava()
+        );
+    }
+
+    @Override
+    public CraftDamageSource hotFloor() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().hotFloor()
+        );
+    }
+
+    @Override
+    public CraftDamageSource inWall() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().inWall()
+        );
+    }
+
+    @Override
+    public CraftDamageSource cramming() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().cramming()
+        );
+    }
+
+    @Override
+    public CraftDamageSource drown() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().drown()
+        );
+    }
+
+    @Override
+    public CraftDamageSource starve() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().starve()
+        );
+    }
+
+    @Override
+    public CraftDamageSource cactus() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().cactus()
+        );
+    }
+
+    @Override
+    public CraftDamageSource fall() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().fall()
+        );
+    }
+
+    @Override
+    public CraftDamageSource flyIntoWall() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().flyIntoWall()
+        );
+    }
+
+    @Override
+    public CraftDamageSource fellOutOfWorld() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().fellOutOfWorld()
+        );
+    }
+
+    @Override
+    public CraftDamageSource generic() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().generic()
+        );
+    }
+
+    @Override
+    public CraftDamageSource magic() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().magic()
+        );
+    }
+
+    @Override
+    public CraftDamageSource wither() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().wither()
+        );
+    }
+
+    @Override
+    public CraftDamageSource dragonBreath() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().dragonBreath()
+        );
+    }
+
+    @Override
+    public CraftDamageSource dryOut() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().dryOut()
+        );
+    }
+
+    @Override
+    public CraftDamageSource freeze() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().freeze()
+        );
+    }
+
+    @Override
+    public CraftDamageSource stalagmite() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().stalagmite()
+        );
+    }
+
+    @Override
+    public CraftDamageSource fallingBlock(Entity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().fallingBlock(((CraftEntity) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource anvil(Entity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().anvil(((CraftEntity) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource fallingStalactite(Entity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().fallingStalactite(((CraftEntity) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource sting(LivingEntity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().sting(((CraftLivingEntity) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource mobAttack(LivingEntity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().mobAttack(((CraftLivingEntity) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource noAggroMobAttack(LivingEntity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().noAggroMobAttack(((CraftLivingEntity) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource playerAttack(Player attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().playerAttack(((CraftPlayer) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource arrow(AbstractArrow source, @Nullable Entity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().arrow(((CraftArrow) source).getHandle(), ((CraftEntity) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource trident(Entity source, @Nullable Entity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().trident(((CraftFirework) source).getHandle(), ((CraftEntity) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource mobProjectile(Entity source, @Nullable LivingEntity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().mobProjectile(((CraftFirework) source).getHandle(), ((CraftLivingEntity) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource fireworks(Firework source, @Nullable Entity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().fireworks(((CraftFirework) source).getHandle(), ((CraftEntity) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource fireball(Fireball source, @Nullable Entity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().fireball((net.minecraft.world.entity.projectile.Fireball) ((CraftFireball) source).getHandle(), ((CraftEntity) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource witherSkull(WitherSkull source, Entity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().witherSkull(((CraftWitherSkull) source).getHandle(), ((CraftEntity) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource thrown(Entity source, @Nullable Entity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().thrown(((CraftEntity) source).getHandle(), ((CraftEntity) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource indirectMagic(Entity source, @Nullable Entity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().indirectMagic(((CraftEntity) source).getHandle(), ((CraftEntity) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource thorns(Entity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().thorns(((CraftEntity) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource explosion(@Nullable Entity source, @Nullable Entity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().explosion(((CraftEntity) source).getHandle(), ((CraftEntity) attacker).getHandle())
+        );
+    }
+
+    @Override
+    public CraftDamageSource sonicBoom(Entity attacker) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().sonicBoom(((CraftEntity) attacker).getHandle())
+        );
+    }
+
+    @Deprecated
+    @io.papermc.paper.annotation.DoNotUse
+    @Override
+    public CraftDamageSource badRespawnPointExplosion(Vector position) {
+        return badRespawnPointExplosion(position, null);
+    }
+
+    @Override
+    public CraftDamageSource badRespawnPointExplosion(Vector position, @Nullable org.bukkit.block.BlockState explodedBlockState) {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().badRespawnPointExplosion(CraftVector.toNMS(position))
+        );
+    }
+
+    @Override
+    public CraftDamageSource outOfBorder() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().outOfBorder()
+        );
+    }
+
+    @Override
+    public CraftDamageSource genericKill() {
+        return new CraftDamageSource(
+            this.world.getHandle().damageSources().genericKill()
+        );
+    }
+
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index bd4f8d348c6690044dc7ac2bb9247484e6d97dcd..1ee3e7d4008e5bceb89585bc435e0780a3dd78de 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -24,6 +24,7 @@ import java.util.concurrent.ExecutionException;
 import java.util.function.Consumer;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
+import me.dueris.canvas.world.damage.DamageSources;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.HolderSet;
@@ -1036,6 +1037,13 @@ public class CraftWorld extends CraftRegionAccessor implements World {
     public Block getHighestBlockAt(Location location, org.bukkit.HeightMap heightMap) {
         return this.getHighestBlockAt(location.getBlockX(), location.getBlockZ(), heightMap);
     }
+    // Canvas start
+
+    @Override
+    public DamageSources damagesources() {
+        return new me.dueris.canvas.world.damage.CraftDamageSources(this);
+    }
+    // Canvas end
 
     @Override
     public Biome getBiome(int x, int z) {
