From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris MC <purplewolf.mc1@gmail.com>
Date: Fri, 8 Dec 2023 04:28:57 +0000
Subject: [PATCH] Obfuscation & Encryption API


diff --git a/src/main/java/me/dueris/canvas/CanvasConfig.java b/src/main/java/me/dueris/canvas/CanvasConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..9d91d7af1157821bb49c5c8c021f8a47bd1cdcf0
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/CanvasConfig.java
@@ -0,0 +1,179 @@
+package me.dueris.canvas;
+
+import com.google.common.base.Throwables;
+import com.google.common.collect.ImmutableMap;
+import com.mojang.datafixers.util.Pair;
+import net.kyori.adventure.bossbar.BossBar;
+import net.kyori.adventure.text.minimessage.MiniMessage;
+import net.minecraft.core.registries.BuiltInRegistries;
+import net.minecraft.resources.ResourceLocation;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.world.effect.MobEffect;
+import net.minecraft.world.effect.MobEffectInstance;
+import net.minecraft.world.entity.EntityDimensions;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.food.FoodProperties;
+import net.minecraft.world.food.Foods;
+import net.minecraft.world.item.enchantment.Enchantment;
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.Blocks;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.ConfigurationSection;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+import org.purpurmc.purpur.command.PurpurCommand;
+import org.purpurmc.purpur.task.TPSBarTask;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.logging.Level;
+
+@SuppressWarnings("unused")
+public class CanvasConfig {
+    private static final String HEADER = "This is the main configuration file for Canvas.\n"
+        + "As you can see, there's tons to configure. Some options may impact gameplay, so use\n"
+        + "with caution, and make sure you know what each option does before configuring.\n"
+        + "\n"
+        + "If you need help with the configuration or have any questions related to Canvas,\n"
+        + "join us in our Discord server. https://discord.gg/kCSBd4dHU4/ \n"
+        + "\n"
+        + "Website: https://canvas.kesug.com/ \n";
+    private static File CONFIG_FILE;
+    public static YamlConfiguration config;
+
+    private static Map<String, Command> commands;
+
+    public static int version;
+    static boolean verbose;
+
+    public static void init(File configFile) {
+        CONFIG_FILE = configFile;
+        config = new YamlConfiguration();
+        try {
+            config.load(CONFIG_FILE);
+        } catch (IOException ignore) {
+        } catch (InvalidConfigurationException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not load canvas.yml, please correct your syntax errors", ex);
+            throw Throwables.propagate(ex);
+        }
+        config.options().header(HEADER);
+        config.options().copyDefaults(true);
+
+        version = getInt("config-version", 33);
+        set("config-version", 33);
+
+        readConfig(CanvasConfig.class, null);
+
+        Blocks.rebuildCache();
+    }
+
+    protected static void log(String s) {
+        if (verbose) {
+            log(Level.INFO, s);
+        }
+    }
+
+    protected static void log(Level level, String s) {
+        Bukkit.getLogger().log(level, s);
+    }
+
+    public static void registerCommands() {
+        for (Map.Entry<String, Command> entry : commands.entrySet()) {
+            MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Canvas", entry.getValue());
+        }
+    }
+
+    static void readConfig(Class<?> clazz, Object instance) {
+        for (Method method : clazz.getDeclaredMethods()) {
+            if (Modifier.isPrivate(method.getModifiers())) {
+                if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+                    try {
+                        method.setAccessible(true);
+                        method.invoke(instance);
+                    } catch (InvocationTargetException ex) {
+                        throw Throwables.propagate(ex.getCause());
+                    } catch (Exception ex) {
+                        Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+                    }
+                }
+            }
+        }
+
+        try {
+            config.save(CONFIG_FILE);
+        } catch (IOException ex) {
+            Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+        }
+    }
+
+    private static void set(String path, Object val) {
+        config.addDefault(path, val);
+        config.set(path, val);
+    }
+
+    private static String getString(String path, String def) {
+        config.addDefault(path, def);
+        return config.getString(path, config.getString(path));
+    }
+
+    private static boolean getBoolean(String path, boolean def) {
+        config.addDefault(path, def);
+        return config.getBoolean(path, config.getBoolean(path));
+    }
+
+    private static double getDouble(String path, double def) {
+        config.addDefault(path, def);
+        return config.getDouble(path, config.getDouble(path));
+    }
+
+    private static int getInt(String path, int def) {
+        config.addDefault(path, def);
+        return config.getInt(path, config.getInt(path));
+    }
+
+    private static <T> List getList(String path, T def) {
+        config.addDefault(path, def);
+        return config.getList(path, config.getList(path));
+    }
+
+    static Map<String, Object> getMap(String path, Map<String, Object> def) {
+        if (def != null && config.getConfigurationSection(path) == null) {
+            config.addDefault(path, def);
+            return def;
+        }
+        return toMap(config.getConfigurationSection(path));
+    }
+
+    private static Map<String, Object> toMap(ConfigurationSection section) {
+        ImmutableMap.Builder<String, Object> builder = ImmutableMap.builder();
+        if (section != null) {
+            for (String key : section.getKeys(false)) {
+                Object obj = section.get(key);
+                if (obj != null) {
+                    builder.put(key, obj instanceof ConfigurationSection val ? toMap(val) : obj);
+                }
+            }
+        }
+        return builder.build();
+    }
+
+    public static boolean disableMixin = false;
+    public static boolean obfuscateIps = false;
+    private static void mixin(){
+        disableMixin = getBoolean("mixin.disableMixins", disableMixin);
+    }
+    private static void logger(){
+        obfuscateIps = getBoolean("logger.obfuscateIps", obfuscateIps);
+    }
+}
diff --git a/src/main/java/me/dueris/canvas/logger/CraftCanvasLogger.java b/src/main/java/me/dueris/canvas/logger/CraftCanvasLogger.java
new file mode 100644
index 0000000000000000000000000000000000000000..252880cf53452cabe1c5d7fb1cfe6d85a6ee998b
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/logger/CraftCanvasLogger.java
@@ -0,0 +1,221 @@
+package me.dueris.canvas.logger;
+
+import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.Main;
+import javax.crypto.BadPaddingException;
+import javax.crypto.Cipher;
+import javax.crypto.KeyGenerator;
+import javax.crypto.SecretKey;
+import javax.crypto.spec.SecretKeySpec;
+import java.nio.charset.StandardCharsets;
+import java.security.NoSuchAlgorithmException;
+import java.security.SecureRandom;
+import java.util.Base64;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Random;
+import java.util.logging.Logger;
+
+public class CraftCanvasLogger implements CanvasLogger {
+
+    private static final String ANSI_RESET = "\u001B[0m";
+    private static final String ANSI_BLACK = "\u001B[30m";
+    private static final String ANSI_RED = "\u001B[31m";
+    private static final String ANSI_GREEN = "\u001B[32m";
+    private static final String ANSI_YELLOW = "\u001B[33m";
+    private static final String ANSI_BLUE = "\u001B[34m";
+    private static final String ANSI_PURPLE = "\u001B[35m";
+    private static final String ANSI_CYAN = "\u001B[36m";
+    private static final String ANSI_WHITE = "\u001B[37m";
+
+    public String getName() {
+        return "CanvasLogger";
+    }
+
+    public enum LogLevel {
+        INFO, WARNING, ERROR
+    }
+
+    public void info(String message) {
+        if (logLevel.ordinal() <= LogLevel.INFO.ordinal()) {
+            logC(ANSI_BLUE, "INFO", message);
+        }
+    }
+
+    private void logC(String color, String level, String message) {
+        System.out.println(color + "[" + level + "] " + message + ANSI_RESET);
+    }
+
+    public void logColored(String color, String level, String message) {
+        logC(color, level, message);
+    }
+
+    public void log(String level, String message){
+        logC(ANSI_WHITE, level, message);
+    }
+
+    public void error(String message) {
+        if (logLevel.ordinal() <= LogLevel.ERROR.ordinal()) {
+            logC(ANSI_RED, "ERROR", message);
+        }
+    }
+
+    public void warning(String message) {
+        if (logLevel.ordinal() <= LogLevel.WARNING.ordinal()) {
+            logC(ANSI_YELLOW, "WARNING", message);
+        }
+    }
+
+    public Obfuscator getObfuscator(){
+        return CraftServer.canvas_obfuscator;
+    }
+
+    private LogLevel logLevel = LogLevel.INFO;
+
+    public static class Obfuscator implements me.dueris.canvas.logger.Obfuscator {
+
+        String obfBuilder = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*()_+-={}[];`~ ";
+
+        private Map<Character, Character> obfuscationMap;
+
+        public Obfuscator() {
+            obfuscationMap = createObfuscationMap();
+        }
+
+        public String obfuscateMessage(String message) {
+            char[] chars = message.toCharArray();
+            for (int i = 0; i < chars.length; i++) {
+                char originalChar = chars[i];
+                char obfuscatedChar = obfuscationMap.getOrDefault(originalChar, originalChar);
+                chars[i] = obfuscatedChar;
+            }
+            return new String(chars);
+        }
+
+        @Override
+        public void log(final String msg) {
+            Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.INFO, msg);
+        }
+
+        @Override
+        public void error(final String msg) {
+            Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, msg);
+        }
+
+        @Override
+        public void warn(final String msg) {
+            Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.WARNING, msg);
+        }
+
+        @Override
+        public void logMsg(final java.util.logging.Level logLevel, final String msg) {
+            Logger.getLogger(Main.class.getName()).log(logLevel, msg);
+        }
+
+        @Override
+        public String obfuscateMessage(final String msg, final Map<Character, Character> characterMap) {
+            char[] chars = msg.toCharArray();
+            for (int i = 0; i < chars.length; i++) {
+                char originalChar = chars[i];
+                char obfuscatedChar = characterMap.getOrDefault(originalChar, originalChar);
+                chars[i] = obfuscatedChar;
+            }
+            return new String(chars);
+        }
+
+        @Override
+        public String genKey(final int length) {
+            SecureRandom secureRandom = new SecureRandom();
+            StringBuilder key = new StringBuilder(length);
+
+            for(int i = 0; i < length; i++){
+                int randomIndex = secureRandom.nextInt("".length());
+                char ranChar = obfBuilder.charAt(randomIndex);
+                key.append(ranChar);
+            }
+            return key.toString();
+        }
+
+        @Override
+        public String encodeBase64(final String input) {
+            byte[] encodeB = Base64.getEncoder().encode(input.getBytes());
+            return new String(encodeB);
+        }
+
+        @Override
+        public String decodeBase64(final String input) {
+            byte[] decodeB = Base64.getDecoder().decode(input.getBytes());
+            return new String(decodeB);
+        }
+
+        @Override
+        public String encrypt(final String data, final String key, String algorithm) {
+            try {
+                SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), algorithm);
+                Cipher cipher = Cipher.getInstance(algorithm);
+                cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec);
+                byte[] encryptedBytes = cipher.doFinal(data.getBytes());
+                return Base64.getEncoder().encodeToString(encryptedBytes);
+            } catch (Exception e) {
+                e.printStackTrace();
+                return null;
+            }
+        }
+
+        @Override
+        public String decrypt(final String encryptedData, final String key, String algorithm) {
+            try {
+                SecretKeySpec secretKeySpec = new SecretKeySpec(key.getBytes(), algorithm);
+                Cipher cipher = Cipher.getInstance(algorithm);
+                cipher.init(Cipher.DECRYPT_MODE, secretKeySpec);
+                byte[] decodedData = Base64.getDecoder().decode(encryptedData);
+                byte[] decryptedBytes = cipher.doFinal(decodedData);
+                return new String(decryptedBytes, StandardCharsets.UTF_8);
+            } catch (BadPaddingException e) {
+                System.err.println("Bad Padding: The data may have been tampered with.");
+                e.printStackTrace();
+            } catch (Exception e) {
+                System.err.println("Decryption failed.");
+                e.printStackTrace();
+            }
+            return null;
+        }
+
+
+        @Override
+        public String generateEncryptionKey(final String algorithm) {
+            String keyHex = null;
+            try {
+                KeyGenerator keyGenerator = KeyGenerator.getInstance(algorithm);
+
+                SecretKey secretKey = keyGenerator.generateKey();
+                byte[] keyBytes = secretKey.getEncoded();;
+
+                StringBuilder hexString = new StringBuilder();
+                for(byte b : keyBytes){
+                    hexString.append(String.format("%02X", b));
+                }
+                keyHex = hexString.toString();
+            } catch (NoSuchAlgorithmException e) {
+                throw new RuntimeException(e);
+            }
+
+            return keyHex;
+        }
+
+        private Map<Character, Character> createObfuscationMap() {
+            Map<Character, Character> map = new HashMap<>();
+            Random random = new Random();
+            String originalChars = obfBuilder;
+            char[] obfuscatedChars = originalChars.toCharArray();
+
+            for (char originalChar : originalChars.toCharArray()) {
+                char obfuscatedChar = obfuscatedChars[random.nextInt(obfuscatedChars.length)];
+                map.put(originalChar, obfuscatedChar);
+            }
+
+            return map;
+        }
+
+    }
+}
diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index 638fad6cd328d8406cade90727947c4a6faad16e..34eaa0f0b98c4209a7015126bb051615b473de42 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -1,5 +1,6 @@
 package net.minecraft.network;
 
+import me.dueris.canvas.CanvasConfig;
 import com.google.common.base.Suppliers;
 import com.google.common.collect.Queues;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
@@ -636,7 +637,7 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     }
 
     public String getLoggableAddress(boolean logIps) {
-        return this.address == null ? "local" : (logIps ? this.address.toString() : "IP hidden");
+        return this.address == null ? "local" : (logIps ? this.address.toString() : (CanvasConfig.obfuscateIps ? "Ip Hidden" : this.getPlayer().server.server.getCanvasLogger().getObfuscator().encrypt(this.address.toString(), this.getPlayer().server.server.getCanvasLogger().getObfuscator().generateEncryptionKey("AES"), "AES"))); // Canvas
     }
 
     public void disconnect(Component disconnectReason) {
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 146f229b8e8888e2c0256c007c71c675c27e71a5..7e80d16bb3e7da22c4d3bf70ad3969e2f5b7e889 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -7,12 +7,15 @@ import java.util.Arrays;
 import java.util.Calendar;
 import java.util.Date;
 import java.util.List;
-import java.util.concurrent.TimeUnit;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import me.dueris.canvas.logger.CanvasLogger;
+import me.dueris.canvas.logger.CraftCanvasLogger;
 import joptsimple.OptionParser;
 import joptsimple.OptionSet;
 import joptsimple.util.PathConverter;
+import org.bukkit.Bukkit;
+import javax.crypto.KeyGenerator;
 
 public class Main {
     public static boolean useJline = true;
@@ -188,6 +191,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Purpur end
 
+                // Canvas start
+                acceptsAll(asList("canvas", "canvas-settings"), "File for canvas settings")
+                    .withRequiredArg()
+                    .ofType(File.class)
+                    .defaultsTo(new File("canvas.yml"))
+                    .describedAs("Yml file");
+                // Canvas end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
@@ -386,6 +397,11 @@ public class Main {
             tryPreloadClass(io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.PlayerChunkLoaderData.class.getName());
             // Paper end
         }
+        // Canvas start
+
+        CraftServer.canvas_obfuscator = new CraftCanvasLogger.Obfuscator();
+
+        // Canvas end
     }
 
     // Paper start
