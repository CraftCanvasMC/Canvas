From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Sat, 4 Jan 2025 09:34:43 -0800
Subject: [PATCH] Use AutoConfig for Configuration


diff --git a/build.gradle.kts b/build.gradle.kts
index 8a581ee23da7f39c8bd3189c574f5524bd9051fa..b2bff6593bb86f9787975728593835580ca566c5 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -88,6 +88,11 @@ dependencies {
     implementation("me.lucko:spark-paper:1.10.119-SNAPSHOT")
     // Paper end - spark
     implementation("com.ibm.async:asyncutil:0.1.0") // Canvas
+    // Canvas start - cloth config
+    implementation("me.shedaniel.cloth:cloth-config-fabric:17.0.144") {
+        exclude(group = "net.fabricmc")
+    }
+    // Canvas end
 }
 
 paperweight {
diff --git a/src/main/java/io/github/dueris/canvas/Config.java b/src/main/java/io/github/dueris/canvas/Config.java
index db696236dd81211db6e36ca58f0f41b5af53065d..24facbbc45d546521baa7f869ac75115b083db4b 100644
--- a/src/main/java/io/github/dueris/canvas/Config.java
+++ b/src/main/java/io/github/dueris/canvas/Config.java
@@ -1,12 +1,12 @@
 package io.github.dueris.canvas;
 
 import io.github.dueris.canvas.entity.tracking.ThreadedTracker;
-import net.skillcode.jsonconfig.JsonConfig;
-import net.skillcode.jsonconfig.JsonConfigAPI;
-import java.io.File;
-import java.nio.file.Paths;
+import me.shedaniel.autoconfig.AutoConfig;
+import me.shedaniel.autoconfig.ConfigData;
+import me.shedaniel.autoconfig.serializer.GsonConfigSerializer;
 
-public class Config implements JsonConfig {
+@me.shedaniel.autoconfig.annotation.Config(name = "canvas_server")
+public class Config implements ConfigData {
 
     public static Config INSTANCE = new Config();
 
@@ -27,16 +27,7 @@ public class Config implements JsonConfig {
     public boolean useCompactSineLUT = true;
 
     public static Config init() {
-        final JsonConfigAPI jsonConfigAPI = new JsonConfigAPI(true);
-        File serverJson = new File(Paths.get(".").toFile(), "canvas_server.json");
-        String parentPath = Paths.get(".").toFile().getAbsolutePath() + File.separator;
-
-        jsonConfigAPI.registerConfig(
-            INSTANCE,
-            parentPath,
-            serverJson.getName()
-        );
-
+        AutoConfig.register(Config.class, GsonConfigSerializer::new);
         System.setProperty("com.ishland.c2me.opts.natives_math.duringGameInit", "true");
         boolean configured = INSTANCE.chunkgen.nativeAccelerationEnabled;
         if (configured) {
@@ -47,6 +38,7 @@ public class Config implements JsonConfig {
             }
         }
         ThreadedTracker.init();
+        INSTANCE = AutoConfig.getConfigHolder(Config.class).getConfig();
         return INSTANCE;
     }
 
diff --git a/src/main/java/net/fabricmc/loader/api/FabricLoader.java b/src/main/java/net/fabricmc/loader/api/FabricLoader.java
new file mode 100644
index 0000000000000000000000000000000000000000..5b4c0c69de84e5126abb72640a7ba9c1e9f98ea5
--- /dev/null
+++ b/src/main/java/net/fabricmc/loader/api/FabricLoader.java
@@ -0,0 +1,15 @@
+package net.fabricmc.loader.api;
+
+import org.jetbrains.annotations.NotNull;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+
+/**
+ * Implemented for AutoConfig
+ */
+public interface FabricLoader {
+    static @NotNull FabricLoader getInstance() {
+        return () -> Paths.get("./");
+    }
+    Path getConfigDir();
+}
