From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Sat, 28 Dec 2024 02:25:24 -0800
Subject: [PATCH] Use AutoConfig for Configuration


diff --git a/build.gradle.kts b/build.gradle.kts
index 1f37cdac9fd577f6b11e4985cb31a7bfae74106f..567fd66888d7e4440b12e9a3164b9e486499e3d5 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -88,6 +88,7 @@ dependencies {
     implementation("me.lucko:spark-paper:1.10.119-SNAPSHOT")
     // Paper end - spark
     implementation("com.ibm.async:asyncutil:0.1.0") // Canvas
+    implementation("me.shedaniel.cloth:cloth-config-fabric:17.0.144") // Canvas
 }
 
 paperweight {
diff --git a/src/main/java/io/github/dueris/canvas/Config.java b/src/main/java/io/github/dueris/canvas/Config.java
index 344e866b93a6418ee3a561a469407ea3c24ed990..332a55c0d5bc316ff448e2b686a14aef672bc1cb 100644
--- a/src/main/java/io/github/dueris/canvas/Config.java
+++ b/src/main/java/io/github/dueris/canvas/Config.java
@@ -1,12 +1,12 @@
 package io.github.dueris.canvas;
 
 import io.github.dueris.canvas.entity.tracking.ThreadedTracker;
-import net.skillcode.jsonconfig.JsonConfig;
-import net.skillcode.jsonconfig.JsonConfigAPI;
-import java.io.File;
-import java.nio.file.Paths;
+import me.shedaniel.autoconfig.AutoConfig;
+import me.shedaniel.autoconfig.ConfigData;
+import me.shedaniel.autoconfig.serializer.GsonConfigSerializer;
 
-public class Config implements JsonConfig {
+@me.shedaniel.autoconfig.annotation.Config(name = "canvas_server")
+public class Config implements ConfigData {
 
     public static boolean enabled = false;
     public static Config INSTANCE = new Config();
@@ -27,28 +27,18 @@ public class Config implements JsonConfig {
     public boolean useCompactSineLUT = true;
 
     public static Config init() {
-        final JsonConfigAPI jsonConfigAPI = new JsonConfigAPI(true);
-        File serverJson = new File(Paths.get(".").toFile(), "canvas_server.json");
-        String parentPath = Paths.get(".").toFile().getAbsolutePath() + File.separator;
-
-        jsonConfigAPI.registerConfig(
-            INSTANCE,
-            parentPath,
-            serverJson.getName()
-        );
-
+        AutoConfig.register(Config.class, GsonConfigSerializer::new);
         System.setProperty("com.ishland.c2me.opts.natives_math.duringGameInit", "true");
         boolean configured = INSTANCE.chunkgen.nativeAccelerationEnabled;
-        boolean actuallyEnabled = false;
         if (configured) {
             try {
-                actuallyEnabled = Class.forName("io.github.dueris.canvas.util.NativeLoader").getField("lookup").get(null) != null;
+                Class.forName("io.github.dueris.canvas.util.NativeLoader").getField("lookup").get(null);
             } catch (Throwable t) {
                 t.printStackTrace();
             }
         }
         ThreadedTracker.init();
-        enabled = actuallyEnabled;
+        INSTANCE = AutoConfig.getConfigHolder(Config.class).getConfig();
         return INSTANCE;
     }
 
diff --git a/src/main/java/net/fabricmc/loader/api/FabricLoader.java b/src/main/java/net/fabricmc/loader/api/FabricLoader.java
new file mode 100644
index 0000000000000000000000000000000000000000..5b4c0c69de84e5126abb72640a7ba9c1e9f98ea5
--- /dev/null
+++ b/src/main/java/net/fabricmc/loader/api/FabricLoader.java
@@ -0,0 +1,15 @@
+package net.fabricmc.loader.api;
+
+import org.jetbrains.annotations.NotNull;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+
+/**
+ * Implemented for AutoConfig
+ */
+public interface FabricLoader {
+    static @NotNull FabricLoader getInstance() {
+        return () -> Paths.get("./");
+    }
+    Path getConfigDir();
+}
