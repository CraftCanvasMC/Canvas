From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris MC <purplewolf.mc1@gmail.com>
Date: Wed, 15 Nov 2023 07:30:31 +0000
Subject: [PATCH] Allow jars and datapacks to be bundled in plugins


diff --git a/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java b/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
index 8c654ed57b04ab28a569f8c337a1ad3085624ccb..b31a2f4bab52ad873676547c4666c22e0d51b1ff 100644
--- a/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
+++ b/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
@@ -19,6 +19,8 @@ import java.io.File;
 import java.io.IOException;
 import java.nio.file.Files;
 import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.*;
 
 public class PluginInitializerManager {
 
@@ -32,11 +34,11 @@ public class PluginInitializerManager {
         this.updateDirectory = updateDirectory;
     }
 
-    private static PluginInitializerManager parse(@NotNull final OptionSet minecraftOptionSet) throws Exception {
+    private static PluginInitializerManager parse(@NotNull final OptionSet minecraftOptionSet, Path pluginDirectory) throws Exception { // Canvas
         // We have to load the bukkit configuration inorder to get the update folder location.
         final File configFileLocationBukkit = (File) minecraftOptionSet.valueOf("bukkit-settings");
 
-        final Path pluginDirectory = ((File) minecraftOptionSet.valueOf("plugins")).toPath();
+        // final Path pluginDirectory = ((File) minecraftOptionSet.valueOf("plugins")).toPath(); // Canvas
 
         final YamlConfiguration configuration = PaperConfigurations.loadLegacyConfigFile(configFileLocationBukkit);
 
@@ -75,8 +77,8 @@ public class PluginInitializerManager {
         return new PluginInitializerManager(pluginDirectory, resolvedUpdateDirectory);
     }
 
-    public static PluginInitializerManager init(final OptionSet optionSet) throws Exception {
-        impl = parse(optionSet);
+    public static PluginInitializerManager init(final OptionSet optionSet, Path pluginDirectory) throws Exception {
+        impl = parse(optionSet, pluginDirectory);
         return impl;
     }
 
@@ -95,10 +97,17 @@ public class PluginInitializerManager {
     }
 
     public static void load(OptionSet optionSet) throws Exception {
-        // We have to load the bukkit configuration inorder to get the update folder location.
-        io.papermc.paper.plugin.PluginInitializerManager pluginSystem = io.papermc.paper.plugin.PluginInitializerManager.init(optionSet);
-        // Register the default plugin directory
-        io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(io.papermc.paper.plugin.provider.source.DirectoryProviderSource.INSTANCE, pluginSystem.pluginDirectoryPath());
+        // Canvas start - lets try and load 2 dirs
+        Path mainPath = ((File) optionSet.valueOf("plugins")).toPath();
+        Path secondPath = Paths.get("cache");
+        List<Path> paths = new ArrayList<>();
+        paths.add(mainPath);
+        paths.add(secondPath);
+        for(Path pluginDirectory : paths){
+            io.papermc.paper.plugin.PluginInitializerManager pluginSystem = io.papermc.paper.plugin.PluginInitializerManager.init(optionSet, pluginDirectory);
+            io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(io.papermc.paper.plugin.provider.source.DirectoryProviderSource.INSTANCE, pluginDirectory);
+        }
+        // Canvas end
         @SuppressWarnings("unchecked")
         java.util.List<File> files = (java.util.List<File>) optionSet.valuesOf("add-plugin");
         // Register plugins from the flag
diff --git a/src/main/java/io/papermc/paper/plugin/entrypoint/classloader/PaperPluginClassLoader.java b/src/main/java/io/papermc/paper/plugin/entrypoint/classloader/PaperPluginClassLoader.java
index 5a00e5c41274ded6b837fb81fa8f54616f2b7bc8..f7bc9ffcabe5516ea4d646e0410f98ff5a9510f7 100644
--- a/src/main/java/io/papermc/paper/plugin/entrypoint/classloader/PaperPluginClassLoader.java
+++ b/src/main/java/io/papermc/paper/plugin/entrypoint/classloader/PaperPluginClassLoader.java
@@ -160,6 +160,7 @@ public class PaperPluginClassLoader extends PaperSimplePluginClassLoader impleme
             config.getAuthors(),
             config.getContributors(),
             config.getWebsite(),
+            config.getPluginPack(), // Canvas
             config.getLoggerPrefix(),
             config.getLoadOrder(),
             config.getPermissions(),
diff --git a/src/main/java/io/papermc/paper/plugin/provider/configuration/PaperPluginMeta.java b/src/main/java/io/papermc/paper/plugin/provider/configuration/PaperPluginMeta.java
index 45bd29b70782e29eb11c36eaca0f940aee49799b..a986a9d271abce5b4107a538e35cd39138a4ca5b 100644
--- a/src/main/java/io/papermc/paper/plugin/provider/configuration/PaperPluginMeta.java
+++ b/src/main/java/io/papermc/paper/plugin/provider/configuration/PaperPluginMeta.java
@@ -53,6 +53,7 @@ public class PaperPluginMeta implements PluginMeta {
     private List<String> authors = List.of();
     private List<String> contributors = List.of();
     private String website;
+    private String pluginPack; // Canvas
     private String prefix;
     private PluginLoadOrder load = PluginLoadOrder.POSTWORLD;
     @FlattenedResolver
@@ -212,6 +213,13 @@ public class PaperPluginMeta implements PluginMeta {
     public String getWebsite() {
         return this.website;
     }
+    // Canvas start
+
+    @Override
+    public @Nullable String getPluginPack() {
+        return this.pluginPack;
+    }
+    // Canvas end
 
     @Override
     public @NotNull List<Permission> getPermissions() {
diff --git a/src/main/java/me/dueris/canvas/plugin/CanvasPluginLoader.java b/src/main/java/me/dueris/canvas/plugin/CanvasPluginLoader.java
new file mode 100644
index 0000000000000000000000000000000000000000..59b910cd5ad3d49f71005dd355ad3bd8efc6a36c
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/plugin/CanvasPluginLoader.java
@@ -0,0 +1,145 @@
+package me.dueris.canvas.plugin;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.ArrayList;
+import java.util.Enumeration;
+import java.util.List;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
+import net.minecraft.server.Main;
+
+public class CanvasPluginLoader {
+
+    public List<JarFile> pluginList = new ArrayList<>();
+
+    /**
+     * Begins loading the jars
+     * 
+     * Enters the jarFile and adds the datapack files and jarFiles
+     * to the cache to be loaded into the server
+     * 
+     * If the jarFile wasnt loaded correctly, it will throw a new
+     * IOException. If this occurs please run the loader() method
+     * correctly with your jarFile inside the correct dir
+     * 
+     */
+    public static void loader(){
+        CanvasPluginLoader pluginLoader = new CanvasPluginLoader();
+        pluginLoader.clearCache();
+        // System.out.println(Paths.get("plugins"));
+            File dir = Paths.get("plugins").toFile();
+
+            for(File file : dir.listFiles()){
+                if(file.getName().endsWith(".jar")){
+                    try {
+                        JarFile jarFile = new JarFile(file);
+                        Enumeration<JarEntry> entries = jarFile.entries();
+
+                        while (entries.hasMoreElements()) {
+                            JarEntry entry = entries.nextElement();
+
+                            if (entry.getName().startsWith("PLUGIN-INF/")) {
+                                pluginLoader.extractJarEntry(jarFile, entry);
+                            } else if (entry.getName().startsWith("PLUGIN-INF/datapacks")) {
+                                pluginLoader.extractJarEntry(jarFile, entry);
+                            } else if (entry.getName().startsWith("META-INF/")) {
+                                pluginLoader.extractJarEntry(jarFile, entry);
+                            } else if (entry.getName().startsWith("META-INF/datapacks/")) {
+                                pluginLoader.extractJarEntry(jarFile, entry);
+                            }
+                        }
+    
+                        jarFile.close();
+                    } catch (IOException e) {
+                        e.printStackTrace();
+                    }
+                }
+            }
+    }
+
+    public void clearCache(){
+        Path cache = Paths.get("cache");
+        cache.toFile().mkdirs();
+        if(cache != null){
+            for(File file : cache.toFile().listFiles()){
+                try {
+                    Files.delete(Path.of(file.getPath()));
+                } catch (IOException e) {
+                    // e.printStackTrace();
+                }
+            }
+        }
+        Path dataCache = Paths.get("cache/datapacks");
+        dataCache.toFile().mkdirs();
+        if(dataCache != null){
+            for(File file : dataCache.toFile().listFiles()){
+                try {
+                    Files.delete(Path.of(file.getPath()));
+                } catch (IOException e) {
+                    // e.printStackTrace();
+                }
+            }
+        }
+    }
+
+    public static List<File> datapacks = new ArrayList<>();
+
+    /**
+     * Extracts the jar entry to the "cache/datapacks/" directory for
+     * datapacks, and "cache/" directory for jarFiles.
+     */
+    public void extractJarEntry(JarFile jarFile, JarEntry entry){
+        Path jarPath = Paths.get("cache");
+        Path dataPath = Paths.get("cache/datapacks");
+        jarPath.toFile().mkdirs();
+        dataPath.toFile().mkdirs();
+
+        if(entry.getName().endsWith(".zip") && entry.getName().contains("INF/datapacks/")){
+            // gonna try and run it as a datapack
+            Main.LOGGER.info("Loading built-in datapack[%pl] to cache"
+                .replace("%pl", entry.getName())
+            );
+
+            try (InputStream inputStream = jarFile.getInputStream(entry)){
+                Path outputPath = jarPath.resolve(entry.getName().replace("PLUGIN-INF/datapacks/", "datapacks/").replace("META-INF/datapacks/", "datapacks/"));
+                FileOutputStream outputStream = new FileOutputStream(outputPath.toFile());
+
+                byte[] buffer = new byte[1024];
+                int bytesRead;
+
+                while ((bytesRead = inputStream.read(buffer)) != -1) {
+                    outputStream.write(buffer, 0, bytesRead);
+                }
+                CanvasPluginLoader.datapacks.add(outputPath.toFile());
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        } else if (entry.getName().endsWith(".jar")){
+            // gonna try and load it into the cache plugins with the source providers
+            Main.LOGGER.info("Loading built-in jarfile[%pl] to cache"
+                .replace("%pl", entry.getName())
+            );
+
+            try (InputStream inputStream = jarFile.getInputStream(entry)){
+                Path outputPath = jarPath.resolve(entry.getName().replace("PLUGIN-INF/jars/", "").replace("META-INF/jars/", ""));
+                FileOutputStream outputStream = new FileOutputStream(outputPath.toFile());
+
+                byte[] buffer = new byte[1024];
+                int bytesRead;
+
+                while ((bytesRead = inputStream.read(buffer)) != -1) {
+                    outputStream.write(buffer, 0, bytesRead);
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 139da0c4d86dd3418697e1c351afcfa5b956239a..95719c8b052aba8a44dbcf9c9204299491d07659 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -13,6 +13,7 @@ import java.net.Proxy;
 import java.nio.file.Files;
 import java.nio.file.Path;
 import java.nio.file.Paths;
+import java.util.*;
 import java.util.Optional;
 import java.util.function.BooleanSupplier;
 import javax.annotation.Nullable;
@@ -86,7 +87,11 @@ public class Main {
     }
     // Graphene end
 
-    private static final Logger LOGGER = LogUtils.getLogger();
+    public static final Logger LOGGER = LogUtils.getLogger(); // Canvas - private -> public
+    // Canvas start
+    public static File data_dir;
+    public static List<File> loadedPluginPacks = new ArrayList<>();
+    // Canvas end
 
     public Main() {}
 
@@ -269,8 +274,10 @@ public class Main {
             }
 
             PackRepository resourcepackrepository = ServerPacksSource.createPackRepository(convertable_conversionsession);
+            PackRepository canvaspackrepository = ServerPacksSource.createCanvasPackRepository(convertable_conversionsession); // Canvas
             // CraftBukkit start
             File bukkitDataPackFolder = new File(convertable_conversionsession.getLevelPath(LevelResource.DATAPACK_DIR).toFile(), "bukkit");
+            Main.data_dir = convertable_conversionsession.getLevelPath(LevelResource.DATAPACK_DIR).toFile(); // Canvas
             if (!bukkitDataPackFolder.exists()) {
                 bukkitDataPackFolder.mkdirs();
             }
@@ -285,6 +292,26 @@ public class Main {
             } catch (java.io.IOException ex) {
                 throw new RuntimeException("Could not initialize Bukkit datapack", ex);
             }
+            // Canvas start
+            for (File datapack : me.dueris.canvas.plugin.CanvasPluginLoader.datapacks) {
+                if (!datapack.exists()) {
+                    Main.LOGGER.info("Source file does not exist: " + datapack.getPath());
+                    continue;
+                }
+    
+                Path sourcePath = datapack.toPath();
+                Path destinationPath = convertable_conversionsession.getLevelPath(LevelResource.DATAPACK_DIR).toAbsolutePath();
+    
+                try {
+                    Files.createDirectories(destinationPath);
+                    Files.copy(sourcePath, destinationPath.resolve(datapack.getName()), java.nio.file.StandardCopyOption.REPLACE_EXISTING);
+    
+                    Main.loadedPluginPacks.add(destinationPath.resolve(datapack.getName()).toFile());
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }
+            // Canvas end
             AtomicReference<WorldLoader.DataLoadContext> worldLoader = new AtomicReference<>();
             // CraftBukkit end
 
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 3fc2cf43e1fefee532ad1b639539b388b79c113f..053bf33b947b7b60582f4ea41352b5b5a2a9c898 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -954,6 +954,15 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
             if (this.hasStopped) return;
             this.hasStopped = true;
         }
+        // Canvas start
+        for(File datapack : net.minecraft.server.Main.loadedPluginPacks){     
+            try {
+                Files.delete(Path.of(datapack.getAbsolutePath()));
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+        // Canvas end
         if (!hasLoggedStop && isDebugging()) io.papermc.paper.util.TraceUtil.dumpTraceForThread("Server stopped"); // Paper
         // Paper start - kill main thread, and kill it hard
         shutdownThread = Thread.currentThread();
diff --git a/src/main/java/net/minecraft/server/packs/repository/ServerPacksSource.java b/src/main/java/net/minecraft/server/packs/repository/ServerPacksSource.java
index d92cd89373f8373c367ce422328b9836de09096d..2e3f3e362b8d29c0993eee6b21825c2a5561e9f1 100644
--- a/src/main/java/net/minecraft/server/packs/repository/ServerPacksSource.java
+++ b/src/main/java/net/minecraft/server/packs/repository/ServerPacksSource.java
@@ -2,6 +2,7 @@ package net.minecraft.server.packs.repository;
 
 import com.google.common.annotations.VisibleForTesting;
 import java.nio.file.Path;
+import java.nio.file.Paths; // Canvas
 import java.util.Optional;
 import javax.annotation.Nullable;
 import net.minecraft.SharedConstants;
@@ -65,4 +66,11 @@ public class ServerPacksSource extends BuiltInPackSource {
     public static PackRepository createPackRepository(LevelStorageSource.LevelStorageAccess session) {
         return createPackRepository(session.getLevelPath(LevelResource.DATAPACK_DIR), session.parent().getWorldDirValidator());
     }
+    // Canvas start - cache/datapacks loading for plugins
+
+    @Deprecated(forRemoval = true)
+    public static PackRepository createCanvasPackRepository(LevelStorageSource.LevelStorageAccess session) {
+        return createPackRepository(Paths.get("cache/datapacks"), session.parent().getWorldDirValidator());
+    }
+    // Canvas end
 }
diff --git a/src/test/java/io/papermc/paper/plugin/TestPluginMeta.java b/src/test/java/io/papermc/paper/plugin/TestPluginMeta.java
index ba271c35eb2804f94cfc893bf94affb9ae13d3ba..1e2ac1ed37a76ea9d7c7e84afb237c475fe13678 100644
--- a/src/test/java/io/papermc/paper/plugin/TestPluginMeta.java
+++ b/src/test/java/io/papermc/paper/plugin/TestPluginMeta.java
@@ -39,6 +39,13 @@ public class TestPluginMeta implements PluginMeta {
     public @NotNull String getVersion() {
         return "1.0";
     }
+    // Canvas start
+
+    @Override
+    public @Nullable String getPluginPack() {
+        return "null";
+    }
+    // Canvas end
 
     @Override
     public @Nullable String getLoggerPrefix() {
