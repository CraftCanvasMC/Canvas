From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris MC <purplewolf.mc1@gmail.com>
Date: Thu, 9 Nov 2023 20:20:38 +0000
Subject: [PATCH] Add last tick time API


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index b61c4d1ebb9c15a7ecd7bec5eb864851c053fb7e..00e9943144bd99542463c7e19356d06b558176e5 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1095,6 +1095,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     // Spigot End
 
     public static volatile RuntimeException chunkSystemCrash; // Paper - rewrite chunk system
+    public static java.time.Duration lastTickDuration = java.time.Duration.ZERO; // Yatopia
 
     protected void runServer() {
         try {
@@ -1174,7 +1175,9 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 this.nextTickTime += 50L;
                 //this.startMetricsRecordingTick(); // Purpur
                 //this.profiler.push("tick"); // Purpur
+                long tickStart = System.nanoTime(); // Yatopia
                 this.tickServer(this::haveTime);
+                lastTickDuration = java.time.Duration.ofNanos(System.nanoTime() - tickStart); // Yatopia
                 //this.profiler.popPush("nextTickWait"); // Purpur
                 this.mayHaveDelayedTasks = true;
                     // Purpur start - tps catchup
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 79f00c72d28426095a3f3742d77f2369164b2a9c..efc002601050fede371a4bdd32474e3bca8e75c3 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -3278,9 +3278,15 @@ public final class CraftServer implements Server {
     public CraftPotionBrewer getPotionBrewer() {
         return this.potionBrewer;
     }
-
     // Paper end
 
+    // Yatopia start
+    @Override
+    public java.time.Duration getLastTickDuration() {
+        return net.minecraft.server.MinecraftServer.lastTickDuration;
+    }
+    // Yatopia end
+
     // Purpur start
     @Override
     public String getServerName() {
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 5da1ef6d90c6a5bd047e971bcc56d786239c6fd8..947eb829f5dd61b493b6e6a51fd1836601facaf1 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -1,7 +1,5 @@
 package org.spigotmc;
 
-import net.minecraft.server.MinecraftServer;
-import org.bukkit.ChatColor;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 
@@ -42,6 +40,16 @@ public class TicksPerSecondCommand extends Command
         builder.append(net.kyori.adventure.text.Component.text("TPS from last 5s, 1m, 5m, 15m: ", net.kyori.adventure.text.format.NamedTextColor.GOLD));
         builder.append(net.kyori.adventure.text.Component.join(net.kyori.adventure.text.JoinConfiguration.commas(true), tpsAvg));
         sender.sendMessage(builder.asComponent());
+        // Yatopia start - Last tick duration API
+        java.time.Duration lastTickDuration = org.bukkit.Bukkit.getLastTickDuration();
+        sender.sendMessage(net.kyori.adventure.text.Component.text()
+            .append(net.kyori.adventure.text.Component.text("Last tick: ", net.kyori.adventure.text.format.NamedTextColor.GOLD))
+            .append(TicksPerSecondCommand.formatTo(lastTickDuration, java.util.concurrent.TimeUnit.MILLISECONDS))
+            .append(net.kyori.adventure.text.Component.text(" (", net.kyori.adventure.text.format.NamedTextColor.GOLD))
+            .append(TicksPerSecondCommand.formatTo(lastTickDuration, java.util.concurrent.TimeUnit.NANOSECONDS))
+            .append(net.kyori.adventure.text.Component.text(")", net.kyori.adventure.text.format.NamedTextColor.GOLD))
+            .build());
+        // Yatopia end
         if (args.length > 0 && args[0].equals("mem") && sender.hasPermission("bukkit.command.tpsmemory")) {
             sender.sendMessage(net.kyori.adventure.text.Component.text()
                 .append(net.kyori.adventure.text.Component.text("Current Memory Usage: ", net.kyori.adventure.text.format.NamedTextColor.GOLD))
@@ -66,4 +74,16 @@ public class TicksPerSecondCommand extends Command
         return net.kyori.adventure.text.Component.text(amount, color);
         // Paper end
     }
+    
+    // Yatopia start - Last tick duration API
+    public static net.kyori.adventure.text.Component formatTo(java.time.Duration duration, java.util.concurrent.TimeUnit unit) {
+        java.util.concurrent.TimeUnit nanosUnit = java.util.concurrent.TimeUnit.NANOSECONDS;
+        long nanos = duration.toNanos();
+        long toAskedUnit = unit.convert( nanos, nanosUnit );
+        long ms = nanosUnit.toMillis( nanos );
+        net.kyori.adventure.text.format.TextColor startingColor = ms < 40 ? net.kyori.adventure.text.format.NamedTextColor.GREEN : ( ms < 50 ) ? net.kyori.adventure.text.format.NamedTextColor.YELLOW : net.kyori.adventure.text.format.NamedTextColor.RED;
+        return net.kyori.adventure.text.Component.text(toAskedUnit, startingColor)
+            .append(net.kyori.adventure.text.Component.text(org.yatopiamc.yatopia.server.util.TimeUtils.getFriendlyName(unit), net.kyori.adventure.text.format.NamedTextColor.GOLD));
+    }
+    // Yatopia end
 }
