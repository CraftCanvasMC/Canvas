From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <122416109+Dueris@users.noreply.github.com>
Date: Sun, 14 Apr 2024 19:21:52 +0000
Subject: [PATCH] Fix protected public patches


diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index fc2fad7ead521a1fb936c0d87b74c431810cd086..fb547c2d5743194fe51c823974fb0132bc449442 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -2847,17 +2847,24 @@ public abstract class LivingEntity extends Entity implements Attackable {
         this.hasImpulse = true;
     }
 
-    protected void goDownInWater() {
+    public void goDownInWater() { // Canvas - protected -> public
         this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -0.03999999910593033D, 0.0D));
     }
 
-    protected void jumpInLiquid(TagKey<Fluid> fluid) {
+    public void jumpInLiquid(TagKey<Fluid> fluid) { // Canvas - protected -> public
         this.setDeltaMovement(this.getDeltaMovement().add(0.0D, 0.03999999910593033D, 0.0D));
     }
 
-    protected float getWaterSlowDown() {
-        return 0.8F;
+    private float waterslowdown = 0.8f; // Canvas
+    public float getWaterSlowDown() { // Canvas - protected -> public
+        return waterslowdown; // Canvas
     }
+    // Canvas start
+
+    public void setWaterSlowdown(float slowdown) {
+        this.waterslowdown = slowdown;
+    }
+    // Canvas end
 
     public boolean canStandOnFluid(FluidState state) {
         return false;
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
index de560299e73fedc40bc22a654b70627dc5b44886..fcce913d1a1079f588575f1c924e60ec67e883d2 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
@@ -96,7 +96,7 @@ public class SkeletonHorse extends AbstractHorse {
     }
 
     @Override
-    protected void addBehaviourGoals() {
+    public void addBehaviourGoals() { // Canvas - protected -> public
         if (level().purpurConfig.skeletonHorseCanSwim) goalSelector.addGoal(0, new net.minecraft.world.entity.ai.goal.FloatGoal(this));
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
index be20e2d6f35fa7cbe0e6a361323a1f30de1533c4..8f822df512b4169ac5457547ec15356de43eca97 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
@@ -126,7 +126,7 @@ public class ZombieHorse extends AbstractHorse {
     }
 
     @Override
-    protected void addBehaviourGoals() {
+    public void addBehaviourGoals() { // Canvas - protected -> public
         if (level().purpurConfig.zombieHorseCanSwim) goalSelector.addGoal(0, new net.minecraft.world.entity.ai.goal.FloatGoal(this)); // Purpur
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/WardenAi.java b/src/main/java/net/minecraft/world/entity/monster/warden/WardenAi.java
index d4e0ca72aaf7246cc641c8e3d38a0abe8dda18b9..41940a19a5ed7ef644bbfe815a5d0508144e5a13 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/WardenAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/WardenAi.java
@@ -53,7 +53,7 @@ public class WardenAi {
     public static final int DIGGING_COOLDOWN = 1200;
     private static final int DISTURBANCE_LOCATION_EXPIRY_TIME = 100;
     private static final List<SensorType<? extends Sensor<? super Warden>>> SENSOR_TYPES = List.of(SensorType.NEAREST_PLAYERS, SensorType.WARDEN_ENTITY_SENSOR);
-    private static final List<MemoryModuleType<?>> MEMORY_TYPES = List.of(
+    public static final List<MemoryModuleType<?>> MEMORY_TYPES = List.of( // Canvas - private -> public
         MemoryModuleType.NEAREST_LIVING_ENTITIES,
         MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
         MemoryModuleType.NEAREST_VISIBLE_PLAYER,
@@ -81,7 +81,7 @@ public class WardenAi {
         MemoryModuleType.SONIC_BOOM_SOUND_COOLDOWN,
         MemoryModuleType.SONIC_BOOM_SOUND_DELAY
     );
-    private static final BehaviorControl<Warden> DIG_COOLDOWN_SETTER = BehaviorBuilder.create(
+    public static final BehaviorControl<Warden> DIG_COOLDOWN_SETTER = BehaviorBuilder.create( // Canvas - private -> public
         context -> context.group(context.registered(MemoryModuleType.DIG_COOLDOWN)).apply(context, digCooldown -> (world, entity, time) -> {
                     if (context.tryGet(digCooldown).isPresent()) {
                         digCooldown.setWithExpiry(Unit.INSTANCE, 1200L);
@@ -98,7 +98,7 @@ public class WardenAi {
             );
     }
 
-    protected static Brain<?> makeBrain(Warden warden, Dynamic<?> dynamic) {
+    public static Brain<?> makeBrain(Warden warden, Dynamic<?> dynamic) { // Canvas - protected -> public
         Brain.Provider<Warden> provider = Brain.provider(MEMORY_TYPES, SENSOR_TYPES);
         Brain<Warden> brain = provider.makeBrain(dynamic);
         initCoreActivity(brain);
@@ -115,17 +115,17 @@ public class WardenAi {
         return brain;
     }
 
-    private static void initCoreActivity(Brain<Warden> brain) {
+    public static void initCoreActivity(Brain<Warden> brain) { // Canvas - private -> public
         brain.addActivity(
             Activity.CORE, 0, ImmutableList.of(new Swim(0.8F), SetWardenLookTarget.create(), new LookAtTargetSink(45, 90), new MoveToTargetSink())
         );
     }
 
-    private static void initEmergeActivity(Brain<Warden> brain) {
+    public static void initEmergeActivity(Brain<Warden> brain) { // Canvas - private -> public
         brain.addActivityAndRemoveMemoryWhenStopped(Activity.EMERGE, 5, ImmutableList.of(new Emerging<>(EMERGE_DURATION)), MemoryModuleType.IS_EMERGING);
     }
 
-    private static void initDiggingActivity(Brain<Warden> brain) {
+    public static void initDiggingActivity(Brain<Warden> brain) { // Canvas - private -> public
         brain.addActivityWithConditions(
             Activity.DIG,
             ImmutableList.of(Pair.of(0, new ForceUnmount()), Pair.of(1, new Digging<>(DIGGING_DURATION))),
@@ -133,7 +133,7 @@ public class WardenAi {
         );
     }
 
-    private static void initIdleActivity(Brain<Warden> brain) {
+    public static void initIdleActivity(Brain<Warden> brain) { // Canvas - private -> public
         brain.addActivity(
             Activity.IDLE,
             10,
@@ -148,7 +148,7 @@ public class WardenAi {
         );
     }
 
-    private static void initInvestigateActivity(Brain<Warden> brain) {
+    public static void initInvestigateActivity(Brain<Warden> brain) { // Canvas - private -> public
         brain.addActivityAndRemoveMemoryWhenStopped(
             Activity.INVESTIGATE,
             5,
@@ -157,7 +157,7 @@ public class WardenAi {
         );
     }
 
-    private static void initSniffingActivity(Brain<Warden> brain) {
+    public static void initSniffingActivity(Brain<Warden> brain) { // Canvas - private -> public
         brain.addActivityAndRemoveMemoryWhenStopped(
             Activity.SNIFF,
             5,
@@ -166,11 +166,11 @@ public class WardenAi {
         );
     }
 
-    private static void initRoarActivity(Brain<Warden> brain) {
+    public static void initRoarActivity(Brain<Warden> brain) { // Canvas - private -> public
         brain.addActivityAndRemoveMemoryWhenStopped(Activity.ROAR, 10, ImmutableList.of(new Roar()), MemoryModuleType.ROAR_TARGET);
     }
 
-    private static void initFightActivity(Warden warden, Brain<Warden> brain) {
+    public static void initFightActivity(Warden warden, Brain<Warden> brain) { // Canvas - private -> public
         brain.addActivityAndRemoveMemoryWhenStopped(
             Activity.FIGHT,
             10,
@@ -188,11 +188,11 @@ public class WardenAi {
         );
     }
 
-    private static boolean isTarget(Warden warden, LivingEntity entity) {
+    public static boolean isTarget(Warden warden, LivingEntity entity) { // Canvas - private -> public
         return warden.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).filter(entityx -> entityx == entity).isPresent();
     }
 
-    private static void onTargetInvalid(Warden warden, LivingEntity suspect) {
+    public static void onTargetInvalid(Warden warden, LivingEntity suspect) { // Canvas - private -> public
         if (!warden.canTargetEntity(suspect)) {
             warden.clearAnger(suspect);
         }
