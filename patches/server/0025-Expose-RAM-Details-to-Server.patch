From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sun, 21 Jan 2024 12:37:44 -0800
Subject: [PATCH] Expose RAM Details to Server


diff --git a/src/main/java/com/destroystokyo/paper/gui/GuiStatsComponent.java b/src/main/java/com/destroystokyo/paper/gui/GuiStatsComponent.java
index 537bc6213545e8ff1b7b51bc4b27fd5b2a740883..94713e30885384cb79815f849d1f6a1e8be49712 100644
--- a/src/main/java/com/destroystokyo/paper/gui/GuiStatsComponent.java
+++ b/src/main/java/com/destroystokyo/paper/gui/GuiStatsComponent.java
@@ -6,10 +6,12 @@ import javax.swing.JPanel;
 import javax.swing.Timer;
 import java.awt.BorderLayout;
 import java.awt.Dimension;
+import com.destroystokyo.paper.gui.RAMDetails;
 
 public class GuiStatsComponent extends JPanel {
     private final Timer timer;
     private final RAMGraph ramGraph;
+    private RAMDetails ramDetails;
 
     public GuiStatsComponent(MinecraftServer server) {
         super(new BorderLayout());
@@ -18,6 +20,7 @@ public class GuiStatsComponent extends JPanel {
 
         ramGraph = new RAMGraph();
         RAMDetails ramDetails = new RAMDetails(server);
+        this.ramDetails = ramDetails; // Canvas
 
         add(ramGraph, "North");
         add(ramDetails, "Center");
@@ -29,6 +32,12 @@ public class GuiStatsComponent extends JPanel {
         timer.start();
     }
 
+    // Canvas start
+    public RAMDetails getRamDetails(){
+        return this.ramDetails;
+    }
+    // Canvas end
+
     @Override
     public Dimension getPreferredSize() {
         return new Dimension(350, 200);
diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
index 92eaba96135ccddb7d682dab7e82cde9318a48ef..480bdaf0614bf0b7d629aa47288ba0f7112ebe97 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
@@ -54,6 +54,12 @@ public class RAMDetails extends JList<String> {
         return new Dimension(350, 100);
     }
 
+    // Canvas start - add access to RamGraphData
+    public GraphData getGraphData(){
+        return RAMGraph.DATA.peekLast();
+    }
+    // Canvas end
+
     public void update() {
         GraphData data = RAMGraph.DATA.peekLast();
         Vector<String> vector = new Vector<>();
diff --git a/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java b/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
index c2efc18713cba645fae657641f09b2211504c68e..d6adb42693f68cd0f7a573463e7477558bbdf394 100644
--- a/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
+++ b/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
@@ -45,7 +45,7 @@ public class MinecraftServerGui extends CraftServerGui implements MojangServerGu
             UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
         } catch (Exception exception) {
             ;
-        }
+        }//
 
         // Canvas start
 
@@ -156,6 +156,19 @@ public class MinecraftServerGui extends CraftServerGui implements MojangServerGu
         return jpanel;
     }
 
+    // Canvas start - allow retrieval of the gui status component data
+    private com.destroystokyo.paper.gui.GuiStatsComponent statscomp;
+
+    public com.destroystokyo.paper.gui.GuiStatsComponent getGuiStatsComponent(){
+        if(statscomp == null){
+            org.bukkit.Bukkit.getLogger().severe("Unable to retrieve GuiStatusComponent due to it not being generated yet");
+            return null;
+        }else{
+            return this.statscomp;
+        }
+    }
+    // Canvas end
+
     private JComponent buildPlayerPanel() {
         JList<?> jlist = new PlayerListComponent(this.server);
         JScrollPane jscrollpane = new JScrollPane(jlist, 22, 30);
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index c53363c179a53d93f0854d07daaf1ccc6ceb3806..95897fa67a1fd0724dcff8a0360bf982ca696531 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -673,6 +673,7 @@ public final class CraftServer implements Server {
         return this.serverName;
     }
 
+    // Canvas start
     @Override
     public @NotNull Obfuscator getObfuscator() {
         return this.canvas_obfuscator;
@@ -688,6 +689,32 @@ public final class CraftServer implements Server {
         return this.console.getGui();
     }
 
+    public net.minecraft.server.gui.MinecraftServerGui getGuiHandle(){
+        return this.console.getGui();
+    }
+
+    public long getResourcesTotal(){
+        return this.getGuiHandle().getGuiStatsComponent().getRamDetails().getGraphData().getTotal();
+    }
+
+    public long getResourcesFree(){
+        return this.getGuiHandle().getGuiStatsComponent().getRamDetails().getGraphData().getFree();
+    }
+
+    public long getResourcesMax(){
+        return this.getGuiHandle().getGuiStatsComponent().getRamDetails().getGraphData().getMax();
+    }
+
+    public long getResourcesUsedMem(){
+        return this.getGuiHandle().getGuiStatsComponent().getRamDetails().getGraphData().getUsedMem();
+    }
+
+    public int getResourcesUsedPercent(){
+        return this.getGuiHandle().getGuiStatsComponent().getRamDetails().getGraphData().getUsedPercent();
+    }
+
+    // Canvas end
+
     @Override
     public String getVersion() {
         return this.serverVersion + " (MC: " + this.console.getServerVersion() + ")";
