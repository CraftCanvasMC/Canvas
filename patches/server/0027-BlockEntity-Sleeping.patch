From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Sat, 28 Dec 2024 12:47:47 -0800
Subject: [PATCH] BlockEntity Sleeping


diff --git a/src/main/java/io/github/dueris/canvas/entity/SleepUntilTimeBlockEntityTickInvoker.java b/src/main/java/io/github/dueris/canvas/entity/SleepUntilTimeBlockEntityTickInvoker.java
new file mode 100644
index 0000000000000000000000000000000000000000..f348a014530d14889cef846659dd1d57bcaacc90
--- /dev/null
+++ b/src/main/java/io/github/dueris/canvas/entity/SleepUntilTimeBlockEntityTickInvoker.java
@@ -0,0 +1,37 @@
+package io.github.dueris.canvas.entity;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.entity.BlockEntityType;
+import net.minecraft.world.level.block.entity.TickingBlockEntity;
+import org.jetbrains.annotations.NotNull;
+
+public record SleepUntilTimeBlockEntityTickInvoker(BlockEntity sleepingBlockEntity, long sleepUntilTickExclusive,
+                                                   TickingBlockEntity delegate) implements TickingBlockEntity {
+
+    @Override
+    public void tick() {
+        //noinspection ConstantConditions
+        long tickTime = this.sleepingBlockEntity.getLevel().getGameTime();
+        if (tickTime >= this.sleepUntilTickExclusive) {
+            ((SleepingBlockEntity) this.sleepingBlockEntity).setTicker(this.delegate);
+            this.delegate.tick();
+        }
+    }
+
+    @Override
+    public boolean isRemoved() {
+        return this.sleepingBlockEntity.isRemoved();
+    }
+
+    @Override
+    public @NotNull BlockPos getPos() {
+        return this.sleepingBlockEntity.getBlockPos();
+    }
+
+    @Override
+    public @NotNull String getType() {
+        //noinspection ConstantConditions
+        return BlockEntityType.getKey(this.sleepingBlockEntity.getType()).toString();
+    }
+}
diff --git a/src/main/java/io/github/dueris/canvas/entity/SleepingBlockEntity.java b/src/main/java/io/github/dueris/canvas/entity/SleepingBlockEntity.java
new file mode 100644
index 0000000000000000000000000000000000000000..af7b75b753f91fa20ccc9741b5e5b7536ddbfc70
--- /dev/null
+++ b/src/main/java/io/github/dueris/canvas/entity/SleepingBlockEntity.java
@@ -0,0 +1,82 @@
+package io.github.dueris.canvas.entity;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.entity.BlockEntity;
+import net.minecraft.world.level.block.entity.TickingBlockEntity;
+import net.minecraft.world.level.chunk.LevelChunk;
+import org.jetbrains.annotations.NotNull;
+import org.jetbrains.annotations.Nullable;
+
+public interface SleepingBlockEntity {
+    TickingBlockEntity SLEEPING_BLOCK_ENTITY_TICKER = new TickingBlockEntity() {
+        public void tick() {
+        }
+
+        public boolean isRemoved() {
+            return false;
+        }
+
+        public @Nullable BlockPos getPos() {
+            return null;
+        }
+
+        public @NotNull String getType() {
+            return "<lithium_sleeping>";
+        }
+    };
+
+    LevelChunk.RebindableTickingBlockEntityWrapper lithium$getTickWrapper();
+
+    void lithium$setTickWrapper(LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper);
+
+    TickingBlockEntity lithium$getSleepingTicker();
+
+    void lithium$setSleepingTicker(TickingBlockEntity sleepingTicker);
+
+    default boolean lithium$startSleeping() {
+        if (this.isSleeping()) {
+            return false;
+        }
+
+        LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper = this.lithium$getTickWrapper();
+        if (tickWrapper == null) {
+            return false;
+        }
+        this.lithium$setSleepingTicker(tickWrapper.ticker);
+        tickWrapper.rebind(SleepingBlockEntity.SLEEPING_BLOCK_ENTITY_TICKER);
+        return true;
+    }
+
+    default void sleepOnlyCurrentTick() {
+        TickingBlockEntity sleepingTicker = this.lithium$getSleepingTicker();
+        LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper = this.lithium$getTickWrapper();
+        if (sleepingTicker == null) {
+            sleepingTicker = tickWrapper.ticker;
+        }
+        Level world = ((BlockEntity) this).getLevel();
+        tickWrapper.rebind(new SleepUntilTimeBlockEntityTickInvoker((BlockEntity) this, world.getGameTime() + 1, sleepingTicker));
+        this.lithium$setSleepingTicker(null);
+    }
+
+    default void wakeUpNow() {
+        TickingBlockEntity sleepingTicker = this.lithium$getSleepingTicker();
+        if (sleepingTicker == null) {
+            return;
+        }
+        this.setTicker(sleepingTicker);
+        this.lithium$setSleepingTicker(null);
+    }
+
+    default void setTicker(TickingBlockEntity delegate) {
+        LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper = this.lithium$getTickWrapper();
+        if (tickWrapper == null) {
+            return;
+        }
+        tickWrapper.rebind(delegate);
+    }
+
+    default boolean isSleeping() {
+        return this.lithium$getSleepingTicker() != null;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 0aaf880c671e70cf3cd9f02b5f5137f209db39d7..693f78558cab991830f8dfdc5143a84e0ddac142 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -2700,12 +2700,22 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
 
         while (iterator.hasNext()) {
             TickingBlockEntity tickingblockentity = (TickingBlockEntity) iterator.next();
-            BlockPos blockposition = tickingblockentity.getPos();
+            BlockPos blockposition = getPosOrOrigin(tickingblockentity); // Canvas
 
             csvwriter.writeRow(blockposition.getX(), blockposition.getY(), blockposition.getZ(), tickingblockentity.getType());
         }
 
     }
+    // Canvas start
+
+    private BlockPos getPosOrOrigin(TickingBlockEntity instance) {
+        BlockPos pos = instance.getPos();
+        if (pos == null) {
+            return BlockPos.ZERO;
+        }
+        return pos;
+    }
+    // Canvas end
 
     @VisibleForTesting
     public void clearBlockEvents(BoundingBox box) {
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index e2044af130738a64f327c4be8b85fb673175d4c4..97ec073a21b30ccd19a5d4a2d9c1c5bcdb344d31 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -1514,7 +1514,7 @@ public abstract class Level extends MinecraftServerWorld implements LevelAccesso
                 tilesThisCycle--;
                 toRemove.add(tickingblockentity); // Paper - Fix MC-117075; use removeAll
                 // Spigot end
-            } else if (flag && this.shouldTickBlocksAt(tickingblockentity.getPos())) {
+            } else if (flag && this.shouldTickBlockPosFilterNull(this, tickingblockentity.getPos())) { // Canvas
                 tickingblockentity.tick();
                 // Paper start - rewrite chunk system
                 if ((++tickedEntities & 7) == 0) {
@@ -1529,6 +1529,15 @@ public abstract class Level extends MinecraftServerWorld implements LevelAccesso
         gameprofilerfiller.pop();
         this.spigotConfig.currentPrimedTnt = 0; // Spigot
     }
+    // Canvas start
+
+    private boolean shouldTickBlockPosFilterNull(Level instance, BlockPos pos) {
+        if (pos == null) {
+            return false;
+        }
+        return instance.shouldTickBlocksAt(pos);
+    }
+    // Canvas end
 
     public <T extends Entity> void guardEntityTick(Consumer<T> tickConsumer, T entity) {
         try {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index affa084b6bd4a6792d1c55719f88f3fb16627761..037be6971f337ab4ce6dbbbf879cb472854f87a7 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.block.entity;
 
 import com.google.common.collect.Lists;
+import io.github.dueris.canvas.entity.SleepingBlockEntity;
 import it.unimi.dsi.fastutil.objects.ObjectIterator;
 import it.unimi.dsi.fastutil.objects.Reference2IntMap.Entry;
 import it.unimi.dsi.fastutil.objects.Reference2IntOpenHashMap;
@@ -39,6 +40,7 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.AbstractFurnaceBlock;
 import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.phys.Vec3;
 // CraftBukkit start
 import org.bukkit.craftbukkit.block.CraftBlock;
@@ -55,7 +57,7 @@ import org.bukkit.event.inventory.FurnaceStartSmeltEvent;
 import org.bukkit.inventory.CookingRecipe;
 // CraftBukkit end
 
-public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer, RecipeCraftingHolder, StackedContentsCompatible {
+public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer, RecipeCraftingHolder, StackedContentsCompatible, SleepingBlockEntity {
 
     protected static final int SLOT_INPUT = 0;
     protected static final int SLOT_FUEL = 1;
@@ -80,6 +82,38 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
     private final RecipeManager.CachedCheck<SingleRecipeInput, ? extends AbstractCookingRecipe> quickCheck;
     public final RecipeType<? extends AbstractCookingRecipe> recipeType; // Paper - cook speed multiplier API
     public double cookSpeedMultiplier = 1.0; // Paper - cook speed multiplier API
+    // Canvas start
+    private LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper = null;
+    private TickingBlockEntity sleepingTicker = null;
+
+    @Override
+    public LevelChunk.RebindableTickingBlockEntityWrapper lithium$getTickWrapper() {
+        return tickWrapper;
+    }
+
+    @Override
+    public void lithium$setTickWrapper(LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper) {
+        this.tickWrapper = tickWrapper;
+        this.lithium$setSleepingTicker(null);
+    }
+
+    @Override
+    public TickingBlockEntity lithium$getSleepingTicker() {
+        return sleepingTicker;
+    }
+
+    @Override
+    public void lithium$setSleepingTicker(TickingBlockEntity sleepingTicker) {
+        this.sleepingTicker = sleepingTicker;
+    }
+
+    @Override
+    public void lithium$handleSetChanged() {
+        if (this.isSleeping() && this.level != null && !this.level.isClientSide) {
+            this.wakeUpNow();
+        }
+    }
+    // Canvas end
 
     protected AbstractFurnaceBlockEntity(BlockEntityType<?> blockEntityType, BlockPos pos, BlockState state, RecipeType<? extends AbstractCookingRecipe> recipeType) {
         super(blockEntityType, pos, state);
@@ -190,6 +224,11 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
             this.cookSpeedMultiplier = nbt.getDouble("Paper.CookSpeedMultiplier");
         }
         // Paper end - cook speed multiplier API
+        // Canvas start
+        if (this.isSleeping() && this.level != null && !this.level.isClientSide) {
+            this.wakeUpNow();
+        }
+        // Canvas end
     }
 
     @Override
@@ -319,7 +358,16 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         }
 
         if (usedLavaFromUnderneath) blockEntity.items.set(1, ItemStack.EMPTY); // Purpur
+        blockEntity.checkSleep(state); // Canvas
+    }
+    // Canvas start
+
+    private void checkSleep(BlockState state) {
+        if (!this.isLit() && this.cookingTimer == 0 && (state.is(Blocks.FURNACE) || state.is(Blocks.BLAST_FURNACE) || state.is(Blocks.SMOKER)) && this.level != null) {
+            this.lithium$startSleeping();
+        }
     }
+    // Canvas end
 
     private static boolean canBurn(RegistryAccess dynamicRegistryManager, @Nullable RecipeHolder<? extends AbstractCookingRecipe> recipe, SingleRecipeInput input, NonNullList<ItemStack> inventory, int maxCount) {
         if (!((ItemStack) inventory.get(0)).isEmpty() && recipe != null) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
index 5c5cc77ff2e050e80dc9f6f62ede68d177a0015f..80a17a432d9af134889def7964e88abc5b3e140d 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BlockEntity.java
@@ -47,6 +47,11 @@ public abstract class BlockEntity {
     protected boolean remove;
     private BlockState blockState;
     private DataComponentMap components;
+    // Canvas start
+
+    public void lithium$handleSetChanged() {
+    }
+    // Canvas end
 
     public BlockEntity(BlockEntityType<?> type, BlockPos pos, BlockState state) {
         this.components = DataComponentMap.EMPTY;
@@ -235,6 +240,7 @@ public abstract class BlockEntity {
             BlockEntity.setChanged(this.level, this.worldPosition, this.blockState);
         }
 
+        this.lithium$handleSetChanged(); // Canvas
     }
 
     protected static void setChanged(Level world, BlockPos pos, BlockState state) {
diff --git a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
index 02fc9ce21c7d367055da350d21be4870d4242f3a..f9f5c339731821269b3400c2a4fab36e928202e1 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/BrewingStandBlockEntity.java
@@ -2,6 +2,7 @@ package net.minecraft.world.level.block.entity;
 
 import java.util.Arrays;
 import javax.annotation.Nullable;
+import io.github.dueris.canvas.entity.SleepingBlockEntity;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.HolderLookup;
@@ -20,6 +21,7 @@ import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.alchemy.PotionBrewing;
 import net.minecraft.world.level.Level;
+import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.BrewingStandBlock;
 import net.minecraft.world.level.block.state.BlockState;
 // CraftBukkit start
@@ -27,6 +29,7 @@ import java.util.ArrayList;
 import java.util.List;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.tags.ItemTags;
+import net.minecraft.world.level.chunk.LevelChunk;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
@@ -37,7 +40,7 @@ import org.bukkit.event.inventory.BrewingStandFuelEvent;
 import org.bukkit.inventory.InventoryHolder;
 // CraftBukkit end
 
-public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer {
+public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer, SleepingBlockEntity { // Canvas
 
     private static final int INGREDIENT_SLOT = 3;
     private static final int FUEL_SLOT = 4;
@@ -54,6 +57,44 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
     private boolean[] lastPotionCount;
     private Item ingredient;
     public int fuel;
+    // Canvas start
+    private LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper = null;
+    private TickingBlockEntity sleepingTicker = null;
+
+    @Override
+    public LevelChunk.RebindableTickingBlockEntityWrapper lithium$getTickWrapper() {
+        return tickWrapper;
+    }
+
+    @Override
+    public void lithium$setTickWrapper(LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper) {
+        this.tickWrapper = tickWrapper;
+        this.lithium$setSleepingTicker(null);
+    }
+
+    @Override
+    public TickingBlockEntity lithium$getSleepingTicker() {
+        return sleepingTicker;
+    }
+
+    @Override
+    public void lithium$setSleepingTicker(TickingBlockEntity sleepingTicker) {
+        this.sleepingTicker = sleepingTicker;
+    }
+
+    private void checkSleep(BlockState state) {
+        if (this.brewTime == 0 && state.is(Blocks.BREWING_STAND) && this.level != null) {
+            this.lithium$startSleeping();
+        }
+    }
+
+    @Override
+    public void lithium$handleSetChanged() {
+        if (this.isSleeping() && this.level != null && !this.level.isClientSide) {
+            this.wakeUpNow();
+        }
+    }
+    // Canvas end
     protected final ContainerData dataAccess;
     // CraftBukkit start - add fields and methods
     // private int lastTick = MinecraftServer.currentTick; // Paper - remove anti tick skipping measures / wall time
@@ -158,6 +199,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
     }
 
     public static void serverTick(Level world, BlockPos pos, BlockState state, BrewingStandBlockEntity blockEntity) {
+        blockEntity.checkSleep(state); // Canvas
         ItemStack itemstack = (ItemStack) blockEntity.items.get(4);
 
         if (blockEntity.fuel <= 0 && itemstack.is(ItemTags.BREWING_FUEL)) {
@@ -174,6 +216,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
                 itemstack.shrink(1);
             }
             // CraftBukkit end
+            blockEntity.wakeUpNow(); // Canvas
             setChanged(world, pos, state);
         }
 
@@ -194,6 +237,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
                 blockEntity.brewTime = 0;
             }
 
+            blockEntity.wakeUpNow(); // Canvas
             setChanged(world, pos, state);
         } else if (flag && blockEntity.fuel > 0) {
             --blockEntity.fuel;
@@ -204,6 +248,7 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
             blockEntity.brewTime = event.getBrewingTime(); // 400 -> event.getTotalBrewTime() // Paper - use brewing time from event
             // CraftBukkit end
             blockEntity.ingredient = itemstack1.getItem();
+            blockEntity.wakeUpNow(); // Canvas
             setChanged(world, pos, state);
         }
 
@@ -314,6 +359,11 @@ public class BrewingStandBlockEntity extends BaseContainerBlockEntity implements
         }
 
         this.fuel = nbt.getByte("Fuel");
+        // Canvas start
+        if (this.isSleeping() && this.level != null && !this.level.isClientSide()) {
+            this.wakeUpNow();
+        }
+        // Canvas end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
index 94072a9b65f69dfc3337907f8573081989467662..3293f740426b1a0f881e092ab987a56b378a35fe 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -2,6 +2,7 @@ package net.minecraft.world.level.block.entity;
 
 import java.util.Optional;
 import javax.annotation.Nullable;
+import io.github.dueris.canvas.entity.SleepingBlockEntity;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -29,6 +30,7 @@ import net.minecraft.world.item.crafting.SingleRecipeInput;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.CampfireBlock;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.gameevent.GameEvent;
 
 // CraftBukkit start
@@ -39,7 +41,7 @@ import org.bukkit.event.block.CampfireStartEvent;
 import org.bukkit.inventory.CampfireRecipe;
 // CraftBukkit end
 
-public class CampfireBlockEntity extends BlockEntity implements Clearable {
+public class CampfireBlockEntity extends BlockEntity implements Clearable, SleepingBlockEntity { // Canvas
 
     private static final int BURN_COOL_SPEED = 2;
     private static final int NUM_SLOTS = 4;
@@ -47,6 +49,43 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
     public final int[] cookingProgress;
     public final int[] cookingTime;
     public final boolean[] stopCooking; // Paper - Add more Campfire API
+    // Canvas start
+    private LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper = null;
+    private TickingBlockEntity sleepingTicker = null;
+
+    @Override
+    public LevelChunk.RebindableTickingBlockEntityWrapper lithium$getTickWrapper() {
+        return tickWrapper;
+    }
+
+    @Override
+    public void lithium$setTickWrapper(LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper) {
+        this.tickWrapper = tickWrapper;
+        this.lithium$setSleepingTicker(null);
+    }
+
+    @Override
+    public TickingBlockEntity lithium$getSleepingTicker() {
+        return sleepingTicker;
+    }
+
+    @Override
+    public void lithium$setSleepingTicker(TickingBlockEntity sleepingTicker) {
+        this.sleepingTicker = sleepingTicker;
+    }
+
+    private static void trySleepLit(CampfireBlockEntity campfireBlockEntity, boolean bl) {
+        if (!bl) {
+            campfireBlockEntity.lithium$startSleeping();
+        }
+    }
+
+    private static void trySleepUnlit(CampfireBlockEntity campfire, boolean hadProgress) {
+        if (!hadProgress) {
+            campfire.lithium$startSleeping();
+        }
+    }
+    // Canvas end
 
     public CampfireBlockEntity(BlockPos pos, BlockState state) {
         super(BlockEntityType.CAMPFIRE, pos, state);
@@ -72,8 +111,10 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
                     SingleRecipeInput singlerecipeinput = new SingleRecipeInput(itemstack);
                     // Paper start - add recipe to cook events
                     final Optional<RecipeHolder<CampfireCookingRecipe>> recipeHolderOptional = recipeMatchGetter.getRecipeFor(singlerecipeinput, world);
+                    final boolean finalFlag = flag; // Canvas
                     ItemStack itemstack1 = (ItemStack) recipeHolderOptional.map((recipeholder) -> {
                     // Paper end - add recipe to cook events
+                        trySleepLit(blockEntity, finalFlag); // Canvas
                         return ((CampfireCookingRecipe) recipeholder.value()).assemble(singlerecipeinput, world.registryAccess());
                     }).orElse(itemstack);
 
@@ -86,6 +127,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
                         world.getCraftServer().getPluginManager().callEvent(blockCookEvent);
 
                         if (blockCookEvent.isCancelled()) {
+                            trySleepLit(blockEntity, flag); // Canvas
                             return;
                         }
 
@@ -112,6 +154,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
             setChanged(world, pos, state);
         }
 
+        trySleepLit(blockEntity, flag); // Canvas
     }
 
     public static void cooldownTick(Level world, BlockPos pos, BlockState state, CampfireBlockEntity campfire) {
@@ -128,6 +171,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
             setChanged(world, pos, state);
         }
 
+        trySleepUnlit(campfire, flag); // Canvas
     }
 
     public static void particleTick(Level world, BlockPos pos, BlockState state, CampfireBlockEntity campfire) {
@@ -189,6 +233,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
             System.arraycopy(cookingState, 0, this.stopCooking, 0, Math.min(this.stopCooking.length, abyte.length));
         }
         // Paper end - Add more Campfire API
+        this.wakeUpNow(); // Canvas
     }
 
     @Override
@@ -236,6 +281,7 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable {
                 this.cookingTime[i] = event.getTotalCookTime(); // i -> event.getTotalCookTime()
                 // CraftBukkit end
                 this.cookingProgress[i] = 0;
+                this.wakeUpNow(); // Canvas
                 this.items.set(i, stack.consumeAndReturn(1, entity));
                 world.gameEvent((Holder) GameEvent.BLOCK_CHANGE, this.getBlockPos(), GameEvent.Context.of(entity, this.getBlockState()));
                 this.markUpdated();
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 8913f434967457a16dd708252834ba001ada1a03..435a7d9d545a65815fa11def7a697a4b0512d7ce 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -4,6 +4,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.function.BooleanSupplier;
 import javax.annotation.Nullable;
+import io.github.dueris.canvas.entity.SleepingBlockEntity;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.HolderLookup;
@@ -28,6 +29,7 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.ChestBlock;
 import net.minecraft.world.level.block.HopperBlock;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.phys.AABB;
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.block.CraftBlock;
@@ -42,7 +44,7 @@ import org.bukkit.event.inventory.InventoryPickupItemEvent;
 import org.bukkit.inventory.Inventory;
 // CraftBukkit end
 
-public class HopperBlockEntity extends RandomizableContainerBlockEntity implements Hopper {
+public class HopperBlockEntity extends RandomizableContainerBlockEntity implements Hopper, SleepingBlockEntity { // Canvas
 
     public static final int MOVE_ITEM_SPEED = 8;
     public static final int HOPPER_CONTAINER_SIZE = 5;
@@ -51,6 +53,51 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     public int cooldownTime;
     private long tickedGameTime;
     private Direction facing;
+    // Canvas start
+    private LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper = null;
+    private TickingBlockEntity sleepingTicker = null;
+
+    @Override
+    public LevelChunk.RebindableTickingBlockEntityWrapper lithium$getTickWrapper() {
+        return tickWrapper;
+    }
+
+    @Override
+    public void lithium$setTickWrapper(LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper) {
+        this.tickWrapper = tickWrapper;
+        this.lithium$setSleepingTicker(null);
+    }
+
+    @Override
+    public TickingBlockEntity lithium$getSleepingTicker() {
+        return sleepingTicker;
+    }
+
+    @Override
+    public void lithium$setSleepingTicker(TickingBlockEntity sleepingTicker) {
+        this.sleepingTicker = sleepingTicker;
+    }
+
+    @Override
+    public boolean lithium$startSleeping() {
+        if (this.isSleeping()) {
+            return false;
+        }
+
+        LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper = this.lithium$getTickWrapper();
+        if (tickWrapper != null) {
+            this.lithium$setSleepingTicker(tickWrapper.ticker);
+            tickWrapper.rebind(SleepingBlockEntity.SLEEPING_BLOCK_ENTITY_TICKER);
+
+            // Set the last tick time to max value, so other hoppers transferring into this hopper will set it to 7gt
+            // cooldown. Then when waking up, we make sure to not tick this hopper in the same gametick.
+            // This makes the observable hopper cooldown not be different from vanilla.
+            this.tickedGameTime = Long.MAX_VALUE;
+            return true;
+        }
+        return false;
+    }
+    // Canvas end
 
     // CraftBukkit start - add fields and methods
     public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
@@ -178,6 +225,13 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
                 }
             }
 
+            // Canvas start
+            if (!(blockEntity).isOnCooldown() &&
+                !(blockEntity).isSleeping() &&
+                !state.getValue(HopperBlock.ENABLED)) {
+                (blockEntity).lithium$startSleeping();
+            }
+            // Canvas end
             return false;
         }
     }
@@ -651,6 +705,17 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     }
 
     public void setCooldown(int transferCooldown) {
+        // Canvas start
+        if (transferCooldown == 7) {
+            if (this.tickedGameTime == Long.MAX_VALUE) {
+                this.sleepOnlyCurrentTick();
+            } else {
+                this.wakeUpNow();
+            }
+        } else if (transferCooldown > 0 && this.sleepingTicker != null) {
+            this.wakeUpNow();
+        }
+        // Canvas end
         this.cooldownTime = transferCooldown;
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
index 26f0c6ddea76c8a6e17faea2e5603e7c02a7f1b1..d6d09b75fcba602bb3e4d2518dde75d3b0f3d41f 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/ShulkerBoxBlockEntity.java
@@ -4,6 +4,7 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.stream.IntStream;
 import javax.annotation.Nullable;
+import io.github.dueris.canvas.entity.SleepingBlockEntity;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.core.Holder;
@@ -29,6 +30,7 @@ import net.minecraft.world.level.Level;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.ShulkerBoxBlock;
 import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.PushReaction;
 import net.minecraft.world.phys.AABB;
@@ -38,7 +40,7 @@ import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.entity.HumanEntity;
 // CraftBukkit end
 
-public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity implements WorldlyContainer {
+public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity implements WorldlyContainer, SleepingBlockEntity { // Canvas
 
     public static final int COLUMNS = 9;
     public static final int ROWS = 3;
@@ -55,6 +57,30 @@ public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity impl
     private float progressOld;
     @Nullable
     private final DyeColor color;
+    // Canvas start
+    private LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper = null;
+    private TickingBlockEntity sleepingTicker = null;
+
+    @Override
+    public LevelChunk.RebindableTickingBlockEntityWrapper lithium$getTickWrapper() {
+        return tickWrapper;
+    }
+
+    @Override
+    public void lithium$setTickWrapper(LevelChunk.RebindableTickingBlockEntityWrapper tickWrapper) {
+        this.tickWrapper = tickWrapper;
+    }
+
+    @Override
+    public TickingBlockEntity lithium$getSleepingTicker() {
+        return sleepingTicker;
+    }
+
+    @Override
+    public void lithium$setSleepingTicker(TickingBlockEntity sleepingTicker) {
+        this.sleepingTicker = sleepingTicker;
+    }
+    // Canvas end
 
     // CraftBukkit start - add fields and methods
     public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
@@ -150,6 +176,11 @@ public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity impl
                 }
         }
 
+        // Canvas start
+        if (this.animationStatus == ShulkerBoxBlockEntity.AnimationStatus.CLOSED && this.progressOld == 0.0f && this.progress == 0.0f) {
+            this.lithium$startSleeping();
+        }
+        // Canvas end
     }
 
     public ShulkerBoxBlockEntity.AnimationStatus getAnimationStatus() {
@@ -190,6 +221,11 @@ public class ShulkerBoxBlockEntity extends RandomizableContainerBlockEntity impl
 
     @Override
     public boolean triggerEvent(int type, int data) {
+        // Canvas start
+        if (this.sleepingTicker != null) {
+            this.wakeUpNow();
+        }
+        // Canvas end
         if (type == 1) {
             this.openCount = data;
             if (data == 0) {
diff --git a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
index d29edaacf0faeea968fd14794e75d33ee8b5a201..026fafdab0ed471df8ac294842979f69ed274287 100644
--- a/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
+++ b/src/main/java/net/minecraft/world/level/chunk/LevelChunk.java
@@ -4,6 +4,7 @@ import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Maps;
 import com.google.common.collect.UnmodifiableIterator;
 import com.mojang.logging.LogUtils;
+import io.github.dueris.canvas.entity.SleepingBlockEntity;
 import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.shorts.ShortListIterator;
@@ -966,15 +967,25 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
         if (blockentityticker == null) {
             this.removeBlockEntityTicker(blockEntity.getBlockPos());
         } else {
-            this.tickersInLevel.compute(blockEntity.getBlockPos(), (blockposition, chunk_d) -> {
+            this.tickersInLevel.compute(blockEntity.getBlockPos(), (_, chunk_d) -> { // Canvas
                 TickingBlockEntity tickingblockentity = this.createTicker(blockEntity, blockentityticker);
 
                 if (chunk_d != null) {
+                    // Canvas start
+                    if (blockEntity instanceof SleepingBlockEntity sleepingBlockEntity) {
+                        sleepingBlockEntity.lithium$setTickWrapper(chunk_d);
+                    }
+                    // Canvas end
                     chunk_d.rebind(tickingblockentity);
                     return chunk_d;
                 } else if (this.isInLevel()) {
                     LevelChunk.RebindableTickingBlockEntityWrapper chunk_d1 = new LevelChunk.RebindableTickingBlockEntityWrapper(tickingblockentity);
 
+                    // Canvas start
+                    if (blockEntity instanceof SleepingBlockEntity sleepingBlockEntity) {
+                        sleepingBlockEntity.lithium$setTickWrapper(chunk_d1);
+                    }
+                    // Canvas end
                     this.level.addBlockEntityTicker(chunk_d1);
                     return chunk_d1;
                 } else {
@@ -1008,15 +1019,15 @@ public class LevelChunk extends ChunkAccess implements ca.spottedleaf.moonrise.p
         private EntityCreationType() {}
     }
 
-    private static class RebindableTickingBlockEntityWrapper implements TickingBlockEntity {
+    public static class RebindableTickingBlockEntityWrapper implements TickingBlockEntity { // Canvas - private -> public
 
-        private TickingBlockEntity ticker;
+        public TickingBlockEntity ticker; // Canvas - private -> public
 
         RebindableTickingBlockEntityWrapper(TickingBlockEntity wrapped) {
             this.ticker = wrapped;
         }
 
-        void rebind(TickingBlockEntity wrapped) {
+        public void rebind(TickingBlockEntity wrapped) { // Canvas - package-private -> public
             this.ticker = wrapped;
         }
 
