From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Thu, 9 Jan 2025 18:44:27 -0800
Subject: [PATCH] Threaded Tracking


diff --git a/src/main/java/io/canvasmc/canvas/Config.java b/src/main/java/io/canvasmc/canvas/Config.java
index 594ec2fdca22a44b4034a00fcaf21cf8d0348005..a1d08235d442121cf5b2994fee20bc1f8f4400e1 100644
--- a/src/main/java/io/canvasmc/canvas/Config.java
+++ b/src/main/java/io/canvasmc/canvas/Config.java
@@ -55,6 +55,15 @@ public class Config implements ConfigData {
 		public int keepAlive = 60;
 	}
 
+	// Entity Tracking
+	@Comment("Threaded EntityTracking options")
+	public EntityTracking entityTracking = new EntityTracking();
+	public static class EntityTracking {
+		public boolean enableThreadedTracking = true;
+		public int maxProcessors = 1;
+		public int keepAlive = 60;
+	}
+
 	public static Config init() {
 		AutoConfig.register(Config.class, JanksonConfigSerializer::new);
 		INSTANCE = AutoConfig.getConfigHolder(Config.class).getConfig();
@@ -74,6 +83,7 @@ public class Config implements ConfigData {
 				t.printStackTrace();
 			}
 		}
+		io.canvasmc.canvas.entity.tracking.ThreadedTracker.init();
 		return INSTANCE;
 	}
 
diff --git a/src/main/java/io/canvasmc/canvas/entity/tracking/ThreadedTracker.java b/src/main/java/io/canvasmc/canvas/entity/tracking/ThreadedTracker.java
new file mode 100644
index 0000000000000000000000000000000000000000..f30ea578d53821cc65cb4ab85061747225904f9b
--- /dev/null
+++ b/src/main/java/io/canvasmc/canvas/entity/tracking/ThreadedTracker.java
@@ -0,0 +1,88 @@
+package io.canvasmc.canvas.entity.tracking;
+
+import ca.spottedleaf.moonrise.common.list.ReferenceList;
+import ca.spottedleaf.moonrise.common.misc.NearbyPlayers;
+import ca.spottedleaf.moonrise.common.util.TickThread;
+import ca.spottedleaf.moonrise.patches.chunk_system.entity.ChunkSystemEntity;
+import ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel;
+import ca.spottedleaf.moonrise.patches.chunk_system.level.entity.server.ServerEntityLookup;
+import ca.spottedleaf.moonrise.patches.entity_tracker.EntityTrackerEntity;
+import ca.spottedleaf.moonrise.patches.entity_tracker.EntityTrackerTrackedEntity;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.util.NamedAgnosticThreadFactory;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+import javax.annotation.Nullable;
+import net.minecraft.server.level.ChunkMap;
+import net.minecraft.server.level.FullChunkStatus;
+import net.minecraft.world.entity.Entity;
+import org.jetbrains.annotations.NotNull;
+
+public class ThreadedTracker {
+    private static final ThreadPoolExecutor processor = new ThreadPoolExecutor(
+        1,
+        Config.INSTANCE.entityTracking.maxProcessors,
+        Config.INSTANCE.entityTracking.keepAlive, TimeUnit.SECONDS,
+        new LinkedBlockingQueue<>(),
+        new NamedAgnosticThreadFactory<>("entity_tracker", TrackerThread::new, Thread.NORM_PRIORITY - 2)
+    );
+    public static ThreadedTracker INSTANCE;
+    private final boolean enableThreading;
+
+    ThreadedTracker(boolean enableThreading) {
+        this.enableThreading = enableThreading;
+    }
+
+    public static void init() {
+        INSTANCE = new ThreadedTracker(Config.INSTANCE.entityTracking.enableThreadedTracking);
+    }
+
+    public static ThreadPoolExecutor getProcessor() {
+        return processor;
+    }
+
+    public void tick(@NotNull ChunkSystemServerLevel chunkSystemServerLevel) {
+        if (this.enableThreading) {
+            final NearbyPlayers nearbyPlayers = chunkSystemServerLevel.moonrise$getNearbyPlayers();
+            final Entity[] trackerEntitiesRaw = ((ServerEntityLookup) chunkSystemServerLevel.moonrise$getEntityLookup()).trackerEntities.getRawDataUnchecked();
+
+            processor.execute(() -> {
+                for (final Entity entity : trackerEntitiesRaw) {
+                    if (entity == null) continue;
+
+                    final ChunkMap.TrackedEntity trackedInstance = ((EntityTrackerEntity) entity).moonrise$getTrackedEntity();
+                    if (trackedInstance == null) continue;
+
+                    ((EntityTrackerTrackedEntity) trackedInstance).moonrise$tick(nearbyPlayers.getChunk(entity.chunkPosition()));
+                    trackedInstance.serverEntity.sendChanges();
+                }
+            });
+        } else {
+            final ServerEntityLookup entityLookup = (ServerEntityLookup) chunkSystemServerLevel.moonrise$getEntityLookup();
+
+            final ReferenceList<Entity> trackerEntities = entityLookup.trackerEntities;
+            final Entity[] trackerEntitiesRaw = trackerEntities.getRawDataUnchecked();
+            for (int i = 0, len = trackerEntities.size(); i < len; ++i) {
+                final Entity entity = trackerEntitiesRaw[i];
+                if (entity == null) continue;
+                final ChunkMap.TrackedEntity tracker = ((EntityTrackerEntity) entity).moonrise$getTrackedEntity();
+                if (tracker == null) {
+                    continue;
+                }
+                ((EntityTrackerTrackedEntity) tracker).moonrise$tick(((ChunkSystemEntity) entity).moonrise$getChunkData() == null ? null : ((ChunkSystemEntity) entity).moonrise$getChunkData().nearbyPlayers);
+                @Nullable FullChunkStatus chunkStatus = ((ChunkSystemEntity) entity).moonrise$getChunkStatus();
+                if (((EntityTrackerTrackedEntity) tracker).moonrise$hasPlayers()
+                    || (chunkStatus != null && chunkStatus.isOrAfter(FullChunkStatus.ENTITY_TICKING))) {
+                    tracker.serverEntity.sendChanges();
+                }
+            }
+        }
+    }
+
+    public static class TrackerThread extends TickThread {
+        public TrackerThread(final ThreadGroup group, final Runnable runnable, final String name) {
+            super(group, runnable, name);
+        }
+    }
+}
diff --git a/src/main/java/io/canvasmc/canvas/util/NamedAgnosticThreadFactory.java b/src/main/java/io/canvasmc/canvas/util/NamedAgnosticThreadFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..84b2b07f622ebe2ba37e3cf697a24b41a4dae494
--- /dev/null
+++ b/src/main/java/io/canvasmc/canvas/util/NamedAgnosticThreadFactory.java
@@ -0,0 +1,42 @@
+package io.canvasmc.canvas.util;
+
+import com.mojang.logging.LogUtils;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.atomic.AtomicInteger;
+import org.jetbrains.annotations.NotNull;
+import org.slf4j.Logger;
+
+public class NamedAgnosticThreadFactory<T extends Thread> implements ThreadFactory {
+    private static final Logger LOGGER = LogUtils.getLogger();
+    private final ThreadGroup group;
+    private final AtomicInteger threadNumber = new AtomicInteger(1);
+    private final String namePrefix;
+    private final ThreadBuilderFunction<T> typeOfThread;
+    private final int priority;
+
+    public NamedAgnosticThreadFactory(String name, ThreadBuilderFunction<T> typeOfThread, int priority) {
+        this.typeOfThread = typeOfThread;
+        this.priority = priority;
+        SecurityManager securityManager = System.getSecurityManager();
+        this.group = securityManager != null ? securityManager.getThreadGroup() : Thread.currentThread().getThreadGroup();
+        this.namePrefix = name + "-";
+    }
+
+    @Override
+    public Thread newThread(@NotNull Runnable runnable) {
+        T thread = typeOfThread.apply(this.group, runnable, this.namePrefix + this.threadNumber.getAndIncrement());
+        thread.setUncaughtExceptionHandler((threadx, throwable) -> {
+            LOGGER.error("Caught exception in thread {} from {}", threadx, runnable);
+            LOGGER.error("", throwable);
+        });
+        if (thread.getPriority() != priority) {
+            thread.setPriority(priority);
+        }
+
+        return thread;
+    }
+
+    public interface ThreadBuilderFunction<T extends Thread> {
+        T apply(ThreadGroup threadGroup, Runnable runnable, String name);
+    }
+}
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index f6c77281d3d6cb5f6d2701f1796b392f520d521c..19a151a035dc3e0a31564614248dd6e0671b88c6 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -3,9 +3,11 @@ package net.minecraft.server.level;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
+import com.google.common.collect.Sets;
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import com.mojang.datafixers.DataFixer;
 import com.mojang.logging.LogUtils;
+import io.canvasmc.canvas.entity.tracking.ThreadedTracker;
 import io.canvasmc.canvas.util.fastutil.Int2ObjectConcurrentHashMap;
 import io.canvasmc.canvas.util.fastutil.Long2ByteConcurrentHashMap;
 import io.netty.util.internal.ConcurrentSet;
@@ -959,6 +961,12 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
     // Paper start - optimise entity tracker
     private void newTrackerTick() {
+        // Canvas start - threaded tracker
+        if (true) {
+            ThreadedTracker.INSTANCE.tick(level);
+            return;
+        }
+        // Canvas end
         final ca.spottedleaf.moonrise.patches.chunk_system.level.entity.server.ServerEntityLookup entityLookup = (ca.spottedleaf.moonrise.patches.chunk_system.level.entity.server.ServerEntityLookup)((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getEntityLookup();;
 
         final ca.spottedleaf.moonrise.common.list.ReferenceList<net.minecraft.world.entity.Entity> trackerEntities = entityLookup.trackerEntities;
@@ -1130,7 +1138,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
         final Entity entity;
         private final int range;
         SectionPos lastSectionPos;
-        public final Set<ServerPlayerConnection> seenBy = new it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet<>(); // Paper - Perf: optimise map impl
+        public final Set<ServerPlayerConnection> seenBy = Sets.newConcurrentHashSet(); // Paper - Perf: optimise map impl // Canvas - threaded tracker, and make this concurrent-compatible for threaded dimensions
 
         // Paper start - optimise entity tracker
         private long lastChunkUpdate = -1L;
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeInstance.java b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeInstance.java
index 27a7852a5d3f8c8960f098646ff5587c50556aa5..5cc2d13f952f202e60040274b6a370cda7dbd076 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeInstance.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeInstance.java
@@ -8,6 +8,7 @@ import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.function.Consumer;
 import javax.annotation.Nullable;
 import net.minecraft.core.Holder;
@@ -24,8 +25,10 @@ public class AttributeInstance {
     private final Map<AttributeModifier.Operation, Map<ResourceLocation, AttributeModifier>> modifiersByOperation = Maps.newEnumMap(
         AttributeModifier.Operation.class
     );
-    private final Map<ResourceLocation, AttributeModifier> modifierById = new Object2ObjectArrayMap<>();
-    private final Map<ResourceLocation, AttributeModifier> permanentModifiers = new Object2ObjectArrayMap<>();
+    // Canvas start
+    private final Map<ResourceLocation, AttributeModifier> modifierById = new ConcurrentHashMap<>();
+    private final Map<ResourceLocation, AttributeModifier> permanentModifiers = new ConcurrentHashMap<>();
+    // Canvas end
     private double baseValue;
     private boolean dirty = true;
     private double cachedValue;
diff --git a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java
index d6c98612ca15e506657d85f6872c1278e0b73652..f42fa824980324e61175833165f2b30cc5de667a 100644
--- a/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java
+++ b/src/main/java/net/minecraft/world/entity/ai/attributes/AttributeMap.java
@@ -1,12 +1,14 @@
 package net.minecraft.world.entity.ai.attributes;
 
 import com.google.common.collect.Multimap;
+import com.google.common.collect.Sets;
 import com.mojang.logging.LogUtils;
 import it.unimi.dsi.fastutil.objects.Object2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.ObjectOpenHashSet;
 import java.util.Collection;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.Util;
@@ -19,9 +21,11 @@ import org.slf4j.Logger;
 
 public class AttributeMap {
     private static final Logger LOGGER = LogUtils.getLogger();
-    private final Map<Holder<Attribute>, AttributeInstance> attributes = new Object2ObjectOpenHashMap<>();
-    private final Set<AttributeInstance> attributesToSync = new ObjectOpenHashSet<>();
-    private final Set<AttributeInstance> attributesToUpdate = new ObjectOpenHashSet<>();
+    // Canvas start
+    private final Map<Holder<Attribute>, AttributeInstance> attributes = new ConcurrentHashMap<>();
+    private final Set<AttributeInstance> attributesToSync = Sets.newConcurrentHashSet();
+    private final Set<AttributeInstance> attributesToUpdate = Sets.newConcurrentHashSet();
+    // Canvas end
     private final AttributeSupplier supplier;
     private final net.minecraft.world.entity.LivingEntity entity; // Purpur - Ridables
 
