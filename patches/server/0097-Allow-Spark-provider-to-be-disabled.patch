From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris MC <purplewolf.mc1@gmail.com>
Date: Sat, 4 Nov 2023 16:43:57 +0000
Subject: [PATCH] Allow Spark provider to be disabled


diff --git a/src/main/java/io/papermc/paper/plugin/provider/source/SparkProviderSource.java b/src/main/java/io/papermc/paper/plugin/provider/source/SparkProviderSource.java
index a7d1ae53eac94bc2dcf8bc78ef1da0d3b8554736..d304b716eab581fc07fe4f38e0c96b6fcd1951af 100644
--- a/src/main/java/io/papermc/paper/plugin/provider/source/SparkProviderSource.java
+++ b/src/main/java/io/papermc/paper/plugin/provider/source/SparkProviderSource.java
@@ -31,63 +31,66 @@ public class SparkProviderSource extends FileProviderSource {
     @Override
     public void registerProviders(EntrypointHandler entrypointHandler, Path context) throws Exception {
         // first, check if user doesn't want spark at all
-        if (Boolean.getBoolean("Purpur.IReallyDontWantSpark")) {
-            return; // boo!
-        }
-
-        // second, check if user has their own spark
-        if (hasSpark()) {
-            LOGGER.info("Purpur: Using user-provided spark plugin instead of our own.");
-            return; // let's hope it's at least the modern version :3
-        }
-
-        // you can't have errors in your code if you wrap the entire codebase in a try/catch block
-        try {
-
-            // make sure the directory exists where we want to keep spark
-            File file = context.toFile();
-            file.getParentFile().mkdirs();
-
-            boolean shouldDownload;
-
-            // check if our spark exists
-            if (!file.exists()) {
-                // it does not, so let's download it
-                shouldDownload = true;
-            } else {
-                // we have a spark file, let's see if it's up-to-date by comparing shas
-                String fileSha1 = String.format("%040x", new BigInteger(1, MessageDigest.getInstance("SHA-1").digest(Files.readAllBytes(file.toPath()))));
-                String sparkSha1;
-
-                // luck has a nifty endpoint containing the sha of the newest version
-                URLConnection urlConnection = new URL("https://sparkapi.lucko.me/download/bukkit/sha1").openConnection();
-
-                // set a reasonable timeout to prevent servers without internet from hanging for 60+ seconds on startup
-                urlConnection.setReadTimeout(5000);
-                urlConnection.setConnectTimeout(5000);
-
-                // read it
-                try (BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()))) {
-                    sparkSha1 = reader.lines().collect(Collectors.joining(""));
-                }
-
-                // compare; we only download a new spark if the shas don't match
-                shouldDownload = !fileSha1.equals(sparkSha1);
+        // Canvas start - change boolean if you dont want spark enabled at runtime
+        if(true){
+            if (Boolean.getBoolean("Purpur.IReallyDontWantSpark")) {
+                return; // boo!
             }
-
-            // ok, finally we can download spark if we need it
-            if (shouldDownload) {
-                URLConnection urlConnection = new URL("https://sparkapi.lucko.me/download/bukkit").openConnection();
-                urlConnection.setReadTimeout(5000);
-                urlConnection.setConnectTimeout(5000);
-                Files.copy(urlConnection.getInputStream(), file.toPath(), StandardCopyOption.REPLACE_EXISTING);
+    
+            // second, check if user has their own spark
+            if (hasSpark()) {
+                LOGGER.info("Purpur: Using user-provided spark plugin instead of our own.");
+                return; // let's hope it's at least the modern version :3
+            }
+    
+            // you can't have errors in your code if you wrap the entire codebase in a try/catch block
+            try {
+    
+                // make sure the directory exists where we want to keep spark
+                File file = context.toFile();
+                file.getParentFile().mkdirs();
+    
+                boolean shouldDownload;
+    
+                // check if our spark exists
+                if (!file.exists()) {
+                    // it does not, so let's download it
+                    shouldDownload = true;
+                } else {
+                    // we have a spark file, let's see if it's up-to-date by comparing shas
+                    String fileSha1 = String.format("%040x", new BigInteger(1, MessageDigest.getInstance("SHA-1").digest(Files.readAllBytes(file.toPath()))));
+                    String sparkSha1;
+    
+                    // luck has a nifty endpoint containing the sha of the newest version
+                    URLConnection urlConnection = new URL("https://sparkapi.lucko.me/download/bukkit/sha1").openConnection();
+    
+                    // set a reasonable timeout to prevent servers without internet from hanging for 60+ seconds on startup
+                    urlConnection.setReadTimeout(5000);
+                    urlConnection.setConnectTimeout(5000);
+    
+                    // read it
+                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()))) {
+                        sparkSha1 = reader.lines().collect(Collectors.joining(""));
+                    }
+    
+                    // compare; we only download a new spark if the shas don't match
+                    shouldDownload = !fileSha1.equals(sparkSha1);
+                }
+    
+                // ok, finally we can download spark if we need it
+                if (shouldDownload) {
+                    URLConnection urlConnection = new URL("https://sparkapi.lucko.me/download/bukkit").openConnection();
+                    urlConnection.setReadTimeout(5000);
+                    urlConnection.setConnectTimeout(5000);
+                    Files.copy(urlConnection.getInputStream(), file.toPath(), StandardCopyOption.REPLACE_EXISTING);
+                }
+    
+                // register the spark, newly downloaded or existing
+                super.registerProviders(entrypointHandler, context);
+    
+            } catch (Throwable e) {
+                LOGGER.error("Purpur: Failed to download and install spark plugin", e);
             }
-
-            // register the spark, newly downloaded or existing
-            super.registerProviders(entrypointHandler, context);
-
-        } catch (Throwable e) {
-            LOGGER.error("Purpur: Failed to download and install spark plugin", e);
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pig.java b/src/main/java/net/minecraft/world/entity/animal/Pig.java
index 85d5466c4891deadb1c35399826281147b092660..c9aee54d1f79b3116ac02a582051eaeecb96de4d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pig.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pig.java
@@ -132,7 +132,7 @@ public class Pig extends Animal implements ItemSteerable, Saddleable {
         this.goalSelector.addGoal(1, new PanicGoal(this, 1.25D));
         this.goalSelector.addGoal(3, new BreedGoal(this, 1.0D));
         // Canvas start
-        this.RIDE_ITEM_GOAL = new TemptGoal(this, 1.2D, Ingredient.of(this.rideItem), false);
+        this.RIDE_ITEM_GOAL = new TemptGoal(this, 1.2D, Ingredient.of(Items.CARROT_ON_A_STICK), false);
         this.goalSelector.addGoal(4, this.RIDE_ITEM_GOAL);
         // Canvas end
         this.goalSelector.addGoal(4, new TemptGoal(this, 1.2D, Pig.FOOD_ITEMS, false));
diff --git a/src/main/java/net/minecraft/world/entity/monster/Strider.java b/src/main/java/net/minecraft/world/entity/monster/Strider.java
index cf25667e704b1be3e098e60e45a2555fa40c4b13..1ea12e3fa05b3dbbef8e9daaeb114f2a433bf747 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Strider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Strider.java
@@ -218,10 +218,10 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(2, new BreedGoal(this, 1.0D));
         // Canvas start
-        this.RIDE_ITEM_GOAL = new TemptGoal(this, 1.2D, Ingredient.of(this.rideItem), false);
+        this.RIDE_ITEM_GOAL = new TemptGoal(this, 1.2D, Ingredient.of(Items.WARPED_FUNGUS_ON_A_STICK), false);
         this.goalSelector.addGoal(4, this.RIDE_ITEM_GOAL);
         // Canvas end
-        this.goalSelector.addGoal(3, this.temptGoal);
+        // this.goalSelector.addGoal(3, this.temptGoal);
         this.goalSelector.addGoal(4, new Strider.StriderGoToLavaGoal(this, 1.0D));
         this.goalSelector.addGoal(5, new FollowParentGoal(this, 1.0D));
         this.goalSelector.addGoal(7, new RandomStrollGoal(this, 1.0D, 60));
