From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sun, 29 Oct 2023 19:45:56 -0700
Subject: [PATCH] Fixed protected -> public patches


diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 3952df88d55b94a2a96d0a5d8db2c5888f656b3e..d509ddbe5266b482f0ebec952c43ba56ccac201b 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -2827,16 +2827,21 @@ public abstract class LivingEntity extends Entity implements Attackable {
         this.hasImpulse = true;
     }
 
-    protected void goDownInWater() {
+    public void goDownInWater() { // Canvas - protected -> public
         this.setDeltaMovement(this.getDeltaMovement().add(0.0D, -0.03999999910593033D, 0.0D));
     }
 
-    protected void jumpInLiquid(TagKey<Fluid> fluid) {
+    public void jumpInLiquid(TagKey<Fluid> fluid) { // Canvas - protected -> public
         this.setDeltaMovement(this.getDeltaMovement().add(0.0D, 0.03999999910593033D, 0.0D));
     }
 
-    protected float getWaterSlowDown() {
-        return 0.8F;
+    private float waterslowdown = 0.8f;
+    public float getWaterSlowDown() { // Canvas - protected -> public
+        return waterslowdown;
+    }
+
+    public void setWaterSlowdown(float slowdown){
+        this.waterslowdown = waterslowdown;
     }
 
     public boolean canStandOnFluid(FluidState state) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
index 36ead8827ccfba1f4892faab3ddb325e72b4b734..fb2d83bec929b844363c90d20906d4dc300d9f03 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
@@ -78,7 +78,7 @@ public class SkeletonHorse extends AbstractHorse {
     }
 
     @Override
-    protected void addBehaviourGoals() {
+    public void addBehaviourGoals() { // Canvas - protected -> public
         if (level().purpurConfig.skeletonHorseCanSwim) goalSelector.addGoal(0, new net.minecraft.world.entity.ai.goal.FloatGoal(this));
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
index 33964fa099294b7ce355dd07810b02cd540ab528..85fbef4963fcd83b4d77d7ea0c3e50fd76aa8b9d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
@@ -114,7 +114,7 @@ public class ZombieHorse extends AbstractHorse {
     }
 
     @Override
-    protected void addBehaviourGoals() {
+    public void addBehaviourGoals() { // Canvas - protected -> public
         if (level().purpurConfig.zombieHorseCanSwim) goalSelector.addGoal(0, new net.minecraft.world.entity.ai.goal.FloatGoal(this)); // Purpur
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/WardenAi.java b/src/main/java/net/minecraft/world/entity/monster/warden/WardenAi.java
index 03f16a5541de6bc95407aaa24741570c1993dc9e..fe3d3d00a79c9b1aa9a0a1c3ba8898317a77f5f3 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/WardenAi.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/WardenAi.java
@@ -54,7 +54,7 @@ public class WardenAi {
     private static final int DISTURBANCE_LOCATION_EXPIRY_TIME = 100;
     private static final List<SensorType<? extends Sensor<? super Warden>>> SENSOR_TYPES = List.of(SensorType.NEAREST_PLAYERS, SensorType.WARDEN_ENTITY_SENSOR);
     private static final List<MemoryModuleType<?>> MEMORY_TYPES = List.of(MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_NEMESIS, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.ROAR_TARGET, MemoryModuleType.DISTURBANCE_LOCATION, MemoryModuleType.RECENT_PROJECTILE, MemoryModuleType.IS_SNIFFING, MemoryModuleType.IS_EMERGING, MemoryModuleType.ROAR_SOUND_DELAY, MemoryModuleType.DIG_COOLDOWN, MemoryModuleType.ROAR_SOUND_COOLDOWN, MemoryModuleType.SNIFF_COOLDOWN, MemoryModuleType.TOUCH_COOLDOWN, MemoryModuleType.VIBRATION_COOLDOWN, MemoryModuleType.SONIC_BOOM_COOLDOWN, MemoryModuleType.SONIC_BOOM_SOUND_COOLDOWN, MemoryModuleType.SONIC_BOOM_SOUND_DELAY);
-    private static final BehaviorControl<Warden> DIG_COOLDOWN_SETTER = BehaviorBuilder.create((context) -> {
+    public static final BehaviorControl<Warden> DIG_COOLDOWN_SETTER = BehaviorBuilder.create((context) -> { // Canvas - private -> public
         return context.group(context.registered(MemoryModuleType.DIG_COOLDOWN)).apply(context, (digCooldown) -> {
             return (world, entity, time) -> {
                 if (context.tryGet(digCooldown).isPresent()) {
@@ -70,7 +70,7 @@ public class WardenAi {
         warden.getBrain().setActiveActivityToFirstValid(ImmutableList.of(Activity.EMERGE, Activity.DIG, Activity.ROAR, Activity.FIGHT, Activity.INVESTIGATE, Activity.SNIFF, Activity.IDLE));
     }
 
-    protected static Brain<?> makeBrain(Warden warden, Dynamic<?> dynamic) {
+    public static Brain<?> makeBrain(Warden warden, Dynamic<?> dynamic) { // Canvas - protected -> public
         Brain.Provider<Warden> provider = Brain.provider(MEMORY_TYPES, SENSOR_TYPES);
         Brain<Warden> brain = provider.makeBrain(dynamic);
         initCoreActivity(brain);
@@ -87,35 +87,35 @@ public class WardenAi {
         return brain;
     }
 
-    private static void initCoreActivity(Brain<Warden> brain) {
+    public static void initCoreActivity(Brain<Warden> brain) { // Canvas - private -> public
         brain.addActivity(Activity.CORE, 0, ImmutableList.of(new Swim(0.8F), SetWardenLookTarget.create(), new LookAtTargetSink(45, 90), new MoveToTargetSink()));
     }
 
-    private static void initEmergeActivity(Brain<Warden> brain) {
+    public static void initEmergeActivity(Brain<Warden> brain) { // Canvas - private -> public
         brain.addActivityAndRemoveMemoryWhenStopped(Activity.EMERGE, 5, ImmutableList.of(new Emerging<>(EMERGE_DURATION)), MemoryModuleType.IS_EMERGING);
     }
 
-    private static void initDiggingActivity(Brain<Warden> brain) {
+    public static void initDiggingActivity(Brain<Warden> brain) { // Canvas - private -> public
         brain.addActivityWithConditions(Activity.DIG, ImmutableList.of(Pair.of(0, new ForceUnmount()), Pair.of(1, new Digging<>(DIGGING_DURATION))), ImmutableSet.of(Pair.of(MemoryModuleType.ROAR_TARGET, MemoryStatus.VALUE_ABSENT), Pair.of(MemoryModuleType.DIG_COOLDOWN, MemoryStatus.VALUE_ABSENT)));
     }
 
-    private static void initIdleActivity(Brain<Warden> brain) {
+    public static void initIdleActivity(Brain<Warden> brain) { // Canvas - private -> public
         brain.addActivity(Activity.IDLE, 10, ImmutableList.of(SetRoarTarget.create(Warden::getEntityAngryAt), TryToSniff.create(), new RunOne<>(ImmutableMap.of(MemoryModuleType.IS_SNIFFING, MemoryStatus.VALUE_ABSENT), ImmutableList.of(Pair.of(RandomStroll.stroll(0.5F), 2), Pair.of(new DoNothing(30, 60), 1)))));
     }
 
-    private static void initInvestigateActivity(Brain<Warden> brain) {
+    public static void initInvestigateActivity(Brain<Warden> brain) { // Canvas - private -> public
         brain.addActivityAndRemoveMemoryWhenStopped(Activity.INVESTIGATE, 5, ImmutableList.of(SetRoarTarget.create(Warden::getEntityAngryAt), GoToTargetLocation.create(MemoryModuleType.DISTURBANCE_LOCATION, 2, 0.7F)), MemoryModuleType.DISTURBANCE_LOCATION);
     }
 
-    private static void initSniffingActivity(Brain<Warden> brain) {
+    public static void initSniffingActivity(Brain<Warden> brain) { // Canvas - private -> public
         brain.addActivityAndRemoveMemoryWhenStopped(Activity.SNIFF, 5, ImmutableList.of(SetRoarTarget.create(Warden::getEntityAngryAt), new Sniffing<>(SNIFFING_DURATION)), MemoryModuleType.IS_SNIFFING);
     }
 
-    private static void initRoarActivity(Brain<Warden> brain) {
+    public static void initRoarActivity(Brain<Warden> brain) { // Canvas - private -> public
         brain.addActivityAndRemoveMemoryWhenStopped(Activity.ROAR, 10, ImmutableList.of(new Roar()), MemoryModuleType.ROAR_TARGET);
     }
 
-    private static void initFightActivity(Warden warden, Brain<Warden> brain) {
+    public static void initFightActivity(Warden warden, Brain<Warden> brain) { // Canvas - private -> public
         brain.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(DIG_COOLDOWN_SETTER, StopAttackingIfTargetInvalid.<Warden>create((entity) -> {
             return !warden.getAngerLevel().isAngry() || !warden.canTargetEntity(entity);
         }, WardenAi::onTargetInvalid, false), SetEntityLookTarget.create((entity) -> {
@@ -123,13 +123,13 @@ public class WardenAi {
         }, (float)warden.getAttributeValue(Attributes.FOLLOW_RANGE)), SetWalkTargetFromAttackTargetIfTargetOutOfReach.create(1.2F), new SonicBoom(), MeleeAttack.create(18)), MemoryModuleType.ATTACK_TARGET);
     }
 
-    private static boolean isTarget(Warden warden, LivingEntity entity) {
+    public static boolean isTarget(Warden warden, LivingEntity entity) { // Canvas - private -> public
         return warden.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).filter((entityx) -> {
             return entityx == entity;
         }).isPresent();
     }
 
-    private static void onTargetInvalid(Warden warden, LivingEntity suspect) {
+    public static void onTargetInvalid(Warden warden, LivingEntity suspect) { // Canvas - private -> public
         if (!warden.canTargetEntity(suspect)) {
             warden.clearAnger(suspect);
         }
