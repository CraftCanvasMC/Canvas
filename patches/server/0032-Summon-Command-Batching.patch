From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Sun, 12 Jan 2025 14:54:15 -0800
Subject: [PATCH] Summon Command Batching


diff --git a/src/main/java/io/github/dueris/canvas/Config.java b/src/main/java/io/github/dueris/canvas/Config.java
index 263c1301526a978f44aa72e977e93c5c1197fe4f..3daca1c130a05eb2bedc9bc8fc6531accd47b81f 100644
--- a/src/main/java/io/github/dueris/canvas/Config.java
+++ b/src/main/java/io/github/dueris/canvas/Config.java
@@ -87,6 +87,11 @@ public class Config implements ConfigData {
         public double tntRandomRange = -1;
     }
 
+    @Comment("Amount of entities to summon per tick from the summon command")
+    public int summonCommandBatchCount = 50;
+    @Comment("Batches summon command tasks to spread across multiple ticks, preventing the server from freezing for multiple seconds when processing higher summon counts")
+    public boolean batchSummonCommandTasks = true;
+
 	public static Config init() {
 		AutoConfig.register(Config.class, JanksonConfigSerializer::new);
 		INSTANCE = AutoConfig.getConfigHolder(Config.class).getConfig();
diff --git a/src/main/java/io/github/dueris/canvas/command/SummonCommandManagement.java b/src/main/java/io/github/dueris/canvas/command/SummonCommandManagement.java
new file mode 100644
index 0000000000000000000000000000000000000000..7c9d2c3fcc290286e794c755ee9d59ee478e988f
--- /dev/null
+++ b/src/main/java/io/github/dueris/canvas/command/SummonCommandManagement.java
@@ -0,0 +1,46 @@
+package io.github.dueris.canvas.command;
+
+import com.mojang.brigadier.exceptions.CommandSyntaxException;
+import io.github.dueris.canvas.Config;
+import java.util.Queue;
+import java.util.concurrent.ConcurrentLinkedQueue;
+import java.util.concurrent.atomic.AtomicInteger;
+import net.minecraft.commands.CommandSourceStack;
+import net.minecraft.core.Holder;
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.commands.SummonCommand;
+import net.minecraft.world.entity.EntityType;
+import net.minecraft.world.phys.Vec3;
+
+public class SummonCommandManagement {
+    private final Queue<Runnable> batches = new ConcurrentLinkedQueue<>();
+    private final AtomicInteger count = new AtomicInteger(0);
+
+    public void batch(CommandSourceStack source, Holder.Reference<EntityType<?>> entityType, Vec3 pos, CompoundTag nbt, boolean initialize) {
+        count.incrementAndGet();
+        batches.add(() -> {
+            try {
+                SummonCommand.spawnEntity(source, entityType, pos, nbt, initialize, false);
+            } catch (CommandSyntaxException e) {
+                throw new RuntimeException(e);
+            }
+        });
+    }
+
+    public void tickBatch() {
+        int batchSize = Config.INSTANCE.summonCommandBatchCount;
+        for (int i = 0; i < batchSize && count.get() > 0; i++) {
+            Runnable task = batches.poll();
+            if (task != null) {
+                task.run();
+                count.decrementAndGet();
+            } else {
+                MinecraftServer.LOGGER.error("Warning: Task count and queue size mismatch!");
+                count.set(0);
+                break;
+            }
+        }
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 604ee096706953436dd7dbf3c7e3f7a3763758c6..1eff2d5976168936b8786f21224f31568ac2d00a 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -14,6 +14,7 @@ import com.mojang.jtracy.DiscontinuousFrame;
 import com.mojang.jtracy.TracyClient;
 import com.mojang.logging.LogUtils;
 import io.github.dueris.canvas.Config;
+import io.github.dueris.canvas.command.SummonCommandManagement;
 import io.github.dueris.canvas.server.ThreadedServer;
 import io.github.dueris.canvas.server.level.TickRateManagerInstance;
 import io.github.dueris.canvas.server.level.WatchdogWatcher;
@@ -235,6 +236,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public LevelStorageSource.LevelStorageAccess storageSource;
     public final PlayerDataStorage playerDataStorage;
     private final List<Runnable> tickables = Lists.newArrayList();
+    public SummonCommandManagement summonCommandManager = new SummonCommandManagement(); // Canvas
     private MetricsRecorder metricsRecorder;
     private Consumer<ProfileResults> onMetricsRecordingStopped;
     private Consumer<Path> onMetricsRecordingFinished;
@@ -1901,6 +1903,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         if (playerSaveInterval < 0) {
             playerSaveInterval = autosavePeriod;
         }
+        this.summonCommandManager.tickBatch(); // Canvas
         profiler.push("save");
         final boolean fullSave = autosavePeriod > 0 && this.tickCount % autosavePeriod == 0;
         try {
diff --git a/src/main/java/net/minecraft/server/commands/SummonCommand.java b/src/main/java/net/minecraft/server/commands/SummonCommand.java
index f635da34335cd2901adf975fcd74c5c6f9785836..e1d5b4db5ac2aed6efddd5b0e104772f397777c6 100644
--- a/src/main/java/net/minecraft/server/commands/SummonCommand.java
+++ b/src/main/java/net/minecraft/server/commands/SummonCommand.java
@@ -5,6 +5,7 @@ import com.mojang.brigadier.builder.LiteralArgumentBuilder;
 import com.mojang.brigadier.builder.RequiredArgumentBuilder;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.exceptions.SimpleCommandExceptionType;
+import io.github.dueris.canvas.Config;
 import net.minecraft.commands.CommandBuildContext;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.arguments.CompoundTagArgument;
@@ -16,6 +17,7 @@ import net.minecraft.core.Holder;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.network.chat.Component;
+import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntitySpawnReason;
@@ -37,11 +39,11 @@ public class SummonCommand {
         dispatcher.register((LiteralArgumentBuilder) ((LiteralArgumentBuilder) net.minecraft.commands.Commands.literal("summon").requires((commandlistenerwrapper) -> {
             return commandlistenerwrapper.hasPermission(2);
         })).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("entity", ResourceArgument.resource(registryAccess, Registries.ENTITY_TYPE)).suggests(SuggestionProviders.SUMMONABLE_ENTITIES).executes((commandcontext) -> {
-            return SummonCommand.spawnEntity((CommandSourceStack) commandcontext.getSource(), ResourceArgument.getSummonableEntityType(commandcontext, "entity"), ((CommandSourceStack) commandcontext.getSource()).getPosition(), new CompoundTag(), true);
+            return SummonCommand.spawnEntity((CommandSourceStack) commandcontext.getSource(), ResourceArgument.getSummonableEntityType(commandcontext, "entity"), ((CommandSourceStack) commandcontext.getSource()).getPosition(), new CompoundTag(), true, true); // Canvas
         })).then(((RequiredArgumentBuilder) net.minecraft.commands.Commands.argument("pos", Vec3Argument.vec3()).executes((commandcontext) -> {
-            return SummonCommand.spawnEntity((CommandSourceStack) commandcontext.getSource(), ResourceArgument.getSummonableEntityType(commandcontext, "entity"), Vec3Argument.getVec3(commandcontext, "pos"), new CompoundTag(), true);
+            return SummonCommand.spawnEntity((CommandSourceStack) commandcontext.getSource(), ResourceArgument.getSummonableEntityType(commandcontext, "entity"), Vec3Argument.getVec3(commandcontext, "pos"), new CompoundTag(), true, true); // Canvas
         })).then(net.minecraft.commands.Commands.argument("nbt", CompoundTagArgument.compoundTag()).executes((commandcontext) -> {
-            return SummonCommand.spawnEntity((CommandSourceStack) commandcontext.getSource(), ResourceArgument.getSummonableEntityType(commandcontext, "entity"), Vec3Argument.getVec3(commandcontext, "pos"), CompoundTagArgument.getCompoundTag(commandcontext, "nbt"), false);
+            return SummonCommand.spawnEntity((CommandSourceStack) commandcontext.getSource(), ResourceArgument.getSummonableEntityType(commandcontext, "entity"), Vec3Argument.getVec3(commandcontext, "pos"), CompoundTagArgument.getCompoundTag(commandcontext, "nbt"), false, true); // Canvas
         })))));
     }
 
@@ -77,7 +79,15 @@ public class SummonCommand {
         }
     }
 
-    private static int spawnEntity(CommandSourceStack source, Holder.Reference<EntityType<?>> entityType, Vec3 pos, CompoundTag nbt, boolean initialize) throws CommandSyntaxException {
+    // Canvas start
+    public static int spawnEntity(CommandSourceStack source, Holder.Reference<EntityType<?>> entityType, Vec3 pos, CompoundTag nbt, boolean initialize, boolean shouldBatch) throws CommandSyntaxException {
+        if (shouldBatch && Config.INSTANCE.batchSummonCommandTasks) {
+            MinecraftServer.getServer().summonCommandManager.batch(
+                source, entityType, pos, nbt, initialize
+            );
+            return 1;
+        }
+    // Canvas end
         Entity entity = SummonCommand.createEntity(source, entityType, pos, nbt, initialize);
 
         source.sendSuccess(() -> {
