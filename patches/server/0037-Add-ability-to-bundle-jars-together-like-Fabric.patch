From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris MC <purplewolf.mc1@gmail.com>
Date: Sat, 4 Nov 2023 16:43:57 +0000
Subject: [PATCH] Add ability to bundle jars together like Fabric


diff --git a/src/main/java/io/papermc/paper/plugin/entrypoint/Entrypoint.java b/src/main/java/io/papermc/paper/plugin/entrypoint/Entrypoint.java
index 125008ac7db8b9f3fb57c49f8e4facc4ad4bb136..3aef63be663e8a7a4a10fcc7fc9a592786681842 100644
--- a/src/main/java/io/papermc/paper/plugin/entrypoint/Entrypoint.java
+++ b/src/main/java/io/papermc/paper/plugin/entrypoint/Entrypoint.java
@@ -12,6 +12,7 @@ public final class Entrypoint<T> {
 
     public static final Entrypoint<PluginBootstrap> BOOTSTRAPPER = new Entrypoint<>("bootstrapper");
     public static final Entrypoint<JavaPlugin> PLUGIN = new Entrypoint<>("plugin");
+    public static final Entrypoint<JavaPlugin> DEPEND_BUNDLE_JARS = new Entrypoint<>("libraries/plugins"); // Canvas custom loader thing
 
     private final String debugName;
 
diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
index 9c7552968b8c017c71a7a77557a66a03ed89f125..1bca9f0451d6d03e6ff2bcf339585851975ce1c1 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperPluginInstanceManager.java
@@ -183,7 +183,7 @@ class PaperPluginInstanceManager {
                 if (PaperClassLoaderStorage.instance().registerUnsafePlugin(classLoader)) {
                     this.server.getLogger().log(Level.WARNING, "Enabled plugin with unregistered ConfiguredPluginClassLoader " + plugin.getPluginMeta().getDisplayName());
                 }
-            } // Paper
+            } // Paper 
 
             try {
                 jPlugin.setEnabled(true);
diff --git a/src/main/java/io/papermc/paper/plugin/provider/source/SparkProviderSource.java b/src/main/java/io/papermc/paper/plugin/provider/source/SparkProviderSource.java
index a7d1ae53eac94bc2dcf8bc78ef1da0d3b8554736..91ecbbd40ef95c14c119783928efd11c89e863a1 100644
--- a/src/main/java/io/papermc/paper/plugin/provider/source/SparkProviderSource.java
+++ b/src/main/java/io/papermc/paper/plugin/provider/source/SparkProviderSource.java
@@ -31,63 +31,66 @@ public class SparkProviderSource extends FileProviderSource {
     @Override
     public void registerProviders(EntrypointHandler entrypointHandler, Path context) throws Exception {
         // first, check if user doesn't want spark at all
-        if (Boolean.getBoolean("Purpur.IReallyDontWantSpark")) {
-            return; // boo!
-        }
-
-        // second, check if user has their own spark
-        if (hasSpark()) {
-            LOGGER.info("Purpur: Using user-provided spark plugin instead of our own.");
-            return; // let's hope it's at least the modern version :3
-        }
-
-        // you can't have errors in your code if you wrap the entire codebase in a try/catch block
-        try {
-
-            // make sure the directory exists where we want to keep spark
-            File file = context.toFile();
-            file.getParentFile().mkdirs();
-
-            boolean shouldDownload;
-
-            // check if our spark exists
-            if (!file.exists()) {
-                // it does not, so let's download it
-                shouldDownload = true;
-            } else {
-                // we have a spark file, let's see if it's up-to-date by comparing shas
-                String fileSha1 = String.format("%040x", new BigInteger(1, MessageDigest.getInstance("SHA-1").digest(Files.readAllBytes(file.toPath()))));
-                String sparkSha1;
-
-                // luck has a nifty endpoint containing the sha of the newest version
-                URLConnection urlConnection = new URL("https://sparkapi.lucko.me/download/bukkit/sha1").openConnection();
-
-                // set a reasonable timeout to prevent servers without internet from hanging for 60+ seconds on startup
-                urlConnection.setReadTimeout(5000);
-                urlConnection.setConnectTimeout(5000);
-
-                // read it
-                try (BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()))) {
-                    sparkSha1 = reader.lines().collect(Collectors.joining(""));
-                }
-
-                // compare; we only download a new spark if the shas don't match
-                shouldDownload = !fileSha1.equals(sparkSha1);
+        // Canvas start - change boolean if you dont want spark enabled at runtime
+        if(true){
+            if (Boolean.getBoolean("Purpur.IReallyDontWantSpark")) {
+                return; // boo!
             }
-
-            // ok, finally we can download spark if we need it
-            if (shouldDownload) {
-                URLConnection urlConnection = new URL("https://sparkapi.lucko.me/download/bukkit").openConnection();
-                urlConnection.setReadTimeout(5000);
-                urlConnection.setConnectTimeout(5000);
-                Files.copy(urlConnection.getInputStream(), file.toPath(), StandardCopyOption.REPLACE_EXISTING);
+    
+            // second, check if user has their own spark
+            if (hasSpark()) {
+                LOGGER.info("Purpur: Using user-provided spark plugin instead of our own.");
+                return; // let's hope it's at least the modern version :3
+            }
+    
+            // you can't have errors in your code if you wrap the entire codebase in a try/catch block
+            try {
+    
+                // make sure the directory exists where we want to keep spark
+                File file = context.toFile();
+                file.getParentFile().mkdirs();
+    
+                boolean shouldDownload;
+    
+                // check if our spark exists
+                if (!file.exists()) {
+                    // it does not, so let's download it
+                    shouldDownload = true;
+                } else {
+                    // we have a spark file, let's see if it's up-to-date by comparing shas
+                    String fileSha1 = String.format("%040x", new BigInteger(1, MessageDigest.getInstance("SHA-1").digest(Files.readAllBytes(file.toPath()))));
+                    String sparkSha1;
+    
+                    // luck has a nifty endpoint containing the sha of the newest version
+                    URLConnection urlConnection = new URL("https://sparkapi.lucko.me/download/bukkit/sha1").openConnection();
+    
+                    // set a reasonable timeout to prevent servers without internet from hanging for 60+ seconds on startup
+                    urlConnection.setReadTimeout(5000);
+                    urlConnection.setConnectTimeout(5000);
+    
+                    // read it
+                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()))) {
+                        sparkSha1 = reader.lines().collect(Collectors.joining(""));
+                    }
+    
+                    // compare; we only download a new spark if the shas don't match
+                    shouldDownload = !fileSha1.equals(sparkSha1);
+                }
+    
+                // ok, finally we can download spark if we need it
+                if (shouldDownload) {
+                    URLConnection urlConnection = new URL("https://sparkapi.lucko.me/download/bukkit").openConnection();
+                    urlConnection.setReadTimeout(5000);
+                    urlConnection.setConnectTimeout(5000);
+                    Files.copy(urlConnection.getInputStream(), file.toPath(), StandardCopyOption.REPLACE_EXISTING);
+                }
+    
+                // register the spark, newly downloaded or existing
+                super.registerProviders(entrypointHandler, context);
+    
+            } catch (Throwable e) {
+                LOGGER.error("Purpur: Failed to download and install spark plugin", e);
             }
-
-            // register the spark, newly downloaded or existing
-            super.registerProviders(entrypointHandler, context);
-
-        } catch (Throwable e) {
-            LOGGER.error("Purpur: Failed to download and install spark plugin", e);
         }
     }
 
diff --git a/src/main/java/me/dueris/canvas/plugin/CanvasPluginStartup.java b/src/main/java/me/dueris/canvas/plugin/CanvasPluginStartup.java
new file mode 100644
index 0000000000000000000000000000000000000000..2f49e9b24b3a0a4260cf0469b902099af7694907
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/plugin/CanvasPluginStartup.java
@@ -0,0 +1,55 @@
+package me.dueris.canvas.plugin;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.util.Enumeration;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+import java.net.URI;
+
+public class CanvasPluginStartup {
+    public static void start(java.nio.file.Path destinationDir) throws IOException {
+        PluginLocator pluginLocator = new PluginLocator(java.nio.file.Path.of(org.bukkit.Bukkit.getPluginsFolder().getAbsolutePath()));
+        java.util.List<java.io.File> files = pluginLocator.getJarsInDir();
+        for(java.io.File file : files){
+            String jarFilePath = file.getAbsolutePath();
+            File destDir = new File(destinationDir.toString());
+            URI jarFileUri = new File(jarFilePath).toURI();
+            try (JarFile jarFile = new JarFile(jarFileUri.getSchemeSpecificPart())) {
+                Enumeration<JarEntry> entries = jarFile.entries();
+                while (entries.hasMoreElements()) {
+                    JarEntry entry = entries.nextElement();
+
+                    // Ensure its a jar bc we dont want non-jars lol
+                    if (entry.getName().startsWith("jars/")) {
+                        String relativePath = entry.getName().substring("jars/".length());
+                        File entryFile = new File(destDir, relativePath);
+
+                        if (entry.isDirectory()) {
+                            entryFile.mkdirs();
+                        } else {
+                            // Check parent DIR exists
+                            File parent = entryFile.getParentFile();
+                            if (!parent.exists()) {
+                                parent.mkdirs();
+                            }
+
+                            // Begin entry reading
+                            try (FileOutputStream fos = new FileOutputStream(entryFile);
+                                java.io.InputStream is = jarFile.getInputStream(entry)) {
+                                byte[] buffer = new byte[1024];
+                                int bytesRead;
+                                while ((bytesRead = is.read(buffer)) != -1) {
+                                    fos.write(buffer, 0, bytesRead);
+                                }
+                            }
+                        }
+                    }
+                }
+            }
+        }
+
+
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/me/dueris/canvas/plugin/PluginLocator.java b/src/main/java/me/dueris/canvas/plugin/PluginLocator.java
new file mode 100644
index 0000000000000000000000000000000000000000..b14637f0e057080e05097a8dc13e46eef3194f8d
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/plugin/PluginLocator.java
@@ -0,0 +1,44 @@
+package me.dueris.canvas.plugin;
+
+import java.io.File;
+import java.io.IOException;
+import java.nio.file.DirectoryStream;
+import java.nio.file.FileVisitOption;
+import java.nio.file.FileVisitResult;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.Paths;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class PluginLocator {
+    private java.nio.file.Path dir;
+    public PluginLocator(java.nio.file.Path dir){
+        this.dir = dir;
+    }
+
+    public List<File> getJarsInDir(){
+        List<File> files = new ArrayList();
+        try {
+            List<Path> jarPaths = listJARFiles(dir);
+            jarPaths.forEach(file -> files.add(file.toFile()));
+            System.out.println(jarPaths.toString());
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return files;
+    }
+
+    public List<Path> listJARFiles(Path directoryPath) throws IOException {
+        List<Path> jarfiles = new ArrayList();
+        for(File file : directoryPath.toFile().listFiles()){
+            if(file.getName().toString().endsWith(".jar")){
+                jarfiles.add(Path.of(file.getPath()));
+            }
+        }
+        return jarfiles;
+    }
+    
+}
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index a2cd37ff6c08787bd60f6a5ea652514e18d1d9a9..9da63c8a5acb20f6cca0059732f049d8313ee74e 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -306,9 +306,14 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
                 LOGGER.error("[UPnP] Service is unavailable");
             }
         }
-        // Purpur end
-
-        // CraftBukkit start
+        // Purpur end -/- Canvas start
+        Path pluginLoaderPathway = Path.of(org.bukkit.Bukkit.getPluginsFolder().getAbsolutePath() + java.io.File.separator + ".." + java.io.File.separator + "cache" + java.io.File.separator + "pluginLoader" + java.io.File.separator);
+        if(!pluginLoaderPathway.toFile().exists()){
+            pluginLoaderPathway.toFile().mkdirs();
+        }
+        me.dueris.canvas.plugin.CanvasPluginStartup.start(Path.of(pluginLoaderPathway + java.io.File.separator));
+        this.server.paperPluginManager.loadPlugins(pluginLoaderPathway.toFile());        
+        // Canvas end -/- CraftBukkit start
         // this.setPlayerList(new DedicatedPlayerList(this, this.registries(), this.playerDataStorage)); // Spigot - moved up
         this.server.loadPlugins();
         this.server.enablePlugins(org.bukkit.plugin.PluginLoadOrder.STARTUP);
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pig.java b/src/main/java/net/minecraft/world/entity/animal/Pig.java
index 85d5466c4891deadb1c35399826281147b092660..c9aee54d1f79b3116ac02a582051eaeecb96de4d 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pig.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pig.java
@@ -132,7 +132,7 @@ public class Pig extends Animal implements ItemSteerable, Saddleable {
         this.goalSelector.addGoal(1, new PanicGoal(this, 1.25D));
         this.goalSelector.addGoal(3, new BreedGoal(this, 1.0D));
         // Canvas start
-        this.RIDE_ITEM_GOAL = new TemptGoal(this, 1.2D, Ingredient.of(this.rideItem), false);
+        this.RIDE_ITEM_GOAL = new TemptGoal(this, 1.2D, Ingredient.of(Items.CARROT_ON_A_STICK), false);
         this.goalSelector.addGoal(4, this.RIDE_ITEM_GOAL);
         // Canvas end
         this.goalSelector.addGoal(4, new TemptGoal(this, 1.2D, Pig.FOOD_ITEMS, false));
diff --git a/src/main/java/net/minecraft/world/entity/monster/Strider.java b/src/main/java/net/minecraft/world/entity/monster/Strider.java
index 63feee4f0b8cffab20f523cb2bf069b8099e354f..b313204c74854120e52a7e1e1574a8c3c0281a7e 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Strider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Strider.java
@@ -215,10 +215,10 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(2, new BreedGoal(this, 1.0D));
         // Canvas start
-        this.RIDE_ITEM_GOAL = new TemptGoal(this, 1.2D, Ingredient.of(this.rideItem), false);
+        this.RIDE_ITEM_GOAL = new TemptGoal(this, 1.2D, Ingredient.of(Items.WARPED_FUNGUS_ON_A_STICK), false);
         this.goalSelector.addGoal(4, this.RIDE_ITEM_GOAL);
         // Canvas end
-        this.goalSelector.addGoal(3, this.temptGoal);
+        // this.goalSelector.addGoal(3, this.temptGoal);
         this.goalSelector.addGoal(4, new Strider.StriderGoToLavaGoal(this, 1.0D));
         this.goalSelector.addGoal(5, new FollowParentGoal(this, 1.0D));
         this.goalSelector.addGoal(7, new RandomStrollGoal(this, 1.0D, 60));
