From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <122416109+Dueris@users.noreply.github.com>
Date: Mon, 18 Mar 2024 17:36:36 +0000
Subject: [PATCH] Rewrite MojangGUI


diff --git a/src/main/java/com/destroystokyo/paper/gui/GuiStatsComponent.java b/src/main/java/com/destroystokyo/paper/gui/GuiStatsComponent.java
index 537bc6213545e8ff1b7b51bc4b27fd5b2a740883..94713e30885384cb79815f849d1f6a1e8be49712 100644
--- a/src/main/java/com/destroystokyo/paper/gui/GuiStatsComponent.java
+++ b/src/main/java/com/destroystokyo/paper/gui/GuiStatsComponent.java
@@ -6,10 +6,12 @@ import javax.swing.JPanel;
 import javax.swing.Timer;
 import java.awt.BorderLayout;
 import java.awt.Dimension;
+import com.destroystokyo.paper.gui.RAMDetails;
 
 public class GuiStatsComponent extends JPanel {
     private final Timer timer;
     private final RAMGraph ramGraph;
+    private RAMDetails ramDetails;
 
     public GuiStatsComponent(MinecraftServer server) {
         super(new BorderLayout());
@@ -18,6 +20,7 @@ public class GuiStatsComponent extends JPanel {
 
         ramGraph = new RAMGraph();
         RAMDetails ramDetails = new RAMDetails(server);
+        this.ramDetails = ramDetails; // Canvas
 
         add(ramGraph, "North");
         add(ramDetails, "Center");
@@ -29,6 +32,12 @@ public class GuiStatsComponent extends JPanel {
         timer.start();
     }
 
+    // Canvas start
+    public RAMDetails getRamDetails(){
+        return this.ramDetails;
+    }
+    // Canvas end
+
     @Override
     public Dimension getPreferredSize() {
         return new Dimension(350, 200);
diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
index 308f67d0616e2d6bb135258f1fda53ccdee01430..7c971821f3cd31e532c80c374e3e6cee3e5b9f80 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
@@ -55,6 +55,12 @@ public class RAMDetails extends JList<String> {
         return new Dimension(350, 100);
     }
 
+    // Canvas start - add access to RamGraphData
+    public GraphData getGraphData(){
+        return RAMGraph.DATA.peekLast();
+    }
+    // Canvas end
+
     public void update() {
         GraphData data = RAMGraph.DATA.peekLast();
         Vector<String> vector = new Vector<>();
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index f7083c49b91feaf0aefaff9b3082523a0e357f7e..9b713f0d9f095db688066a0c04792038d09dbaac 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -36,6 +36,7 @@ import net.minecraft.obfuscate.DontObfuscate;
 import net.minecraft.server.dedicated.DedicatedServer;
 import net.minecraft.server.dedicated.DedicatedServerProperties;
 import net.minecraft.server.dedicated.DedicatedServerSettings;
+import net.minecraft.server.gui.MinecraftServerGui;
 import net.minecraft.server.level.progress.LoggerChunkProgressListener;
 import net.minecraft.server.packs.PackType;
 import net.minecraft.server.packs.repository.PackRepository;
@@ -118,6 +119,7 @@ public class Main {
             }
 
             io.papermc.paper.plugin.PluginInitializerManager.load(optionset); // Paper
+
             Bootstrap.bootStrap();
             Bootstrap.validate();
             Util.startTimerHackThread();
@@ -331,6 +333,7 @@ public class Main {
                 /*
                 dedicatedserver1.setId((String) optionset.valueOf(optionspec11));
                 */
+
                 boolean flag1 = !optionset.has("nogui") && !optionset.nonOptionArguments().contains("nogui");
 
                 if(!Boolean.parseBoolean(System.getenv().getOrDefault("PAPER_DISABLE_SERVER_GUI", String.valueOf(false)))) // Paper - Add environment variable to disable server gui
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index ef51fa26aedaffb08ff8b9b616720fb68a347846..d43e9f975b960278ec64d7357334aeaa5b949b9d 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -596,11 +596,19 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
 
     public void showGui() {
         if (this.gui == null) {
-            this.gui = MinecraftServerGui.showFrameFor(this);
+            try {
+                this.gui = MinecraftServerGui.showFrameFor(this, javax.imageio.ImageIO.read(Objects.requireNonNull(MinecraftServerGui.class.getClassLoader().getResourceAsStream("logo.png"))));
+            } catch (IOException e) {
+                throw new RuntimeException(e);
+            }
         }
 
     }
 
+    public MinecraftServerGui getGui(){
+        return this.gui;
+    }
+
     @Override
     public boolean hasGui() {
         return this.gui != null;
diff --git a/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java b/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
index 3b80ff779192cf3fb7a63b0fef507bf728746b86..51483c948b90d8fca845f33ec5f613a44b98039e 100644
--- a/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
+++ b/src/main/java/net/minecraft/server/gui/MinecraftServerGui.java
@@ -1,44 +1,35 @@
 package net.minecraft.server.gui;
 
+import me.dueris.canvas.CraftServerGui;
+import me.dueris.canvas.MojangServerGui;
 import com.google.common.collect.Lists;
-import com.mojang.logging.LogQueues;
 import com.mojang.logging.LogUtils;
-import java.awt.BorderLayout;
-import java.awt.Component;
-import java.awt.Dimension;
-import java.awt.Font;
-import java.awt.event.FocusAdapter;
-import java.awt.event.FocusEvent;
-import java.awt.event.WindowAdapter;
-import java.awt.event.WindowEvent;
-import java.util.Collection;
-import java.util.Objects;
+import java.awt.*;
+// Canvas start
+import java.awt.event.*;
+import java.io.*;
+import java.net.URISyntaxException;
+import java.nio.file.*;
+import java.util.*;
+// Canvas end
 import java.util.concurrent.atomic.AtomicBoolean;
-import javax.swing.JComponent;
-import javax.swing.JFrame;
-import javax.swing.JList;
-import javax.swing.JPanel;
-import javax.swing.JScrollBar;
-import javax.swing.JScrollPane;
-import javax.swing.JTextArea;
-import javax.swing.JTextField;
-import javax.swing.SwingUtilities;
-import javax.swing.UIManager;
+import javax.swing.*;
 import javax.swing.border.EtchedBorder;
 import javax.swing.border.TitledBorder;
-import javax.swing.text.AttributeSet;
-import javax.swing.text.BadLocationException;
 import javax.swing.text.Document;
 import net.minecraft.DefaultUncaughtExceptionHandler;
 import net.minecraft.server.dedicated.DedicatedServer;
+import org.bukkit.craftbukkit.Main;
+import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
+import org.bukkit.scheduler.BukkitRunnable;
+import org.purpurmc.purpur.gui.JColorTextPane;
 import org.slf4j.Logger;
 
-public class MinecraftServerGui extends JComponent {
-
-    private static final Font MONOSPACED = new Font("Monospaced", 0, 12);
+public class MinecraftServerGui extends CraftServerGui implements MojangServerGui {
+    private static Font FONT = new Font("Monospaced", 0, 12);
     private static final Logger LOGGER = LogUtils.getLogger();
-    private static final String TITLE = "Minecraft server";
-    private static final String SHUTDOWN_TITLE = "Minecraft server - shutting down!";
+    private static String TITLE = "Canvas Minecraft server"; // Canvas
+    private static String SHUTDOWN_TITLE = "Canvas Minecraft server - shutting down!"; // Canvas
     private final DedicatedServer server;
     private Thread logAppenderThread;
     private final Collection<Runnable> finalizers = Lists.newArrayList();
@@ -49,59 +40,102 @@ public class MinecraftServerGui extends JComponent {
     private int historyIndex = 0;
     // Purpur end
 
-    public static MinecraftServerGui showFrameFor(final DedicatedServer server) {
+    public static MinecraftServerGui showFrameFor(final DedicatedServer server, Image icon) {
         try {
             UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
         } catch (Exception exception) {
             ;
         }
+        // Canvas start
 
-        final JFrame jframe = new JFrame("Canvas Minecraft server"); // Purpur // Canvas
+        final JFrame jframeE = new JFrame(TITLE); // Purpur
+        jframe = jframeE;
         final MinecraftServerGui servergui = new MinecraftServerGui(server);
 
-        jframe.setDefaultCloseOperation(2);
-        jframe.add(servergui);
-        jframe.pack();
-        jframe.setLocationRelativeTo((Component) null);
-        jframe.setVisible(true);
-        jframe.setName("Canvas Minecraft server"); // Paper - Improve ServerGUI // Purpur // Canvas
+        jframeE.setDefaultCloseOperation(2);
+        jframeE.add(servergui);
+        jframeE.pack();
+        jframeE.setLocationRelativeTo((Component) null);
+        jframeE.setVisible(true);
+        jframeE.setName(TITLE); // Paper - Improve ServerGUI // Purpur
+
+        // Canvas end
 
         // Paper start - Improve ServerGUI
         try {
-            jframe.setIconImage(javax.imageio.ImageIO.read(Objects.requireNonNull(MinecraftServerGui.class.getClassLoader().getResourceAsStream("logo.png"))));
-        } catch (java.io.IOException ignore) {
+            jframeE.setIconImage(icon);
+        } catch (Exception ignore) {
         }
         // Paper end - Improve ServerGUI
 
-        jframe.addWindowListener(new WindowAdapter() {
+        jframeE.addWindowListener(new WindowAdapter() {
             public void windowClosing(WindowEvent windowevent) {
                 if (!servergui.isClosing.getAndSet(true)) {
-                    jframe.setTitle("Canvas Minecraft server - shutting down!"); // Purpur // Canvas
+                    jframeE.setTitle(SHUTDOWN_TITLE); // Purpur // Canvas
                     server.halt(true);
                     servergui.runFinalizers();
                 }
 
             }
         });
-        Objects.requireNonNull(jframe);
-        servergui.addFinalizer(jframe::dispose);
+        Objects.requireNonNull(jframeE);
+        servergui.addFinalizer(jframeE::dispose);
         servergui.start();
         return servergui;
     }
 
+    // Canvas start
+
+    public void removePanel(JComponent jComponent){
+        this.remove(jComponent);
+    }
+
+    public void setIconFromResources(String fileName, Class mainClass){
+        try {
+            setIcon(javax.imageio.ImageIO.read(Objects.requireNonNull(mainClass.getClassLoader().getResourceAsStream(fileName))));
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    // Canvas end
+
     private MinecraftServerGui(DedicatedServer server) {
         this.server = server;
         this.setPreferredSize(new Dimension(854, 480));
         this.setLayout(new BorderLayout());
 
+        // Canvas start
+        // try {
+        //     mainfile = new File(Main.class.getProtectionDomain().getCodeSource().getLocation().toURI());
+        // } catch (URISyntaxException e) {
+        //     throw new RuntimeException(e);
+        // }
+
+        try{
+            path = java.nio.file.Paths.get("logs" + File.separator + "latest.log").toString();
+            if(path != null) {LogUtils.getLogger().info("latest.log found! Starting patched mojang gui service...");}
+        } catch (Exception e){
+            LogUtils.getLogger().error("Unable to find latest.log! Attempted file location: &1".replace("&1", path));
+        }
+
         try {
-            this.add(this.buildOnboardingPanel(), "North"); // Paper - Add onboarding message for initial server start
-            this.add(this.buildChatPanel(), "Center");
-            this.add(this.buildInfoPanel(), "West");
+
+            chatPanel = this.buildChatPanel();
+            infoPanel = this.buildInfoPanel();
+
+            panels.put(chatPanel, "Center");
+            panels.put(infoPanel, "West");
+            for(JComponent jComponent : panels.keySet()){
+                this.add(jComponent, panels.get(jComponent));
+            }
+            // this.add(this.buildChatPanel(), "Center");
+            // this.add(this.buildInfoPanel(), "West");
+
         } catch (Exception exception) {
             MinecraftServerGui.LOGGER.error("Couldn't build server GUI", exception);
         }
-
+        // Canvas end
     }
 
     public void addFinalizer(Runnable task) {
@@ -121,38 +155,18 @@ public class MinecraftServerGui extends JComponent {
         return jpanel;
     }
 
-    // Paper start - Add onboarding message for initial server start
-    private JComponent buildOnboardingPanel() {
-        String onboardingLink = "https://docs.papermc.io/paper/next-steps";
-        JPanel jPanel = new JPanel();
-
-        javax.swing.JLabel jLabel = new javax.swing.JLabel("If you need help setting up your server you can visit:");
-        jLabel.setFont(MinecraftServerGui.MONOSPACED);
-
-        javax.swing.JLabel link = new javax.swing.JLabel("<html><u> " + onboardingLink + "</u></html>");
-        link.setFont(MinecraftServerGui.MONOSPACED);
-        link.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
-        link.addMouseListener(new java.awt.event.MouseAdapter() {
-            @Override
-            public void mouseClicked(final java.awt.event.MouseEvent e) {
-                try {
-                    java.awt.Desktop.getDesktop().browse(java.net.URI.create(onboardingLink));
-                } catch (java.io.IOException exception) {
-                    LOGGER.error("Unable to find a default browser. Please manually visit the website: " + onboardingLink, exception);
-                } catch (UnsupportedOperationException exception) {
-                    LOGGER.error("This platform does not support the BROWSE action. Please manually visit the website: " + onboardingLink, exception);
-                } catch (SecurityException exception) {
-                    LOGGER.error("This action has been denied by the security manager. Please manually visit the website: " + onboardingLink, exception);
-                }
-            }
-        });
+    // Canvas start - allow retrieval of the gui status component data
+    private com.destroystokyo.paper.gui.GuiStatsComponent statscomp;
 
-        jPanel.add(jLabel);
-        jPanel.add(link);
-
-        return jPanel;
+    public com.destroystokyo.paper.gui.GuiStatsComponent getGuiStatsComponent(){
+        if(statscomp == null){
+            org.bukkit.Bukkit.getLogger().severe("Unable to retrieve GuiStatusComponent due to it not being generated yet");
+            return null;
+        }else{
+            return this.statscomp;
+        }
     }
-    // Paper end - Add onboarding message for initial server start
+    // Canvas end
 
     private JComponent buildPlayerPanel() {
         JList<?> jlist = new PlayerListComponent(this.server);
@@ -168,7 +182,7 @@ public class MinecraftServerGui extends JComponent {
         JScrollPane jscrollpane = new JScrollPane(jtextarea, 22, 30);
 
         jtextarea.setEditable(false);
-        jtextarea.setFont(MinecraftServerGui.MONOSPACED);
+        jtextarea.setFont(MinecraftServerGui.FONT); // Canvas
         JTextField jtextfield = new JTextField();
 
         jtextfield.addActionListener((actionevent) -> {
@@ -187,51 +201,85 @@ public class MinecraftServerGui extends JComponent {
         // Purpur start
         jtextfield.getInputMap().put(javax.swing.KeyStroke.getKeyStroke("UP"), "up");
         jtextfield.getInputMap().put(javax.swing.KeyStroke.getKeyStroke("DOWN"), "down");
-        jtextfield.getActionMap().put("up", new javax.swing.AbstractAction() {
+        // Canvas start
+        jtextfield.getActionMap().put("up", new AbstractAction() {
             @Override
-            public void actionPerformed(java.awt.event.ActionEvent actionEvent) {
-                if (historyIndex < 0) {
-                    currentCommand = jtextfield.getText();
-                }
-                if (historyIndex < history.size() - 1) {
-                    jtextfield.setText(history.get(++historyIndex));
+            public void actionPerformed(ActionEvent actionEvent) {
+                if(history.size() > 0){
+                    if (historyIndex < history.size() - 1) {
+                        historyIndex++;
+                        jtextfield.setText(history.get(history.size() - historyIndex - 1));
+                    }
                 }
             }
         });
-        jtextfield.getActionMap().put("down", new javax.swing.AbstractAction() {
+
+        jtextfield.getActionMap().put("down", new AbstractAction() {
             @Override
-            public void actionPerformed(java.awt.event.ActionEvent actionEvent) {
-                if (historyIndex >= 0) {
-                    if (historyIndex == 0) {
-                        --historyIndex;
-                        jtextfield.setText(currentCommand);
+            public void actionPerformed(ActionEvent actionEvent) {
+                if (historyIndex > 0 && history.size() > 0) {
+                    historyIndex--;
+                    if (historyIndex >= 0) {
+                        jtextfield.setText(history.get(history.size() - historyIndex - 1));
                     } else {
-                        --historyIndex;
-                        jtextfield.setText(history.get(historyIndex));
+                        jtextfield.setText(currentCommand);
                     }
                 }
             }
         });
-        // Purpur end
+        // Purpur end -/- Canvas end
         jtextarea.addFocusListener(new FocusAdapter() {
             public void focusGained(FocusEvent focusevent) {}
         });
         jpanel.add(jscrollpane, "Center");
         jpanel.add(jtextfield, "South");
         jpanel.setBorder(new TitledBorder(new EtchedBorder(), "Log and chat"));
+        // Canvas start
+        jscrollpane.setAutoscrolls(true);
+        this.textPane = jtextarea;
+        this.scrollPane = jscrollpane;
         this.logAppenderThread = new Thread(() -> {
-            String s;
-
-            while ((s = LogQueues.getNextLogEvent("ServerGuiConsole")) != null) {
-                this.print(jtextarea, jscrollpane, s);
+            try {
+                java.util.List<String> allLines = Files.readAllLines(Path.of(path));
+                int starting = allLines.size();
+                if(starting != 0){
+                    for (String line : allLines) {
+                        print(jtextarea, jscrollpane, line);
+                    }
+                    while(true){
+                        if(starting < Files.readAllLines(Path.of(path)).size()){
+                            print(jtextarea, jscrollpane, Files.readAllLines(Path.of(path)).get(starting));
+                            starting++;
+                        }
+                        if(this.isClosing.get()){
+                            print(jtextarea, jscrollpane, "Server shutting down, Mojang logger halted.");
+                            break;
+                        }
+                    }
+                }
+            } catch (IOException e) {
+                e.printStackTrace();
             }
-
-        });
+        }, "LoggerGuiThread");
+        // Canvas end
         this.logAppenderThread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(MinecraftServerGui.LOGGER));
         this.logAppenderThread.setDaemon(true);
         return jpanel;
     }
 
+    // Canvas start
+    private JColorTextPane textPane;
+    private JScrollPane scrollPane;
+    private String path;
+
+    // private File mainfile;
+    // public File getJarLocation(){
+    //     return mainfile;
+    // }
+
+    // Canvas end
+
+    @Deprecated(forRemoval = true) // Canvas
     public void start() {
         this.logAppenderThread.start();
     }
@@ -240,6 +288,7 @@ public class MinecraftServerGui extends JComponent {
         if (!this.isClosing.getAndSet(true)) {
             this.runFinalizers();
         }
+        this.logAppenderThread.stop();
 
     }
 
@@ -248,45 +297,215 @@ public class MinecraftServerGui extends JComponent {
     }
 
     private static final java.util.regex.Pattern ANSI = java.util.regex.Pattern.compile("\\e\\[[\\d;]*[^\\d;]"); // CraftBukkit // Paper
-    public void print(org.purpurmc.purpur.gui.JColorTextPane textArea, JScrollPane scrollPane, String message) { // Purpur
-        if (!SwingUtilities.isEventDispatchThread()) {
-            SwingUtilities.invokeLater(() -> {
-                this.print(textArea, scrollPane, message);
-            });
-        } else {
-            Document document = textArea.getDocument();
-            JScrollBar jscrollbar = scrollPane.getVerticalScrollBar();
-            boolean flag = false;
-
-            if (scrollPane.getViewport().getView() == textArea) {
-                flag = (double) jscrollbar.getValue() + jscrollbar.getSize().getHeight() + (double) (MinecraftServerGui.MONOSPACED.getSize() * 4) > (double) jscrollbar.getMaximum();
-            }
-
-            /* // Purpur
-            try {
-                document.insertString(document.getLength(), MinecraftServerGui.ANSI.matcher(message).replaceAll(""), (AttributeSet) null); // CraftBukkit
-            } catch (BadLocationException badlocationexception) {
-                ;
-            }
-            */ // Purpur
-            textArea.append(message); // Purpur
-
-            if (flag) {
-                jscrollbar.setValue(Integer.MAX_VALUE);
-            }
+    public void print(org.purpurmc.purpur.gui.JColorTextPane textArea, JScrollPane scrollPane, String message) {
+        Document document = textArea.getDocument();
+        JScrollBar jscrollbar = scrollPane.getVerticalScrollBar();
+
+        if (scrollPane.getViewport().getView() == textArea) {
+            // Canvas start
+            // boolean atBottom = false;
+            // try{
+            //     if(jscrollbar.getMaximum() > 0){
+            //         atBottom = (double) jscrollbar.getValue() + jscrollbar.getSize().getHeight() + (double) (MinecraftServerGui.FONT.getSize() * 4) > (double) jscrollbar.getMaximum();
+            //     }
+            // } catch (ArrayIndexOutOfBoundsException ignored){
+            //     // ignore this
+            // }
+            // Canvas end
+        /* // Purpur
+        try {
+            document.insertString(document.getLength(), MinecraftServerGui.ANSI.matcher(message).replaceAll(""), (AttributeSet) null); // CraftBukkit
+        } catch (BadLocationException badlocationexception) {
+            ;
+        }
+        */ // Purpur
+            textArea.append(message.replaceAll("\u001B\\[[;\\d]*m", "") + "\n"); // Purpur // Canvas
 
+            /* if (atBottom) { // Canvas
+                try {
+                    textArea.setCaretPosition(textArea.getDocument().getLength());
+                    jscrollbar.setValue(Integer.MAX_VALUE);
+                } catch (Exception immaJustIgnoreThis){
+                    //ignore bc idk why this is erroring(also it does nothing)
+                }
+            } */ // Canvas
         }
     }
 
+
+    private static int max = 1000; // Canvas
+
     // Purpur start
     public static class CommandHistory extends java.util.LinkedList<String> {
         @Override
         public boolean add(String command) {
-            if (size() > 1000) {
+            if (size() > max) { // Canvas
                 remove();
             }
             return super.offerFirst(command);
         }
     }
     // Purpur end
+
+    // Canvas start
+
+    private JComponent chatPanel;
+    private JComponent infoPanel;
+
+    private Image icon;
+    private HashMap<JComponent, String> panels = new HashMap();
+
+    public void addPanel(JComponent jComponent, String constraints){
+        panels.put(jComponent, constraints);
+    }
+
+    private static JFrame jframe;
+
+    public JComponent getMojangChatPanel(){
+        if(chatPanel == null){
+            Exception e = new Exception("Chat panel is building or hasn't been built yet.");
+            e.printStackTrace();
+        }else{
+            return chatPanel;
+        }
+        return null;
+    }
+
+    public JComponent getMojangInfoPanel(){
+        if(infoPanel == null){
+            Exception e = new Exception("Info panel is building or hasn't been built yet.");
+            e.printStackTrace();
+        }else{
+            return infoPanel;
+        }
+        return null;
+    }
+
+    public void addDynamicTitle(boolean condition, String falseT, String trueT){
+        new BukkitRunnable() {
+            @Override
+            public void run() {
+                if(condition){
+                    setTitle(trueT);
+                }else{
+                    setTitle(falseT);
+                }
+            }
+        }.runTaskTimer(new MinecraftInternalPlugin(), 1, 10);
+    }
+
+    public Font getFont() {
+        return FONT;
+    }
+
+    @Override
+    public String toString() {
+        return "MinecraftServerGui{" +
+            "server=" + server +
+            ", logAppenderThread=" + logAppenderThread +
+            ", finalizers=" + finalizers +
+            ", isClosing=" + isClosing +
+            ", history=" + history +
+            ", currentCommand='" + currentCommand + '\'' +
+            ", historyIndex=" + historyIndex +
+            ", chatPanel=" + chatPanel +
+            ", infoPanel=" + infoPanel +
+            ", icon=" + icon +
+            ", panels=" + panels +
+            ", ui=" + ui +
+            ", listenerList=" + listenerList +
+            ", accessibleContext=" + accessibleContext +
+            '}';
+    }
+
+    public void setTitle(String title){
+        jframe.setTitle(title);
+    }
+
+    public Logger getLogger() {
+        return LOGGER;
+    }
+
+    public String getTitle(){
+        return TITLE;
+    }
+
+    public String getShutdownTitle(){
+        return SHUTDOWN_TITLE;
+    }
+
+    public void setIcon(Image icon){
+        jframe.setIconImage(icon);
+    }
+
+    public JFrame getJFrame(){
+        return jframe;
+    }
+
+    public void setVisible(boolean visible){
+        jframe.setVisible(visible);
+    }
+
+    public void addWindowListener(WindowListener windowListener){
+        jframe.addWindowListener(windowListener);
+    }
+
+    public AtomicBoolean getIsClosing() {
+        return isClosing;
+    }
+
+    public DedicatedServer getServer() {
+        return server;
+    }
+
+    public Collection<Runnable> getFinalizers() {
+        return finalizers;
+    }
+
+    public net.minecraft.server.gui.MinecraftServerGui.CommandHistory getHistory() {
+        return history;
+    }
+
+    public Image getIcon() {
+        return icon;
+    }
+
+    public int getHistoryIndex() {
+        return historyIndex;
+    }
+
+    public HashMap<JComponent, String> getPanels() {
+        return panels;
+    }
+
+    public void setCurrentCommand(final String currentCommand) {
+        this.currentCommand = currentCommand;
+    }
+
+    public String getCurrentCommand() {
+        return currentCommand;
+    }
+
+    public void setShutdownTitle(String title){
+        SHUTDOWN_TITLE = title;
+    }
+
+    public void setHistoryLimit(int max){
+        this.max = max;
+    }
+
+    public void updateFrame(){
+        jframe.update(jframe.getGraphics());
+    }
+
+    public Font getGuiFont() {
+        return FONT;
+    }
+
+    public void setFont(Font font){
+        FONT = font;
+    }
+
+    // Canvas end
+
 }
