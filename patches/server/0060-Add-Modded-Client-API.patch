From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sat, 25 Nov 2023 18:01:09 -0800
Subject: [PATCH] Add Modded Client API


diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index fed5ce4a1687d2ac0840ce740e8c530bd63391c2..f18895d2d57ab96e8a1f5ef996d7a94d620d7a50 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -64,13 +64,13 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     private static final float AVERAGE_PACKETS_SMOOTHING = 0.75F;
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final Marker ROOT_MARKER = MarkerFactory.getMarker("NETWORK");
-    public static final Marker PACKET_MARKER = (Marker) Util.make(MarkerFactory.getMarker("NETWORK_PACKETS"), (marker) -> {
+    public static final Marker PACKET_MARKER = Util.make(MarkerFactory.getMarker("NETWORK_PACKETS"), (marker) -> { // Canvas - remove not-needed cast
         marker.add(Connection.ROOT_MARKER);
     });
-    public static final Marker PACKET_RECEIVED_MARKER = (Marker) Util.make(MarkerFactory.getMarker("PACKET_RECEIVED"), (marker) -> {
+    public static final Marker PACKET_RECEIVED_MARKER = Util.make(MarkerFactory.getMarker("PACKET_RECEIVED"), (marker) -> { // Canvas - remove not-needed cast
         marker.add(Connection.PACKET_MARKER);
     });
-    public static final Marker PACKET_SENT_MARKER = (Marker) Util.make(MarkerFactory.getMarker("PACKET_SENT"), (marker) -> {
+    public static final Marker PACKET_SENT_MARKER = Util.make(MarkerFactory.getMarker("PACKET_SENT"), (marker) -> { // Canvas - remove not-needed cast
         marker.add(Connection.PACKET_MARKER);
     });
     public static final AttributeKey<ConnectionProtocol.CodecData<?>> ATTRIBUTE_SERVERBOUND_PROTOCOL = AttributeKey.valueOf("serverbound_protocol");
@@ -688,13 +688,13 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
 
         if (Epoll.isAvailable() && useEpoll) {
             oclass = EpollSocketChannel.class;
-            eventloopgroup = (EventLoopGroup) Connection.NETWORK_EPOLL_WORKER_GROUP.get();
+            eventloopgroup = Connection.NETWORK_EPOLL_WORKER_GROUP.get(); // Canvas - remove not-needed cast
         } else {
             oclass = NioSocketChannel.class;
-            eventloopgroup = (EventLoopGroup) Connection.NETWORK_WORKER_GROUP.get();
+            eventloopgroup = Connection.NETWORK_WORKER_GROUP.get(); // Canvas - remove not-needed cast
         }
 
-        return ((Bootstrap) ((Bootstrap) ((Bootstrap) (new Bootstrap()).group(eventloopgroup)).handler(new ChannelInitializer<Channel>() {
+        return ((((new Bootstrap()).group(eventloopgroup)).handler(new ChannelInitializer<Channel>() { // Canvas - remove not-needed cast
             protected void initChannel(Channel channel) {
                 Connection.setInitialProtocolAttributes(channel);
 
diff --git a/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
index 02e65b0bd212d46855baee48fab35dc95a88b43f..a55c8e460a2b93b209a511afbdaa8ae54f75284a 100644
--- a/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -186,8 +186,40 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
                 this.disconnect("Invalid custom payload!", org.bukkit.event.player.PlayerKickEvent.Cause.INVALID_PAYLOAD); // Paper - kick event cause
             }
         }
+        // Canvas start - modDetector
+        CraftPlayer player = this.getCraftPlayer();
 
+        boolean isFabric = false;
+        boolean isForge = false;
+
+        if(payload.toString(com.google.common.base.Charsets.UTF_8).toString().contains("fabric:container")){
+            // org.bukkit.Bukkit.getLogger().info(player.getName() + " is running Fabric"); // Debugging purposes only
+            isFabric = true;
+            setupClientModdedSettings(payload, player);
+        }
+        if(payload.toString(com.google.common.base.Charsets.UTF_8).toString().contains("forge:handshake")){
+            // org.bukkit.Bukkit.getLogger().info(player.getName() + " is running Forge"); // Debugging purposes only
+            isForge = true;
+            setupClientModdedSettings(payload, player);
+        }
+        player.isForge = isForge;
+        player.isFabric = isFabric;
+
+        /*
+        player.sendPluginMessage(new MinecraftInternalPlugin(), "forge:login", new byte[] {0});
+        player.sendPluginMessage(new MinecraftInternalPlugin(), "forge:handshake", new byte[] {0});
+        player.sendPluginMessage(new MinecraftInternalPlugin(), "forge:mods", new byte[] {0});
+         */
+        // Canvas end
+
+    }
+    // Canvas start
+
+    protected void setupClientModdedSettings(ByteBuf handshakePayload, CraftPlayer player){
+        player.clientHandshakeString = handshakePayload.toString(com.google.common.base.Charsets.UTF_8);
+        // System.out.println(player.getModdedClientHandshakeData()); // Debug purposes only
     }
+    // Canvas end
 
     public final boolean isDisconnected() {
         return (!this.player.joining && !this.connection.isConnected()) || this.processedDisconnect; // Paper - Fix duplication bugs
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 4e163d06754296fe9ac6ab05f2c79f9d811d6c1d..dee8b270905830456e2695bec3940a3b0bca6557 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -206,6 +206,23 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         this.firstPlayed = System.currentTimeMillis();
     }
+    // Canvas start - modDetector api
+    public boolean isForge;
+    public boolean isFabric;
+    public String clientHandshakeString = "No data found, or no data sent.";
+
+    public boolean isForgeClient(){
+        return isForge;
+    }
+
+    public boolean isFabricClient(){
+        return isFabric;
+    }
+
+    public String getModdedClientHandshakeData(){
+        return this.clientHandshakeString;
+    }
+    // Canvas end
 
     public GameProfile getProfile() {
         return this.getHandle().getGameProfile();
