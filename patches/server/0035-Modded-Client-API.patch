From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolf1909 <160778222+PurpleWolf1909@users.noreply.github.com>
Date: Tue, 30 Apr 2024 21:44:21 +0000
Subject: [PATCH] Modded Client API


diff --git a/src/main/java/net/minecraft/network/Connection.java b/src/main/java/net/minecraft/network/Connection.java
index a937bc49a85c0e565f0400163c1c9174891fb48d..f4e69e22a02f49cfc97f799bd257596394d026d8 100644
--- a/src/main/java/net/minecraft/network/Connection.java
+++ b/src/main/java/net/minecraft/network/Connection.java
@@ -72,13 +72,13 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
     private static final float AVERAGE_PACKETS_SMOOTHING = 0.75F;
     private static final Logger LOGGER = LogUtils.getLogger();
     public static final Marker ROOT_MARKER = MarkerFactory.getMarker("NETWORK");
-    public static final Marker PACKET_MARKER = (Marker) Util.make(MarkerFactory.getMarker("NETWORK_PACKETS"), (marker) -> {
+    public static final Marker PACKET_MARKER = Util.make(MarkerFactory.getMarker("NETWORK_PACKETS"), (marker) -> { // Canvas - remove not-needed cast
         marker.add(Connection.ROOT_MARKER);
     });
-    public static final Marker PACKET_RECEIVED_MARKER = (Marker) Util.make(MarkerFactory.getMarker("PACKET_RECEIVED"), (marker) -> {
+    public static final Marker PACKET_RECEIVED_MARKER = Util.make(MarkerFactory.getMarker("PACKET_RECEIVED"), (marker) -> { // Canvas - remove not-needed cast
         marker.add(Connection.PACKET_MARKER);
     });
-    public static final Marker PACKET_SENT_MARKER = (Marker) Util.make(MarkerFactory.getMarker("PACKET_SENT"), (marker) -> {
+    public static final Marker PACKET_SENT_MARKER = Util.make(MarkerFactory.getMarker("PACKET_SENT"), (marker) -> { // Canvas - remove not-needed cast
         marker.add(Connection.PACKET_MARKER);
     });
     public static final Supplier<NioEventLoopGroup> NETWORK_WORKER_GROUP = Suppliers.memoize(() -> {
@@ -735,13 +735,13 @@ public class Connection extends SimpleChannelInboundHandler<Packet<?>> {
 
         if (Epoll.isAvailable() && useEpoll) {
             oclass = EpollSocketChannel.class;
-            eventloopgroup = (EventLoopGroup) Connection.NETWORK_EPOLL_WORKER_GROUP.get();
+            eventloopgroup = Connection.NETWORK_EPOLL_WORKER_GROUP.get(); // Canvas - remove not-needed cast
         } else {
             oclass = NioSocketChannel.class;
-            eventloopgroup = (EventLoopGroup) Connection.NETWORK_WORKER_GROUP.get();
+            eventloopgroup = Connection.NETWORK_WORKER_GROUP.get(); // Canvas - remove not-needed cast
         }
 
-        return ((Bootstrap) ((Bootstrap) ((Bootstrap) (new Bootstrap()).group(eventloopgroup)).handler(new ChannelInitializer<Channel>() {
+        return ((((new Bootstrap()).group(eventloopgroup)).handler(new ChannelInitializer<Channel>() { // Canvas - remove not-needed cast
             protected void initChannel(Channel channel) {
                 try {
                     channel.config().setOption(ChannelOption.TCP_NODELAY, true);
diff --git a/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
index fac2fb82c381d245f77b7288c34920660ac2c3af..9e308e9c9008cd6c01f125d3cd2f77d6eb3d19de 100644
--- a/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerCommonPacketListenerImpl.java
@@ -219,8 +219,40 @@ public abstract class ServerCommonPacketListenerImpl implements ServerCommonPack
                 this.disconnect(Component.literal("Invalid custom payload!"), PlayerKickEvent.Cause.INVALID_PAYLOAD); // Paper - kick event cause
             }
         }
+        // Canvas start - modDetector
+        CraftPlayer player = this.getCraftPlayer();
 
+        boolean isFabric = false;
+        boolean isForge = false;
+
+        if(payload.toString(com.google.common.base.Charsets.UTF_8).toString().contains("fabric:container")){
+            // org.bukkit.Bukkit.getLogger().info(player.getName() + " is running Fabric"); // Debugging purposes only
+            isFabric = true;
+            setupClientModdedSettings(payload, player);
+        }
+        if(payload.toString(com.google.common.base.Charsets.UTF_8).toString().contains("forge:handshake")){
+            // org.bukkit.Bukkit.getLogger().info(player.getName() + " is running Forge"); // Debugging purposes only
+            isForge = true;
+            setupClientModdedSettings(payload, player);
+        }
+        player.isForge = isForge;
+        player.isFabric = isFabric;
+
+        /*
+        player.sendPluginMessage(new MinecraftInternalPlugin(), "forge:login", new byte[] {0});
+        player.sendPluginMessage(new MinecraftInternalPlugin(), "forge:handshake", new byte[] {0});
+        player.sendPluginMessage(new MinecraftInternalPlugin(), "forge:mods", new byte[] {0});
+         */
+        // Canvas end
+
+    }
+    // Canvas start
+
+    protected void setupClientModdedSettings(ByteBuf handshakePayload, CraftPlayer player){
+        player.clientHandshakeString = handshakePayload.toString(com.google.common.base.Charsets.UTF_8);
+        // System.out.println(player.getModdedClientHandshakeData()); // Debug purposes only
     }
+    // Canvas end
 
     public final boolean isDisconnected() {
         return (!this.player.joining && !this.connection.isConnected()) || this.processedDisconnect; // Paper - Fix duplication bugs
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 7f90d8c6367cc00cc1d3a3c6add435e6764c2cbb..a9f1f9f5794e70fc23a63e6381ea8e35f87a3f64 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -219,6 +219,23 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
 
         this.firstPlayed = System.currentTimeMillis();
     }
+    // Canvas start - modDetector api
+    public boolean isForge;
+    public boolean isFabric;
+    public String clientHandshakeString = "No data found, or no data sent.";
+
+    public boolean isForgeClient(){
+        return isForge;
+    }
+
+    public boolean isFabricClient(){
+        return isFabric;
+    }
+
+    public String getModdedClientHandshakeData(){
+        return this.clientHandshakeString;
+    }
+    // Canvas end
 
     public GameProfile getProfile() {
         return this.getHandle().getGameProfile();
