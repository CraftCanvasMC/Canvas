From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris MC <purplewolf.mc1@gmail.com>
Date: Thu, 9 Nov 2023 07:45:26 +0000
Subject: [PATCH] Change to not throw a runtime exception


diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 6d1d2db82c97b85bfa64aebbf4ead23cc4c3bd64..1acd210f1f853dcba1e3c9e8cb626129138b6477 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -40,7 +40,7 @@ public class Main {
         try {
             jarLocation = new File(org.bukkit.craftbukkit.Main.class.getProtectionDomain().getCodeSource().getLocation().toURI());
         } catch (URISyntaxException e) {
-            throw new RuntimeException(e);
+            Logger.getLogger("Canvas").info("Unable to locate CodeSource, Canvas may be unable to function in some areas");
         }
     }
     // Canvas end
@@ -49,12 +49,12 @@ public class Main {
         // Canvas start - ensure loading canvas correctly
         findMainInstance(); // Load the jarLocation instance
         boolean checker = checkBypassLauncher(args);
-        if(!CanvasConfig.bypassStartupCheck || checker){
-            try {
-                Class.forName("space.vectrix.ignite.applaunch.IgniteBootstrap");
-            } catch (ClassNotFoundException e) {
-                throw new RuntimeException("Unable to start Canvas, please use the Canvas Launcher");
-            }
+         if(!CanvasConfig.bypassStartupCheck || checker){
+             try {
+                 Class.forName("space.vectrix.ignite.applaunch.IgniteBootstrap");
+             } catch (ClassNotFoundException e) {
+                 throw new RuntimeException("Unable to start Canvas, please use the Canvas Launcher");
+             }
         }
         // Canvas end -/- Paper start
         final String warnWhenLegacyFormattingDetected = String.join(".", "net", "kyori", "adventure", "text", "warnWhenLegacyFormattingDetected");
@@ -77,7 +77,7 @@ public class Main {
                 this.acceptsAll(Main.asList("P", "plugins"), "Plugin directory to use")
                         .withRequiredArg()
                         .ofType(File.class)
-                        .defaultsTo(new File("plugins"))
+                        .defaultsTo(new File("plugins")) 
                         .describedAs("Plugin directory");
 
                 this.acceptsAll(Main.asList("h", "host", "server-ip"), "Host to listen on")
