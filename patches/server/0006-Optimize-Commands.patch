From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Fri, 29 Nov 2024 16:02:22 -0800
Subject: [PATCH] Optimize Commands


diff --git a/build.gradle.kts b/build.gradle.kts
index 7ec1873c4ea495a4ab5938946e2831c7658bbbb0..1f37cdac9fd577f6b11e4985cb31a7bfae74106f 100644
--- a/build.gradle.kts
+++ b/build.gradle.kts
@@ -87,6 +87,7 @@ dependencies {
     implementation("me.lucko:spark-api:0.1-20240720.200737-2")
     implementation("me.lucko:spark-paper:1.10.119-SNAPSHOT")
     // Paper end - spark
+    implementation("com.ibm.async:asyncutil:0.1.0") // Canvas
 }
 
 paperweight {
diff --git a/src/main/java/io/github/dueris/canvas/util/AsyncChunkLoadUtil.java b/src/main/java/io/github/dueris/canvas/util/AsyncChunkLoadUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..2cc7dad51e28361b2597fd64b3918b0fad2f8c70
--- /dev/null
+++ b/src/main/java/io/github/dueris/canvas/util/AsyncChunkLoadUtil.java
@@ -0,0 +1,76 @@
+package io.github.dueris.canvas.util;
+
+import com.ibm.asyncutil.locks.AsyncSemaphore;
+import com.ibm.asyncutil.locks.FairAsyncSemaphore;
+import net.minecraft.server.level.ChunkHolder;
+import net.minecraft.server.level.ChunkLevel;
+import net.minecraft.server.level.ChunkResult;
+import net.minecraft.server.level.DistanceManager;
+import net.minecraft.server.level.FullChunkStatus;
+import net.minecraft.server.level.ServerChunkCache;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.level.TicketType;
+import net.minecraft.util.Unit;
+import net.minecraft.world.level.ChunkPos;
+import net.minecraft.world.level.chunk.ChunkAccess;
+import net.minecraft.world.level.chunk.status.ChunkStatus;
+import java.util.concurrent.CompletableFuture;
+
+public class AsyncChunkLoadUtil {
+
+    private static final TicketType<Unit> ASYNC_CHUNK_LOAD = TicketType.create("vmp_async_chunk_load", (unit, unit2) -> 0);
+
+    private static final AsyncSemaphore SEMAPHORE = new FairAsyncSemaphore(6);
+
+    public static CompletableFuture<ChunkResult<ChunkAccess>> scheduleChunkLoad(ServerLevel world, ChunkPos pos) {
+        return scheduleChunkLoadWithRadius(world, pos, 3);
+    }
+
+    public static CompletableFuture<ChunkResult<ChunkAccess>> scheduleChunkLoadWithRadius(ServerLevel world, ChunkPos pos, int radius) {
+        return scheduleChunkLoadWithLevel(world, pos, 33 - radius);
+    }
+
+    public static CompletableFuture<ChunkResult<ChunkAccess>> scheduleChunkLoadToStatus(ServerLevel world, ChunkPos pos, ChunkStatus status) {
+        return scheduleChunkLoadWithLevel(world, pos, ChunkLevel.byStatus(status));
+    }
+
+    public static CompletableFuture<ChunkResult<ChunkAccess>> scheduleChunkLoadWithLevel(ServerLevel world, ChunkPos pos, int level) {
+        final ServerChunkCache chunkManager = world.getChunkSource();
+        final DistanceManager ticketManager = (chunkManager).distanceManager;
+
+        final CompletableFuture<ChunkResult<ChunkAccess>> future = SEMAPHORE.acquire()
+            .toCompletableFuture()
+            .thenComposeAsync(unused -> {
+                ticketManager.addTicket(ASYNC_CHUNK_LOAD, pos, level, Unit.INSTANCE);
+                (chunkManager).runDistanceManagerUpdates();
+                final ChunkHolder chunkHolder = (chunkManager.chunkMap).getUpdatingChunkIfPresent(pos.toLong());
+                if (chunkHolder == null) {
+                    throw new IllegalStateException("Chunk not there when requested");
+                }
+                final FullChunkStatus levelType = ChunkLevel.fullStatus(level);
+                return switch (levelType) {
+                    case INACCESSIBLE -> chunkHolder.scheduleChunkGenerationTask(ChunkLevel.generationStatus(level), world.getChunkSource().chunkMap);
+                    case FULL -> chunkHolder.getFullChunkFuture().thenApply(either -> (ChunkResult<ChunkAccess>) (Object) either);
+                    case BLOCK_TICKING -> chunkHolder.getTickingChunkFuture().thenApply(either -> (ChunkResult<ChunkAccess>) (Object) either);
+                    case ENTITY_TICKING -> chunkHolder.getEntityTickingChunkFuture().thenApply(either -> (ChunkResult<ChunkAccess>) (Object) either);
+                };
+            }, world.getServer());
+        future.whenCompleteAsync((unused, throwable) -> {
+            SEMAPHORE.release();
+            if (throwable != null) throwable.printStackTrace();
+            ticketManager.removeTicket(ASYNC_CHUNK_LOAD, pos, level, Unit.INSTANCE);
+        }, world.getServer());
+        return future;
+    }
+
+    private static final ThreadLocal<Boolean> isRespawnChunkLoadFinished = ThreadLocal.withInitial(() -> false);
+
+    public static void setIsRespawnChunkLoadFinished(boolean value) {
+        isRespawnChunkLoadFinished.set(value);
+    }
+
+    public static boolean isRespawnChunkLoadFinished() {
+        return isRespawnChunkLoadFinished.get();
+    }
+
+}
diff --git a/src/main/java/net/minecraft/server/ServerFunctionManager.java b/src/main/java/net/minecraft/server/ServerFunctionManager.java
index 0b348f701b61c7b7ed0190eff8b2d73f3a3d5c74..04da0badcc238827f0eafa5714213dd242b426b5 100644
--- a/src/main/java/net/minecraft/server/ServerFunctionManager.java
+++ b/src/main/java/net/minecraft/server/ServerFunctionManager.java
@@ -9,6 +9,7 @@ import java.util.List;
 import java.util.Objects;
 import java.util.Optional;
 import net.minecraft.commands.CommandResultCallback;
+import net.minecraft.commands.CommandSource;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.FunctionInstantiationException;
 import net.minecraft.commands.execution.ExecutionContext;
@@ -103,7 +104,7 @@ public class ServerFunctionManager {
     }
 
     public CommandSourceStack getGameLoopSender() {
-        return this.server.createCommandSourceStack().withPermission(2).withSuppressedOutput();
+        return this.server.createCommandSourceStack().withPermission(2).withSuppressedOutput().withSource(CommandSource.NULL); // Canvas
     }
 
     public Optional<CommandFunction<CommandSourceStack>> get(ResourceLocation id) {
diff --git a/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java b/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java
index 6f69e74d8662025c4148b36de7a35e789abcd1d2..f257bbbeb9b58c38cacd83a80bc9a30530e9851e 100644
--- a/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java
+++ b/src/main/java/net/minecraft/server/commands/SpreadPlayersCommand.java
@@ -11,30 +11,52 @@ import com.mojang.brigadier.builder.RequiredArgumentBuilder;
 import com.mojang.brigadier.exceptions.CommandSyntaxException;
 import com.mojang.brigadier.exceptions.Dynamic2CommandExceptionType;
 import com.mojang.brigadier.exceptions.Dynamic4CommandExceptionType;
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
+import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.function.Function;
+import io.github.dueris.canvas.util.AsyncChunkLoadUtil;
+import net.minecraft.commands.CommandSource;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.arguments.EntityArgument;
 import net.minecraft.commands.arguments.coordinates.Vec2Argument;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Direction;
 import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.ComponentUtils;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.TickTask;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.server.rcon.RconConsoleSource;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.BlockGetter;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.phys.Vec2;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Team;
 
 public class SpreadPlayersCommand {
+    // Canvas start
+    private static final ThreadPoolExecutor EXECUTOR = new ThreadPoolExecutor(
+        1, 1,
+        10L, TimeUnit.SECONDS,
+        new LinkedBlockingQueue<>(8)
+    );
+    // Canvas end
 
     private static final int MAX_ITERATION_COUNT = 10000;
     private static final Dynamic4CommandExceptionType ERROR_FAILED_TO_SPREAD_TEAMS = new Dynamic4CommandExceptionType((object, object1, object2, object3) -> {
@@ -60,6 +82,10 @@ public class SpreadPlayersCommand {
     }
 
     private static int spreadPlayers(CommandSourceStack source, Vec2 center, float spreadDistance, float maxRange, int maxY, boolean respectTeams, Collection<? extends Entity> players) throws CommandSyntaxException {
+        // Canvas start
+        final CommandSource output = source.source;
+        if (!(output instanceof Player) && !(output instanceof MinecraftServer) && !(output instanceof RconConsoleSource)) {
+        // Canvas end
         ServerLevel worldserver = source.getLevel();
         int j = worldserver.getMinY();
 
@@ -81,6 +107,47 @@ public class SpreadPlayersCommand {
             }, true);
             return acommandspreadplayers_a.length;
         }
+        // Canvas start
+        }
+        int retV = 0;
+        ServerLevel serverWorld = source.getLevel();
+        int i = serverWorld.getMinY();
+        if (maxY < i) {
+            throw ERROR_INVALID_MAX_HEIGHT.create(maxY, i);
+        } else {
+            RandomSource random = RandomSource.create();
+            double d = center.x - maxRange;
+            double e = center.y - maxRange;
+            double f = center.x + maxRange;
+            double g = center.y + maxRange;
+            SpreadPlayersCommand.Position[] piles = createInitialPositions(random, respectTeams ? getNumberOfTeams(players) : players.size(), d, e, f, g);
+            EXECUTOR.execute(() -> {
+                try {
+                    vmp$spread(center, spreadDistance, serverWorld, random, d, e, f, g, maxY, piles, respectTeams);
+                } catch (CommandSyntaxException ex) {
+                    source.getServer().schedule(new TickTask(0, () -> {
+                        source.sendFailure(ComponentUtils.fromMessage(ex.getRawMessage()));
+                    }));
+                } catch (Throwable t) {
+                    source.getServer().execute(() -> {
+                        source.sendFailure(Component.literal("An error occurred while spreading players, check console for details"));
+                        t.printStackTrace();
+                    });
+                }
+                double h = vmp$getMinDistance(players, serverWorld, piles, maxY, respectTeams);
+                source.getServer().execute(() -> {
+                    source.sendSuccess(
+                        () -> Component.translatable(
+                            "commands.spreadplayers.success." + (respectTeams ? "teams" : "entities"), piles.length, center.x, center.y, String.format(Locale.ROOT, "%.2f", h)
+                        ),
+                        true
+                    );
+                });
+            });
+            retV = piles.length;
+        }
+        return retV;
+        // Canvas end
     }
 
     private static int getNumberOfTeams(Collection<? extends Entity> entities) {
@@ -240,12 +307,179 @@ public class SpreadPlayersCommand {
         return acommandspreadplayers_a;
     }
 
+    // Canvas start
+    private static void vmp$spread(
+        Vec2 center,
+        double spreadDistance,
+        ServerLevel world,
+        RandomSource random,
+        double minX,
+        double minZ,
+        double maxX,
+        double maxZ,
+        int maxY,
+        SpreadPlayersCommand.Position[] piles,
+        boolean respectTeams
+    ) throws CommandSyntaxException {
+        boolean bl = true;
+        double d = Float.MAX_VALUE;
+
+        int i;
+        for (i = 0; i < 10000 && bl; ++i) {
+            bl = false;
+            d = Float.MAX_VALUE;
+
+            for (int j = 0; j < piles.length; ++j) {
+                SpreadPlayersCommand.Position pile = piles[j];
+                int k = 0;
+                SpreadPlayersCommand.Position pile2 = new SpreadPlayersCommand.Position();
+
+                for (int l = 0; l < piles.length; ++l) {
+                    if (j != l) {
+                        SpreadPlayersCommand.Position pile3 = piles[l];
+                        double e = (pile).dist(pile3);
+                        d = Math.min(e, d);
+                        if (e < spreadDistance) {
+                            ++k;
+                            (pile2).setX((pile2).getX() + ((pile3).getX() - (pile).getX()));
+                            (pile2).setZ((pile2).getZ() + ((pile3).getZ() - (pile).getZ()));
+                        }
+                    }
+                }
+
+                if (k > 0) {
+                    (pile2).setX((pile2).getX() / k);
+                    (pile2).setZ((pile2).getZ() / k);
+                    double f = (pile2).getLength();
+                    if (f > 0.0) {
+                        (pile2).normalize();
+                        pile.moveAway(pile2);
+                    } else {
+                        pile.randomize(random, minX, minZ, maxX, maxZ);
+                    }
+
+                    bl = true;
+                }
+
+                if (pile.clamp(minX, minZ, maxX, maxZ)) {
+                    bl = true;
+                }
+            }
+
+            if (!bl) {
+                List<CompletableFuture<Void>> futures = new ArrayList<>(piles.length);
+                AtomicBoolean result = new AtomicBoolean(false);
+                for (SpreadPlayersCommand.Position pile2 : piles) {
+                    ChunkPos pos = new ChunkPos(BlockPos.containing((pile2).getX(), 0.0, (pile2).getZ()));
+                    final CompletableFuture<Void> future =
+                        CompletableFuture.supplyAsync(() -> AsyncChunkLoadUtil.scheduleChunkLoad(world, pos), world.getServer())
+                            .thenCompose(Function.identity())
+                            .whenCompleteAsync((unused, throwable) -> {
+                                if (!pile2.isSafe(world, maxY)) {
+                                    pile2.randomize(random, minX, minZ, maxX, maxZ);
+                                    result.set(true);
+                                }
+                            }, world.getServer())
+                            .exceptionally(throwable -> null)
+                            .thenRun(() -> {
+                            });
+                    futures.add(future);
+                }
+                CompletableFuture.allOf(futures.toArray(CompletableFuture[]::new)).join();
+                bl = result.get();
+            }
+        }
+
+        if (d == Float.MAX_VALUE) {
+            d = 0.0;
+        }
+
+        if (i >= 10000) {
+            if (respectTeams) {
+                throw ERROR_FAILED_TO_SPREAD_TEAMS.create(piles.length, center.x, center.y, String.format(Locale.ROOT, "%.2f", d));
+            } else {
+                throw ERROR_FAILED_TO_SPREAD_ENTITIES.create(piles.length, center.x, center.y, String.format(Locale.ROOT, "%.2f", d));
+            }
+        }
+    }
+
+    private static double vmp$getMinDistance(
+        Collection<? extends Entity> entities, ServerLevel world, SpreadPlayersCommand.Position[] piles, int maxY, boolean respectTeams
+    ) {
+        double d = 0.0;
+        int i = 0;
+        Map<Team, SpreadPlayersCommand.Position> map = Maps.newHashMap();
+
+        List<CompletableFuture<Void>> futures = new ArrayList<>(piles.length);
+
+        for (Entity entity : entities) {
+            if (!entity.isAlive()) continue;
+            SpreadPlayersCommand.Position pile;
+            if (respectTeams) {
+                Team abstractTeam = entity instanceof Player ? entity.getTeam() : null;
+                if (!map.containsKey(abstractTeam)) {
+                    map.put(abstractTeam, piles[i++]);
+                }
+
+                pile = map.get(abstractTeam);
+            } else {
+                pile = piles[i++];
+            }
+
+            ChunkPos pos = new ChunkPos(BlockPos.containing((pile).getX(), 0.0, (pile).getZ()));
+            final CompletableFuture<Void> future =
+                CompletableFuture.supplyAsync(() -> AsyncChunkLoadUtil.scheduleChunkLoad(world, pos), world.getServer())
+                    .thenCompose(Function.identity())
+                    .whenCompleteAsync((unused, throwable) -> {
+                        entity.teleportTo(world, Math.floor((pile).getX()) + 0.5, pile.getSpawnY(world, maxY), Math.floor((pile).getZ()) + 0.5, Set.of(), entity.getYRot(), entity.getXRot(), true);
+                    }, world.getServer())
+                    .exceptionally(throwable -> null)
+                    .thenRun(() -> {
+                    });
+            futures.add(future);
+
+            double e = Double.MAX_VALUE;
+
+            for (SpreadPlayersCommand.Position pile2 : piles) {
+                if (pile != pile2) {
+                    double f = (pile).dist(pile2);
+                    e = Math.min(f, e);
+                }
+            }
+
+            d += e;
+        }
+
+        CompletableFuture.allOf(futures.toArray(CompletableFuture[]::new)).join();
+
+        return entities.size() < 2 ? 0.0 : d / (double) entities.size();
+    }
+
+    // Canvas end
     private static class Position {
 
         double x;
         double z;
 
         Position() {}
+        // Canvas start
+
+        public double getX() {
+            return x;
+        }
+
+        public double getZ() {
+            return z;
+        }
+
+        public void setX(final double x) {
+            this.x = x;
+        }
+
+        public void setZ(final double z) {
+            this.z = z;
+        }
+        // Canvas end
 
         double dist(SpreadPlayersCommand.Position other) {
             double d0 = this.x - other.x;
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 4c477ab3529a423cc8fb752c58e3b702c19bc2b6..d80a27e81e1666a4d4390fd9c673a3170390f062 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -309,7 +309,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
     }
 
     @Nullable
-    protected ChunkHolder getUpdatingChunkIfPresent(long pos) {
+    public ChunkHolder getUpdatingChunkIfPresent(long pos) { // Canvas - protected -> public
         // Paper start - rewrite chunk system
         final ca.spottedleaf.moonrise.patches.chunk_system.scheduling.NewChunkHolder holder = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getChunkTaskScheduler().chunkHolderManager.getChunkHolder(pos);
         return holder == null ? null : holder.vanillaChunkHolder;
diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index d723228eee3d38f115d5e8645a09b4226bf1491c..9f533f3ecc164dd4ea9d9efd991c6b0e8674b7c1 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -56,7 +56,7 @@ import org.slf4j.Logger;
 public class ServerChunkCache extends ChunkSource implements ca.spottedleaf.moonrise.patches.chunk_system.world.ChunkSystemServerChunkCache { // Paper - rewrite chunk system
 
     private static final Logger LOGGER = LogUtils.getLogger();
-    private final DistanceManager distanceManager;
+    public final DistanceManager distanceManager; // Canvas - private -> public
     private final ServerLevel level;
     public Thread mainThread; // Canvas - mutable
     final ThreadedLevelLightEngine lightEngine;
