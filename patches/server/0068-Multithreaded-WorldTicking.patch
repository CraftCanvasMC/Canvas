From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <159172167+PurpleWolfMC@users.noreply.github.com>
Date: Wed, 7 Feb 2024 08:56:11 +0000
Subject: [PATCH] Multithreaded WorldTicking


diff --git a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
index 7ce9ebba8ce304d1f3f21d4f15ee5f3560d7700b..be571b949bf8d3355a25393f96066d6db6b786db 100644
--- a/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
+++ b/src/main/java/io/papermc/paper/plugin/manager/PaperEventManager.java
@@ -38,7 +38,7 @@ class PaperEventManager {
     public void callEvent(@NotNull Event event) {
         if (event.isAsynchronous() && this.server.isPrimaryThread()) {
             throw new IllegalStateException(event.getEventName() + " may only be triggered asynchronously.");
-        } else if (!event.isAsynchronous() && !this.server.isPrimaryThread() && !this.server.isStopping()) {
+        } else if (!event.isAsynchronous() && !this.server.isPrimaryThread() && !this.server.isStopping() && !Thread.currentThread().getName().startsWith("WorldTicker")) { // Canvas - multithreaded world ticking
             throw new IllegalStateException(event.getEventName() + " may only be triggered synchronously.");
         }
 
diff --git a/src/main/java/me/dueris/canvas/CanvasConfig.java b/src/main/java/me/dueris/canvas/CanvasConfig.java
index 01c269f1763ad7fbd5d50efe0c88b3c36dd7b61d..e7b5fb72cc4a2105442322a850f1105a5f94873b 100644
--- a/src/main/java/me/dueris/canvas/CanvasConfig.java
+++ b/src/main/java/me/dueris/canvas/CanvasConfig.java
@@ -178,6 +178,8 @@ public class CanvasConfig {
     public static boolean asyncPathfinding;
     public static int asyncPathfindingMaxThreads;
     public static int asyncPathfindingKeepalive;
+    public static int maxTickerThreads = 3;
+    public static boolean autoStartSpark = true;
 
     private static void mixin(){
         disableMixin = getBoolean("mixin.disableMixins", disableMixin);
@@ -192,6 +194,8 @@ public class CanvasConfig {
         wantChunky = getBoolean("plugins.use_provided_chunky", wantChunky);
     }
     private static void optimizations(){
+        maxTickerThreads = getInt("optimizations.maxTickerThreads", maxTickerThreads);
+        autoStartSpark = getBoolean("optimizations.autoStartSpark", autoStartSpark);
         asyncPathfinding = getBoolean("optimizations.async-pathfinding.enable", true);
         asyncPathfindingMaxThreads = getInt("optimizations.async-pathfinding.max-threads", 0);
         asyncPathfindingKeepalive = getInt("optimizations.async-pathfinding.keepalive", 60);
diff --git a/src/main/java/me/dueris/canvas/thread/NamedTickThreadFactory.java b/src/main/java/me/dueris/canvas/thread/NamedTickThreadFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..65a1d87f48d8d9bdaea763bd14136591a9938bf9
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/thread/NamedTickThreadFactory.java
@@ -0,0 +1,63 @@
+package me.dueris.canvas.thread;
+
+import com.mojang.logging.LogUtils;
+import io.papermc.paper.util.TickThread;
+import org.slf4j.Logger;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class NamedTickThreadFactory implements ThreadFactory { // Extends the functionality of the NamedThreadFactory by vanilla
+    private static final Logger LOGGER = LogUtils.getLogger();
+    private final ThreadGroup group;
+    private final AtomicInteger threadNumber = new AtomicInteger(1);
+    private final String namePrefix;
+    private int priority;
+    private boolean daemon;
+
+    public NamedTickThreadFactory(String name) {
+        SecurityManager securityManager = System.getSecurityManager();
+        this.group = securityManager != null ? securityManager.getThreadGroup() : Thread.currentThread().getThreadGroup();
+        this.namePrefix = name + "-";
+        this.priority = 5;
+        this.daemon = false;
+    }
+
+    public NamedTickThreadFactory(String name, int priority){
+        SecurityManager securityManager = System.getSecurityManager();
+        this.group = securityManager != null ? securityManager.getThreadGroup() : Thread.currentThread().getThreadGroup();
+        this.namePrefix = name + "-";
+        this.priority = priority;
+        this.daemon = false;
+    }
+
+    public NamedTickThreadFactory(String name, int priority, String threadName){
+        SecurityManager securityManager = System.getSecurityManager();
+        this.group = securityManager != null ? securityManager.getThreadGroup() : Thread.currentThread().getThreadGroup();
+        this.namePrefix = name + "-";
+        this.priority = priority;
+        this.daemon = false;
+    }
+
+    public NamedTickThreadFactory(String name, int priority, String threadName, boolean daemon){
+        SecurityManager securityManager = System.getSecurityManager();
+        this.group = securityManager != null ? securityManager.getThreadGroup() : Thread.currentThread().getThreadGroup();
+        this.namePrefix = name + "-";
+        this.priority = priority;
+        this.daemon = daemon;
+    }
+
+    @Override
+    public Thread newThread(Runnable runnable) {
+        TickThread thread = new TickThread(runnable, namePrefix + this.threadNumber.getAndIncrement());
+        thread.setDaemon(daemon);
+        thread.setUncaughtExceptionHandler((threadx, throwable) -> {
+            LOGGER.error("Caught exception in thread {} from {}", threadx, runnable);
+            LOGGER.error("", throwable);
+        });
+        if (thread.getPriority() != priority) {
+            thread.setPriority(priority);
+        }
+
+        return thread;
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index ddaf5a74f262fd781fe50548144c748fe0179677..6ea628bb5bd84b52360856fb590319f90263187e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -39,13 +39,17 @@ import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.Map.Entry;
+import java.util.NoSuchElementException;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
 import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ExecutionException;
 import java.util.concurrent.Executor;
+import java.util.concurrent.Executors;
 import java.util.concurrent.RejectedExecutionException;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.BooleanSupplier;
 import java.util.function.Consumer;
@@ -55,6 +59,7 @@ import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
 import me.dueris.canvas.CanvasConfig;
+import me.dueris.canvas.thread.NamedTickThreadFactory;
 import net.minecraft.CrashReport;
 import net.minecraft.ReportedException;
 import net.minecraft.SharedConstants;
@@ -239,6 +244,11 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private int port;
     private final LayeredRegistryAccess<RegistryLayer> registries;
     private Map<ResourceKey<Level>, ServerLevel> levels;
+    // Canvas start - Multithreaded WorldTicking
+    public static java.util.concurrent.ExecutorService worldTickerPool;
+    public int tickerThreadMax = setupThreadCount();
+    private ThreadGroup worldThreadGroup = null;
+    // Canvas end
     private PlayerList playerList;
     private volatile boolean running;
     private volatile boolean isRestarting = false; // Paper - flag to signify we're attempting to restart
@@ -340,6 +350,14 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         return s0;
     }
 
+    // Canvas start
+
+    public int setupThreadCount(){
+        int avalibleJVMThreads = Runtime.getRuntime().availableProcessors() * 2;
+        return avalibleJVMThreads < 3 ? avalibleJVMThreads : avalibleJVMThreads >= me.dueris.canvas.CanvasConfig.maxTickerThreads ? me.dueris.canvas.CanvasConfig.maxTickerThreads : avalibleJVMThreads;
+    }
+    // Canvas end
+
     public MinecraftServer(OptionSet options, WorldLoader.DataLoadContext worldLoader, Thread thread, LevelStorageSource.LevelStorageAccess convertable_conversionsession, PackRepository resourcepackrepository, WorldStem worldstem, Proxy proxy, DataFixer datafixer, Services services, ChunkProgressListenerFactory worldloadlistenerfactory) {
         super("Server");
         SERVER = this; // Paper - better singleton
@@ -353,6 +371,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.random = RandomSource.create();
         this.port = -1;
         this.levels = Maps.newLinkedHashMap();
+        this.worldTickerPool = Executors.newFixedThreadPool(this.tickerThreadMax, new NamedTickThreadFactory("WorldTicker")); // Canvas - Multithreaded WorldTicking
         this.running = true;
         this.ticksUntilAutosave = 6000;
         this.tickTimesNanos = new long[100];
@@ -1074,6 +1093,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         LOGGER.info("Closing Thread Pool");
         Util.shutdownExecutors(); // Paper
         LOGGER.info("Closing Server");
+        MinecraftServer.worldTickerPool.shutdown(); // Canvas - Multithreaded WorldTicking -- shutdown executor
         try {
             net.minecrell.terminalconsole.TerminalConsoleAppender.close(); // Paper - Use TerminalConsoleAppender
         } catch (Exception e) {
@@ -1761,7 +1781,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         //MinecraftTimings.timeUpdateTimer.startTiming(); // Spigot // Paper // Purpur
         // Send time updates to everyone, it will get the right time from the world the player is in.
         // Paper start - Perf: Optimize time updates
-        for (final ServerLevel level : this.getAllLevels()) {
+        /* for (final ServerLevel level : this.getAllLevels()) { // Canvas - Multithreaded WorldTicking
             final boolean doDaylight = level.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT);
             final long dayTime = level.getDayTime();
             long worldTime = level.getGameTime();
@@ -1776,56 +1796,71 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                     new ClientboundSetTimePacket(worldTime, playerTime, doDaylight);
                 entityplayer.connection.send(packet); // Add support for per player time
             }
-        }
+        } */ // Canvas - Multithreaded WorldTicking
         // Paper end - Perf: Optimize time updates
         //MinecraftTimings.timeUpdateTimer.stopTiming(); // Spigot // Paper // Purpur
 
         this.isIteratingOverLevels = true; // Paper - Throw exception on world create while being ticked
         net.minecraft.network.FriendlyByteBuf.hasItemSerializeEvent = org.purpurmc.purpur.event.packet.NetworkItemSerializeEvent.getHandlerList().getRegisteredListeners().length > 0; // Purpur
-        Iterator iterator = this.getAllLevels().iterator(); // Paper - Throw exception on world create while being ticked; move down
-        while (iterator.hasNext()) {
-            ServerLevel worldserver = (ServerLevel) iterator.next();
-            worldserver.hasPhysicsEvent = org.bukkit.event.block.BlockPhysicsEvent.getHandlerList().getRegisteredListeners().length > 0; // Paper - BlockPhysicsEvent
-            worldserver.hasEntityMoveEvent = io.papermc.paper.event.entity.EntityMoveEvent.getHandlerList().getRegisteredListeners().length > 0; // Paper - Add EntityMoveEvent
-            net.minecraft.world.level.block.entity.HopperBlockEntity.skipHopperEvents = worldserver.paperConfig().hopper.disableMoveEvent || org.bukkit.event.inventory.InventoryMoveItemEvent.getHandlerList().getRegisteredListeners().length == 0; // Paper - Perf: Optimize Hoppers
-            worldserver.updateLagCompensationTick(); // Paper - lag compensation
-            worldserver.hasRidableMoveEvent = org.purpurmc.purpur.event.entity.RidableMoveEvent.getHandlerList().getRegisteredListeners().length > 0; // Purpur
-
-            /*this.profiler.push(() -> { // Purpur
-                return worldserver + " " + worldserver.dimension().location();
-            });*/ // Purpur
-            /* Drop global time updates
-            if (this.tickCount % 20 == 0) {
-                //this.profiler.push("timeSync"); // Purpur
-                this.synchronizeTime(worldserver);
-                //this.profiler.pop(); // Purpur
-            }
-            // CraftBukkit end */
-
+        // Canvas start - Multithreaded WorldTicking -- rewrite world ticker
+        final Iterator iterator = this.getAllLevels().iterator();
+        final AtomicBoolean finishedTicking = new AtomicBoolean(false);
+        List<Runnable> worldTicks = new ArrayList();
+        List<Runnable> chunkTicks = new ArrayList();
+        while (iterator.hasNext() && !finishedTicking.get()){
             //this.profiler.push("tick"); // Purpur
-
+            ServerLevel worldServer = (ServerLevel) iterator.next();
             try {
+                if(worldServer == null){
+                    finishedTicking.set(true);
+                    break;
+                }
+
+                Runnable tick = worldServer.tick(shouldKeepTicking, tickCount);
+                chunkTicks.add(() -> {
+                    worldServer.getChunkSource().tick(shouldKeepTicking, true);
+                    executeMidTickTasks();
+                });
                 //worldserver.timings.doTick.startTiming(); // Spigot // Purpur
-                worldserver.tick(shouldKeepTicking);
+                //worldserver.tick(shouldKeepTicking); // Canvas
                 // Paper start
-                for (final io.papermc.paper.chunk.SingleThreadChunkRegionManager regionManager : worldserver.getChunkSource().chunkMap.regionManagers) {
+                /* for (final io.papermc.paper.chunk.SingleThreadChunkRegionManager regionManager : worldserver.getChunkSource().chunkMap.regionManagers) { // Canvas
                     regionManager.recalculateRegions();
-                }
+                } */ // Canvas
                 // Paper end
                 //worldserver.timings.doTick.stopTiming(); // Spigot // Purpur
-            } catch (Throwable throwable) {
+                if(tick != null){
+                    worldTicks.add(tick);
+                }
+                worldServer.explosionDensityCache.clear();
+            } catch (Exception throwable) {
+                if(throwable instanceof NoSuchElementException) return;
                 CrashReport crashreport = CrashReport.forThrowable(throwable, "Exception ticking world");
 
-                worldserver.fillReportDetails(crashreport);
+                worldServer.fillReportDetails(crashreport);
                 throw new ReportedException(crashreport);
             }
 
             //this.profiler.pop(); // Purpur
             //this.profiler.pop(); // Purpur
-            worldserver.explosionDensityCache.clear(); // Paper - Optimize explosions
+            worldServer.explosionDensityCache.clear(); // Paper - Optimize explosions
         }
         this.isIteratingOverLevels = false; // Paper - Throw exception on world create while being ticked
 
+        List<CompletableFuture<Void>> futureTicks = new ArrayList();
+        for(Runnable tick : worldTicks){
+            futureTicks.add(CompletableFuture.runAsync(tick, this.worldTickerPool));
+        }
+        CompletableFuture<Void> allTicks = CompletableFuture.allOf(futureTicks.toArray(new CompletableFuture[0]));
+        try {
+            allTicks.get();
+            for(Runnable chunkTick : chunkTicks){
+                chunkTick.run();
+            }
+        } catch (InterruptedException | ExecutionException e) {
+            e.printStackTrace();
+        }
+        // Canvas end
         //this.profiler.popPush("connection"); // Purpur
         // MinecraftTimings.connectionTimer.startTiming(); // Spigot // Paper // Purpur
         this.getConnection().tick();
@@ -1847,10 +1882,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         //MinecraftTimings.tickablesTimer.stopTiming(); // Spigot // Paper // Purpur
 
         //this.profiler.popPush("send chunks"); // Purpur
-        iterator = this.playerList.getPlayers().iterator();
+        Iterator playerIterator = this.playerList.getPlayers().iterator(); // Canvas
 
-        while (iterator.hasNext()) {
-            ServerPlayer entityplayer = (ServerPlayer) iterator.next();
+        while (playerIterator.hasNext()) { // Canvas
+            ServerPlayer entityplayer = (ServerPlayer) playerIterator.next(); // Canvas
 
             entityplayer.connection.chunkSender.sendNextChunks(entityplayer);
             entityplayer.connection.resumeFlushing();
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 8c1fa761e30f723683f7509053fa8d4c4a7f49c0..3cbdbd86b9769fc3f18dd296c436848bea99732f 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -30,6 +30,7 @@ import java.util.Objects;
 import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
+import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.Executor;
 import java.util.function.BooleanSupplier;
 import java.util.function.Function;
@@ -60,6 +61,7 @@ import net.minecraft.network.protocol.game.ClientboundExplodePacket;
 import net.minecraft.network.protocol.game.ClientboundLevelEventPacket;
 import net.minecraft.network.protocol.game.ClientboundLevelParticlesPacket;
 import net.minecraft.network.protocol.game.ClientboundSetDefaultSpawnPositionPacket;
+import net.minecraft.network.protocol.game.ClientboundSetTimePacket;
 import net.minecraft.network.protocol.game.ClientboundSoundEntityPacket;
 import net.minecraft.network.protocol.game.ClientboundSoundPacket;
 import net.minecraft.network.protocol.game.DebugPackets;
@@ -227,6 +229,15 @@ public class ServerLevel extends Level implements WorldGenLevel {
     public boolean hasEntityMoveEvent; // Paper - Add EntityMoveEvent
     private final alternate.current.wire.WireHandler wireHandler = new alternate.current.wire.WireHandler(this); // Paper - optimize redstone (Alternate Current)
     public boolean hasRidableMoveEvent = false; // Purpur
+    // Canvas start - Multithreaded WorldTicking
+    public Thread currentTickingThread = null;
+
+    public static Throwable getAddToWorldStackTrace(Entity entity) {
+        final Throwable thr = new Throwable(entity + " Added to world at " + new java.util.Date());
+        io.papermc.paper.util.StacktraceDeobfuscator.INSTANCE.deobfuscateThrowable(thr);
+        return thr;
+    }
+    // Canvas end
 
     public LevelChunk getChunkIfLoaded(int x, int z) {
         return this.chunkSource.getChunkAtIfLoadedImmediately(x, z); // Paper - Use getChunkIfLoadedImmediately
@@ -823,10 +834,33 @@ public class ServerLevel extends Level implements WorldGenLevel {
         return this.structureManager;
     }
 
-    public void tick(BooleanSupplier shouldKeepTicking) {
+    public Runnable tick(BooleanSupplier shouldKeepTicking, int tickCount) { // Canvas - Multithreaded WorldTicking
+        // Canvas start - Multithreaded WorldTicking
+        return () -> {
+            this.handlingTick = true;
+            if(this.currentTickingThread != Thread.currentThread()) {
+                this.currentTickingThread = Thread.currentThread();
+            }
+            // Moved from MinecraftSever
+            final boolean doDaylight = this.getGameRules().getBoolean(GameRules.RULE_DAYLIGHT); // Canvas
+            final long dayTime = this.getDayTime(); // Canvas
+            long worldTime = this.getGameTime(); // Canvas
+            final ClientboundSetTimePacket worldPacket = new ClientboundSetTimePacket(worldTime, dayTime, doDaylight);
+            for (Player entityhuman : this.players()) {
+                if (!(entityhuman instanceof ServerPlayer) || (!this.isForceTime() && (tickCount + entityhuman.getId()) % 20 != 0)) { // Purpur // Canvas
+                    continue;
+                }
+                ServerPlayer entityplayer = (ServerPlayer) entityhuman;
+                long playerTime = entityplayer.getPlayerTime();
+                ClientboundSetTimePacket packet = (playerTime == dayTime) ? worldPacket :
+                    new ClientboundSetTimePacket(worldTime, playerTime, doDaylight);
+                entityplayer.connection.send(packet); // Add support for per player time
+            }
+            // End move
+        // Canvas end
         //ProfilerFiller gameprofilerfiller = this.getProfiler(); // Purpur
 
-        this.handlingTick = true;
+        // this.handlingTick = true; // Canvas - move up
         TickRateManager tickratemanager = this.tickRateManager();
         boolean flag = tickratemanager.runsNormally();
 
@@ -886,7 +920,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
         //gameprofilerfiller.popPush("chunkSource"); // Purpur
         //this.timings.chunkProviderTick.startTiming(); // Paper - timings // Purpur
-        this.getChunkSource().tick(shouldKeepTicking, true);
+        // this.getChunkSource().tick(shouldKeepTicking, true); // Canvas - Multithreaded WorldTicking
         //this.timings.chunkProviderTick.stopTiming(); // Paper - timings // Purpur
         //gameprofilerfiller.popPush("blockEvents"); // Purpur
         if (flag) {
@@ -921,6 +955,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                         entity.discard();
                     } else if (!tickratemanager.isEntityFrozen(entity)) {
                         //gameprofilerfiller.push("checkDespawn"); // Purpur
+                        if (entity.isRemoved()) return; // Canvas - if we despawned, dont tick it!
                         entity.checkDespawn();
                         //gameprofilerfiller.pop(); // Purpur
                         if (true || this.chunkSource.chunkMap.getDistanceManager().inEntityTickingRange(entity.chunkPosition().toLong())) { // Paper - now always true if in the ticking list
@@ -938,7 +973,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
                         // Pufferfish start - copied from this.guardEntityTick
                         try {
                             this.tickNonPassenger(entity); // Pufferfish - changed
-                            MinecraftServer.getServer().executeMidTickTasks(); // Tuinity - execute chunk tasks mid tick
+                            // MinecraftServer.getServer().executeMidTickTasks(); // Tuinity - execute chunk tasks mid tick // Canvas - Multithreaded WorldTicking
                         } catch (Throwable throwable) {
                             if (throwable instanceof ThreadDeath) throw throwable; // Paper
                             // Paper start - Prevent tile entity and entity crashes
@@ -962,6 +997,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
 
         //gameprofilerfiller.push("entityManagement"); // Purpur
         //this.entityManager.tick(); // Paper - rewrite chunk system
+        }; // Canvas - Multithreaded WorldTicking
     }
 
     @Override
@@ -1442,7 +1478,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         if (fluid1.is(fluid)) {
             fluid1.tick(this, pos);
         }
-        MinecraftServer.getServer().executeMidTickTasks(); // Paper - exec chunk tasks during world tick
+        // MinecraftServer.getServer().executeMidTickTasks(); // Paper - exec chunk tasks during world tick // Canvas - Multithreaded WorldTicking
 
     }
 
@@ -1452,7 +1488,7 @@ public class ServerLevel extends Level implements WorldGenLevel {
         if (iblockdata.is(block)) {
             iblockdata.tick(this, pos, this.random);
         }
-        MinecraftServer.getServer().executeMidTickTasks(); // Paper - exec chunk tasks during world tick
+        // MinecraftServer.getServer().executeMidTickTasks(); // Paper - exec chunk tasks during world tick // Canvas - Multithreaded WorldTicking
 
     }
 
diff --git a/src/main/java/net/minecraft/util/ThreadingDetector.java b/src/main/java/net/minecraft/util/ThreadingDetector.java
index b6e98aaebe57453b8eceaa633a989aa24409830f..d97130f8c47b2e9784c4afe73bf40cd85270088f 100644
--- a/src/main/java/net/minecraft/util/ThreadingDetector.java
+++ b/src/main/java/net/minecraft/util/ThreadingDetector.java
@@ -33,19 +33,23 @@ public class ThreadingDetector {
 
         try {
             this.stackTraceLock.lock();
-            if (!this.lock.tryAcquire()) {
-                this.threadThatFailedToAcquire = Thread.currentThread();
-                bl = true;
-                this.stackTraceLock.unlock();
+            // Canvas start
+            if(!(Thread.currentThread() instanceof io.papermc.paper.util.TickThread)){
+                if (!this.lock.tryAcquire()) {
+                    this.threadThatFailedToAcquire = Thread.currentThread();
+                    bl = true;
+                    this.stackTraceLock.unlock();
 
-                try {
-                    this.lock.acquire();
-                } catch (InterruptedException var6) {
-                    Thread.currentThread().interrupt();
-                }
+                    try {
+                        this.lock.acquire();
+                    } catch (InterruptedException var6) {
+                        Thread.currentThread().interrupt();
+                    }
 
-                throw this.fullException;
+                    throw this.fullException;
+                }
             }
+            // Canvas end
         } finally {
             if (!bl) {
                 this.stackTraceLock.unlock();
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 0ce4d45fbc91505f703d10b5234bd921c1489dab..8b253cdb91389ee086a1b36b110b34bf98d31a22 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -3900,7 +3900,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
             BlockPos blockposition1;
 
             if (flag1) {
-                blockposition1 = ServerLevel.END_SPAWN_POINT;
+                blockposition1 = ServerLevel.END_SPAWN_POINT.offset(0, 1, 0); // Canvas - fix spawning 1 block bellow platform
             } else {
                 destination.getChunkAt(destination.getSharedSpawnPos()); // Paper - Ensure spawn chunk is always loaded before calculating Y coordinate
                 blockposition1 = destination.getHeightmapPos(Heightmap.Types.MOTION_BLOCKING_NO_LEAVES, destination.getSharedSpawnPos());
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index e033e7884366c20bc3a1935ff92e2f3dea87bae5..ee956b83e08ec3afe92a5455de3c6c99f2573f4e 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -1347,7 +1347,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
                 tickingblockentity.tick();
                 // Paper start - execute chunk tasks during tick
                 if ((this.tileTickPosition & 7) == 0) {
-                    MinecraftServer.getServer().executeMidTickTasks();
+                    // MinecraftServer.getServer().executeMidTickTasks(); // Canvas - tick midtick tasks at end of tick
                 }
                 // Paper end - execute chunk tasks during tick
             }
@@ -1364,7 +1364,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public <T extends Entity> void guardEntityTick(Consumer<T> tickConsumer, T entity) {
         try {
             tickConsumer.accept(entity);
-            MinecraftServer.getServer().executeMidTickTasks(); // Paper - execute chunk tasks mid tick
+            // MinecraftServer.getServer().executeMidTickTasks(); // Paper - execute chunk tasks mid tick // Canvas - tick midtick tasks at end of tick
         } catch (Throwable throwable) { // Pufferfish - diff on change ServerLevel.tick
             if (throwable instanceof ThreadDeath) throw throwable; // Paper
             // Paper start - Prevent block entity and entity crashes
diff --git a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
index 301bbd8809ccdc0c631b82110a60fa785d5d92b3..1ce9abd84dedcc53d8b66a37ea0df7399de57b98 100644
--- a/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
+++ b/src/main/java/org/bukkit/craftbukkit/enchantments/CraftEnchantment.java
@@ -1,7 +1,6 @@
 package org.bukkit.craftbukkit.enchantments;
 
 import com.google.common.base.Preconditions;
-import me.dueris.canvas.world.damage.CraftDamageSource;
 import net.minecraft.core.registries.BuiltInRegistries;
 import net.minecraft.core.registries.Registries;
 import net.minecraft.world.damagesource.DamageSources;
diff --git a/src/main/java/org/spigotmc/WatchdogThread.java b/src/main/java/org/spigotmc/WatchdogThread.java
index 111522ae2955ce591b1caeab8e9e22d0686a541c..3523880c215805bdd651f5a6ecf640af8a66253d 100644
--- a/src/main/java/org/spigotmc/WatchdogThread.java
+++ b/src/main/java/org/spigotmc/WatchdogThread.java
@@ -6,6 +6,8 @@ import java.lang.management.ThreadInfo;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.ServerLevel;
+
 import org.bukkit.Bukkit;
 
 public final class WatchdogThread extends io.papermc.paper.util.TickThread // Paper - rewrite chunk system
@@ -47,7 +49,7 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
         log.log(Level.SEVERE, "Ticking entity: " + entityType + ", entity class: " + entity.getClass().getName());
         log.log(Level.SEVERE, "Entity status: removed: " + entity.isRemoved() + ", valid: " + entity.valid + ", alive: " + entity.isAlive() + ", is passenger: " + entity.isPassenger());
         log.log(Level.SEVERE, "Entity UUID: " + entityUUID);
-        log.log(Level.SEVERE, "Position: world: '" + (world == null ? "unknown world?" : world.getWorld().getName()) + "' at location (" + posX + ", " + posY + ", " + posZ + ")");
+        log.log(Level.SEVERE, "Position: world: '" + (world == null ? "unknown world?" : world.getTypeKey().toString()) + "' at location (" + posX + ", " + posY + ", " + posZ + ")"); // Canvas - show typekey instead of worldname
         log.log(Level.SEVERE, "Velocity: " + (mot == null ? "unknown velocity" : mot.toString()) + " (in blocks per tick)");
         log.log(Level.SEVERE, "Entity AABB: " + entity.getBoundingBox());
         if (moveVec != null) {
@@ -55,6 +57,31 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
             log.log(Level.SEVERE, "Start position: (" + moveStartX + ", " + moveStartY + ", " + moveStartZ + ")");
             log.log(Level.SEVERE, "Move vector: " + moveVec.toString());
         }
+        // Canvas - show thread report when dumping entities
+        if(((ServerLevel)entity.level()).currentTickingThread != null){ // Most likely actively ticking
+            log.log(Level.SEVERE, "------------------------------");
+            log.log(Level.SEVERE, "TickingThread found, dumping...");
+            log.log(Level.SEVERE, "------------------------------");
+            Thread thread = ((ServerLevel)entity.level()).currentTickingThread;
+            StackTraceElement[] elements = thread.getStackTrace();
+            log.log(Level.SEVERE, "Current Thread: " + thread.getName());
+            ThreadInfo threadInfo = ManagementFactory.getThreadMXBean().getThreadInfo(thread.getId(), Integer.MAX_VALUE);
+            log.log(Level.SEVERE, "\tPID: " + threadInfo.getThreadId()
+                + " | Suspended: " + threadInfo.isSuspended()
+                + " | Native: " + threadInfo.isInNative()
+                + " | State: " + threadInfo.getThreadState());
+            if (threadInfo.getLockedMonitors().length != 0){
+                log.log(Level.SEVERE, "\tThread is waiting on monitor(s):");
+                for (MonitorInfo monitor : threadInfo.getLockedMonitors()){
+                    log.log(Level.SEVERE, "\t\tLocked on:" + monitor.getLockedStackFrame());
+                }
+            }
+            log.log(Level.SEVERE, "\tStack:");
+            for (StackTraceElement stack : io.papermc.paper.util.StacktraceDeobfuscator.INSTANCE.deobfuscateStacktrace(thread.getStackTrace())){
+                log.log( Level.SEVERE, "\t\t" + stack );
+            }
+        }
+        // Canvas end
     }
 
     private void dumpTickingInfo() {
@@ -192,7 +219,7 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
                 log.log( Level.SEVERE, "Server thread dump (Look for plugins here before reporting to Canvas!):" ); // Paper // Purpur // Canvas
                 io.papermc.paper.chunk.system.scheduling.ChunkTaskScheduler.dumpAllChunkLoadInfo(isLongTimeout); // Paper - rewrite chunk system
                 this.dumpTickingInfo(); // Paper - log detailed tick information
-                WatchdogThread.dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( MinecraftServer.getServer().serverThread.getId(), Integer.MAX_VALUE ), log );
+                // WatchdogThread.dumpThread( ManagementFactory.getThreadMXBean().getThreadInfo( MinecraftServer.getServer().serverThread.getId(), Integer.MAX_VALUE ), log ); // Canvas - rewrite watchdog during entity dumps
                 log.log( Level.SEVERE, "------------------------------" );
                 //
                 // Paper start - Only print full dump on long timeouts
@@ -263,7 +290,7 @@ public final class WatchdogThread extends io.papermc.paper.util.TickThread // Pa
             }
         }
         log.log( Level.SEVERE, "\tStack:" );
-        //
+
         for ( StackTraceElement stack : io.papermc.paper.util.StacktraceDeobfuscator.INSTANCE.deobfuscateStacktrace(thread.getStackTrace()) ) // Paper
         {
             log.log( Level.SEVERE, "\t\t" + stack );
