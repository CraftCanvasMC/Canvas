From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Fri, 24 May 2024 18:45:49 -0700
Subject: [PATCH] Optimization Configs


diff --git a/src/main/java/me/dueris/canvas/CanvasConfig.java b/src/main/java/me/dueris/canvas/CanvasConfig.java
index 66b6e324960db19645f9063f4d37492223b8e4b0..4897122b83960bac4da773a96790d971573dc768 100644
--- a/src/main/java/me/dueris/canvas/CanvasConfig.java
+++ b/src/main/java/me/dueris/canvas/CanvasConfig.java
@@ -189,6 +189,29 @@ public class CanvasConfig {
     public static int mobWanderingPercentChance = 100;
     public static int mobWanderingReducedRateMultiplier = 6;
     public static int mobWanderingDelay = 20 * 5;
+    public static boolean tntLoadChunks = true;
+    public static boolean enderpearlsLoadChunks = true;
+    public static boolean fallingBlocksLoadChunks = true;
+    public static boolean tickItemFrames = true;
+    public static boolean onlyPlayersPushEntities = false;
+    public static boolean checkLightForSnow = false;
+    public static boolean lavaCatchesBlocksOnFire = true;
+    public static boolean disableFootsteps = false;
+    public static boolean disableRaidsFromSpawnerRaiders = false;
+    public static int spawnerMinSpawnDelay = 200;
+    public static int spawnerMaxSpawnDelay = 800;
+    public static int spawnerSpawnRange = 4;
+    public static int spawnerSpawnCount = 4;
+    public static boolean spawnerSpawnParticles = true;
+    public static int spawnerMaxNearbyEntities = 16;
+    public static int spawnerMaxPlayerRange = 16;
+    public static boolean spawnerEntitiesHaveAI = true;
+
+    private static void general(){
+        disableFootsteps = getBoolean("disableFootsteps", disableFootsteps);
+        checkLightForSnow = getBoolean("checkLightForSnow", checkLightForSnow);
+        onlyPlayersPushEntities = getBoolean("onlyPlayersPushEntities", onlyPlayersPushEntities);
+    }
 
     private static void optimizations(){
         maxTickerThreads = getInt("optimizations.maxTickerThreads", maxTickerThreads);
@@ -214,11 +237,25 @@ public class CanvasConfig {
         mobWanderingDelay = getInt("optimizations.mobWanderingDelay", mobWanderingDelay);
         mobWanderingPercentChance = getInt("optimizations.mobWanderingPercentChance", mobWanderingPercentChance);
         mobWanderingReducedRateMultiplier = getInt("optimizations.mobWanderingReducedRateMultiplier", mobWanderingReducedRateMultiplier);
+        tntLoadChunks = getBoolean("optimizations.tntLoadChunks", tntLoadChunks);
+        enderpearlsLoadChunks = getBoolean("optimizations.enderpearlsLoadChunks", enderpearlsLoadChunks);
+        fallingBlocksLoadChunks = getBoolean("optimizations.fallingBlocksLoadChunks", fallingBlocksLoadChunks);
+        tickItemFrames = getBoolean("optimizations.tickItemFrames", tickItemFrames);
+        disableRaidsFromSpawnerRaiders = getBoolean("optimizations.disableRaidsFromSpawnerRaiders", disableRaidsFromSpawnerRaiders);
     }
     
     private static void blocks(){
         useCanvasBedSetDye = getBoolean("blocks.useCanvasBedSetDyeMethod", useCanvasBedSetDye);
         makeCampfireAlwaysLots = getBoolean("block.forceCampfireEmitLotsOfParticles", makeCampfireAlwaysLots);
         farmlandSearchRadius = getInt("block.farmlandSearchRadius", farmlandSearchRadius);
+        lavaCatchesBlocksOnFire = getBoolean("block.lavaCatchesBlocksOnFire", lavaCatchesBlocksOnFire);
+        spawnerMaxNearbyEntities = getInt("block.spawner.spawnerMaxNearbyEntities", spawnerMaxNearbyEntities);
+        spawnerMaxPlayerRange = getInt("block.spawner.spawnerMaxPlayerRange", spawnerMaxPlayerRange);
+        spawnerEntitiesHaveAI = getBoolean("block.spawner.spawnerEntitiesHaveAI", spawnerEntitiesHaveAI);
+        spawnerSpawnRange = getInt("block.spawner.spawnerSpawnRange", spawnerSpawnRange);
+        spawnerSpawnCount = getInt("block.spawner.spawnerSpawnCount", spawnerSpawnCount);
+        spawnerMaxSpawnDelay = getInt("block.spawner.spawnerMaxSpawnDelay", spawnerMaxSpawnDelay);
+        spawnerMinSpawnDelay = getInt("block.spawner.spawnerMinSpawnDelay", spawnerMinSpawnDelay);
+        spawnerSpawnParticles = getBoolean("block.spawner.spawnerSpawnParticles", spawnerSpawnParticles);
     }
 }
diff --git a/src/main/java/net/minecraft/server/level/ServerEntity.java b/src/main/java/net/minecraft/server/level/ServerEntity.java
index 003f9575de45aa25ed43e693885e5db3fea1cb62..6881be717f95c59de7be41222a85a0dd4f99781e 100644
--- a/src/main/java/net/minecraft/server/level/ServerEntity.java
+++ b/src/main/java/net/minecraft/server/level/ServerEntity.java
@@ -121,7 +121,7 @@ public class ServerEntity {
 
         Entity entity = this.entity;
 
-        if (!this.trackedPlayers.isEmpty() && entity instanceof ItemFrame entityitemframe) { // Paper - Perf: Only tick item frames if players can see it
+        if (me.dueris.canvas.CanvasConfig.tickItemFrames && !this.trackedPlayers.isEmpty() && entity instanceof ItemFrame entityitemframe) { // Paper - Perf: Only tick item frames if players can see it // Canvas
             if (true || this.tickCount % 10 == 0) { // CraftBukkit - Moved below, should always enter this block
                 ItemStack itemstack = entityitemframe.getItem();
 
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index b23209bc65bb412a8ebb62411e2fc87d4fdaf781..cf5f0284db9302e04fc178d0fbd503924529a753 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -3085,12 +3085,19 @@ public class ServerLevel extends Level implements WorldGenLevel, TickManagerHold
         }
 
         public void onTickingEnd(Entity entity) {
+            // Canvas start - More Configs -- Optimizations
+            if(!me.dueris.canvas.CanvasConfig.tntLoadChunks && !me.dueris.canvas.CanvasConfig.fallingBlocksLoadChunks && !me.dueris.canvas.CanvasConfig.enderpearlsLoadChunks || entity.isRemoved() ||
+                (!me.dueris.canvas.CanvasConfig.tntLoadChunks || entity.getType() != EntityType.TNT) &&
+                (!me.dueris.canvas.CanvasConfig.fallingBlocksLoadChunks || entity.getType() != EntityType.FALLING_BLOCK) &&
+                (!me.dueris.canvas.CanvasConfig.enderpearlsLoadChunks || entity.getType() != EntityType.ENDER_PEARL)) {
+            // Canvas end
             ServerLevel.this.entityTickList.remove(entity);
             // Paper start - Reset pearls when they stop being ticked
             if (paperConfig().fixes.disableUnloadedChunkEnderpearlExploit && entity instanceof net.minecraft.world.entity.projectile.ThrownEnderpearl pearl) {
                 pearl.cachedOwner = null;
                 pearl.ownerUUID = null;
             }
+            } // Canvas
             // Paper end - Reset pearls when they stop being ticked
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index e9c57bc494e3b9b34ad36fbabd4a1e575dd6cfde..1748083939fb81c3a0d2c8c3e146677a34fcd6d1 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -3687,6 +3687,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
     protected void serverAiStep() {}
 
     protected void pushEntities() {
+        if(me.dueris.canvas.CanvasConfig.onlyPlayersPushEntities && !(this instanceof ServerPlayer)) return; // Canvas
         if (this.level().isClientSide()) {
             this.level().getEntities(EntityTypeTest.forClass(net.minecraft.world.entity.player.Player.class), this.getBoundingBox(), EntitySelector.pushableBy(this)).forEach(this::doPush);
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index fdd1f2b1333ab0ce852b7aa5f683180af4de3b8b..3790b59c62b03e914b34b188fe964cabe8f5b439 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -1816,6 +1816,7 @@ public abstract class Player extends LivingEntity {
 
     @Override
     protected void playStepSound(BlockPos pos, BlockState state) {
+        if(me.dueris.canvas.CanvasConfig.disableFootsteps) return; // Canvas - More Configs -- General
         if (this.isInWater()) {
             this.waterSwimSound();
             this.playMuffledStepSound(state);
diff --git a/src/main/java/net/minecraft/world/entity/raid/Raider.java b/src/main/java/net/minecraft/world/entity/raid/Raider.java
index 4a8fa7e5844b5cd12ef6b113f988b715c7a3ef64..97438b225ebf8aad587472226d3bd86c669c605a 100644
--- a/src/main/java/net/minecraft/world/entity/raid/Raider.java
+++ b/src/main/java/net/minecraft/world/entity/raid/Raider.java
@@ -69,7 +69,9 @@ public abstract class Raider extends PatrollingMonster {
         super.registerGoals();
         this.goalSelector.addGoal(1, new Raider.ObtainRaidLeaderBannerGoal<>(this, this));
         this.goalSelector.addGoal(3, new PathfindToRaidGoal<>(this));
+        if(!spawnedViaMobSpawner || !me.dueris.canvas.CanvasConfig.disableRaidsFromSpawnerRaiders){ // Canvas - More Configs -- Optimizations
         this.goalSelector.addGoal(4, new Raider.RaiderMoveThroughVillageGoal(this, 1.0499999523162842D, 1));
+        } // Canvas
         this.goalSelector.addGoal(5, new Raider.RaiderCelebration(this));
     }
 
diff --git a/src/main/java/net/minecraft/world/level/BaseSpawner.java b/src/main/java/net/minecraft/world/level/BaseSpawner.java
index 967af8771ff8564c715d89f4b4b69b16c25add59..93b02b5d96664ec65512f0a41bc62a65b7f88b2c 100644
--- a/src/main/java/net/minecraft/world/level/BaseSpawner.java
+++ b/src/main/java/net/minecraft/world/level/BaseSpawner.java
@@ -41,14 +41,16 @@ public abstract class BaseSpawner {
     public SpawnData nextSpawnData;
     private double spin;
     private double oSpin;
-    public int minSpawnDelay = 200;
-    public int maxSpawnDelay = 800;
-    public int spawnCount = 4;
+    // Canvas start - Configurable MobSpawners
+    public int minSpawnDelay = me.dueris.canvas.CanvasConfig.spawnerMinSpawnDelay == -1 ? 200 : me.dueris.canvas.CanvasConfig.spawnerMinSpawnDelay;
+    public int maxSpawnDelay = me.dueris.canvas.CanvasConfig.spawnerMaxSpawnDelay == -1 ? 800 : me.dueris.canvas.CanvasConfig.spawnerMaxSpawnDelay;
+    public int spawnCount = me.dueris.canvas.CanvasConfig.spawnerSpawnCount == -1 ? 4 : me.dueris.canvas.CanvasConfig.spawnerSpawnCount;
     @Nullable
     private Entity displayEntity;
-    public int maxNearbyEntities = 6;
-    public int requiredPlayerRange = 16;
-    public int spawnRange = 4;
+    public int maxNearbyEntities = me.dueris.canvas.CanvasConfig.spawnerMaxNearbyEntities == -1 ? 6 : me.dueris.canvas.CanvasConfig.spawnerMaxNearbyEntities;
+    public int requiredPlayerRange = me.dueris.canvas.CanvasConfig.spawnerMaxPlayerRange == -1 ? 16 : me.dueris.canvas.CanvasConfig.spawnerMaxPlayerRange;
+    // Canvas end
+    public int spawnRange = me.dueris.canvas.CanvasConfig.spawnerSpawnRange == -1 ? 4 : me.dueris.canvas.CanvasConfig.spawnerSpawnRange;
     private int tickDelay = 0; // Paper - Configurable mob spawner tick rate
 
     public BaseSpawner() {}
@@ -72,8 +74,10 @@ public abstract class BaseSpawner {
             double d1 = (double) pos.getY() + randomsource.nextDouble();
             double d2 = (double) pos.getZ() + randomsource.nextDouble();
 
+            if(me.dueris.canvas.CanvasConfig.spawnerSpawnParticles) { // Canvas - Configurable MobSpawners
             world.addParticle(ParticleTypes.SMOKE, d0, d1, d2, 0.0D, 0.0D, 0.0D);
             world.addParticle(ParticleTypes.FLAME, d0, d1, d2, 0.0D, 0.0D, 0.0D);
+            } // Canvas
             if (this.spawnDelay > 0) {
                 --this.spawnDelay;
             }
@@ -170,6 +174,7 @@ public abstract class BaseSpawner {
                         entity.moveTo(entity.getX(), entity.getY(), entity.getZ(), randomsource.nextFloat() * 360.0F, 0.0F);
                         if (entity instanceof Mob) {
                             Mob entityinsentient = (Mob) entity;
+                            if(!me.dueris.canvas.CanvasConfig.spawnerEntitiesHaveAI) entityinsentient.setNoAi(false); // Canvas - Configurable MobSpawners
 
                             if (mobspawnerdata.getCustomSpawnRules().isEmpty() && !entityinsentient.checkSpawnRules(world, MobSpawnType.SPAWNER) || !entityinsentient.checkSpawnObstruction(world)) {
                                 continue;
diff --git a/src/main/java/net/minecraft/world/level/biome/Biome.java b/src/main/java/net/minecraft/world/level/biome/Biome.java
index 15f82c9a1ce1fef2e951d1b3c7a65e64b82061ea..909c7ca17efad03618e4d1a62c53780c5f2dffa1 100644
--- a/src/main/java/net/minecraft/world/level/biome/Biome.java
+++ b/src/main/java/net/minecraft/world/level/biome/Biome.java
@@ -170,7 +170,7 @@ public final class Biome {
         if (this.warmEnoughToRain(pos)) {
             return false;
         } else {
-            if (pos.getY() >= world.getMinBuildHeight() && pos.getY() < world.getMaxBuildHeight() && world.getBrightness(LightLayer.BLOCK, pos) < 10) {
+            if (pos.getY() >= world.getMinBuildHeight() && pos.getY() < world.getMaxBuildHeight() && (!me.dueris.canvas.CanvasConfig.checkLightForSnow || world.getBrightness(LightLayer.BLOCK, pos) < 10)) { // Canvas - More Configs -- General
                 BlockState blockState = world.getBlockState(pos);
                 if ((blockState.isAir() || blockState.is(Blocks.SNOW)) && Blocks.SNOW.defaultBlockState().canSurvive(world, pos)) {
                     return true;
diff --git a/src/main/java/net/minecraft/world/level/material/LavaFluid.java b/src/main/java/net/minecraft/world/level/material/LavaFluid.java
index 2d492d849ff73a738dfbcb16507feb89bf19a962..f9b32e022444605906c32f608903b8ef22ed97ae 100644
--- a/src/main/java/net/minecraft/world/level/material/LavaFluid.java
+++ b/src/main/java/net/minecraft/world/level/material/LavaFluid.java
@@ -68,7 +68,7 @@ public abstract class LavaFluid extends FlowingFluid {
 
     @Override
     public void randomTick(Level world, BlockPos pos, FluidState state, RandomSource random) {
-        if (world.getGameRules().getBoolean(GameRules.RULE_DOFIRETICK)) {
+        if (world.getGameRules().getBoolean(GameRules.RULE_DOFIRETICK) && me.dueris.canvas.CanvasConfig.lavaCatchesBlocksOnFire) { // Canvas - More Configs -- Block
             int i = random.nextInt(3);
 
             if (i > 0) {
