From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Sat, 28 Dec 2024 01:38:22 -0800
Subject: [PATCH] Optimize Inactive Navigations


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 524d01d7cf1b680a275802209b62b633857f1933..36b53d86fe884bb35bd61811edf415144c5d8413 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -24,6 +24,7 @@ import java.nio.file.Path;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.Comparator;
 import java.util.Iterator;
 import java.util.LinkedList;
@@ -45,6 +46,7 @@ import java.util.stream.Collectors;
 import java.util.stream.Stream;
 import javax.annotation.Nonnull;
 import javax.annotation.Nullable;
+import it.unimi.dsi.fastutil.objects.ReferenceOpenHashSet;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportType;
@@ -1923,6 +1925,32 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
         // Paper end - Prevent GameEvents being fired from unloaded chunks
         this.gameEventDispatcher.post(event, emitterPos, emitter);
     }
+    // Canvas start
+    private final Set<PathNavigation> activeNavigations = new ConcurrentSet<>();
+
+    private Iterator<Mob> getActiveListeners(Set<Mob> set) {
+        return Collections.emptyIterator();
+    }
+
+    public void lithium$setNavigationActive(Mob mobEntity) {
+        Set<PathNavigation> activeNavigations = (this).activeNavigations;
+        activeNavigations.add((mobEntity).lithium$getRegisteredNavigation());
+    }
+
+    public void lithium$setNavigationInactive(Mob mobEntity) {
+        Set<PathNavigation> activeNavigations = (this).activeNavigations;
+        activeNavigations.remove((mobEntity).lithium$getRegisteredNavigation());
+    }
+
+    private void updateActiveListeners(BlockPos pos, List<PathNavigation> list) {
+        Set<PathNavigation> activeNavigations = (this).activeNavigations;
+        for (PathNavigation entityNavigation : activeNavigations) {
+            if (entityNavigation.shouldRecomputePath(pos)) {
+                list.add(entityNavigation);
+            }
+        }
+    }
+    // Canvas end
 
     @Override
     public void sendBlockUpdated(BlockPos pos, BlockState oldState, BlockState newState, int flags) {
@@ -1940,7 +1968,8 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
 
         if (Shapes.joinIsNotEmpty(voxelshape, voxelshape1, BooleanOp.NOT_SAME)) {
             List<PathNavigation> list = new ObjectArrayList();
-            Iterator iterator = this.navigatingMobs.iterator();
+            Iterator iterator = getActiveListeners(this.navigatingMobs); // Canvas
+            updateActiveListeners(pos, list); // Canvas
 
             while (iterator.hasNext()) {
                 // CraftBukkit start - fix SPIGOT-6362
@@ -2849,8 +2878,35 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
     // Paper end - optimize redstone (Alternate Current)
 
     private final class EntityCallbacks implements LevelCallback<Entity> {
+        // Canvas start
+        private ServerLevel outer;
+
+        EntityCallbacks() {
+            this.outer = ServerLevel.this;
+        }
 
-        EntityCallbacks() {}
+        private boolean startListeningOnEntityLoad(Set<Mob> set, Object mobEntityObj) {
+            Mob mobEntity = (Mob) mobEntityObj;
+            PathNavigation navigation = mobEntity.getNavigation();
+            (mobEntity).lithium$setRegisteredToWorld(navigation);
+            if (navigation.getPath() != null) {
+                (this.outer).lithium$setNavigationActive(mobEntity);
+            }
+            return set.add(mobEntity);
+        }
+
+        private boolean stopListeningOnEntityUnload(Set<Mob> set, Object mobEntityObj) {
+            Mob mobEntity = (Mob) mobEntityObj;
+            if ((mobEntity).lithium$isRegisteredToWorld()) {
+                PathNavigation registeredNavigation = ((Mob) mobEntity).lithium$getRegisteredNavigation();
+                if (registeredNavigation.getPath() != null) {
+                    (this.outer).lithium$setNavigationInactive(mobEntity);
+                }
+                (mobEntity).lithium$setRegisteredToWorld(null);
+            }
+            return set.remove(mobEntity);
+        }
+        // Canvas end
 
         public void onCreated(Entity entity) {}
 
@@ -2888,7 +2944,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
                     Util.logAndPauseIfInIde("onTrackingStart called during navigation iteration", new IllegalStateException("onTrackingStart called during navigation iteration"));
                 }
 
-                ServerLevel.this.navigatingMobs.add(entityinsentient);
+                startListeningOnEntityLoad(this.outer.navigatingMobs, entityinsentient); // Canvas
             }
 
             if (entity instanceof EnderDragon entityenderdragon) {
@@ -2969,7 +3025,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
                     Util.logAndPauseIfInIde("onTrackingStart called during navigation iteration", new IllegalStateException("onTrackingStart called during navigation iteration"));
                 }
 
-                ServerLevel.this.navigatingMobs.remove(entityinsentient);
+                stopListeningOnEntityUnload(this.outer.navigatingMobs, entityinsentient); // Canvas
             }
 
             if (entity instanceof EnderDragon entityenderdragon) {
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 4ec31b94803c15b7caad5053dc94b900a8601d07..a7baa9e27aec06a2890b0f7dd58c40bf4a74d90a 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -4002,6 +4002,11 @@ public abstract class LivingEntity extends Entity implements Attackable {
     public void stopRiding() {
         // Paper start - Force entity dismount during teleportation
         this.stopRiding(false);
+        // Canvas start
+        if (this instanceof Mob navigatingEntity) {
+            navigatingEntity.lithium$updateNavigationRegistration();
+        }
+        // Canvas end
     }
     @Override
     public void stopRiding(boolean suppressCancellation) {
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index d6fbbbeaded272a36adfa1cf6a1def289c34fba2..e4e2ff2034cf69b8c7a985bf4fab216804b7bdcc 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -145,6 +145,35 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
 
     public int ticksSinceLastInteraction; // Purpur
     public boolean aware = true; // CraftBukkit
+    // Canvas start
+    private PathNavigation registeredNavigation;
+
+    public boolean lithium$isRegisteredToWorld() {
+        return this.registeredNavigation != null;
+    }
+
+    public void lithium$setRegisteredToWorld(PathNavigation navigation) {
+        this.registeredNavigation = navigation;
+    }
+
+    public PathNavigation lithium$getRegisteredNavigation() {
+        return this.registeredNavigation;
+    }
+
+    public void lithium$updateNavigationRegistration() {
+        if (this.lithium$isRegisteredToWorld()) {
+            PathNavigation navigation = this.getNavigation();
+            if (this.registeredNavigation != navigation) {
+                ((ServerLevel) this.level()).lithium$setNavigationInactive((Mob) (Object) this);
+                this.registeredNavigation = navigation;
+
+                if (navigation.getPath() != null) {
+                    ((ServerLevel) this.level()).lithium$setNavigationActive((Mob) (Object) this);
+                }
+            }
+        }
+    }
+    // Canvas end
 
     protected Mob(EntityType<? extends Mob> type, Level world) {
         super(type, world);
@@ -1683,6 +1712,7 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
             // Paper end - Expand EntityUnleashEvent
         }
 
+        this.lithium$updateNavigationRegistration(); // Canvas
         return flag1;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
index 5c4b35b660b894a849fc0014cdbe074bcc646841..5ef8bbbad1a3d19a1f706b09450c2e877da15ade 100644
--- a/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
+++ b/src/main/java/net/minecraft/world/entity/ai/navigation/PathNavigation.java
@@ -11,6 +11,7 @@ import io.github.dueris.canvas.entity.pathfinding.AsyncPathProcessor;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Vec3i;
 import net.minecraft.network.protocol.game.DebugPackets;
+import net.minecraft.server.level.ServerLevel;
 import net.minecraft.tags.BlockTags;
 import net.minecraft.util.Mth;
 import net.minecraft.util.profiling.Profiler;
@@ -103,6 +104,13 @@ public abstract class PathNavigation {
             if (this.targetPos != null) {
                 this.path = null;
                 this.path = this.createPath(this.targetPos, this.reachRange);
+                if ((this.mob).lithium$isRegisteredToWorld()) {
+                    if (this.path == null) {
+                        ((ServerLevel) this.level).lithium$setNavigationInactive(this.mob);
+                    } else {
+                        ((ServerLevel) this.level).lithium$setNavigationActive(this.mob);
+                    }
+                }
                 this.timeLastRecompute = this.level.getGameTime();
                 this.hasDelayedRecomputation = false;
             }
@@ -264,6 +272,7 @@ public abstract class PathNavigation {
     public boolean moveTo(@Nullable Path path, double speed) {
         if (path == null) {
             this.path = null;
+            updateListeningState2(path, speed); // Canvas
             return false;
         } else {
             if (!path.sameAs(this.path)) {
@@ -271,21 +280,36 @@ public abstract class PathNavigation {
             }
 
             if (this.isDone()) {
+                updateListeningState2(path, speed); // Canvas
                 return false;
             } else {
                 if (path.isProcessed()) this.trimPath(); // Canvas
                 if (path.isProcessed() && this.path.getNodeCount() <= 0) { // Canvas
+                    updateListeningState2(path, speed); // Canvas
                     return false;
                 } else {
                     this.speedModifier = speed;
                     Vec3 vec3 = this.getTempMobPos();
                     this.lastStuckCheck = this.tick;
                     this.lastStuckCheckPos = vec3;
+                    updateListeningState2(path, speed); // Canvas
                     return true;
                 }
             }
         }
     }
+    // Canvas start
+
+    private void updateListeningState2(Path path, double speed) {
+        if ((this.mob).lithium$isRegisteredToWorld()) {
+            if (this.path == null) {
+                ((ServerLevel) this.level).lithium$setNavigationInactive(this.mob);
+            } else {
+                ((ServerLevel) this.level).lithium$setNavigationActive(this.mob);
+            }
+        }
+    }
+    // Canvas end
 
     @Nullable
     public Path getPath() {
@@ -423,6 +447,11 @@ public abstract class PathNavigation {
 
     public void stop() {
         this.path = null;
+        // Canvas start
+        if ((this.mob).lithium$isRegisteredToWorld()) {
+            ((ServerLevel) this.level).lithium$setNavigationInactive(this.mob);
+        }
+        // Canvas end
     }
 
     protected abstract Vec3 getTempMobPos();
diff --git a/src/main/java/net/minecraft/world/entity/monster/Drowned.java b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
index 917fb62d59c610a998e88a821dbcda08e9b90992..dcc77b6a8b174e7f37c0aa6d73b889842784cd40 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Drowned.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
@@ -294,9 +294,11 @@ public class Drowned extends Zombie implements RangedAttackMob {
         if (!this.level().isClientSide) {
             if (this.isEffectiveAi() && this.isUnderWater() && this.wantsToSwim()) {
                 this.navigation = this.waterNavigation;
+                (this).lithium$updateNavigationRegistration(); // Canvas
                 this.setSwimming(true);
             } else {
                 this.navigation = this.groundNavigation;
+                (this).lithium$updateNavigationRegistration(); // Canvas
                 this.setSwimming(false);
             }
         }
@@ -400,6 +402,7 @@ public class Drowned extends Zombie implements RangedAttackMob {
             this.drowned.setSearchingForLand(false);
             this.drowned.navigation = this.drowned.groundNavigation;
             super.start();
+            (this.drowned).lithium$updateNavigationRegistration(); // Canvas
         }
 
         @Override
