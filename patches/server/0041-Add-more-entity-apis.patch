From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sun, 29 Oct 2023 17:54:28 -0700
Subject: [PATCH] Add more entity apis


diff --git a/src/main/java/me/dueris/canvas/entity/CraftMobType.java b/src/main/java/me/dueris/canvas/entity/CraftMobType.java
new file mode 100644
index 0000000000000000000000000000000000000000..2afb1fcb15dab7be11bfa690cd3098431964fd99
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/entity/CraftMobType.java
@@ -0,0 +1,46 @@
+package me.dueris.canvas.entity;
+
+
+import static net.minecraft.world.entity.MobType.ARTHROPOD;
+import static net.minecraft.world.entity.MobType.ILLAGER;
+import static net.minecraft.world.entity.MobType.UNDEAD;
+import static net.minecraft.world.entity.MobType.UNDEFINED;
+import static net.minecraft.world.entity.MobType.WATER;
+
+public class CraftMobType {
+    public static net.minecraft.world.entity.MobType canvasToNMS(me.dueris.canvas.entity.MobType mobType){
+        switch (mobType){
+            case WATER -> {
+                return WATER;
+            }
+            case ILLAGER -> {
+                return ILLAGER;
+            }
+            case UNDEAD -> {
+                return UNDEAD;
+            }
+            case ARTHROPOD -> {
+                return ARTHROPOD;
+            }
+            case UNDEFINED -> {
+                return UNDEFINED;
+            }
+        }
+        return UNDEFINED;
+    }
+
+    public static me.dueris.canvas.entity.MobType nmsToCanvas(net.minecraft.world.entity.MobType mobType) {
+        if (mobType.equals(WATER)) {
+            return MobType.WATER;
+        } else if (mobType.equals(ILLAGER)) {
+            return MobType.ILLAGER;
+        } else if (mobType.equals(UNDEAD)) {
+            return MobType.UNDEAD;
+        } else if (mobType.equals(ARTHROPOD)) {
+            return MobType.ARTHROPOD;
+        } else if (mobType.equals(UNDEFINED)) {
+            return MobType.UNDEFINED;
+        }
+        return MobType.UNDEFINED;
+    }
+}
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index ecdf66f9c063ea410caac4125327719dfbab9bf6..f9f9281b25ca24c51639e825b2196d2b489471b7 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -2646,8 +2646,15 @@ public abstract class LivingEntity extends Entity implements Attackable {
     }
 
     public MobType getMobType() {
-        return MobType.UNDEFINED;
+        return this.mobType; // Canvas
     }
+    // Canvas start
+    MobType mobType = MobType.UNDEFINED;
+
+    public void setMobType(MobType mobType){
+        this.mobType = mobType;
+    }
+    // Canvas end
 
     public ItemStack getMainHandItem() {
         return this.getItemBySlot(EquipmentSlot.MAINHAND);
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 3410867a5dc01c1b572351c6b24dcd65dc804f14..1b0904178738af196d686fb163638f1e13e95a11 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -171,6 +171,12 @@ public abstract class Mob extends LivingEntity implements Targeting {
 
     protected void registerGoals() {}
 
+    // Canvas start
+    public void removeGoal(Goal goal){
+        this.goalSelector.removeGoal(goal);
+    }
+    // Canvas end
+
     public static AttributeSupplier.Builder createMobAttributes() {
         return LivingEntity.createLivingAttributes().add(Attributes.FOLLOW_RANGE, 16.0D).add(Attributes.ATTACK_KNOCKBACK);
     }
@@ -1757,7 +1763,7 @@ public abstract class Mob extends LivingEntity implements Targeting {
     }
 
     @Override
-    protected void jumpInLiquid(TagKey<Fluid> fluid) {
+    public void jumpInLiquid(TagKey<Fluid> fluid) { // Canvas - protected -> public
         if (this.getNavigation().canFloat()) {
             super.jumpInLiquid(fluid);
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
index 00cf59524477ec79d4354cc403fc3e75a63b81a0..bcc6575331379e0e1c0bb455968bed87bf8e158f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
@@ -29,7 +29,7 @@ public class TemptGoal extends Goal {
     protected LivingEntity player; // CraftBukkit
     private int calmDown;
     private boolean isRunning;
-    private final Ingredient items;
+    public Ingredient items; // Canvas - private -> public && final -> !final
     private final boolean canScare;
 
     public TemptGoal(PathfinderMob entity, double speed, Ingredient food, boolean canBeScared) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index 38a3dcec138d9233a46e5d523bcc6d64bc7fffd0..65cbefce01a5da26892e4a91929c70d9f3510ac4 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -754,7 +754,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     }
 
     @Override
-    protected void jumpInLiquid(TagKey<Fluid> fluid) {
+    public void jumpInLiquid(TagKey<Fluid> fluid) { // Canvas - protected -> public
         this.setDeltaMovement(this.getDeltaMovement().add(0.0D, 0.01D, 0.0D));
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index 075554f28dab5809d0f2d346bad40efc16b38371..18f2720df52911f5bc6126ea4fc0ef92aba8ce4b 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -211,6 +211,14 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         this.entityData.define(Fox.DATA_TYPE_ID, 0);
         this.entityData.define(Fox.DATA_FLAGS_ID, (byte) 0);
     }
+    // Canvas start
+    public FaceplantGoal faceplantGoal;
+    public StalkPreyGoal stalkPreyGoal;
+    public SeekShelterGoal seekShelterGoal;
+    public SleepGoal sleepGoal;
+    public FoxSearchForItemsGoal searchForItemsGoal;
+    public FoxPounceGoal pounceGoal;
+    // Canvas end
 
     @Override
     protected void registerGoals() {
@@ -224,7 +232,10 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         this.goalSelector.addGoal(0, new Fox.FoxFloatGoal());
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(0, new ClimbOnTopOfPowderSnowGoal(this, this.level()));
-        this.goalSelector.addGoal(1, new Fox.FaceplantGoal());
+        // Canvas start
+        this.faceplantGoal = new FaceplantGoal();
+        this.goalSelector.addGoal(1, faceplantGoal);
+        // Canvas end
         this.goalSelector.addGoal(2, new Fox.FoxPanicGoal(2.2D));
         this.goalSelector.addGoal(3, new Fox.FoxBreedGoal(1.0D));
         this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Player.class, 16.0F, 1.6D, 1.4D, (entityliving) -> {
@@ -236,17 +247,28 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, PolarBear.class, 8.0F, 1.6D, 1.4D, (entityliving) -> {
             return !this.isDefending();
         }));
-        this.goalSelector.addGoal(5, new Fox.StalkPreyGoal());
-        this.goalSelector.addGoal(6, new Fox.FoxPounceGoal());
-        this.goalSelector.addGoal(6, new Fox.SeekShelterGoal(1.25D));
+        // Canvas start
+        this.stalkPreyGoal = new StalkPreyGoal();
+        this.pounceGoal = new FoxPounceGoal();
+        this.seekShelterGoal = new SeekShelterGoal(1.25D);
+        this.goalSelector.addGoal(5, stalkPreyGoal);
+        this.goalSelector.addGoal(6, pounceGoal);
+        this.goalSelector.addGoal(6, seekShelterGoal);
+        // Canvas end
         this.goalSelector.addGoal(7, new Fox.FoxMeleeAttackGoal(1.2000000476837158D, true));
-        this.goalSelector.addGoal(7, new Fox.SleepGoal());
+        // Canvas start
+        this.sleepGoal = new SleepGoal();
+        this.goalSelector.addGoal(7, sleepGoal);
+        // Canvas end
         this.goalSelector.addGoal(8, new Fox.FoxFollowParentGoal(this, 1.25D));
         this.goalSelector.addGoal(9, new Fox.FoxStrollThroughVillageGoal(32, 200));
         this.goalSelector.addGoal(10, new Fox.FoxEatBerriesGoal(1.2000000476837158D, 12, 1));
         this.goalSelector.addGoal(10, new LeapAtTargetGoal(this, 0.4F));
         this.goalSelector.addGoal(11, new WaterAvoidingRandomStrollGoal(this, 1.0D));
-        this.goalSelector.addGoal(11, new Fox.FoxSearchForItemsGoal());
+        // Canvas start
+        this.searchForItemsGoal = new FoxSearchForItemsGoal();
+        this.goalSelector.addGoal(11, searchForItemsGoal);
+        // Canvas end
         this.goalSelector.addGoal(12, new Fox.FoxLookAtPlayerGoal(this, Player.class, 24.0F));
         this.goalSelector.addGoal(13, new Fox.PerchAndSearchGoal());
         this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
@@ -912,7 +934,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
     }
 
-    private class FaceplantGoal extends Goal {
+    public class FaceplantGoal extends Goal { // Canvas - private -> public
 
         int countdown;
 
@@ -1026,7 +1048,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
     }
 
-    private class StalkPreyGoal extends Goal {
+    public class StalkPreyGoal extends Goal { // Canvas - private -> public
 
         public StalkPreyGoal() {
             this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
@@ -1190,7 +1212,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
     }
 
-    private class SeekShelterGoal extends FleeSunGoal {
+    public class SeekShelterGoal extends FleeSunGoal { // Canvas - private -> public
 
         private int interval = reducedTickDelay(100);
 
@@ -1252,7 +1274,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
     }
 
-    private class SleepGoal extends Fox.FoxBehaviorGoal {
+    public class SleepGoal extends Fox.FoxBehaviorGoal { // Canvas - private -> public
 
         private static final int WAIT_TIME_BEFORE_SLEEP = reducedTickDelay(140);
         private int countdown;
@@ -1450,7 +1472,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
     }
 
-    private class FoxSearchForItemsGoal extends Goal {
+    public class FoxSearchForItemsGoal extends Goal { // Canvas - private -> public
 
         public FoxSearchForItemsGoal() {
             this.setFlags(EnumSet.of(Goal.Flag.MOVE));
diff --git a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
index 54b6d780d14c27f24d3d4dc9171818f6256afd5c..ab4a66b4c304f5c110ab4d4ee129fd51af05236e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
+++ b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
@@ -322,7 +322,7 @@ public class PolarBear extends Animal implements NeutralMob {
     }
 
     @Override
-    protected float getWaterSlowDown() {
+    public float getWaterSlowDown() { // Canvas - protected -> public
         return 0.98F;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
index bab9e413bd55d48e3e54bee66a6cd5be19a8f415..879c561624a3d6f1070d05d0c5f41f881278f791 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -200,11 +200,18 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         return (0.44999998807907104D + random.nextDouble() * 0.3D + random.nextDouble() * 0.3D + random.nextDouble() * 0.3D) * 0.25D;
     }
 
+    // Canvas start
+    public RunAroundLikeCrazyGoal runAroundLikeCrazyGoal;
+    // Canvas end
+
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HorseHasRider(this)); // Purpur
         this.goalSelector.addGoal(1, new PanicGoal(this, 1.2D));
-        this.goalSelector.addGoal(1, new RunAroundLikeCrazyGoal(this, 1.2D));
+        // Canvas start
+        this.runAroundLikeCrazyGoal = new RunAroundLikeCrazyGoal(this, 1.2D);
+        this.goalSelector.addGoal(1, this.runAroundLikeCrazyGoal);
+        // Canvas end
         this.goalSelector.addGoal(2, new BreedGoal(this, 1.0D, AbstractHorse.class));
         this.goalSelector.addGoal(4, new FollowParentGoal(this, 1.0D));
         this.goalSelector.addGoal(6, new WaterAvoidingRandomStrollGoal(this, 0.7D));
@@ -218,10 +225,15 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         this.addBehaviourGoals();
     }
 
-    protected void addBehaviourGoals() {
+    // Canvas start
+    public TemptGoal temptGoal;
+
+    public void addBehaviourGoals() { // Canvas - protected -> public
         this.goalSelector.addGoal(0, new FloatGoal(this));
-        this.goalSelector.addGoal(3, new TemptGoal(this, 1.25D, Ingredient.of(Items.GOLDEN_CARROT, Items.GOLDEN_APPLE, Items.ENCHANTED_GOLDEN_APPLE), false));
+        this.temptGoal = new TemptGoal(this, 1.25D, Ingredient.of(Items.GOLDEN_CARROT, Items.GOLDEN_APPLE, Items.ENCHANTED_GOLDEN_APPLE), false);
+        this.goalSelector.addGoal(3, this.temptGoal);
     }
+    // Canvas end
 
     @Override
     protected void defineSynchedData() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
index 6e3af90f4cb4f7722bd1601a515fd9a377459d1b..ccfcc5aaa424566b3955a82a8203d345a9b652e0 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
@@ -171,7 +171,7 @@ public class SkeletonHorse extends AbstractHorse {
     }
 
     @Override
-    protected float getWaterSlowDown() {
+    public float getWaterSlowDown() { // Canvas - protected -> public
         return 0.96F;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Evoker.java b/src/main/java/net/minecraft/world/entity/monster/Evoker.java
index 4095f03ccd1712335baffe858603618100aed99c..5115832eece2798738dfbafc8547477fbc79ce62 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Evoker.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Evoker.java
@@ -81,17 +81,29 @@ public class Evoker extends SpellcasterIllager {
     protected boolean isAlwaysExperienceDropper() {
         return this.level().purpurConfig.evokerAlwaysDropExp;
     }
+    // Canvas start
+    public Evoker.EvokerSummonSpellGoal summonSpellGoal;
+    public Evoker.EvokerCastingSpellGoal castingSpellGoal;
+    public Evoker.EvokerAttackSpellGoal attackSpellGoal;
+    public Evoker.EvokerWololoSpellGoal wololoSpellGoal;
+    // Canvas end
 
     @Override
     protected void registerGoals() {
         super.registerGoals();
         this.goalSelector.addGoal(0, new FloatGoal(this));
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
-        this.goalSelector.addGoal(1, new Evoker.EvokerCastingSpellGoal());
+        this.goalSelector.addGoal(1, castingSpellGoal); // Canvas
         this.goalSelector.addGoal(2, new AvoidEntityGoal<>(this, Player.class, 8.0F, 0.6D, 1.0D));
-        this.goalSelector.addGoal(4, new Evoker.EvokerSummonSpellGoal());
-        this.goalSelector.addGoal(5, new Evoker.EvokerAttackSpellGoal());
-        this.goalSelector.addGoal(6, new Evoker.EvokerWololoSpellGoal());
+        // Canvas start
+        summonSpellGoal = new EvokerSummonSpellGoal();
+        castingSpellGoal = new EvokerCastingSpellGoal();
+        attackSpellGoal = new EvokerAttackSpellGoal();
+        wololoSpellGoal = new EvokerWololoSpellGoal();
+        this.goalSelector.addGoal(4, summonSpellGoal);
+        this.goalSelector.addGoal(5, attackSpellGoal);
+        this.goalSelector.addGoal(6, wololoSpellGoal);
+        // Canvas end
         this.goalSelector.addGoal(8, new RandomStrollGoal(this, 0.6D));
         this.goalSelector.addGoal(9, new LookAtPlayerGoal(this, Player.class, 3.0F, 1.0F));
         this.goalSelector.addGoal(10, new LookAtPlayerGoal(this, Mob.class, 8.0F));
@@ -185,7 +197,7 @@ public class Evoker extends SpellcasterIllager {
         }
     }
 
-    private class EvokerSummonSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal {
+    public class EvokerSummonSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal { // Canvas - private -> public
 
         private final TargetingConditions vexCountTargeting = TargetingConditions.forNonCombat().range(16.0D).ignoreLineOfSight().ignoreInvisibilityTesting();
 
@@ -205,17 +217,17 @@ public class Evoker extends SpellcasterIllager {
         }
 
         @Override
-        protected int getCastingTime() {
+        public int getCastingTime() { // Canvas - protected -> private
             return 100;
         }
 
         @Override
-        protected int getCastingInterval() {
+        public int getCastingInterval() { // Canvas - protected -> private
             return 340;
         }
 
         @Override
-        protected void performSpellCasting() {
+        public void performSpellCasting() { // Canvas - protected -> private
             ServerLevel worldserver = (ServerLevel) Evoker.this.level();
 
             for (int i = 0; i < 3; ++i) {
@@ -246,7 +258,7 @@ public class Evoker extends SpellcasterIllager {
         }
     }
 
-    private class EvokerAttackSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal {
+    public class EvokerAttackSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal { // Canvas - private -> public
 
         EvokerAttackSpellGoal() {
             super();
@@ -263,7 +275,7 @@ public class Evoker extends SpellcasterIllager {
         }
 
         @Override
-        protected void performSpellCasting() {
+        public void performSpellCasting() { // Canvas - protected -> private
             LivingEntity entityliving = Evoker.this.getTarget();
             double d0 = Math.min(entityliving.getY(), Evoker.this.getY());
             double d1 = Math.max(entityliving.getY(), Evoker.this.getY()) + 1.0D;
@@ -337,7 +349,7 @@ public class Evoker extends SpellcasterIllager {
         }
     }
 
-    public class EvokerWololoSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal {
+    public class EvokerWololoSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal { // Canvas - private -> public
 
         private final TargetingConditions wololoTargeting = TargetingConditions.forNonCombat().range(16.0D).selector((entityliving) -> {
             return ((Sheep) entityliving).getColor() == DyeColor.BLUE;
@@ -381,7 +393,7 @@ public class Evoker extends SpellcasterIllager {
         }
 
         @Override
-        protected void performSpellCasting() {
+        public void performSpellCasting() { // Canvas - protected -> private
             Sheep entitysheep = Evoker.this.getWololoTarget();
 
             if (entitysheep != null && entitysheep.isAlive()) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ghast.java b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
index 640f0c378a18cf0a820ad544bb3b172b698c6bfc..67fd40c6ed3644d33706f541d332f10d188b9f61 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ghast.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
@@ -77,14 +77,19 @@ public class Ghast extends FlyingMob implements Enemy {
             setDeltaMovement(mot.scale(0.9D));
         }
     }
-    // Purpur end
+    // Purpur end -/- Canvas start
+    public GhastShootFireballGoal shootFireballGoal;
+    // Canvas end
 
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(5, new Ghast.RandomFloatAroundGoal(this));
         this.goalSelector.addGoal(7, new Ghast.GhastLookGoal(this));
-        this.goalSelector.addGoal(7, new Ghast.GhastShootFireballGoal(this));
+        // Canvas start
+        this.shootFireballGoal = new GhastShootFireballGoal(this);
+        this.goalSelector.addGoal(7, shootFireballGoal);
+        // Canvas end
         this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, (entityliving) -> {
             return Math.abs(entityliving.getY() - this.getY()) <= 4.0D;
@@ -114,7 +119,7 @@ public class Ghast extends FlyingMob implements Enemy {
         return true;
     }
 
-    private static boolean isReflectedFireball(DamageSource damageSource) {
+    public static boolean isReflectedFireball(DamageSource damageSource) {
         return damageSource.getDirectEntity() instanceof LargeFireball && damageSource.getEntity() instanceof Player;
     }
 
@@ -348,7 +353,7 @@ public class Ghast extends FlyingMob implements Enemy {
         }
     }
 
-    private static class GhastShootFireballGoal extends Goal {
+    public class GhastShootFireballGoal extends Goal { // Canvas - private -> public
 
         private final Ghast ghast;
         public int chargeTime;
diff --git a/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java b/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
index 1ad97267394d3717b1871336193cdc91f3ffb276..aee214544214e646632f654d79a5b5b12cde2c43 100644
--- a/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
+++ b/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
@@ -131,7 +131,7 @@ public class MagmaCube extends Slime {
     }
 
     @Override
-    protected void jumpInLiquid(TagKey<Fluid> fluid) {
+    public void jumpInLiquid(TagKey<Fluid> fluid) { // Canvas - protected -> public
         if (fluid == FluidTags.LAVA) {
             Vec3 vec3 = this.getDeltaMovement();
             this.setDeltaMovement(vec3.x, (double)(0.22F + (float)this.getSize() * 0.05F), vec3.z);
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
index 5e66c2bd3807619cadee5b7081d93d21886e2806..d929e64fbc3b76d4a1c28459920f288e12e45823 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.monster.warden;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.collect.ImmutableList;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
@@ -47,12 +48,17 @@ import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
+import net.minecraft.world.entity.ai.behavior.MeleeAttack;
+import net.minecraft.world.entity.ai.behavior.SetEntityLookTarget;
+import net.minecraft.world.entity.ai.behavior.SetWalkTargetFromAttackTargetIfTargetOutOfReach;
+import net.minecraft.world.entity.ai.behavior.StopAttackingIfTargetInvalid;
 import net.minecraft.world.entity.ai.behavior.warden.SonicBoom;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.navigation.GroundPathNavigation;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
 import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.entity.schedule.Activity;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.ServerLevelAccessor;
@@ -186,11 +192,19 @@ public class Warden extends Monster implements VibrationSystem {
         return false;
     }
 
+    // Canvas start
     @Override
     public boolean canDisableShield() {
-        return true;
+        return canDisableShield;
+    }
+
+    public void setCanDisableShield(boolean canDisableShield){
+        this.canDisableShield = canDisableShield;
     }
 
+    public boolean canDisableShield = true;
+    // Canvas end
+
     @Override
     protected float nextStep() {
         return this.moveDist + 0.55F;
@@ -589,6 +603,22 @@ public class Warden extends Monster implements VibrationSystem {
         SonicBoom.setCooldown(this, 200);
     }
 
+    // Canvas start
+    public void trySonicBoom(Warden warden, Brain<Warden> brain){
+        brain.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(DIG_COOLDOWN_SETTER, StopAttackingIfTargetInvalid.<Warden>create((entity) -> {
+            return !warden.getAngerLevel().isAngry() || !warden.canTargetEntity(entity);
+        }, WardenAi::onTargetInvalid, false), SetEntityLookTarget.create((entity) -> {
+            return isTarget(warden, entity);
+        }, (float)warden.getAttributeValue(Attributes.FOLLOW_RANGE)), SetWalkTargetFromAttackTargetIfTargetOutOfReach.create(1.2F), new SonicBoom(), MeleeAttack.create(18)), MemoryModuleType.ATTACK_TARGET);
+    }
+
+    private boolean isTarget(Warden warden, LivingEntity entity) {
+        return warden.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).filter((entityx) -> {
+            return entityx == entity;
+        }).isPresent();
+    }
+    // Canvas end
+
     @Override
     public EntityDimensions getDimensions(Pose pose) {
         EntityDimensions entitysize = super.getDimensions(pose);
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 02df0bf09f2ef91e4dafbdcea590b4634b2abf08..fe33f96c6cbd6a9a4703b412c5f7f0813926d1da 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -522,7 +522,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
 
     }
 
-    private boolean needsToRestock() {
+    public boolean needsToRestock() { // Canvas - private -> public
         Iterator iterator = this.getOffers().iterator();
 
         MerchantOffer merchantrecipe;
@@ -590,7 +590,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         this.resendOffersToTradingPlayer();
     }
 
-    private void updateDemand() {
+    public void updateDemand() { // Canvas - private -> public
         Iterator iterator = this.getOffers().iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
index f9cd595ec28f0284d11bae6bfc5bf92d56526ef9..50e055479c194994dcd2227c5d70159098635380 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
@@ -145,5 +145,21 @@ public abstract class CraftAbstractHorse extends CraftAnimals implements Abstrac
     public void setEating(boolean eating) {
        this.getHandle().setMouthOpen(eating);
     }
-    // Paper end - Horse API
+
+    // Canvas start
+    @Override
+    public void runAroundLikeCrazy() {
+        this.getHandle().runAroundLikeCrazyGoal.start();
+    }
+
+    @Override
+    public void tryMakeAngry() {
+        this.getHandle().makeMad();
+    }
+
+    @Override
+    public boolean isSaddled() {
+        return this.getHandle().isSaddled();
+    }
+    // Paper end - Horse API -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
index 69c8a50d6daf8763a0bce84ac0d6dc8911b4fd5b..3a16e5171079d1d2605b3c3e481b0369ed0a574e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
@@ -52,4 +52,10 @@ public class CraftCamel extends CraftAbstractHorse implements Camel {
         }
     }
 
+    // Canvas start
+    @Override
+    public boolean isSaddled() {
+        return this.getHandle().isSaddled();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
index b66dd5c5c5d98c9285e0d0a4ad4b99a66419f732..94caad439d8e134fdddebf46e2cbc7181da93e9a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
@@ -42,5 +42,21 @@ public class CraftEvoker extends CraftSpellcaster implements Evoker {
     public void setWololoTarget(org.bukkit.entity.Sheep sheep) {
         getHandle().setWololoTarget(sheep == null ? null : ((org.bukkit.craftbukkit.entity.CraftSheep) sheep).getHandle());
     }
-    // Paper end
+
+    // Canvas start
+    @Override
+    public void performSummonSpell() {
+        this.getHandle().summonSpellGoal.performSpellCasting();
+    }
+
+    @Override
+    public void performAttackSpell() {
+        this.getHandle().attackSpellGoal.performSpellCasting();
+    }
+
+    @Override
+    public void performWololoSpell(org.bukkit.entity.Sheep wololoTarget) {
+        this.getHandle().wololoSpellGoal.performSpellCasting();
+    }
+    // Paper end -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
index c455deb4fd2a7684bcc01a8212c362a2375c190b..314fc84938398a836e4fa6529588b2b9beecdda2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
@@ -149,5 +149,36 @@ public class CraftFox extends CraftAnimals implements Fox {
     public void setFaceplanted(boolean faceplanted) {
         this.getHandle().setFaceplanted(faceplanted);
     }
-    // Paper end - Add more fox behavior API
+
+    // Canvas start
+    @Override
+    public void faceplant() {
+        this.getHandle().faceplantGoal.start();
+    }
+
+    @Override
+    public void tryStalkPrey() {
+        this.getHandle().stalkPreyGoal.start();
+    }
+
+    @Override
+    public void seekShelter() {
+        this.getHandle().seekShelterGoal.start();
+    }
+
+    @Override
+    public void sleep() {
+        this.getHandle().sleepGoal.start();
+    }
+
+    @Override
+    public void searchForItems() {
+        this.getHandle().searchForItemsGoal.start();
+    }
+
+    @Override
+    public void tryPounce() {
+        this.getHandle().pounceGoal.start();
+    }
+    // Paper end - Add more fox behavior API -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
index 97fa4e1e70203194bd939618b2fad92665af6d59..66df97e7623d508dd7e0df529154c18d018ec5df 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
@@ -40,5 +40,10 @@ public class CraftGhast extends CraftFlying implements Ghast, CraftEnemy {
         com.google.common.base.Preconditions.checkArgument(explosionPower >= 0 && explosionPower <= 127, "The explosion power has to be between 0 and 127");
         this.getHandle().setExplosionPower(explosionPower);
     }
+
+    @Override
+    public void shootFireBall() {
+        this.getHandle().shootFireballGoal.start();
+    }
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 957ac54707b5fd6fcd783ef64ed0ccbdeb44942a..7dee348fb2dc59f5353131ce2593c245f402c1b3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -9,9 +9,12 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+import me.dueris.canvas.entity.CraftMobType;
 import net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
+import net.minecraft.tags.FluidTags;
+import net.minecraft.tags.TagKey;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
@@ -30,6 +33,8 @@ import net.minecraft.world.entity.projectile.ThrownEgg;
 import net.minecraft.world.entity.projectile.ThrownEnderpearl;
 import net.minecraft.world.entity.projectile.ThrownExperienceBottle;
 import net.minecraft.world.entity.projectile.ThrownTrident;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.material.Fluid;
 import org.bukkit.FluidCollisionMode;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -44,8 +49,7 @@ import org.bukkit.craftbukkit.entity.memory.CraftMemoryKey;
 import org.bukkit.craftbukkit.entity.memory.CraftMemoryMapper;
 import org.bukkit.craftbukkit.inventory.CraftEntityEquipment;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.craftbukkit.potion.CraftPotionEffectType;
-import org.bukkit.craftbukkit.potion.CraftPotionUtil;
+import org.bukkit.craftbukkit.potion.*; // Canvas - change to use * due to patch error
 import org.bukkit.entity.memory.MemoryKey;
 import org.bukkit.event.entity.EntityPotionEffectEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
@@ -61,7 +65,6 @@ import org.bukkit.util.Vector;
 // Canvas start
 import org.bukkit.scheduler.BukkitRunnable;
 import org.bukkit.entity.*;
-import org.bukkit.attribute.*;
 import org.bukkit.plugin.*;
 // Canvas end
 
@@ -1148,5 +1151,64 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     public void setShouldBurnInDay(boolean shouldBurnInDay) {
         getHandle().setShouldBurnInDay(shouldBurnInDay);
     }
-    // Purpur end
+
+    // Canvas start
+    @Override
+    public void setMobType(final me.dueris.canvas.entity.MobType mobType) {
+        MobType ET = CraftMobType.canvasToNMS(mobType);
+        this.getHandle().setMobType(ET);
+    }
+
+    @Override
+    public me.dueris.canvas.entity.MobType getMobType() {
+        return CraftMobType.nmsToCanvas(this.getHandle().getMobType());
+    }
+
+    @Override
+    public void jump() {
+        this.getHandle().jumpFromGround();
+    }
+
+    @Override
+    public void jumpInLiquid() {
+        if(this.getLocation().getBlock().isLiquid()){
+            if(getNmsFluidTag(this.getLocation().getBlock()) != null){
+                this.getHandle().jumpInLiquid(getNmsFluidTag(this.getLocation().getBlock()));
+            }
+        }
+    }
+
+    public TagKey<Fluid> getNmsFluidTag(Block block){
+        switch (block.getType()){
+            case WATER -> {
+                return FluidTags.WATER;
+            }
+            case LAVA -> {
+                return FluidTags.LAVA;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public void goDownInWater() {
+        this.getHandle().goDownInWater();
+    }
+
+    @Override
+    public void setWaterSlowdown(final float waterSlowdown) {
+        this.getHandle().setWaterSlowdown(waterSlowdown);
+    }
+
+    @Override
+    public float getWaterSlowdown() {
+        return this.getHandle().getWaterSlowDown();
+    }
+
+    @Override
+    public void consumeItem(final ItemStack itemStack) {
+        Level world = this.getHandle().level();
+        this.getHandle().eat(world, net.minecraft.world.item.ItemStack.fromBukkitCopy(itemStack));
+    }
+    // Purpur end -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
index 8016c810aeaf6ee953bca549bc1e7f9a85f860fc..afafa56927af170abe92cfe0d7aced4722f1652a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
@@ -64,4 +64,11 @@ public class CraftPig extends CraftAnimals implements Pig {
     public String toString() {
         return "CraftPig";
     }
+
+    // Canvas start
+    @Override
+    public boolean isSaddled() {
+        return this.getHandle().isSaddled();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
index 9472a6f9c9584048abf1f8d11ab6254b7c7a287d..fde5d08bbdad9bbd340075a3dd082a7f05df0136 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
@@ -74,4 +74,11 @@ public class CraftStrider extends CraftAnimals implements Strider {
     public String toString() {
         return "CraftStrider";
     }
+
+    // Canvas start
+    @Override
+    public boolean isSaddled() {
+        return this.getHandle().isSaddled();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
index 6ace76a829c88e2e747dbbcce0a6582c615fc56d..1a5d1d67535b5e13779003eaa1570f662fa90e82 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
@@ -132,7 +132,40 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
     public void setRestocksToday(int restocksToday) {
         getHandle().numberOfRestocksToday = restocksToday;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+    @Override
+    public void restock(){
+        this.getHandle().restock();
+    }
+
+    @Override
+    public boolean needsToRestock(){
+        return this.getHandle().needsToRestock();
+    }
+
+    @Override
+    public void updateDemand() {
+        this.getHandle().updateDemand();
+    }
+
+    @Override
+    public void trySpawnGolem() {
+        this.getHandle().spawnGolemIfNeeded(
+            this.getHandle().portalWorld,
+            1,
+            1
+        );
+    }
+
+    @Override
+    public void trySpawnGolem(final int amt) {
+        this.getHandle().spawnGolemIfNeeded(
+            this.getHandle().portalWorld,
+            1,
+            amt
+        );
+    }
+    // Canvas end
 
     @Override
     public boolean sleep(Location location) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
index c284eb96a1e330078076cbe61f0f6e2ff4ed89bd..07ab77788c3ea73fc30412595e6e7b640601be6c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
@@ -86,4 +86,16 @@ public class CraftWarden extends CraftMonster implements org.bukkit.entity.Warde
             case ANGRY -> AngerLevel.ANGRY;
         };
     }
+
+    // Canvas start
+    @Override
+    public void setCanDisableShield(final boolean canDisableShield) {
+        this.getHandle().setCanDisableShield(canDisableShield);
+    }
+
+    @Override
+    public boolean getCanDisableShield() {
+        return this.getHandle().canDisableShield;
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
index 46336111dcf62a29390e724b1879c84c697076e9..d9aaf19c5a4cdf57c8c4d06c08318be40d29ec22 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
+import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.monster.ZombieVillager;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Villager;
@@ -127,7 +128,13 @@ public class CraftZombie extends CraftMonster implements Zombie {
     public boolean supportsBreakingDoors() {
         return getHandle().supportsBreakDoorGoal();
     }
-    // Paper end
+
+    // Canvas start
+    @Override
+    public void convertToGiant() {
+        this.getHandle().convertTo(EntityType.GIANT, true);
+    }
+    // Paper end -/- Canvas end
 
     @Override
     public boolean getAgeLock() {
