From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sun, 29 Oct 2023 17:54:28 -0700
Subject: [PATCH] Add more entity apis


diff --git a/src/main/java/me/dueris/canvas/entity/CraftMobType.java b/src/main/java/me/dueris/canvas/entity/CraftMobType.java
new file mode 100644
index 0000000000000000000000000000000000000000..2afb1fcb15dab7be11bfa690cd3098431964fd99
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/entity/CraftMobType.java
@@ -0,0 +1,46 @@
+package me.dueris.canvas.entity;
+
+
+import static net.minecraft.world.entity.MobType.ARTHROPOD;
+import static net.minecraft.world.entity.MobType.ILLAGER;
+import static net.minecraft.world.entity.MobType.UNDEAD;
+import static net.minecraft.world.entity.MobType.UNDEFINED;
+import static net.minecraft.world.entity.MobType.WATER;
+
+public class CraftMobType {
+    public static net.minecraft.world.entity.MobType canvasToNMS(me.dueris.canvas.entity.MobType mobType){
+        switch (mobType){
+            case WATER -> {
+                return WATER;
+            }
+            case ILLAGER -> {
+                return ILLAGER;
+            }
+            case UNDEAD -> {
+                return UNDEAD;
+            }
+            case ARTHROPOD -> {
+                return ARTHROPOD;
+            }
+            case UNDEFINED -> {
+                return UNDEFINED;
+            }
+        }
+        return UNDEFINED;
+    }
+
+    public static me.dueris.canvas.entity.MobType nmsToCanvas(net.minecraft.world.entity.MobType mobType) {
+        if (mobType.equals(WATER)) {
+            return MobType.WATER;
+        } else if (mobType.equals(ILLAGER)) {
+            return MobType.ILLAGER;
+        } else if (mobType.equals(UNDEAD)) {
+            return MobType.UNDEAD;
+        } else if (mobType.equals(ARTHROPOD)) {
+            return MobType.ARTHROPOD;
+        } else if (mobType.equals(UNDEFINED)) {
+            return MobType.UNDEFINED;
+        }
+        return MobType.UNDEFINED;
+    }
+}
diff --git a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
index 2bcbfe5516e30a150aa133cf8c1561b784443778..932f0e967a4f2baccd10998706f13b38c9cfacdc 100644
--- a/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
+++ b/src/main/java/net/minecraft/world/entity/ExperienceOrb.java
@@ -207,7 +207,9 @@ public class ExperienceOrb extends Entity {
             while (iterator.hasNext()) {
                 ExperienceOrb entityexperienceorb = (ExperienceOrb) iterator.next();
 
-                this.merge(entityexperienceorb);
+                if(this.allowMerge){
+                    this.merge(entityexperienceorb);
+                }
             }
         }
 
@@ -250,20 +252,25 @@ public class ExperienceOrb extends Entity {
             return false;
         }
     }
+    // Canvas start
+    public boolean allowMerge = true;
 
     private boolean canMerge(ExperienceOrb other) {
-        return other != this && ExperienceOrb.canMerge(other, this.getId(), this.value);
+        return other != this && ExperienceOrb.canMerge(other, this.getId(), this.value) && this.allowMerge;
     }
 
     private static boolean canMerge(ExperienceOrb orb, int seed, int amount) {
-        return !orb.isRemoved() && (orb.getId() - seed) % 40 == 0 && orb.value == amount;
+        return !orb.isRemoved() && (orb.getId() - seed) % 40 == 0 && orb.value == amount && orb.allowMerge;
     }
 
     private void merge(ExperienceOrb other) {
-        this.count += other.count;
-        this.age = Math.min(this.age, other.age);
-        other.discard();
+        if(this.allowMerge && other.allowMerge) {
+            this.count += other.count;
+            this.age = Math.min(this.age, other.age);
+            other.discard();
+        }
     }
+    // Canvas end
 
     private void setUnderwaterMovement() {
         Vec3 vec3d = this.getDeltaMovement();
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 4a9e85ffa12bc30b3fb46d6cae713726edef44d1..3952df88d55b94a2a96d0a5d8db2c5888f656b3e 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -2646,8 +2646,15 @@ public abstract class LivingEntity extends Entity implements Attackable {
     }
 
     public MobType getMobType() {
-        return MobType.UNDEFINED;
+        return this.mobType; // Canvas
     }
+    // Canvas start
+    MobType mobType = MobType.UNDEFINED;
+
+    public void setMobType(MobType mobType){
+        this.mobType = mobType;
+    }
+    // Canvas end
 
     public ItemStack getMainHandItem() {
         return this.getItemBySlot(EquipmentSlot.MAINHAND);
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 3410867a5dc01c1b572351c6b24dcd65dc804f14..1b0904178738af196d686fb163638f1e13e95a11 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -171,6 +171,12 @@ public abstract class Mob extends LivingEntity implements Targeting {
 
     protected void registerGoals() {}
 
+    // Canvas start
+    public void removeGoal(Goal goal){
+        this.goalSelector.removeGoal(goal);
+    }
+    // Canvas end
+
     public static AttributeSupplier.Builder createMobAttributes() {
         return LivingEntity.createLivingAttributes().add(Attributes.FOLLOW_RANGE, 16.0D).add(Attributes.ATTACK_KNOCKBACK);
     }
@@ -1757,7 +1763,7 @@ public abstract class Mob extends LivingEntity implements Targeting {
     }
 
     @Override
-    protected void jumpInLiquid(TagKey<Fluid> fluid) {
+    public void jumpInLiquid(TagKey<Fluid> fluid) { // Canvas - protected -> public
         if (this.getNavigation().canFloat()) {
             super.jumpInLiquid(fluid);
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
index 00cf59524477ec79d4354cc403fc3e75a63b81a0..bcc6575331379e0e1c0bb455968bed87bf8e158f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/TemptGoal.java
@@ -29,7 +29,7 @@ public class TemptGoal extends Goal {
     protected LivingEntity player; // CraftBukkit
     private int calmDown;
     private boolean isRunning;
-    private final Ingredient items;
+    public Ingredient items; // Canvas - private -> public && final -> !final
     private final boolean canScare;
 
     public TemptGoal(PathfinderMob entity, double speed, Ingredient food, boolean canBeScared) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
index 2ccfaab0a02cf5ff9779e250fb79a75a9852e10d..5d5ca33f80c64812f30422d17875e9cc65a22bec 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractFish.java
@@ -57,12 +57,19 @@ public abstract class AbstractFish extends WaterAnimal implements Bucketable {
     public boolean removeWhenFarAway(double distanceSquared) {
         return !this.fromBucket() && !this.hasCustomName();
     }
+    // Canvas start
+    private int maxClusterSize = 8;
 
     @Override
     public int getMaxSpawnClusterSize() {
-        return 8;
+        return this.maxClusterSize;
     }
 
+    public void setMaxSpawnClusterSize(int i){
+        this.maxClusterSize = i;
+    }
+    // Canvas end
+
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
@@ -151,10 +158,18 @@ public abstract class AbstractFish extends WaterAnimal implements Bucketable {
         return SoundEvents.BUCKET_FILL_FISH;
     }
 
-    protected boolean canRandomSwim() {
-        return true;
+    public boolean canRandomSwim() { // Canvas - protected -> public
+        return this.canRandomSwim; // Canvas - use customizable value
     }
 
+    // Canvas start
+    public void setCanRandomSwim(boolean can){
+        this.canRandomSwim = can;
+    }
+
+    private boolean canRandomSwim = true;
+    // Canvas end
+
     protected abstract SoundEvent getFlopSound();
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java b/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java
index 86b437836cb4b1f6e8ca9acd5f1f93b925cf9e51..a4800322d72f368ba67cdad8f79881daec6765f6 100644
--- a/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/AbstractSchoolingFish.java
@@ -36,11 +36,19 @@ public abstract class AbstractSchoolingFish extends AbstractFish {
         return super.getMaxSpawnClusterSize();
     }
 
+    // Canvas start - apply AbstractFish patches
     @Override
-    protected boolean canRandomSwim() {
-        return !this.isFollower();
+    public boolean canRandomSwim() {
+        return this.canRandomSwim;
     }
 
+    public void setCanRandomSwim(boolean can){
+        this.canRandomSwim = can;
+    }
+
+    private boolean canRandomSwim = true;
+    // Canvas end
+
     public boolean isFollower() {
         return this.leader != null && this.leader.isAlive();
     }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Bee.java b/src/main/java/net/minecraft/world/entity/animal/Bee.java
index 38a3dcec138d9233a46e5d523bcc6d64bc7fffd0..45239b6114b175edf8ed4052b60c203753765880 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Bee.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Bee.java
@@ -68,6 +68,7 @@ import net.minecraft.world.entity.ai.util.AirRandomPos;
 import net.minecraft.world.entity.ai.util.HoverRandomPos;
 import net.minecraft.world.entity.ai.village.poi.PoiManager;
 import net.minecraft.world.entity.ai.village.poi.PoiRecord;
+import net.minecraft.world.entity.animal.Bee.BeeLocateHiveGoal;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.crafting.Ingredient;
@@ -123,7 +124,16 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     public static final String TAG_HAS_NECTAR = "HasNectar";
     public static final String TAG_FLOWER_POS = "FlowerPos";
     public static final String TAG_HIVE_POS = "HivePos";
-    private static final UniformInt PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);
+    public UniformInt PERSISTENT_ANGER_TIME; // Canvas - private static/final -> public
+    // Canvas start - add Enderman anger customization features
+    public int minRangeAnger = 20;
+    public int maxRangeAnger = 39;
+    public void setPersistentAngerTime(int min, int max){
+        this.PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(min, max);
+        this.maxRangeAnger = max;
+        this.minRangeAnger = min;
+    }
+    // Canvas end
     @Nullable
     private UUID persistentAngerTarget;
     private float rollAmount;
@@ -140,14 +150,26 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     BlockPos savedFlowerPos;
     @Nullable
     public BlockPos hivePos;
-    Bee.BeePollinateGoal beePollinateGoal;
-    Bee.BeeGoToHiveGoal goToHiveGoal;
-    private Bee.BeeGoToKnownFlowerGoal goToKnownFlowerGoal;
+    public Bee.BeePollinateGoal beePollinateGoal; // Canvas - private -> public
+    public Bee.BeeGoToHiveGoal goToHiveGoal;
+    public Bee.BeeGoToKnownFlowerGoal goToKnownFlowerGoal; // Canvas - private -> public
     private int underWaterTicks;
+    // Canvas start
+    private int minRollFl;
+    private int maxRollFl;
+
+    public void rerollFlowerLocateTimer(){
+        this.remainingCooldownBeforeLocatingNewFlower = Mth.nextInt(this.random, minRollFl, maxRollFl);
+    }
+
+    public int getFlowerLocateTimer(){
+        return this.remainingCooldownBeforeLocatingNewFlower;
+    }
+    // Canvas end
 
     public Bee(EntityType<? extends Bee> type, Level world) {
         super(type, world);
-        this.remainingCooldownBeforeLocatingNewFlower = Mth.nextInt(this.random, 20, 60);
+        this.remainingCooldownBeforeLocatingNewFlower = Mth.nextInt(this.random, minRollFl, maxRollFl); // Canvas
         final org.purpurmc.purpur.controller.FlyingMoveControllerWASD flyingController = new org.purpurmc.purpur.controller.FlyingMoveControllerWASD(this, 0.25F, 1.0F, false); // Purpur
         // Paper start - apply gravity to bees when they get stuck in the void, fixes MC-167279
         class BeeFlyingMoveControl extends FlyingMoveControl {
@@ -231,18 +253,29 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     public float getWalkTargetValue(BlockPos pos, LevelReader world) {
         return world.getBlockState(pos).isAir() ? 10.0F : 0.0F;
     }
+    // Canvas start
+    
+    public BeeLocateHiveGoal locateHiveGoal;
+    public BeeEnterHiveGoal enterHiveGoal;
+    // Canvas end
 
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(0, new Bee.BeeAttackGoal(this, 1.399999976158142D, true));
-        this.goalSelector.addGoal(1, new Bee.BeeEnterHiveGoal());
+        // Canvas start
+        this.enterHiveGoal = new Bee.BeeEnterHiveGoal();
+        this.goalSelector.addGoal(1, this.enterHiveGoal);
+        // Canvas end
         this.goalSelector.addGoal(2, new BreedGoal(this, 1.0D));
         this.goalSelector.addGoal(3, new TemptGoal(this, 1.25D, Ingredient.of(ItemTags.FLOWERS), false));
         this.beePollinateGoal = new Bee.BeePollinateGoal();
         this.goalSelector.addGoal(4, this.beePollinateGoal);
         this.goalSelector.addGoal(5, new FollowParentGoal(this, 1.25D));
-        this.goalSelector.addGoal(5, new Bee.BeeLocateHiveGoal());
+        // Canvas start
+        this.locateHiveGoal = new Bee.BeeLocateHiveGoal();
+        this.goalSelector.addGoal(5, this.locateHiveGoal);
+        // Canvas end
         this.goToHiveGoal = new Bee.BeeGoToHiveGoal();
         this.goalSelector.addGoal(5, this.goToHiveGoal);
         this.goToKnownFlowerGoal = new Bee.BeeGoToKnownFlowerGoal();
@@ -515,7 +548,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
 
     @Override
     public void startPersistentAngerTimer() {
-        this.setRemainingPersistentAngerTime(Bee.PERSISTENT_ANGER_TIME.sample(this.random));
+        this.setRemainingPersistentAngerTime(this.PERSISTENT_ANGER_TIME.sample(this.random)); // Canvas - use public
     }
 
     private boolean doesHiveHaveSpace(BlockPos pos) {
@@ -754,7 +787,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
     }
 
     @Override
-    protected void jumpInLiquid(TagKey<Fluid> fluid) {
+    public void jumpInLiquid(TagKey<Fluid> fluid) { // Canvas - protected -> public
         this.setDeltaMovement(this.getDeltaMovement().add(0.0D, 0.01D, 0.0D));
     }
 
@@ -767,7 +800,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         return pos.closerThan(this.blockPosition(), (double) distance);
     }
 
-    private class BeePollinateGoal extends Bee.BaseBeeGoal {
+    public class BeePollinateGoal extends Bee.BaseBeeGoal { // Canvas - private -> public
 
         private static final int MIN_POLLINATION_TICKS = 400;
         private static final int MIN_FIND_FLOWER_RETRY_COOLDOWN = 20;
@@ -992,7 +1025,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         }
     }
 
-    private class BeeEnterHiveGoal extends Bee.BaseBeeGoal {
+    public class BeeEnterHiveGoal extends Bee.BaseBeeGoal { // Canvas - private -> public
 
         BeeEnterHiveGoal() {
             super();
@@ -1037,7 +1070,7 @@ public class Bee extends Animal implements NeutralMob, FlyingAnimal {
         }
     }
 
-    private class BeeLocateHiveGoal extends Bee.BaseBeeGoal {
+    public class BeeLocateHiveGoal extends Bee.BaseBeeGoal { // Canvas - private -> public
 
         BeeLocateHiveGoal() {
             super();
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cow.java b/src/main/java/net/minecraft/world/entity/animal/Cow.java
index 6d00b3cd4a9cb0fc8a9e9c27f37429a25fcf6e9d..cbcc2961a17ce3562904913742ca1186072ea137 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cow.java
@@ -47,8 +47,12 @@ public class Cow extends Animal {
     public Cow(EntityType<? extends Cow> type, Level world) {
         super(type, world);
     }
+    // Canvas start
 
-    // Purpur start
+    public void convertToMushroom(){
+        this.convertTo(EntityType.MOOSHROOM, false);
+    }
+    // Canvas end -/- Purpur start
     @Override
     public boolean isRidable() {
         return level().purpurConfig.cowRidable;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Fox.java b/src/main/java/net/minecraft/world/entity/animal/Fox.java
index 075554f28dab5809d0f2d346bad40efc16b38371..18f2720df52911f5bc6126ea4fc0ef92aba8ce4b 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Fox.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Fox.java
@@ -211,6 +211,14 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         this.entityData.define(Fox.DATA_TYPE_ID, 0);
         this.entityData.define(Fox.DATA_FLAGS_ID, (byte) 0);
     }
+    // Canvas start
+    public FaceplantGoal faceplantGoal;
+    public StalkPreyGoal stalkPreyGoal;
+    public SeekShelterGoal seekShelterGoal;
+    public SleepGoal sleepGoal;
+    public FoxSearchForItemsGoal searchForItemsGoal;
+    public FoxPounceGoal pounceGoal;
+    // Canvas end
 
     @Override
     protected void registerGoals() {
@@ -224,7 +232,10 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         this.goalSelector.addGoal(0, new Fox.FoxFloatGoal());
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(0, new ClimbOnTopOfPowderSnowGoal(this, this.level()));
-        this.goalSelector.addGoal(1, new Fox.FaceplantGoal());
+        // Canvas start
+        this.faceplantGoal = new FaceplantGoal();
+        this.goalSelector.addGoal(1, faceplantGoal);
+        // Canvas end
         this.goalSelector.addGoal(2, new Fox.FoxPanicGoal(2.2D));
         this.goalSelector.addGoal(3, new Fox.FoxBreedGoal(1.0D));
         this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, Player.class, 16.0F, 1.6D, 1.4D, (entityliving) -> {
@@ -236,17 +247,28 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         this.goalSelector.addGoal(4, new AvoidEntityGoal<>(this, PolarBear.class, 8.0F, 1.6D, 1.4D, (entityliving) -> {
             return !this.isDefending();
         }));
-        this.goalSelector.addGoal(5, new Fox.StalkPreyGoal());
-        this.goalSelector.addGoal(6, new Fox.FoxPounceGoal());
-        this.goalSelector.addGoal(6, new Fox.SeekShelterGoal(1.25D));
+        // Canvas start
+        this.stalkPreyGoal = new StalkPreyGoal();
+        this.pounceGoal = new FoxPounceGoal();
+        this.seekShelterGoal = new SeekShelterGoal(1.25D);
+        this.goalSelector.addGoal(5, stalkPreyGoal);
+        this.goalSelector.addGoal(6, pounceGoal);
+        this.goalSelector.addGoal(6, seekShelterGoal);
+        // Canvas end
         this.goalSelector.addGoal(7, new Fox.FoxMeleeAttackGoal(1.2000000476837158D, true));
-        this.goalSelector.addGoal(7, new Fox.SleepGoal());
+        // Canvas start
+        this.sleepGoal = new SleepGoal();
+        this.goalSelector.addGoal(7, sleepGoal);
+        // Canvas end
         this.goalSelector.addGoal(8, new Fox.FoxFollowParentGoal(this, 1.25D));
         this.goalSelector.addGoal(9, new Fox.FoxStrollThroughVillageGoal(32, 200));
         this.goalSelector.addGoal(10, new Fox.FoxEatBerriesGoal(1.2000000476837158D, 12, 1));
         this.goalSelector.addGoal(10, new LeapAtTargetGoal(this, 0.4F));
         this.goalSelector.addGoal(11, new WaterAvoidingRandomStrollGoal(this, 1.0D));
-        this.goalSelector.addGoal(11, new Fox.FoxSearchForItemsGoal());
+        // Canvas start
+        this.searchForItemsGoal = new FoxSearchForItemsGoal();
+        this.goalSelector.addGoal(11, searchForItemsGoal);
+        // Canvas end
         this.goalSelector.addGoal(12, new Fox.FoxLookAtPlayerGoal(this, Player.class, 24.0F));
         this.goalSelector.addGoal(13, new Fox.PerchAndSearchGoal());
         this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
@@ -912,7 +934,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
     }
 
-    private class FaceplantGoal extends Goal {
+    public class FaceplantGoal extends Goal { // Canvas - private -> public
 
         int countdown;
 
@@ -1026,7 +1048,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
     }
 
-    private class StalkPreyGoal extends Goal {
+    public class StalkPreyGoal extends Goal { // Canvas - private -> public
 
         public StalkPreyGoal() {
             this.setFlags(EnumSet.of(Goal.Flag.MOVE, Goal.Flag.LOOK));
@@ -1190,7 +1212,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
     }
 
-    private class SeekShelterGoal extends FleeSunGoal {
+    public class SeekShelterGoal extends FleeSunGoal { // Canvas - private -> public
 
         private int interval = reducedTickDelay(100);
 
@@ -1252,7 +1274,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
     }
 
-    private class SleepGoal extends Fox.FoxBehaviorGoal {
+    public class SleepGoal extends Fox.FoxBehaviorGoal { // Canvas - private -> public
 
         private static final int WAIT_TIME_BEFORE_SLEEP = reducedTickDelay(140);
         private int countdown;
@@ -1450,7 +1472,7 @@ public class Fox extends Animal implements VariantHolder<Fox.Type> {
         }
     }
 
-    private class FoxSearchForItemsGoal extends Goal {
+    public class FoxSearchForItemsGoal extends Goal { // Canvas - private -> public
 
         public FoxSearchForItemsGoal() {
             this.setFlags(EnumSet.of(Goal.Flag.MOVE));
diff --git a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
index 6ce116dc3173d17b19c4c03fe9cf494dd022f0d5..81cca115e02a935d08f3268ed261c8557e1e408b 100644
--- a/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
+++ b/src/main/java/net/minecraft/world/entity/animal/MushroomCow.java
@@ -62,8 +62,12 @@ public class MushroomCow extends Cow implements Shearable, VariantHolder<Mushroo
     public MushroomCow(EntityType<? extends MushroomCow> type, Level world) {
         super(type, world);
     }
+    // Canvas start
 
-    // Purpur start
+    public void convertToNormal(){
+        this.convertTo(EntityType.COW, false);
+    }
+    // Canvas end -/- Purpur start
     @Override
     public boolean isRidable() {
         return level().purpurConfig.mooshroomRidable;
diff --git a/src/main/java/net/minecraft/world/entity/animal/Panda.java b/src/main/java/net/minecraft/world/entity/animal/Panda.java
index 97c38b72b998bdf397c72d3ea08fd93186585f30..ad6091bb5b62c904089fb2c2201fc5a59870bb95 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Panda.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Panda.java
@@ -51,6 +51,7 @@ import net.minecraft.world.entity.ai.goal.TemptGoal;
 import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.ai.goal.target.HurtByTargetGoal;
 import net.minecraft.world.entity.ai.targeting.TargetingConditions;
+import net.minecraft.world.entity.animal.Panda.PandaSneezeGoal;
 import net.minecraft.world.entity.item.ItemEntity;
 import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.player.Player;
@@ -318,6 +319,11 @@ public class Panda extends Animal {
 
         return entitypanda;
     }
+    // Canvas start
+    public PandaSneezeGoal sneezGoal;
+    public PandaLieOnBackGoal lieOnBackGoal;
+    public PandaRollGoal rollGoal;
+    // Canvas end
 
     @Override
     protected void registerGoals() {
@@ -330,12 +336,18 @@ public class Panda extends Animal {
         this.goalSelector.addGoal(6, new Panda.PandaAvoidGoal<>(this, Player.class, 8.0F, 2.0D, 2.0D));
         this.goalSelector.addGoal(6, new Panda.PandaAvoidGoal<>(this, Monster.class, 4.0F, 2.0D, 2.0D));
         this.goalSelector.addGoal(7, new Panda.PandaSitGoal());
-        this.goalSelector.addGoal(8, new Panda.PandaLieOnBackGoal(this));
-        this.goalSelector.addGoal(8, new Panda.PandaSneezeGoal(this));
+        // Canvas start
+        this.sneezGoal = new PandaSneezeGoal(this);
+        this.goalSelector.addGoal(8, this.sneezGoal);
+        this.lieOnBackGoal = new PandaLieOnBackGoal(this);
+        this.goalSelector.addGoal(8, this.lieOnBackGoal);
+        this.rollGoal = new PandaRollGoal(this);
+        this.goalSelector.addGoal(12, this.rollGoal);
+        // Canvas end
         this.lookAtPlayerGoal = new Panda.PandaLookAtPlayerGoal(this, Player.class, 6.0F);
         this.goalSelector.addGoal(9, this.lookAtPlayerGoal);
         this.goalSelector.addGoal(10, new RandomLookAroundGoal(this));
-        this.goalSelector.addGoal(12, new Panda.PandaRollGoal(this));
+//         this.goalSelector.addGoal(12, new Panda.PandaRollGoal(this));
         this.goalSelector.addGoal(13, new FollowParentGoal(this, 1.25D));
         this.goalSelector.addGoal(14, new WaterAvoidingRandomStrollGoal(this, 1.0D));
         this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
@@ -541,7 +553,7 @@ public class Panda extends Animal {
         return Mth.lerp(tickDelta, this.rollAmountO, this.rollAmount);
     }
 
-    private void handleRoll() {
+    public void handleRoll() { // Canvas - private -> public
         ++this.rollCounter;
         if (this.rollCounter > 32) {
             this.roll(false);
@@ -1011,7 +1023,7 @@ public class Panda extends Animal {
         }
     }
 
-    private static class PandaLieOnBackGoal extends Goal {
+    public static class PandaLieOnBackGoal extends Goal { // Canvas - private -> public
 
         private final Panda panda;
         private int cooldown;
@@ -1043,7 +1055,7 @@ public class Panda extends Animal {
         }
     }
 
-    private static class PandaSneezeGoal extends Goal {
+    public static class PandaSneezeGoal extends Goal { // Canvas - private -> public
 
         private final Panda panda;
 
@@ -1113,7 +1125,7 @@ public class Panda extends Animal {
         }
     }
 
-    private static class PandaRollGoal extends Goal {
+    public static class PandaRollGoal extends Goal { // Canvas - private -> public
 
         private final Panda panda;
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Parrot.java b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
index d97ca9d567df224c34eba306b4c9b7df65f31824..9ee7399308475ea16211efb902bdaa8235f4c26c 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Parrot.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Parrot.java
@@ -70,6 +70,8 @@ import net.minecraft.world.level.block.LeavesBlock;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.phys.Vec3;
+
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.joml.Vector3f;
 
 public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot.Variant>, FlyingAnimal {
@@ -80,7 +82,16 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
             return entityinsentient != null && Parrot.MOB_SOUND_MAP.containsKey(entityinsentient.getType());
         }
     };
-    private static final Item POISONOUS_FOOD = Items.COOKIE;
+    private Item POISONOUS_FOOD = Items.COOKIE; // Canvas - static/final -> private
+    // Canvas start
+    public void setPoisonousFood(org.bukkit.Material material){
+        this.POISONOUS_FOOD = CraftMagicNumbers.getItem(material);
+    }
+
+    public org.bukkit.Material getPoisonousFood(){
+        return CraftMagicNumbers.getMaterial(this.POISONOUS_FOOD);
+    }
+    // Canvas end
     private static final Set<Item> TAME_FOOD = Sets.newHashSet(new Item[]{Items.WHEAT_SEEDS, Items.MELON_SEEDS, Items.PUMPKIN_SEEDS, Items.BEETROOT_SEEDS, Items.TORCHFLOWER_SEEDS, Items.PITCHER_POD});
     static final Map<EntityType<?>, SoundEvent> MOB_SOUND_MAP = (Map) Util.make(Maps.newHashMap(), (hashmap) -> {
         hashmap.put(EntityType.BLAZE, SoundEvents.PARROT_IMITATE_BLAZE);
@@ -227,6 +238,13 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
     public boolean isBaby() {
         return false;
     }
+    // Canvas start
+    public LandOnOwnersShoulderGoal landOnOwnersShoulderGoal;
+
+    public void landOnShoulder(){
+        this.landOnOwnersShoulderGoal.start();
+    }
+    // Canvas end
 
     @Override
     protected void registerGoals() {
@@ -239,7 +257,10 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
         this.goalSelector.addGoal(2, new SitWhenOrderedToGoal(this));
         this.goalSelector.addGoal(2, new FollowOwnerGoal(this, 1.0D, 5.0F, 1.0F, true));
         this.goalSelector.addGoal(2, new Parrot.ParrotWanderGoal(this, 1.0D));
-        this.goalSelector.addGoal(3, new LandOnOwnersShoulderGoal(this));
+        // Canvas start
+        this.landOnOwnersShoulderGoal = new LandOnOwnersShoulderGoal(this);
+        this.goalSelector.addGoal(3, this.landOnOwnersShoulderGoal);
+        // Canvas end
         this.goalSelector.addGoal(3, new FollowMobGoal(this, 1.0D, 3.0F, 7.0F));
     }
 
@@ -351,7 +372,7 @@ public class Parrot extends ShoulderRidingEntity implements VariantHolder<Parrot
 
             if (this.level().purpurConfig.parrotBreedable) return super.mobInteract(player, hand); // Purpur
             return InteractionResult.sidedSuccess(this.level().isClientSide);
-        } else if (itemstack.is(Parrot.POISONOUS_FOOD)) {
+        } else if (itemstack.is(this.POISONOUS_FOOD)) {
             if (!player.getAbilities().instabuild) {
                 itemstack.shrink(1);
             }
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pig.java b/src/main/java/net/minecraft/world/entity/animal/Pig.java
index b8de9c4630fbdaad2d3a4ca6d27a61873ddbda2e..85d5466c4891deadb1c35399826281147b092660 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pig.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pig.java
@@ -41,6 +41,7 @@ import net.minecraft.world.entity.ai.goal.WaterAvoidingRandomStrollGoal;
 import net.minecraft.world.entity.monster.ZombifiedPiglin;
 import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.entity.vehicle.DismountHelper;
+import net.minecraft.world.item.Item;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.item.Items;
 import net.minecraft.world.item.crafting.Ingredient;
@@ -54,6 +55,7 @@ import org.joml.Vector3f;
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 // CraftBukkit end
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 
 public class Pig extends Animal implements ItemSteerable, Saddleable {
 
@@ -103,6 +105,25 @@ public class Pig extends Animal implements ItemSteerable, Saddleable {
     protected boolean isAlwaysExperienceDropper() {
         return this.level().purpurConfig.pigAlwaysDropExp;
     }
+    // Canvas start
+    public TemptGoal RIDE_ITEM_GOAL;
+    public Item rideItem = Items.CARROT_ON_A_STICK;
+
+    public void setRideItem(org.bukkit.Material material){
+        this.rideItem = CraftMagicNumbers.getItem(material);
+        this.updateRideGoal();
+    }
+
+    protected void updateRideGoal(){
+        this.goalSelector.removeGoal(this.RIDE_ITEM_GOAL);
+        this.RIDE_ITEM_GOAL = new TemptGoal(this, 1.2D, Ingredient.of(this.rideItem), false);
+        this.goalSelector.addGoal(4, this.RIDE_ITEM_GOAL);
+    }
+
+    public org.bukkit.Material getRideItem(){
+        return CraftMagicNumbers.getMaterial(this.rideItem);
+    }
+    // Canvas end
 
     @Override
     protected void registerGoals() {
@@ -110,7 +131,10 @@ public class Pig extends Animal implements ItemSteerable, Saddleable {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(1, new PanicGoal(this, 1.25D));
         this.goalSelector.addGoal(3, new BreedGoal(this, 1.0D));
-        this.goalSelector.addGoal(4, new TemptGoal(this, 1.2D, Ingredient.of(Items.CARROT_ON_A_STICK), false));
+        // Canvas start
+        this.RIDE_ITEM_GOAL = new TemptGoal(this, 1.2D, Ingredient.of(this.rideItem), false);
+        this.goalSelector.addGoal(4, this.RIDE_ITEM_GOAL);
+        // Canvas end
         this.goalSelector.addGoal(4, new TemptGoal(this, 1.2D, Pig.FOOD_ITEMS, false));
         this.goalSelector.addGoal(5, new FollowParentGoal(this, 1.1D));
         this.goalSelector.addGoal(6, new WaterAvoidingRandomStrollGoal(this, 1.0D));
diff --git a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
index 54b6d780d14c27f24d3d4dc9171818f6256afd5c..ab4a66b4c304f5c110ab4d4ee129fd51af05236e 100644
--- a/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
+++ b/src/main/java/net/minecraft/world/entity/animal/PolarBear.java
@@ -322,7 +322,7 @@ public class PolarBear extends Animal implements NeutralMob {
     }
 
     @Override
-    protected float getWaterSlowDown() {
+    public float getWaterSlowDown() { // Canvas - protected -> public
         return 0.98F;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
index 54f5206b686c3cf4d2e5b470c07047a518f5dd00..91d3e9e54c01cb4465891c6c125c9c0cde2049b8 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Pufferfish.java
@@ -180,30 +180,42 @@ public class Pufferfish extends AbstractFish {
         }
 
     }
+    // Canvas start
+    public boolean canPoison = true;
 
+    public void setCanPoison(boolean can){
+        this.canPoison = can;
+    }
+    
     private void touch(Mob mob) {
-        int i = this.getPuffState();
+        if(this.canPoison){
+            int i = this.getPuffState();
 
-        if (mob.hurt(this.damageSources().mobAttack(this), (float) (1 + i))) {
-            mob.addEffect(new MobEffectInstance(MobEffects.POISON, 60 * i, 0), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
-            this.playSound(SoundEvents.PUFFER_FISH_STING, 1.0F, 1.0F);
+            if (mob.hurt(this.damageSources().mobAttack(this), (float) (1 + i))) {
+                mob.addEffect(new MobEffectInstance(MobEffects.POISON, 60 * i, 0), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
+                this.playSound(SoundEvents.PUFFER_FISH_STING, 1.0F, 1.0F);
+            }
         }
-
     }
+    // Canvas end
 
     @Override
     public void playerTouch(Player player) {
-        int i = this.getPuffState();
+        // Canvas start - implement able to poison boolean
+        if(this.canPoison){
+            int i = this.getPuffState();
 
-        if (player instanceof ServerPlayer && i > 0 && player.hurt(this.damageSources().mobAttack(this), (float) (1 + i))) {
-            if (!this.isSilent()) {
-                ((ServerPlayer) player).connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.PUFFER_FISH_STING, 0.0F));
-            }
+            if (player instanceof ServerPlayer && i > 0 && player.hurt(this.damageSources().mobAttack(this), (float) (1 + i))) {
+                if (!this.isSilent()) {
+                    ((ServerPlayer) player).connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.PUFFER_FISH_STING, 0.0F));
+                }
 
-            player.addEffect(new MobEffectInstance(MobEffects.POISON, 60 * i, 0), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
+                player.addEffect(new MobEffectInstance(MobEffects.POISON, 60 * i, 0), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ATTACK); // CraftBukkit
+            }
         }
 
     }
+    // Canvas end
 
     @Override
     protected SoundEvent getAmbientSound() {
@@ -227,17 +239,34 @@ public class Pufferfish extends AbstractFish {
 
     @Override
     public EntityDimensions getDimensions(Pose pose) {
-        return super.getDimensions(pose).scale(Pufferfish.getScale(this.getPuffState()));
+        return super.getDimensions(pose).scale(this.getScale(this.getPuffState()));
+    }
+    // Canvas start
+    public float scaleSmallSize = 0.5f;
+    public float scaleMediumSize = 0.7f;
+    public float scaleLargeSize = 1.0f;
+
+    public void setScaleSizeSmall(float scale){
+        this.scaleSmallSize = scale;
+    }
+
+    public void setScaleSizeMedium(float scale){
+        this.scaleMediumSize = scale;
+    }
+
+    public void setScaleSizeLarge(float scale){
+        this.scaleLargeSize = scale;
     }
+    // Canvas end
 
-    private static float getScale(int puffState) {
+    public float getScale(int puffState) { // Canvas - private/static -> public
         switch (puffState) {
             case 0:
-                return 0.5F;
+                return this.scaleSmallSize; // Canvas - use custom scaling
             case 1:
-                return 0.7F;
+                return this.scaleMediumSize; // Canvas - use custom scaling
             default:
-                return 1.0F;
+                return this.scaleLargeSize; // Canvas - use custom scaling
         }
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
index eae2488f2a46e543b496b7a2919aabbb55dcb825..be6a3abdcace862441920c938e3d136ae9a3fee9 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Rabbit.java
@@ -511,7 +511,7 @@ public class Rabbit extends Animal implements VariantHolder<Rabbit.Variant> {
         return world.getBlockState(pos.below()).is(BlockTags.RABBITS_SPAWNABLE_ON) && isBrightEnoughToSpawn(world, pos);
     }
 
-    boolean wantsMoreFood() {
+    public boolean wantsMoreFood() { // Canvas - ensure public specified bc i picky
         return this.moreCarrotTicks <= 0;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index d1f9cec3469aa382534c0b0282ce48a94b0e05e3..3bd418d1600d952488472069f91c40676c2fc887 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -84,7 +84,29 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
     public static final int TOTAL_PLAYDEAD_TIME = 200;
     protected static final ImmutableList<? extends SensorType<? extends Sensor<? super Axolotl>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.AXOLOTL_ATTACKABLES, SensorType.AXOLOTL_TEMPTATIONS);
     // CraftBukkit - decompile error
-    protected static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER, MemoryModuleType.LOOK_TARGET, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.ATTACK_COOLING_DOWN, MemoryModuleType.NEAREST_VISIBLE_ADULT, new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.PLAY_DEAD_TICKS, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HAS_HUNTING_COOLDOWN, MemoryModuleType.IS_PANICKING});
+    // Canvas start - expand for easier readability
+    public static final ImmutableList<? extends MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.<MemoryModuleType<?>>of(MemoryModuleType.BREED_TARGET, // Canvas - protected -> public
+                        MemoryModuleType.NEAREST_LIVING_ENTITIES,
+                        MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
+                        MemoryModuleType.NEAREST_VISIBLE_PLAYER,
+                         MemoryModuleType.NEAREST_VISIBLE_ATTACKABLE_PLAYER,
+                         MemoryModuleType.LOOK_TARGET,
+                         MemoryModuleType.WALK_TARGET,
+                         MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
+                         MemoryModuleType.PATH,
+                         MemoryModuleType.ATTACK_TARGET,
+                         MemoryModuleType.ATTACK_COOLING_DOWN,
+                         MemoryModuleType.NEAREST_VISIBLE_ADULT,
+                         new MemoryModuleType[]{MemoryModuleType.HURT_BY_ENTITY,
+                            MemoryModuleType.PLAY_DEAD_TICKS,
+                            MemoryModuleType.NEAREST_ATTACKABLE,
+                            MemoryModuleType.TEMPTING_PLAYER,
+                            MemoryModuleType.TEMPTATION_COOLDOWN_TICKS,
+                            MemoryModuleType.IS_TEMPTED,
+                            MemoryModuleType.HAS_HUNTING_COOLDOWN,
+                            MemoryModuleType.IS_PANICKING
+    });
+    // Canvas end
     private static final EntityDataAccessor<Integer> DATA_VARIANT = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_PLAYING_DEAD = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> FROM_BUCKET = SynchedEntityData.defineId(Axolotl.class, EntityDataSerializers.BOOLEAN);
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java b/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
index 9417ce67cc231d5bfa6813f78ec27196eed423c8..e420f677b3f47d743b5ac6a833c05713be32989f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Frog.java
@@ -70,8 +70,29 @@ import org.joml.Vector3f;
 public class Frog extends Animal implements VariantHolder<FrogVariant> {
     public static final Ingredient TEMPTATION_ITEM = Ingredient.of(Items.SLIME_BALL);
     protected static final ImmutableList<SensorType<? extends Sensor<? super Frog>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.HURT_BY, SensorType.FROG_ATTACKABLES, SensorType.FROG_TEMPTATIONS, SensorType.IS_IN_WATER);
-    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_LIVING_ENTITIES, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.BREED_TARGET, MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryModuleType.ATTACK_TARGET, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.HURT_BY, MemoryModuleType.HURT_BY_ENTITY, MemoryModuleType.NEAREST_ATTACKABLE, MemoryModuleType.IS_IN_WATER, MemoryModuleType.IS_PREGNANT, MemoryModuleType.IS_PANICKING, MemoryModuleType.UNREACHABLE_TONGUE_TARGETS);
-    private static final EntityDataAccessor<FrogVariant> DATA_VARIANT_ID = SynchedEntityData.defineId(Frog.class, EntityDataSerializers.FROG_VARIANT);
+    // Canvas start - expand for better readability
+    public static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, // Canvas - protected -> public
+                        MemoryModuleType.NEAREST_LIVING_ENTITIES,
+                        MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
+                        MemoryModuleType.WALK_TARGET,
+                        MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
+                        MemoryModuleType.PATH,
+                        MemoryModuleType.BREED_TARGET,
+                        MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS,
+                        MemoryModuleType.LONG_JUMP_MID_JUMP,
+                        MemoryModuleType.ATTACK_TARGET,
+                        MemoryModuleType.TEMPTING_PLAYER,
+                        MemoryModuleType.TEMPTATION_COOLDOWN_TICKS,
+                        MemoryModuleType.IS_TEMPTED,
+                        MemoryModuleType.HURT_BY,
+                        MemoryModuleType.HURT_BY_ENTITY,
+                        MemoryModuleType.NEAREST_ATTACKABLE,
+                        MemoryModuleType.IS_IN_WATER,
+                        MemoryModuleType.IS_PREGNANT,
+                        MemoryModuleType.IS_PANICKING,
+                        MemoryModuleType.UNREACHABLE_TONGUE_TARGETS);
+    // Canvas end
+    private static final EntityDataAccessor<FrogVariant> DATA_VARIANT_ID = SynchedEntityData.defineId(Frog.class,EntityDataSerializers.FROG_VARIANT);
     private static final EntityDataAccessor<OptionalInt> DATA_TONGUE_TARGET_ID = SynchedEntityData.defineId(Frog.class, EntityDataSerializers.OPTIONAL_UNSIGNED_INT);
     private static final int FROG_FALL_DAMAGE_REDUCTION = 5;
     public static final String VARIANT_KEY = "variant";
@@ -125,7 +146,6 @@ public class Frog extends Animal implements VariantHolder<FrogVariant> {
     public boolean isControllable() {
         return level().purpurConfig.frogControllable;
     }
-
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
@@ -157,6 +177,12 @@ public class Frog extends Animal implements VariantHolder<FrogVariant> {
         return (Brain<Frog>) super.getBrain(); // Paper - decompile fix
     }
 
+    // Canvas start
+    public void youngify(){
+        this.convertTo(EntityType.TADPOLE, true);
+    }
+    // Canvas end
+
     @Override
     protected void defineSynchedData() {
         super.defineSynchedData();
diff --git a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
index 6b012bea26e8ef0c04571f43da67f6e108188830..c47bfa8990f39bfa6a275b5e48215f17758e0ce0 100644
--- a/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
+++ b/src/main/java/net/minecraft/world/entity/animal/frog/Tadpole.java
@@ -43,7 +43,19 @@ public class Tadpole extends AbstractFish {
     public static float HITBOX_HEIGHT = 0.3F;
     public int age;
     protected static final ImmutableList<SensorType<? extends Sensor<? super Tadpole>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.HURT_BY, SensorType.FROG_TEMPTATIONS);
-    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, MemoryModuleType.IS_TEMPTED, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.BREED_TARGET, MemoryModuleType.IS_PANICKING);
+    // Canvas start - expand for better readability
+    public static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, // Canvas - protected -> public
+                        MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
+                        MemoryModuleType.WALK_TARGET,
+                        MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
+                        MemoryModuleType.PATH,
+                        MemoryModuleType.NEAREST_VISIBLE_ADULT,
+                        MemoryModuleType.TEMPTATION_COOLDOWN_TICKS,
+                        MemoryModuleType.IS_TEMPTED,
+                        MemoryModuleType.TEMPTING_PLAYER,
+                        MemoryModuleType.BREED_TARGET,
+                        MemoryModuleType.IS_PANICKING);
+    // Canvas end
     public boolean ageLocked; // Paper
     private org.purpurmc.purpur.controller.WaterMoveControllerWASD purpurController; // Purpur
 
@@ -109,6 +121,12 @@ public class Tadpole extends AbstractFish {
         return (Brain<Tadpole>) super.getBrain(); // CraftBukkit - decompile error
     }
 
+    // Canvas start
+    public void makeOld(){
+        this.convertTo(EntityType.FROG, true);
+    }
+    // Canvas end
+
     @Override
     protected SoundEvent getFlopSound() {
         return SoundEvents.TADPOLE_FLOP;
@@ -248,7 +266,7 @@ public class Tadpole extends AbstractFish {
         return this.age;
     }
 
-    private void ageUp(int seconds) {
+    public void ageUp(int seconds) { // Canvas - private -> public
         if (this.ageLocked) return; // Paper
         this.setAge(this.age + seconds * 20);
     }
@@ -261,36 +279,48 @@ public class Tadpole extends AbstractFish {
 
     }
 
+    // Canvas start
+    private boolean canAge = true;
+    public void setCanAgeUp(boolean canAge){
+        this.canAge = canAge;
+    }
+
+    public boolean getCanAgeUp(){
+        return this.canAge;
+    }
+
     private void ageUp() {
         Level world = this.level();
 
         if (world instanceof ServerLevel) {
-            ServerLevel worldserver = (ServerLevel) world;
-            Frog frog = (Frog) EntityType.FROG.create(this.level());
-
-            if (frog != null) {
-                frog.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
-                frog.finalizeSpawn(worldserver, this.level().getCurrentDifficultyAt(frog.blockPosition()), MobSpawnType.CONVERSION, (SpawnGroupData) null, (CompoundTag) null);
-                frog.setNoAi(this.isNoAi());
-                if (this.hasCustomName()) {
-                    frog.setCustomName(this.getCustomName());
-                    frog.setCustomNameVisible(this.isCustomNameVisible());
-                }
-
-                frog.setPersistenceRequired();
-                // CraftBukkit start
-                if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTransformEvent(this, frog, org.bukkit.event.entity.EntityTransformEvent.TransformReason.METAMORPHOSIS).isCancelled()) {
-                    this.setAge(0); // Sets the age to 0 for avoid a loop if the event is canceled
-                    return;
+            if(this.canAge){
+                ServerLevel worldserver = (ServerLevel) world;
+                Frog frog = (Frog) EntityType.FROG.create(this.level());
+    
+                if (frog != null) {
+                    frog.moveTo(this.getX(), this.getY(), this.getZ(), this.getYRot(), this.getXRot());
+                    frog.finalizeSpawn(worldserver, this.level().getCurrentDifficultyAt(frog.blockPosition()), MobSpawnType.CONVERSION, (SpawnGroupData) null, (CompoundTag) null);
+                    frog.setNoAi(this.isNoAi());
+                    if (this.hasCustomName()) {
+                        frog.setCustomName(this.getCustomName());
+                        frog.setCustomNameVisible(this.isCustomNameVisible());
+                    }
+    
+                    frog.setPersistenceRequired();
+                    // CraftBukkit start
+                    if (org.bukkit.craftbukkit.event.CraftEventFactory.callEntityTransformEvent(this, frog, org.bukkit.event.entity.EntityTransformEvent.TransformReason.METAMORPHOSIS).isCancelled()) {
+                        this.setAge(0); // Sets the age to 0 for avoid a loop if the event is canceled
+                        return;
+                    }
+                    // CraftBukkit end
+                    this.playSound(SoundEvents.TADPOLE_GROW_UP, 0.15F, 1.0F);
+                    worldserver.addFreshEntityWithPassengers(frog, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.METAMORPHOSIS); // CraftBukkit - add SpawnReason
+                    this.discard();
                 }
-                // CraftBukkit end
-                this.playSound(SoundEvents.TADPOLE_GROW_UP, 0.15F, 1.0F);
-                worldserver.addFreshEntityWithPassengers(frog, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.METAMORPHOSIS); // CraftBukkit - add SpawnReason
-                this.discard();
             }
         }
-
     }
+    // Canvas end
 
     private int getTicksLeftUntilAdult() {
         return Math.max(0, Tadpole.ticksToBeFrog - this.age);
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
index bab9e413bd55d48e3e54bee66a6cd5be19a8f415..9a884302aea44bf1dc28b70d2dfdd77cd1931251 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/AbstractHorse.java
@@ -200,11 +200,16 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         return (0.44999998807907104D + random.nextDouble() * 0.3D + random.nextDouble() * 0.3D + random.nextDouble() * 0.3D) * 0.25D;
     }
 
+    public RunAroundLikeCrazyGoal runAroundLikeCrazyGoal; // Canvas
+
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HorseHasRider(this)); // Purpur
         this.goalSelector.addGoal(1, new PanicGoal(this, 1.2D));
-        this.goalSelector.addGoal(1, new RunAroundLikeCrazyGoal(this, 1.2D));
+        // Canvas start
+        this.runAroundLikeCrazyGoal = new RunAroundLikeCrazyGoal(this, 1.2D);
+        this.goalSelector.addGoal(1, this.runAroundLikeCrazyGoal);
+        // Canvas end
         this.goalSelector.addGoal(2, new BreedGoal(this, 1.0D, AbstractHorse.class));
         this.goalSelector.addGoal(4, new FollowParentGoal(this, 1.0D));
         this.goalSelector.addGoal(6, new WaterAvoidingRandomStrollGoal(this, 0.7D));
@@ -218,10 +223,15 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         this.addBehaviourGoals();
     }
 
-    protected void addBehaviourGoals() {
+    // Canvas start
+    public TemptGoal temptGoal;
+
+    public void addBehaviourGoals() { // Canvas - protected -> public
         this.goalSelector.addGoal(0, new FloatGoal(this));
-        this.goalSelector.addGoal(3, new TemptGoal(this, 1.25D, Ingredient.of(Items.GOLDEN_CARROT, Items.GOLDEN_APPLE, Items.ENCHANTED_GOLDEN_APPLE), false));
+        this.temptGoal = new TemptGoal(this, 1.25D, Ingredient.of(Items.GOLDEN_CARROT, Items.GOLDEN_APPLE, Items.ENCHANTED_GOLDEN_APPLE), false);
+        this.goalSelector.addGoal(3, this.temptGoal);
     }
+    // Canvas end
 
     @Override
     protected void defineSynchedData() {
@@ -624,10 +634,20 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         return AbstractHorse.FOOD_ITEMS.test(stack);
     }
 
-    private void moveTail() {
+    public void moveTail() { // Canvas - private -> public
         this.tailCounter = 1;
     }
 
+    // Canvas start
+    public void skeletonify(){
+        this.convertTo(EntityType.SKELETON_HORSE, true);
+    }
+
+    public void zombify(){
+        this.convertTo(EntityType.ZOMBIE_HORSE, true);
+    }
+    // Canvas end
+
     @Override
     protected void dropEquipment() {
         super.dropEquipment();
@@ -670,7 +690,7 @@ public abstract class AbstractHorse extends Animal implements ContainerListener,
         }
     }
 
-    protected void followMommy() {
+    public void followMommy() { // Canvas - protected -> public
         if (this.isBred() && this.isBaby() && !this.isEating()) {
             LivingEntity entityliving = this.level().getNearestEntity(AbstractHorse.class, AbstractHorse.MOMMY_TARGETING, this, this.getX(), this.getY(), this.getZ(), this.getBoundingBox().inflate(16.0D));
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
index b414572411e5b2b78fd66e860273656d53df9d9d..dc68de097fa59998e6ccae628d290e3a32865172 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/Llama.java
@@ -548,7 +548,7 @@ public class Llama extends AbstractChestedHorse implements VariantHolder<Llama.V
     }
 
     @Override
-    protected void followMommy() {
+    public void followMommy() { // Canvas - protected -> public
         if (!this.inCaravan() && this.isBaby()) {
             super.followMommy();
         }
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
index 6e3af90f4cb4f7722bd1601a515fd9a377459d1b..36ead8827ccfba1f4892faab3ddb325e72b4b734 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/SkeletonHorse.java
@@ -91,6 +91,15 @@ public class SkeletonHorse extends AbstractHorse {
     public SoundEvent getDeathSound() {
         return SoundEvents.SKELETON_HORSE_DEATH;
     }
+    // Canvas start
+    public void revertToHorse(){
+        this.convertTo(EntityType.HORSE, true);
+    }
+
+    public void zombify(){
+        this.convertTo(EntityType.ZOMBIE_HORSE, true);
+    }
+    // Canvas end
 
     @Override
     protected SoundEvent getHurtSound(DamageSource source) {
@@ -171,7 +180,7 @@ public class SkeletonHorse extends AbstractHorse {
     }
 
     @Override
-    protected float getWaterSlowDown() {
+    public float getWaterSlowDown() { // Canvas - protected -> public
         return 0.96F;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
index 9e4a1c3ea8ce9ef438f958498cce4b04ec70dba9..33964fa099294b7ce355dd07810b02cd540ab528 100644
--- a/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
+++ b/src/main/java/net/minecraft/world/entity/animal/horse/ZombieHorse.java
@@ -58,6 +58,15 @@ public class ZombieHorse extends AbstractHorse {
     public boolean isSensitiveToWater() {
         return this.level().purpurConfig.zombieHorseTakeDamageFromWater;
     }
+    // Canvas start
+    public void revertToHorse(){
+        this.convertTo(EntityType.HORSE, true);
+    }
+
+    public void skeletonify(){
+        this.convertTo(EntityType.SKELETON_HORSE, true);
+    }
+    // Canvas end
 
     @Override
     protected boolean isAlwaysExperienceDropper() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java b/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
index 784b69e03225965b9fd85d3b68b95fd086725f12..ea4677845ae4fb55fbc250fdc6167c08e9ecfc9b 100644
--- a/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
+++ b/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
@@ -273,29 +273,42 @@ public class Sniffer extends Animal {
 
     public Sniffer transitionTo(Sniffer.State state) {
         switch (state) {
-            case SCENTING:
-                this.setState(Sniffer.State.SCENTING).onScentingStart();
-                break;
-            case SNIFFING:
-                this.playSound(SoundEvents.SNIFFER_SNIFFING, 1.0F, 1.0F);
-                this.setState(Sniffer.State.SNIFFING);
-                break;
-            case DIGGING:
-                this.setState(Sniffer.State.DIGGING).onDiggingStart();
-                break;
-            case RISING:
+            case SCENTING -> {
+                if(canSearch){
+                    this.setState(Sniffer.State.SCENTING).onScentingStart();
+                    break;
+                }
+            }
+            case SNIFFING -> {
+                if(canSniff){
+                    this.playSound(SoundEvents.SNIFFER_SNIFFING, 1.0F, 1.0F);
+                    this.setState(Sniffer.State.SNIFFING);
+                    break;
+                }
+            }
+            case DIGGING -> {
+                if(canDig){
+                    this.setState(Sniffer.State.DIGGING).onDiggingStart();
+                    break;
+                }
+            }
+            case RISING -> {
                 this.playSound(SoundEvents.SNIFFER_DIGGING_STOP, 1.0F, 1.0F);
                 this.setState(Sniffer.State.RISING);
                 break;
-            case FEELING_HAPPY:
+            }
+            case FEELING_HAPPY -> {
                 this.playSound(SoundEvents.SNIFFER_HAPPY, 1.0F, 1.0F);
                 this.setState(Sniffer.State.FEELING_HAPPY);
                 break;
-            case IDLING:
+            }
+            case IDLING -> {
                 this.setState(Sniffer.State.IDLING);
                 break;
-            case SEARCHING:
+            }
+            case SEARCHING -> {
                 this.setState(Sniffer.State.SEARCHING);
+            }
         }
 
         return this;
diff --git a/src/main/java/net/minecraft/world/entity/monster/Evoker.java b/src/main/java/net/minecraft/world/entity/monster/Evoker.java
index 4095f03ccd1712335baffe858603618100aed99c..5115832eece2798738dfbafc8547477fbc79ce62 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Evoker.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Evoker.java
@@ -81,17 +81,29 @@ public class Evoker extends SpellcasterIllager {
     protected boolean isAlwaysExperienceDropper() {
         return this.level().purpurConfig.evokerAlwaysDropExp;
     }
+    // Canvas start
+    public Evoker.EvokerSummonSpellGoal summonSpellGoal;
+    public Evoker.EvokerCastingSpellGoal castingSpellGoal;
+    public Evoker.EvokerAttackSpellGoal attackSpellGoal;
+    public Evoker.EvokerWololoSpellGoal wololoSpellGoal;
+    // Canvas end
 
     @Override
     protected void registerGoals() {
         super.registerGoals();
         this.goalSelector.addGoal(0, new FloatGoal(this));
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
-        this.goalSelector.addGoal(1, new Evoker.EvokerCastingSpellGoal());
+        this.goalSelector.addGoal(1, castingSpellGoal); // Canvas
         this.goalSelector.addGoal(2, new AvoidEntityGoal<>(this, Player.class, 8.0F, 0.6D, 1.0D));
-        this.goalSelector.addGoal(4, new Evoker.EvokerSummonSpellGoal());
-        this.goalSelector.addGoal(5, new Evoker.EvokerAttackSpellGoal());
-        this.goalSelector.addGoal(6, new Evoker.EvokerWololoSpellGoal());
+        // Canvas start
+        summonSpellGoal = new EvokerSummonSpellGoal();
+        castingSpellGoal = new EvokerCastingSpellGoal();
+        attackSpellGoal = new EvokerAttackSpellGoal();
+        wololoSpellGoal = new EvokerWololoSpellGoal();
+        this.goalSelector.addGoal(4, summonSpellGoal);
+        this.goalSelector.addGoal(5, attackSpellGoal);
+        this.goalSelector.addGoal(6, wololoSpellGoal);
+        // Canvas end
         this.goalSelector.addGoal(8, new RandomStrollGoal(this, 0.6D));
         this.goalSelector.addGoal(9, new LookAtPlayerGoal(this, Player.class, 3.0F, 1.0F));
         this.goalSelector.addGoal(10, new LookAtPlayerGoal(this, Mob.class, 8.0F));
@@ -185,7 +197,7 @@ public class Evoker extends SpellcasterIllager {
         }
     }
 
-    private class EvokerSummonSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal {
+    public class EvokerSummonSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal { // Canvas - private -> public
 
         private final TargetingConditions vexCountTargeting = TargetingConditions.forNonCombat().range(16.0D).ignoreLineOfSight().ignoreInvisibilityTesting();
 
@@ -205,17 +217,17 @@ public class Evoker extends SpellcasterIllager {
         }
 
         @Override
-        protected int getCastingTime() {
+        public int getCastingTime() { // Canvas - protected -> private
             return 100;
         }
 
         @Override
-        protected int getCastingInterval() {
+        public int getCastingInterval() { // Canvas - protected -> private
             return 340;
         }
 
         @Override
-        protected void performSpellCasting() {
+        public void performSpellCasting() { // Canvas - protected -> private
             ServerLevel worldserver = (ServerLevel) Evoker.this.level();
 
             for (int i = 0; i < 3; ++i) {
@@ -246,7 +258,7 @@ public class Evoker extends SpellcasterIllager {
         }
     }
 
-    private class EvokerAttackSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal {
+    public class EvokerAttackSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal { // Canvas - private -> public
 
         EvokerAttackSpellGoal() {
             super();
@@ -263,7 +275,7 @@ public class Evoker extends SpellcasterIllager {
         }
 
         @Override
-        protected void performSpellCasting() {
+        public void performSpellCasting() { // Canvas - protected -> private
             LivingEntity entityliving = Evoker.this.getTarget();
             double d0 = Math.min(entityliving.getY(), Evoker.this.getY());
             double d1 = Math.max(entityliving.getY(), Evoker.this.getY()) + 1.0D;
@@ -337,7 +349,7 @@ public class Evoker extends SpellcasterIllager {
         }
     }
 
-    public class EvokerWololoSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal {
+    public class EvokerWololoSpellGoal extends SpellcasterIllager.SpellcasterUseSpellGoal { // Canvas - private -> public
 
         private final TargetingConditions wololoTargeting = TargetingConditions.forNonCombat().range(16.0D).selector((entityliving) -> {
             return ((Sheep) entityliving).getColor() == DyeColor.BLUE;
@@ -381,7 +393,7 @@ public class Evoker extends SpellcasterIllager {
         }
 
         @Override
-        protected void performSpellCasting() {
+        public void performSpellCasting() { // Canvas - protected -> private
             Sheep entitysheep = Evoker.this.getWololoTarget();
 
             if (entitysheep != null && entitysheep.isAlive()) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ghast.java b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
index 640f0c378a18cf0a820ad544bb3b172b698c6bfc..67fd40c6ed3644d33706f541d332f10d188b9f61 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ghast.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ghast.java
@@ -77,14 +77,19 @@ public class Ghast extends FlyingMob implements Enemy {
             setDeltaMovement(mot.scale(0.9D));
         }
     }
-    // Purpur end
+    // Purpur end -/- Canvas start
+    public GhastShootFireballGoal shootFireballGoal;
+    // Canvas end
 
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(5, new Ghast.RandomFloatAroundGoal(this));
         this.goalSelector.addGoal(7, new Ghast.GhastLookGoal(this));
-        this.goalSelector.addGoal(7, new Ghast.GhastShootFireballGoal(this));
+        // Canvas start
+        this.shootFireballGoal = new GhastShootFireballGoal(this);
+        this.goalSelector.addGoal(7, shootFireballGoal);
+        // Canvas end
         this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.targetSelector.addGoal(1, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, (entityliving) -> {
             return Math.abs(entityliving.getY() - this.getY()) <= 4.0D;
@@ -114,7 +119,7 @@ public class Ghast extends FlyingMob implements Enemy {
         return true;
     }
 
-    private static boolean isReflectedFireball(DamageSource damageSource) {
+    public static boolean isReflectedFireball(DamageSource damageSource) {
         return damageSource.getDirectEntity() instanceof LargeFireball && damageSource.getEntity() instanceof Player;
     }
 
@@ -348,7 +353,7 @@ public class Ghast extends FlyingMob implements Enemy {
         }
     }
 
-    private static class GhastShootFireballGoal extends Goal {
+    public class GhastShootFireballGoal extends Goal { // Canvas - private -> public
 
         private final Ghast ghast;
         public int chargeTime;
diff --git a/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java b/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
index 1ad97267394d3717b1871336193cdc91f3ffb276..aee214544214e646632f654d79a5b5b12cde2c43 100644
--- a/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
+++ b/src/main/java/net/minecraft/world/entity/monster/MagmaCube.java
@@ -131,7 +131,7 @@ public class MagmaCube extends Slime {
     }
 
     @Override
-    protected void jumpInLiquid(TagKey<Fluid> fluid) {
+    public void jumpInLiquid(TagKey<Fluid> fluid) { // Canvas - protected -> public
         if (fluid == FluidTags.LAVA) {
             Vec3 vec3 = this.getDeltaMovement();
             this.setDeltaMovement(vec3.x, (double)(0.22F + (float)this.getSize() * 0.05F), vec3.z);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Ravager.java b/src/main/java/net/minecraft/world/entity/monster/Ravager.java
index c9c21c87e3bd1c404fbef6768761bcb5d97d98b9..efce0f8cbdfcdc04016974e297275d477be45c70 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Ravager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Ravager.java
@@ -274,7 +274,7 @@ public class Ravager extends Raider {
 
     }
 
-    private void roar() {
+    public void roar() { // Canvas - private -> public
         if (this.isAlive()) {
             List<? extends LivingEntity> list = this.level().getEntitiesOfClass(LivingEntity.class, this.getBoundingBox().inflate(4.0D), Ravager.NO_RAVAGER_AND_ALIVE);
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Strider.java b/src/main/java/net/minecraft/world/entity/monster/Strider.java
index 2f49b528601a1feb7246fe7a9b83ce828c2d78fc..63feee4f0b8cffab20f523cb2bf069b8099e354f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Strider.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Strider.java
@@ -82,7 +82,7 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
     private static final float SUFFOCATE_STEERING_MODIFIER = 0.35F;
     private static final float STEERING_MODIFIER = 0.55F;
     private static final Ingredient FOOD_ITEMS = Ingredient.of(Items.WARPED_FUNGUS);
-    private static final Ingredient TEMPT_ITEMS = Ingredient.of(Items.WARPED_FUNGUS, Items.WARPED_FUNGUS_ON_A_STICK);
+    // private static final Ingredient TEMPT_ITEMS = Ingredient.of(Items.WARPED_FUNGUS, Items.WARPED_FUNGUS_ON_A_STICK); - Canvas - move to this.rideItem for steering item customization
     private static final EntityDataAccessor<Integer> DATA_BOOST_TIME = SynchedEntityData.defineId(Strider.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Boolean> DATA_SUFFOCATING = SynchedEntityData.defineId(Strider.class, EntityDataSerializers.BOOLEAN);
     private static final EntityDataAccessor<Boolean> DATA_SADDLE_ID = SynchedEntityData.defineId(Strider.class, EntityDataSerializers.BOOLEAN);
@@ -189,13 +189,35 @@ public class Strider extends Animal implements ItemSteerable, Saddleable {
         }
 
     }
+    // Canvas start
+    public TemptGoal RIDE_ITEM_GOAL;
+    public net.minecraft.world.item.Item rideItem = Items.WARPED_FUNGUS_ON_A_STICK;
+
+    public void setRideItem(org.bukkit.Material material){
+        this.rideItem = org.bukkit.craftbukkit.util.CraftMagicNumbers.getItem(material);
+        this.updateRideGoal();
+    }
+
+    protected void updateRideGoal(){
+        this.goalSelector.removeGoal(this.RIDE_ITEM_GOAL);
+        this.RIDE_ITEM_GOAL = new TemptGoal(this, 1.2D, Ingredient.of(this.rideItem), false);
+        this.goalSelector.addGoal(4, this.RIDE_ITEM_GOAL);
+    }
+
+    public org.bukkit.Material getRideItem(){
+        return org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(this.rideItem);
+    }
+    // Canvas end
 
     @Override
     protected void registerGoals() {
         this.goalSelector.addGoal(1, new PanicGoal(this, 1.65D));
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(2, new BreedGoal(this, 1.0D));
-        this.temptGoal = new TemptGoal(this, 1.4D, Strider.TEMPT_ITEMS, false);
+        // Canvas start
+        this.RIDE_ITEM_GOAL = new TemptGoal(this, 1.2D, Ingredient.of(this.rideItem), false);
+        this.goalSelector.addGoal(4, this.RIDE_ITEM_GOAL);
+        // Canvas end
         this.goalSelector.addGoal(3, this.temptGoal);
         this.goalSelector.addGoal(4, new Strider.StriderGoToLavaGoal(this, 1.0D));
         this.goalSelector.addGoal(5, new FollowParentGoal(this, 1.0D));
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
index df8c7a45eb49a8c667030eb67d6d49dcbaef4fcf..b4afe3565e7bbbaa655031613f28377df5dccc53 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombifiedPiglin.java
@@ -124,6 +124,12 @@ public class ZombifiedPiglin extends Zombie implements NeutralMob {
         this.targetSelector.addGoal(2, new NearestAttackableTargetGoal<>(this, Player.class, 10, true, false, this::isAngryAt));
         this.targetSelector.addGoal(3, new ResetUniversalAngerTargetGoal<>(this, true));
     }
+    // Canvas start
+    
+    public void convertToNormal(){
+        this.convertTo(EntityType.PIGLIN, true);
+    }
+    // Canvas end
 
     public static AttributeSupplier.Builder createAttributes() {
         return Zombie.createAttributes().add(Attributes.SPAWN_REINFORCEMENTS_CHANCE, 0.0D).add(Attributes.MOVEMENT_SPEED, 0.23000000417232513D).add(Attributes.ATTACK_DAMAGE, 5.0D);
diff --git a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
index 8e829d522a6012f409161ad5a9a06721a942d7e4..4e02d60850e0cfc7dc42aa2af2671c2c0c0e1c5f 100644
--- a/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
+++ b/src/main/java/net/minecraft/world/entity/monster/piglin/Piglin.java
@@ -95,8 +95,13 @@ public class Piglin extends AbstractPiglin implements CrossbowAttackMob, Invento
         super(type, world);
         this.xpReward = 5;
     }
+    // Canvas start
 
-    // Purpur start
+    public void convertToZombified(){
+        this.convertTo(EntityType.ZOMBIFIED_PIGLIN, true);
+    }
+    // Canvas end -/- Purpur start
+    
     @Override
     public boolean isRidable() {
         return level().purpurConfig.piglinRidable;
diff --git a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
index 5e66c2bd3807619cadee5b7081d93d21886e2806..bb6ab18d8a8ebb873f8b6a027ff6a1af202f8175 100644
--- a/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
+++ b/src/main/java/net/minecraft/world/entity/monster/warden/Warden.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.monster.warden;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.collect.ImmutableList;
 import com.mojang.logging.LogUtils;
 import com.mojang.serialization.DataResult;
 import com.mojang.serialization.Dynamic;
@@ -47,12 +48,17 @@ import net.minecraft.world.entity.SpawnGroupData;
 import net.minecraft.world.entity.ai.Brain;
 import net.minecraft.world.entity.ai.attributes.AttributeSupplier;
 import net.minecraft.world.entity.ai.attributes.Attributes;
+import net.minecraft.world.entity.ai.behavior.MeleeAttack;
+import net.minecraft.world.entity.ai.behavior.SetEntityLookTarget;
+import net.minecraft.world.entity.ai.behavior.SetWalkTargetFromAttackTargetIfTargetOutOfReach;
+import net.minecraft.world.entity.ai.behavior.StopAttackingIfTargetInvalid;
 import net.minecraft.world.entity.ai.behavior.warden.SonicBoom;
 import net.minecraft.world.entity.ai.memory.MemoryModuleType;
 import net.minecraft.world.entity.ai.navigation.GroundPathNavigation;
 import net.minecraft.world.entity.ai.navigation.PathNavigation;
 import net.minecraft.world.entity.monster.Monster;
 import net.minecraft.world.entity.player.Player;
+import net.minecraft.world.entity.schedule.Activity;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.ServerLevelAccessor;
@@ -186,11 +192,19 @@ public class Warden extends Monster implements VibrationSystem {
         return false;
     }
 
+    // Canvas start
     @Override
     public boolean canDisableShield() {
-        return true;
+        return canDisableShield;
+    }
+
+    public void setCanDisableShield(boolean canDisableShield){
+        this.canDisableShield = canDisableShield;
     }
 
+    public boolean canDisableShield = true;
+    // Canvas end
+
     @Override
     protected float nextStep() {
         return this.moveDist + 0.55F;
@@ -589,6 +603,22 @@ public class Warden extends Monster implements VibrationSystem {
         SonicBoom.setCooldown(this, 200);
     }
 
+    // Canvas start
+    /* public void trySonicBoom(Warden warden, Brain<Warden> brain){
+        brain.addActivityAndRemoveMemoryWhenStopped(Activity.FIGHT, 10, ImmutableList.of(DIG_COOLDOWN_SETTER, StopAttackingIfTargetInvalid.<Warden>create((entity) -> {
+            return !warden.getAngerLevel().isAngry() || !warden.canTargetEntity(entity);
+        }, WardenAi::onTargetInvalid, false), SetEntityLookTarget.create((entity) -> {
+            return isTarget(warden, entity);
+        }, (float)warden.getAttributeValue(Attributes.FOLLOW_RANGE)), SetWalkTargetFromAttackTargetIfTargetOutOfReach.create(1.2F), new SonicBoom(), MeleeAttack.create(18)), MemoryModuleType.ATTACK_TARGET);
+    } */
+
+    private boolean isTarget(Warden warden, LivingEntity entity) {
+        return warden.getBrain().getMemory(MemoryModuleType.ATTACK_TARGET).filter((entityx) -> {
+            return entityx == entity;
+        }).isPresent();
+    }
+    // Canvas end
+
     @Override
     public EntityDimensions getDimensions(Pose pose) {
         EntityDimensions entitysize = super.getDimensions(pose);
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 02df0bf09f2ef91e4dafbdcea590b4634b2abf08..fe33f96c6cbd6a9a4703b412c5f7f0813926d1da 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -522,7 +522,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
 
     }
 
-    private boolean needsToRestock() {
+    public boolean needsToRestock() { // Canvas - private -> public
         Iterator iterator = this.getOffers().iterator();
 
         MerchantOffer merchantrecipe;
@@ -590,7 +590,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
         this.resendOffersToTradingPlayer();
     }
 
-    private void updateDemand() {
+    public void updateDemand() { // Canvas - private -> public
         Iterator iterator = this.getOffers().iterator();
 
         while (iterator.hasNext()) {
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
index c58bd47b045b8bfcbfef4444ba95f2e7d04dcc23..c4c3abc74767d07f4c5b2b65eb461f76db783375 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Arrow.java
@@ -199,6 +199,20 @@ public class Arrow extends AbstractArrow {
         }
 
     }
+    // Canvas start
+    protected float divisor = 8;
+
+    public float getDivisor(){
+        return divisor;
+    }
+
+    public void setDivisor(float divisor){
+        if(divisor == 0){
+            divisor = 1;
+        }
+        this.divisor = divisor;
+    }
+    // Canvas end
 
     @Override
     protected void doPostHurtEffects(LivingEntity target) {
@@ -211,7 +225,7 @@ public class Arrow extends AbstractArrow {
         while (iterator.hasNext()) {
             mobeffect = (MobEffectInstance) iterator.next();
             target.addEffect(new MobEffectInstance(mobeffect.getEffect(), Math.max(mobeffect.mapDuration((i) -> {
-                return i / 8;
+                return carpetfixes.helpers.FastMath.round(i / this.divisor); // Canvas
             }), 1), mobeffect.getAmplifier(), mobeffect.isAmbient(), mobeffect.isVisible()), entity, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.ARROW); // CraftBukkit
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrowableProjectile.java b/src/main/java/net/minecraft/world/entity/projectile/ThrowableProjectile.java
index ab777952bda1651796ed41e8a7fc6621f27db9aa..65b99cfaa75169b5d445b30d53af2a56b0813b26 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrowableProjectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrowableProjectile.java
@@ -100,7 +100,14 @@ public abstract class ThrowableProjectile extends Projectile {
         this.setPos(d0, d1, d2);
     }
 
-    protected float getGravity() {
-        return 0.03F;
+    public float getGravity() { // Canvas - protected -> public
+        return this.gravity; // Canvas - use custom value
     }
+    // Canvas start
+    private float gravity = 0.03f;
+
+    public void setGravity(float gravity){
+        this.gravity = gravity;
+    }
+    // Canvas end
 }
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownExperienceBottle.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownExperienceBottle.java
index e53046c6d47b4fd3d82132bc980a31b9491df6a7..ccf3c53560ed94f092ff9b7f97a6246d7f1cb248 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownExperienceBottle.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownExperienceBottle.java
@@ -31,7 +31,7 @@ public class ThrownExperienceBottle extends ThrowableItemProjectile {
     }
 
     @Override
-    protected float getGravity() {
+    public float getGravity() { // Canvas - protected -> public
         return 0.07F;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java b/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java
index b34dbb083ecc3a6ead7721391a79e7061e098498..495a2602ed59231f265988fa514df658ff23325d 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/ThrownPotion.java
@@ -66,7 +66,7 @@ public class ThrownPotion extends ThrowableItemProjectile implements ItemSupplie
     }
 
     @Override
-    protected float getGravity() {
+    public float getGravity() { // Canvas - protected -> public
         return 0.05F;
     }
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
index f9cd595ec28f0284d11bae6bfc5bf92d56526ef9..a45eea96de7c89d1a414b4289862cb8a1dcd6136 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAbstractHorse.java
@@ -96,6 +96,18 @@ public abstract class CraftAbstractHorse extends CraftAnimals implements Abstrac
         return this.getHandle().getOwnerUUID();
     }
 
+    // Canvas start
+    @Override
+    public void skeletonify(){
+        this.getHandle().skeletonify();
+    }
+
+    @Override
+    public void zombify(){
+        this.getHandle().zombify();
+    }
+    // Canvas end
+
     public void setOwnerUUID(UUID uuid) {
         this.getHandle().setOwnerUUID(uuid);
     }
@@ -145,5 +157,21 @@ public abstract class CraftAbstractHorse extends CraftAnimals implements Abstrac
     public void setEating(boolean eating) {
        this.getHandle().setMouthOpen(eating);
     }
-    // Paper end - Horse API
+
+    // Canvas start
+    @Override
+    public void runAroundLikeCrazy() {
+        this.getHandle().runAroundLikeCrazyGoal.start();
+    }
+
+    @Override
+    public void tryMakeAngry() {
+        this.getHandle().makeMad();
+    }
+
+    @Override
+    public boolean isSaddled() {
+        return this.getHandle().isSaddled();
+    }
+    // Paper end - Horse API -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
index 6d2fe30742f8b41d53dd2cbff120fcc042ea0e0c..230438530b56fb849adc486cc4560d0d23068802 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftArrow.java
@@ -2,6 +2,7 @@ package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
 import net.minecraft.core.BlockPos;
+import net.minecraft.world.entity.projectile.SpectralArrow;
 import org.bukkit.block.Block;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.AbstractArrow;
@@ -122,7 +123,13 @@ public class CraftArrow extends AbstractProjectile implements AbstractArrow {
     public boolean hasNoPhysics() {
         return this.getHandle().isNoPhysics();
     }
-    // Paper end
+
+    // Canvas start
+    @Override
+    public boolean isSpectral() {
+        return this.getHandle() instanceof SpectralArrow;
+    }
+    // Paper end -/- Canvas end
 
     @Override
     public void setTicksLived(int value) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
index d542abc254d9308a8c77f183317696535f9e127e..67fd9102d0472c44ffc8d089cf157a5705185ea0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
@@ -84,11 +84,17 @@ public class CraftAxolotl extends CraftAnimals implements Axolotl, io.papermc.pa
     public void setRareVarientChanceBound(int bound) {
         this.getHandle().setRareVarientChanceBound(bound);
     }
+
     @Override
     public int getSupportingEffectAmplifier() {
         return this.getHandle().getSupportingEffectAmplifier();
     }
 
+    @Override
+    public void rehydrate(){
+        this.getHandle().rehydrate();
+    }
+
     // Canvas end
 
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
index 3dac93b0ab5d5acf5b33dc4b0efed60319eb657b..2d0912392f25c98b464f26f3a83d29dae548b14d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBee.java
@@ -6,6 +6,8 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.util.CraftLocation;
 import org.bukkit.entity.Bee;
+import org.apache.commons.lang3.tuple.Pair;
+import java.lang.Integer;
 
 public class CraftBee extends CraftAnimals implements Bee {
 
@@ -123,5 +125,65 @@ public class CraftBee extends CraftAnimals implements Bee {
     public int getTicksSincePollination() {
         return this.getHandle().ticksWithoutNectarSinceExitingHive;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+
+    @Override
+    public void rerollFlowerLocateTimer() {
+        this.getHandle().rerollFlowerLocateTimer();
+    }
+
+    @Override
+    public int getFlowerLocateTimer() {
+        return this.getHandle().getFlowerLocateTimer();
+    }
+
+    @Override
+    public void setPersistentAngerTime(final int min, final int max) {
+        this.getHandle().setPersistentAngerTime(min, max);
+    }
+
+    @Override
+    public Pair<Integer, Integer> getPersistentAngerTime() {
+        int max = this.getHandle().maxRangeAnger;
+        int min = this.getHandle().minRangeAnger;
+        Pair<Integer, Integer> integerPair = new Pair<Integer, Integer>() {
+            @Override
+            @Deprecated(forRemoval = true)
+            public Integer setValue(final Integer value) {
+                return null;
+            }
+
+            @Override
+            public Integer getLeft() {
+                return min;
+            }
+
+            @Override
+            public Integer getRight() {
+                return max;
+            }
+        };
+        return integerPair;
+    }
+
+    @Override
+    public void tryEnterClosestHive() {
+        this.getHandle().enterHiveGoal.start();
+    }
+
+    @Override
+    public void tryPollinate() {
+       this.getHandle().beePollinateGoal.start();
+    }
+
+    @Override
+    public void goToKnownFlower() {
+        this.getHandle().goToKnownFlowerGoal.start();
+    }
+
+    @Override
+    public void tryFindNewHive() {
+        this.getHandle().locateHiveGoal.start();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
index 69c8a50d6daf8763a0bce84ac0d6dc8911b4fd5b..3a16e5171079d1d2605b3c3e481b0369ed0a574e 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
@@ -52,4 +52,10 @@ public class CraftCamel extends CraftAbstractHorse implements Camel {
         }
     }
 
+    // Canvas start
+    @Override
+    public boolean isSaddled() {
+        return this.getHandle().isSaddled();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
index cea78de9713d5be1df3a6abdd167cd51093501f4..81d50b484a97565e176418a2cae1790fe38b1226 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
@@ -111,5 +111,5 @@ public class CraftCat extends CraftTameableAnimal implements Cat {
     public void spawnMorningGift() {
         this.getHandle().giveMorningGift();
     }
-    // Paper End - More cat api -&- Canvas end
+    // Paper End - More cat api -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
index 7babc404e4920cd264206d4e83b1be6f841cdb8c..520bbdbb59a110ca8828ec7114da25df81a53f81 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCow.java
@@ -18,4 +18,11 @@ public class CraftCow extends CraftAnimals implements Cow {
     public String toString() {
         return "CraftCow";
     }
+    // Canvas start
+
+    @Override
+    public void convertToMushroom(){
+        this.getHandle().convertToMushroom();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java
index 18ef90b574dca82c1729868a83612ca06a6ccdce..814ee0946b6c977a695189ba818d7a2d3b9d6f68 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntityType.java
@@ -26,4 +26,4 @@ public class CraftEntityType {
         return CraftRegistry.getMinecraftRegistry(Registries.ENTITY_TYPE)
                 .getOptional(KEY_CACHE.computeIfAbsent(bukkit, type -> net.minecraft.resources.ResourceKey.create(Registries.ENTITY_TYPE, CraftNamespacedKey.toMinecraft(type.getKey())))).orElseThrow();
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
index b66dd5c5c5d98c9285e0d0a4ad4b99a66419f732..94caad439d8e134fdddebf46e2cbc7181da93e9a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEvoker.java
@@ -42,5 +42,21 @@ public class CraftEvoker extends CraftSpellcaster implements Evoker {
     public void setWololoTarget(org.bukkit.entity.Sheep sheep) {
         getHandle().setWololoTarget(sheep == null ? null : ((org.bukkit.craftbukkit.entity.CraftSheep) sheep).getHandle());
     }
-    // Paper end
+
+    // Canvas start
+    @Override
+    public void performSummonSpell() {
+        this.getHandle().summonSpellGoal.performSpellCasting();
+    }
+
+    @Override
+    public void performAttackSpell() {
+        this.getHandle().attackSpellGoal.performSpellCasting();
+    }
+
+    @Override
+    public void performWololoSpell(org.bukkit.entity.Sheep wololoTarget) {
+        this.getHandle().wololoSpellGoal.performSpellCasting();
+    }
+    // Paper end -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
index 5a7d314ec0562e472f5dc45924a7b24841cff126..6696e68072a0ac1291a5cbb5fc904d113198c282 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftExperienceOrb.java
@@ -39,4 +39,16 @@ public class CraftExperienceOrb extends CraftEntity implements ExperienceOrb {
     public String toString() {
         return "CraftExperienceOrb";
     }
+    // Canvas start - allow configure can merge for xp orbs
+
+    @Override
+    public void setAllowMerge(final boolean allowMerge) {
+        this.getHandle().allowMerge = allowMerge;
+    }
+
+    @Override
+    public boolean allowMerge() {
+        return this.getHandle().allowMerge;
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
index eb10f94d5ed8ca89d3786138647dd43357609a6c..818970c09f748d6fa16e8ad0f5bccd6e1c89dd12 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFish.java
@@ -19,4 +19,26 @@ public class CraftFish extends CraftWaterMob implements Fish, io.papermc.paper.e
     public String toString() {
         return "CraftFish";
     }
+    // Canvas start
+
+    @Override
+    public void setCanRandomSwim(boolean can) {
+        this.getHandle().setCanRandomSwim(can);
+    }
+
+    @Override
+    public boolean getCanRandomSwim() {
+        return this.getHandle().canRandomSwim();
+    }
+
+    @Override
+    public int getMaxSpawnClusterSize() {
+        return this.getHandle().getMaxSpawnClusterSize();
+    }
+
+    @Override
+    public void setMaxSpawnClusterSize(int size) {
+        this.getHandle().setMaxSpawnClusterSize(size);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
index c455deb4fd2a7684bcc01a8212c362a2375c190b..314fc84938398a836e4fa6529588b2b9beecdda2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFox.java
@@ -149,5 +149,36 @@ public class CraftFox extends CraftAnimals implements Fox {
     public void setFaceplanted(boolean faceplanted) {
         this.getHandle().setFaceplanted(faceplanted);
     }
-    // Paper end - Add more fox behavior API
+
+    // Canvas start
+    @Override
+    public void faceplant() {
+        this.getHandle().faceplantGoal.start();
+    }
+
+    @Override
+    public void tryStalkPrey() {
+        this.getHandle().stalkPreyGoal.start();
+    }
+
+    @Override
+    public void seekShelter() {
+        this.getHandle().seekShelterGoal.start();
+    }
+
+    @Override
+    public void sleep() {
+        this.getHandle().sleepGoal.start();
+    }
+
+    @Override
+    public void searchForItems() {
+        this.getHandle().searchForItemsGoal.start();
+    }
+
+    @Override
+    public void tryPounce() {
+        this.getHandle().pounceGoal.start();
+    }
+    // Paper end - Add more fox behavior API -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
index 65131d153b78a0787b977b9f65c15cfcbd395d11..99997fe11961908875de83f38d3f35457b1c65dc 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFrog.java
@@ -51,6 +51,13 @@ public class CraftFrog extends CraftAnimals implements org.bukkit.entity.Frog {
 
         this.getHandle().setVariant(CraftVariant.bukkitToMinecraft(variant));
     }
+    // Canvas start
+    
+    @Override
+    public void youngify(){
+        this.getHandle().youngify();
+    }
+    // Canvas end
 
     public static class CraftVariant {
 
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
index 97fa4e1e70203194bd939618b2fad92665af6d59..66df97e7623d508dd7e0df529154c18d018ec5df 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGhast.java
@@ -40,5 +40,10 @@ public class CraftGhast extends CraftFlying implements Ghast, CraftEnemy {
         com.google.common.base.Preconditions.checkArgument(explosionPower >= 0 && explosionPower <= 127, "The explosion power has to be between 0 and 127");
         this.getHandle().setExplosionPower(explosionPower);
     }
+
+    @Override
+    public void shootFireBall() {
+        this.getHandle().shootFireballGoal.start();
+    }
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
index 957ac54707b5fd6fcd783ef64ed0ccbdeb44942a..7dee348fb2dc59f5353131ce2593c245f402c1b3 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftLivingEntity.java
@@ -9,9 +9,12 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+import me.dueris.canvas.entity.CraftMobType;
 import net.minecraft.network.protocol.game.ClientboundHurtAnimationPacket;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
+import net.minecraft.tags.FluidTags;
+import net.minecraft.tags.TagKey;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.damagesource.DamageSource;
 import net.minecraft.world.effect.MobEffectInstance;
@@ -30,6 +33,8 @@ import net.minecraft.world.entity.projectile.ThrownEgg;
 import net.minecraft.world.entity.projectile.ThrownEnderpearl;
 import net.minecraft.world.entity.projectile.ThrownExperienceBottle;
 import net.minecraft.world.entity.projectile.ThrownTrident;
+import net.minecraft.world.level.Level;
+import net.minecraft.world.level.material.Fluid;
 import org.bukkit.FluidCollisionMode;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -44,8 +49,7 @@ import org.bukkit.craftbukkit.entity.memory.CraftMemoryKey;
 import org.bukkit.craftbukkit.entity.memory.CraftMemoryMapper;
 import org.bukkit.craftbukkit.inventory.CraftEntityEquipment;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.craftbukkit.potion.CraftPotionEffectType;
-import org.bukkit.craftbukkit.potion.CraftPotionUtil;
+import org.bukkit.craftbukkit.potion.*; // Canvas - change to use * due to patch error
 import org.bukkit.entity.memory.MemoryKey;
 import org.bukkit.event.entity.EntityPotionEffectEvent;
 import org.bukkit.event.player.PlayerTeleportEvent;
@@ -61,7 +65,6 @@ import org.bukkit.util.Vector;
 // Canvas start
 import org.bukkit.scheduler.BukkitRunnable;
 import org.bukkit.entity.*;
-import org.bukkit.attribute.*;
 import org.bukkit.plugin.*;
 // Canvas end
 
@@ -1148,5 +1151,64 @@ public class CraftLivingEntity extends CraftEntity implements LivingEntity {
     public void setShouldBurnInDay(boolean shouldBurnInDay) {
         getHandle().setShouldBurnInDay(shouldBurnInDay);
     }
-    // Purpur end
+
+    // Canvas start
+    @Override
+    public void setMobType(final me.dueris.canvas.entity.MobType mobType) {
+        MobType ET = CraftMobType.canvasToNMS(mobType);
+        this.getHandle().setMobType(ET);
+    }
+
+    @Override
+    public me.dueris.canvas.entity.MobType getMobType() {
+        return CraftMobType.nmsToCanvas(this.getHandle().getMobType());
+    }
+
+    @Override
+    public void jump() {
+        this.getHandle().jumpFromGround();
+    }
+
+    @Override
+    public void jumpInLiquid() {
+        if(this.getLocation().getBlock().isLiquid()){
+            if(getNmsFluidTag(this.getLocation().getBlock()) != null){
+                this.getHandle().jumpInLiquid(getNmsFluidTag(this.getLocation().getBlock()));
+            }
+        }
+    }
+
+    public TagKey<Fluid> getNmsFluidTag(Block block){
+        switch (block.getType()){
+            case WATER -> {
+                return FluidTags.WATER;
+            }
+            case LAVA -> {
+                return FluidTags.LAVA;
+            }
+        }
+        return null;
+    }
+
+    @Override
+    public void goDownInWater() {
+        this.getHandle().goDownInWater();
+    }
+
+    @Override
+    public void setWaterSlowdown(final float waterSlowdown) {
+        this.getHandle().setWaterSlowdown(waterSlowdown);
+    }
+
+    @Override
+    public float getWaterSlowdown() {
+        return this.getHandle().getWaterSlowDown();
+    }
+
+    @Override
+    public void consumeItem(final ItemStack itemStack) {
+        Level world = this.getHandle().level();
+        this.getHandle().eat(world, net.minecraft.world.item.ItemStack.fromBukkitCopy(itemStack));
+    }
+    // Purpur end -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
index 5fa6d582583da6c8551fae8727ba90aca73950a6..6e1d55f6fb144fa0d556cbbccd09e015e502dc8d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
@@ -59,7 +59,13 @@ public abstract class CraftMob extends CraftLivingEntity implements Mob {
     private CraftMob getSelf(){
         return this;
     }
+    // Canvas start
 
+    @Override
+    public void convertTo(EntityType entityType, boolean keepEquipment){
+        net.minecraft.world.entity.EntityType ENT = org.bukkit.craftbukkit.entity.CraftEntityType.bukkitToMinecraft(entityType);
+        this.getHandle().convertTo(ENT, keepEquipment);
+    }
     // Canvas end
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
index e5df527d3f0b82327bcd4cb66c12baa439b4cec6..2ed41b29b83d274c1bf34a25b13658719f5f1eb0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMushroomCow.java
@@ -68,4 +68,11 @@ public class CraftMushroomCow extends CraftCow implements MushroomCow, io.paperm
     public String toString() {
         return "CraftMushroomCow";
     }
+    // Canvas start
+
+    @Override
+    public void convertToNormal(){
+        this.getHandle().convertToNormal();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
index 01d104d91de9e1319d27e39d3f474318c7809486..0a343ca2d2c3e33dc9247c0a243c8a632b5b9517 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPanda.java
@@ -4,6 +4,7 @@ import com.google.common.base.Preconditions;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Panda;
 import org.bukkit.entity.Panda.Gene;
+import org.jetbrains.annotations.ApiStatus.OverrideOnly;
 
 public class CraftPanda extends CraftAnimals implements Panda {
 
@@ -144,4 +145,20 @@ public class CraftPanda extends CraftAnimals implements Panda {
 
         return net.minecraft.world.entity.animal.Panda.Gene.values()[gene.ordinal()];
     }
+    // Canvas start
+    @Override
+    public void roll(){
+        this.getHandle().rollGoal.start();
+    }
+
+    @Override
+    public void sneeze(){
+        this.getHandle().sneezGoal.start();
+    }
+
+    @Override
+    public void lieOnBack(){
+        this.getHandle().lieOnBackGoal.start();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
index 04d6cf6a1f3ae8316e3b2862c2d1b04e84a3b20a..2dd49a3accf529b85d575aa1c30edbb383a27dbe 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftParrot.java
@@ -4,6 +4,7 @@ import com.google.common.base.Preconditions;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Parrot;
 import org.bukkit.entity.Parrot.Variant;
+import org.jetbrains.annotations.ApiStatus.OverrideOnly;
 
 public class CraftParrot extends CraftTameableAnimal implements Parrot {
 
@@ -37,4 +38,21 @@ public class CraftParrot extends CraftTameableAnimal implements Parrot {
     public boolean isDancing() {
         return this.getHandle().isPartyParrot();
     }
+    // Canvas start
+
+    @Override
+    public void landOnShoulder(){
+        this.getHandle().landOnShoulder();
+    }
+
+    @Override
+    public void setPoisonousFood(org.bukkit.Material material){
+        this.getHandle().setPoisonousFood(material);
+    }
+
+    @Override
+    public org.bukkit.Material getPoisonousFood(){
+        return this.getHandle().getPoisonousFood();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
index 8016c810aeaf6ee953bca549bc1e7f9a85f860fc..2ef32f4f86d458404e3c698997d2f314132dc1f2 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPig.java
@@ -52,8 +52,18 @@ public class CraftPig extends CraftAnimals implements Pig {
 
     @Override
     public Material getSteerMaterial() {
-        return Material.CARROT_ON_A_STICK;
+        return this.getRideItem(); // Canvas
     }
+    // Canvas start
+
+    public void setSteerMaterial(org.bukkit.Material material){
+        this.getHandle().setRideItem(material);
+    }
+
+    private org.bukkit.Material getRideItem(){
+        return this.getHandle().getRideItem();
+    }
+    // Canvas end
 
     @Override
     public net.minecraft.world.entity.animal.Pig getHandle() {
@@ -64,4 +74,11 @@ public class CraftPig extends CraftAnimals implements Pig {
     public String toString() {
         return "CraftPig";
     }
+
+    // Canvas start
+    @Override
+    public boolean isSaddled() {
+        return this.getHandle().isSaddled();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
index 49beb836d2801aadf869feefa602616daebe633f..7c4554aada7f3aa701f0d0a7a968e87c11bf2bd4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPigZombie.java
@@ -54,4 +54,11 @@ public class CraftPigZombie extends CraftZombie implements PigZombie {
     public void setConversionTime(int time) {
         throw new UnsupportedOperationException("Not supported by this Entity.");
     }
+    // Canvas start
+
+    @Override
+    public void convertToNormal(){
+        this.getHandle().convertToNormal();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
index 03e74b29ebf0f9b9a0dbc6ffc872e22a22be20f0..e30445cf74fc4c5c381fbb71c28dff7ba977085b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPiglin.java
@@ -116,5 +116,11 @@ public class CraftPiglin extends CraftPiglinAbstract implements Piglin, com.dest
     public boolean isDancing() {
         return this.getHandle().isDancing();
     }
-    // Paper end
+    // Paper end -/- Canvas start
+
+    @Override
+    public void convertToZombified(){
+        this.getHandle().convertToZombified();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
index 35a8219734633529325430810e88755b2dd23125..2c41e9972ef49f04f63e85ea1b11755c2c6a25fa 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPufferFish.java
@@ -29,4 +29,31 @@ public class CraftPufferFish extends CraftFish implements PufferFish {
     public String toString() {
         return "CraftPufferFish";
     }
+    // Canvas start
+
+    @Override
+    public void setScaleSizeSmall(float scale){
+        this.getHandle().setScaleSizeSmall(scale);
+    }
+
+    @Override
+    public void setScaleSizeMedium(float scale){
+        this.getHandle().setScaleSizeMedium(scale);
+    }
+
+    @Override
+    public void setScaleSizeLarge(float scale){
+        this.getHandle().setScaleSizeLarge(scale);
+    }
+
+    @Override
+    public void setCanPoison(boolean can){
+        this.getHandle().setCanPoison(can);
+    }
+
+    @Override
+    public boolean getCanPoison(){
+        return this.getHandle().canPoison;
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
index eb7e2902dc134847711284dd2af8abda7627c7ab..bbbea2cfcaed7204f672ad274355fc5cf7d9ce86 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRabbit.java
@@ -40,5 +40,10 @@ public class CraftRabbit extends CraftAnimals implements Rabbit {
     public int getMoreCarrotTicks() {
         return this.getHandle().moreCarrotTicks;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+
+    @Override
+    public boolean wantsMoreFood(){
+        return this.getHandle().moreCarrotTicks <= 0;
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
index 09796ce15658e3f7c223a265a547a51ee729ed40..216a6b64132d49e8ff265f65c04e513dacd9ac9f 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftRavager.java
@@ -48,5 +48,11 @@ public class CraftRavager extends CraftRaider implements Ravager {
     public void setRoarTicks(int ticks) {
         this.getHandle().roarTick = ticks;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+    
+    @Override
+    public void roar(){
+        this.getHandle().roar();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
index fbb47491dcc75f8247dee9f123f946f99ef1467f..22c16fa13734d80d7fbbb0674530a785c2aeb04d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeletonHorse.java
@@ -30,6 +30,18 @@ public class CraftSkeletonHorse extends CraftAbstractHorse implements SkeletonHo
         return this.getHandle().isTrap();
     }
 
+    // Canvas start
+    @Override
+    public void revertToHorse(){
+        this.getHandle().revertToHorse();
+    }
+
+    @Override
+    public void zombify(){
+        this.getHandle().zombify();
+    }
+    // Canvas end
+
     @Override
     public void setTrapped(boolean trapped) {
         this.getHandle().setTrap(trapped);
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
index 4f7f6cf6ca24406570d2d29dc63dc89401119961..cf389bc8f5b23ce844f69eaa97b37394d623958b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSnowman.java
@@ -18,6 +18,13 @@ public class CraftSnowman extends CraftGolem implements Snowman, com.destroystok
     public void setDerp(boolean derpMode) {
         this.getHandle().setPumpkin(!derpMode);
     }
+    // Canvas start
+
+    // @Override
+    // public void shear(){
+    //     this.getHandle().shear();
+    // }
+    // Canvas end
 
     @Override
     public SnowGolem getHandle() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
index 7c2405b534e7c2c538b6c38ae4e25f9dfb3acd13..a13f1f168bee8f2dcd582876236ec7762883a726 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
@@ -18,9 +18,17 @@ public class CraftSquid extends CraftWaterMob implements Squid {
     public String toString() {
         return "CraftSquid";
     }
+    // Canvas start
 
     @Override
     public void setGlowingSquid() {
         this.getHandle().setGlowingSquid();
     }
+
+    @Override
+    public void squirtInk(){
+        this.getHandle().spawnInk();
+    }
+
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
index 9472a6f9c9584048abf1f8d11ab6254b7c7a287d..848700bf7547ac738fa819a2d15ebe6f27225ae8 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftStrider.java
@@ -62,8 +62,15 @@ public class CraftStrider extends CraftAnimals implements Strider {
 
     @Override
     public Material getSteerMaterial() {
-        return Material.WARPED_FUNGUS_ON_A_STICK;
+        return this.getHandle().getRideItem(); // Canvas
     }
+    // Canvas start
+
+    @Override
+    public void setSteerMaterial(org.bukkit.Material material){
+        this.getHandle().setRideItem(material);
+    }
+    // Canvas end
 
     @Override
     public net.minecraft.world.entity.monster.Strider getHandle() {
@@ -74,4 +81,11 @@ public class CraftStrider extends CraftAnimals implements Strider {
     public String toString() {
         return "CraftStrider";
     }
+
+    // Canvas start
+    @Override
+    public boolean isSaddled() {
+        return this.getHandle().isSaddled();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
index d7c6a0bbc5671ea8f2488230c94df5146a1e98b9..d05a52305a79fd7bfd1b2debb2c6a70f5483c57a 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTadpole.java
@@ -38,5 +38,21 @@ public class CraftTadpole extends CraftFish implements org.bukkit.entity.Tadpole
     public boolean getAgeLock() {
         return this.getHandle().ageLocked;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+
+    @Override
+    public void makeOld(){
+        this.getHandle().makeOld();
+    }
+
+    @Override
+    public void setCanAgeUp(boolean canAge){
+        this.getHandle().setCanAgeUp(canAge);
+    }
+
+    @Override
+    public boolean getCanAgeUp(){
+        return this.getHandle().getCanAgeUp();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
index b2747e37600cadc385e2e9e1115ba1d4ec22f5da..13befbf7452c008d8b2363911f023ecebbaa2bbf 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftTippedArrow.java
@@ -58,6 +58,18 @@ public class CraftTippedArrow extends CraftArrow implements Arrow {
         this.getHandle().effects.clear();
         this.getHandle().updateColor();
     }
+    // Canvas start
+
+    @Override
+    public void setEffectDurationDivisor(final float divisor) {
+        this.getHandle().setDivisor(divisor);
+    }
+
+    @Override
+    public float getEffectDurationDivisor() {
+        return this.getHandle().getDivisor();
+    }
+    // Canvas end
 
     @Override
     public List<PotionEffect> getCustomEffects() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
index 6ace76a829c88e2e747dbbcce0a6582c615fc56d..1a5d1d67535b5e13779003eaa1570f662fa90e82 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftVillager.java
@@ -132,7 +132,40 @@ public class CraftVillager extends CraftAbstractVillager implements Villager {
     public void setRestocksToday(int restocksToday) {
         getHandle().numberOfRestocksToday = restocksToday;
     }
-    // Paper end
+    // Paper end -/- Canvas start
+    @Override
+    public void restock(){
+        this.getHandle().restock();
+    }
+
+    @Override
+    public boolean needsToRestock(){
+        return this.getHandle().needsToRestock();
+    }
+
+    @Override
+    public void updateDemand() {
+        this.getHandle().updateDemand();
+    }
+
+    @Override
+    public void trySpawnGolem() {
+        this.getHandle().spawnGolemIfNeeded(
+            this.getHandle().portalWorld,
+            1,
+            1
+        );
+    }
+
+    @Override
+    public void trySpawnGolem(final int amt) {
+        this.getHandle().spawnGolemIfNeeded(
+            this.getHandle().portalWorld,
+            1,
+            amt
+        );
+    }
+    // Canvas end
 
     @Override
     public boolean sleep(Location location) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
index c284eb96a1e330078076cbe61f0f6e2ff4ed89bd..07ab77788c3ea73fc30412595e6e7b640601be6c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftWarden.java
@@ -86,4 +86,16 @@ public class CraftWarden extends CraftMonster implements org.bukkit.entity.Warde
             case ANGRY -> AngerLevel.ANGRY;
         };
     }
+
+    // Canvas start
+    @Override
+    public void setCanDisableShield(final boolean canDisableShield) {
+        this.getHandle().setCanDisableShield(canDisableShield);
+    }
+
+    @Override
+    public boolean getCanDisableShield() {
+        return this.getHandle().canDisableShield;
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
index 46336111dcf62a29390e724b1879c84c697076e9..d9aaf19c5a4cdf57c8c4d06c08318be40d29ec22 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombie.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
+import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.monster.ZombieVillager;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Villager;
@@ -127,7 +128,13 @@ public class CraftZombie extends CraftMonster implements Zombie {
     public boolean supportsBreakingDoors() {
         return getHandle().supportsBreakDoorGoal();
     }
-    // Paper end
+
+    // Canvas start
+    @Override
+    public void convertToGiant() {
+        this.getHandle().convertTo(EntityType.GIANT, true);
+    }
+    // Paper end -/- Canvas end
 
     @Override
     public boolean getAgeLock() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java
index 2c47ea42df327b0886358f4e209b8629d6ac859c..91e5ce627ef9143dec46ae39fb56b175e75b9b06 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftZombieHorse.java
@@ -10,6 +10,12 @@ public class CraftZombieHorse extends CraftAbstractHorse implements ZombieHorse
         super(server, entity);
     }
 
+    // Canvas start
+    public net.minecraft.world.entity.animal.horse.ZombieHorse getHandle(){
+        return (net.minecraft.world.entity.animal.horse.ZombieHorse) this.entity;
+    }
+    // Canvas end
+
     @Override
     public String toString() {
         return "CraftZombieHorse";
@@ -19,4 +25,15 @@ public class CraftZombieHorse extends CraftAbstractHorse implements ZombieHorse
     public Variant getVariant() {
         return Variant.UNDEAD_HORSE;
     }
+    // Canvas start
+    @Override
+    public void revertToHorse(){
+        this.getHandle().revertToHorse();
+    }
+    
+    @Override
+    public void skeletonify(){
+        this.getHandle().skeletonify();
+    }
+    // Canvas end
 }
