From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: satvrn <pastawho@gmail.com>
Date: Wed, 18 Oct 2023 09:06:03 -0700
Subject: [PATCH] Graphene: Server Classes


diff --git a/src/main/java/me/jellysquid/mods/lithium/state/FastImmutableTable.java b/src/main/java/me/jellysquid/mods/lithium/state/FastImmutableTable.java
new file mode 100644
index 0000000000000000000000000000000000000000..201f07e9d364b25fdd7245ce9f4ab9d7e916d77d
--- /dev/null
+++ b/src/main/java/me/jellysquid/mods/lithium/state/FastImmutableTable.java
@@ -0,0 +1,232 @@
+package me.jellysquid.mods.lithium.state;
+
+/**
+ * Credits to the CaffeineMC team for the original code (from Lithium): https://github.com/CaffeineMC/lithium-fabric
+ * No changes made beyond changing mappings.
+ */
+
+import com.google.common.collect.Table;
+import it.unimi.dsi.fastutil.Hash;
+import it.unimi.dsi.fastutil.HashCommon;
+import org.apache.commons.lang3.ArrayUtils;
+import org.jetbrains.annotations.NotNull;
+
+import java.util.Collection;
+import java.util.Map;
+import java.util.Set;
+
+import static it.unimi.dsi.fastutil.HashCommon.arraySize;
+
+public class FastImmutableTable<R, C, V> implements Table<R, C, V> {
+    private R[] rowKeys;
+    private int[] rowIndices;
+    private final int rowMask;
+
+    private C[] colKeys;
+    private int[] colIndices;
+    private final int colMask;
+    private final int colCount;
+
+    private V[] values;
+    private final int size;
+
+    @SuppressWarnings("unchecked")
+    public FastImmutableTable(Table<R, C, V> table, FastImmutableTableCache<R, C, V> cache) {
+        if (cache == null) {
+            throw new IllegalArgumentException("Cache must not be null");
+        }
+
+        float loadFactor = Hash.DEFAULT_LOAD_FACTOR;
+
+        Set<R> rowKeySet = table.rowKeySet();
+        Set<C> colKeySet = table.columnKeySet();
+
+        int rowCount = rowKeySet.size();
+        this.colCount = colKeySet.size();
+
+        int rowN = arraySize(rowCount, loadFactor);
+        int colN = arraySize(this.colCount, loadFactor);
+
+        this.rowMask = rowN - 1;
+        this.rowKeys = (R[]) new Object[rowN];
+        this.rowIndices = new int[rowN];
+
+        this.colMask = colN - 1;
+        this.colKeys = (C[]) new Object[colN];
+        this.colIndices = new int[colN];
+
+        this.createIndex(this.colKeys, this.colIndices, this.colMask, colKeySet);
+        this.createIndex(this.rowKeys, this.rowIndices, this.rowMask, rowKeySet);
+
+        this.values = (V[]) new Object[rowCount * this.colCount];
+
+        for (Cell<R, C, V> cell : table.cellSet()) {
+            int colIdx = this.getIndex(this.colKeys, this.colIndices, this.colMask, cell.getColumnKey());
+            int rowIdx = this.getIndex(this.rowKeys, this.rowIndices, this.rowMask, cell.getRowKey());
+
+            if (colIdx < 0 || rowIdx < 0) {
+                throw new IllegalStateException("Missing index for " + cell);
+            }
+
+            this.values[this.colCount * rowIdx + colIdx] = cell.getValue();
+        }
+
+        this.size = table.size();
+
+        this.rowKeys = cache.dedupRows(this.rowKeys);
+        this.rowIndices = cache.dedupIndices(this.rowIndices);
+
+        this.colIndices = cache.dedupIndices(this.colIndices);
+        this.colKeys = cache.dedupColumns(this.colKeys);
+
+        this.values = cache.dedupValues(this.values);
+    }
+
+    private <T> void createIndex(T[] keys, int[] indices, int mask, Collection<T> iterable) {
+        int index = 0;
+
+        for (T obj : iterable) {
+            int i = this.find(keys, mask, obj);
+
+            if (i < 0) {
+                int pos = -i - 1;
+
+                keys[pos] = obj;
+                indices[pos] = index++;
+            }
+        }
+    }
+
+    private <T> int getIndex(T[] keys, int[] indices, int mask, T key) {
+        int pos = this.find(keys, mask, key);
+
+        if (pos < 0) {
+            return -1;
+        }
+
+        return indices[pos];
+    }
+
+    @Override
+    public boolean contains(Object rowKey, Object columnKey) {
+        return this.get(rowKey, columnKey) != null;
+    }
+
+    @Override
+    public boolean containsRow(Object rowKey) {
+        return this.find(this.rowKeys, this.rowMask, rowKey) >= 0;
+    }
+
+    @Override
+    public boolean containsColumn(Object columnKey) {
+        return this.find(this.colKeys, this.colMask, columnKey) >= 0;
+    }
+
+    @Override
+    public boolean containsValue(Object value) {
+        return ArrayUtils.contains(this.values, value);
+    }
+
+    @Override
+    public V get(Object rowKey, Object columnKey) {
+        final int row = this.getIndex(this.rowKeys, this.rowIndices, this.rowMask, rowKey);
+        final int col = this.getIndex(this.colKeys, this.colIndices, this.colMask, columnKey);
+
+        if (row < 0 || col < 0) {
+            return null;
+        }
+
+        return this.values[this.colCount * row + col];
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return this.size() == 0;
+    }
+
+    @Override
+    public int size() {
+        return this.size;
+    }
+
+    @Override
+    public void clear() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public V put(R rowKey, C columnKey, V val) {
+        throw new UnsupportedOperationException();
+    }
+
+    private <T> int find(T[] key, int mask, T value) {
+        T curr;
+        int pos;
+        // The starting point.
+        if ((curr = key[pos = HashCommon.mix(value.hashCode()) & mask]) == null) {
+            return -(pos + 1);
+        }
+        if (value.equals(curr)) {
+            return pos;
+        }
+        // There's always an unused entry.
+        while (true) {
+            if ((curr = key[pos = pos + 1 & mask]) == null) {
+                return -(pos + 1);
+            }
+            if (value.equals(curr)) {
+                return pos;
+            }
+        }
+    }
+
+    @Override
+    public void putAll(@NotNull Table<? extends R, ? extends C, ? extends V> table) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public V remove(Object rowKey, Object columnKey) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public @NotNull Map<C, V> row(R rowKey) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public @NotNull Map<R, V> column(C columnKey) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public @NotNull Set<Cell<R, C, V>> cellSet() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public @NotNull Set<R> rowKeySet() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public @NotNull Set<C> columnKeySet() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public @NotNull Collection<V> values() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public @NotNull Map<R, Map<C, V>> rowMap() {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    public @NotNull Map<C, Map<R, V>> columnMap() {
+        throw new UnsupportedOperationException();
+    }
+}
diff --git a/src/main/java/me/jellysquid/mods/lithium/state/FastImmutableTableCache.java b/src/main/java/me/jellysquid/mods/lithium/state/FastImmutableTableCache.java
new file mode 100644
index 0000000000000000000000000000000000000000..05f629b40b1c5368f62941aa224fe94bcd2d2c2d
--- /dev/null
+++ b/src/main/java/me/jellysquid/mods/lithium/state/FastImmutableTableCache.java
@@ -0,0 +1,44 @@
+package me.jellysquid.mods.lithium.state;
+
+/**
+ * Credits to the CaffeineMC team for the original code (from Lithium): https://github.com/CaffeineMC/lithium-fabric
+ * No changes made beyond changing mappings.
+ */
+
+import it.unimi.dsi.fastutil.Hash;
+import it.unimi.dsi.fastutil.ints.IntArrays;
+import it.unimi.dsi.fastutil.objects.ObjectArrays;
+import it.unimi.dsi.fastutil.objects.ObjectOpenCustomHashSet;
+
+public class FastImmutableTableCache<R, C, V> {
+    private final ObjectOpenCustomHashSet<R[]> rows;
+    private final ObjectOpenCustomHashSet<C[]> columns;
+    private final ObjectOpenCustomHashSet<V[]> values;
+
+    private final ObjectOpenCustomHashSet<int[]> indices;
+
+    @SuppressWarnings("unchecked")
+    public FastImmutableTableCache() {
+        this.rows = new ObjectOpenCustomHashSet<>((Hash.Strategy<R[]>) ObjectArrays.HASH_STRATEGY);
+        this.columns = new ObjectOpenCustomHashSet<>((Hash.Strategy<C[]>) ObjectArrays.HASH_STRATEGY);
+        this.values = new ObjectOpenCustomHashSet<>((Hash.Strategy<V[]>) ObjectArrays.HASH_STRATEGY);
+
+        this.indices = new ObjectOpenCustomHashSet<>(IntArrays.HASH_STRATEGY);
+    }
+
+    public synchronized V[] dedupValues(V[] values) {
+        return this.values.addOrGet(values);
+    }
+
+    public synchronized R[] dedupRows(R[] rows) {
+        return this.rows.addOrGet(rows);
+    }
+
+    public synchronized C[] dedupColumns(C[] columns) {
+        return this.columns.addOrGet(columns);
+    }
+
+    public synchronized int[] dedupIndices(int[] ints) {
+        return this.indices.addOrGet(ints);
+    }
+}
diff --git a/src/main/java/me/jellysquid/mods/lithium/state/StatePropertyTableCache.java b/src/main/java/me/jellysquid/mods/lithium/state/StatePropertyTableCache.java
new file mode 100644
index 0000000000000000000000000000000000000000..96241d5f301eaba574c7d374de106f11c32bcfb1
--- /dev/null
+++ b/src/main/java/me/jellysquid/mods/lithium/state/StatePropertyTableCache.java
@@ -0,0 +1,42 @@
+package me.jellysquid.mods.lithium.state;
+
+/**
+ * Credits to the CaffeineMC team for the original code (from Lithium): https://github.com/CaffeineMC/lithium-fabric
+ * No changes made beyond changing mappings.
+ */
+
+import net.minecraft.world.level.block.Block;
+import net.minecraft.world.level.block.state.BlockState;
+import net.minecraft.world.level.material.Fluid;
+import net.minecraft.world.level.material.FluidState;
+import net.minecraft.world.level.block.state.properties.Property;
+
+/**
+ * Many of the column and row key arrays in block state tables will be duplicated, leading to an unnecessary waste of
+ * memory. Since we have very limited options for trying to construct more optimized table types without throwing
+ * maintainability or mod compatibility out the window, this class acts as a dirty way to find and de-duplicate arrays
+ * after we construct our table types.
+ * <p>
+ * While this global cache does not provide the ability to remove or clear entries from it, the reality is that it
+ * shouldn't matter because block state tables are only initialized once and remain loaded for the entire lifetime of
+ * the game. Even in the event of classloader pre-boot shenanigans, we still shouldn't leak memory as our cache will be
+ * dropped along with the rest of the loaded classes when the class loader is reaped.
+ */
+public class StatePropertyTableCache {
+    public static final FastImmutableTableCache<Property<?>, Comparable<?>, BlockState> BLOCK_STATE_TABLE =
+            new FastImmutableTableCache<>();
+
+    public static final FastImmutableTableCache<Property<?>, Comparable<?>, FluidState> FLUID_STATE_TABLE =
+            new FastImmutableTableCache<>();
+
+    @SuppressWarnings("unchecked")
+    public static <S, O> FastImmutableTableCache<Property<?>, Comparable<?>, S> getTableCache(O owner) {
+        if (owner instanceof Block) {
+            return (FastImmutableTableCache<Property<?>, Comparable<?>, S>) BLOCK_STATE_TABLE;
+        } else if (owner instanceof Fluid) {
+            return (FastImmutableTableCache<Property<?>, Comparable<?>, S>) FLUID_STATE_TABLE;
+        } else {
+            throw new IllegalArgumentException("");
+        }
+    }
+}
diff --git a/src/main/java/me/jellysquid/mods/lithium/util/Constants.java b/src/main/java/me/jellysquid/mods/lithium/util/Constants.java
new file mode 100644
index 0000000000000000000000000000000000000000..0734e2f576206e4ed3c9eceba4031000d6f21125
--- /dev/null
+++ b/src/main/java/me/jellysquid/mods/lithium/util/Constants.java
@@ -0,0 +1,26 @@
+package me.jellysquid.mods.lithium.util;
+
+/**
+ * Credits to the CaffeineMC team for the original code (from Lithium): https://github.com/CaffeineMC/lithium-fabric
+ * A number of new constants have been added.
+ */
+
+/**
+ * Pre-initialized constants to avoid unnecessary allocations.
+ */
+public final class Constants {
+    public static final byte[] BYTE_EMPTY = new byte[0];
+
+    public static final int[] INT_EMPTY = new int[0]; // lithium: ArrayConstants.java
+    public static final int[] INT_ZERO = new int[]{0}; // lithium: ArrayConstants.java
+    public static final int[] INT_ONE = new int[]{1};
+    public static final int[] INT_TWO = new int[]{2};
+
+    public static final long[] LONG_EMPTY = new long[0];
+
+    public static final String[] STRING_EMPTY = new String[0];
+    public static final Object[] OBJECT_EMPTY = new Object[0];
+    public static final org.bukkit.entity.Entity[] BUKKIT_ENTITY_EMPTY = new org.bukkit.entity.Entity[0];
+    public static final net.minecraft.world.entity.Entity[] ENTITY_EMPTY = new net.minecraft.world.entity.Entity[0];
+    public static final java.nio.file.LinkOption[] LINKOPTION_EMPTY = new java.nio.file.LinkOption[0];
+}
diff --git a/src/main/java/me/jellysquid/mods/lithium/util/math/CompactSineLUT.java b/src/main/java/me/jellysquid/mods/lithium/util/math/CompactSineLUT.java
new file mode 100644
index 0000000000000000000000000000000000000000..1b0665e3992f5d6a32953289038d51e6d27cf278
--- /dev/null
+++ b/src/main/java/me/jellysquid/mods/lithium/util/math/CompactSineLUT.java
@@ -0,0 +1,94 @@
+package me.jellysquid.mods.lithium.util.math;
+
+/**
+ * Credits to the CaffeineMC team for the original code (from Lithium): https://github.com/CaffeineMC/lithium-fabric
+ * No changes made beyond changing mappings.
+ */
+
+import net.minecraft.util.Mth;
+
+/**
+ * A replacement for the sine angle lookup table used in {@link Mth}, both reducing the size of LUT and improving
+ * the access patterns for common paired sin/cos operations.
+ *
+ *  sin(-x) = -sin(x)
+ *    ... to eliminate negative angles from the LUT.
+ *
+ *  sin(x) = sin(pi/2 - x)
+ *    ... to eliminate supplementary angles from the LUT.
+ *
+ * Using these identities allows us to reduce the LUT from 64K entries (256 KB) to just 16K entries (64 KB), enabling
+ * it to better fit into the CPU's caches at the expense of some cycles on the fast path. The implementation has been
+ * tightly optimized to avoid branching where possible and to use very quick integer operations.
+ *
+ * Generally speaking, reducing the size of a lookup table is always a good optimization, but since we need to spend
+ * extra CPU cycles trying to maintain parity with vanilla, there is the potential risk that this implementation ends
+ * up being slower than vanilla when the lookup table is able to be kept in cache memory.
+ *
+ * Unlike other "fast math" implementations, the values returned by this class are *bit-for-bit identical* with those
+ * from {@link Mth}. Validation is performed during runtime to ensure that the table is correct.
+ *
+ * @author coderbot16   Author of the original (and very clever) implementation in Rust:
+ *  https://gitlab.com/coderbot16/i73/-/tree/master/i73-trig/src
+ * @author jellysquid3  Additional optimizations, port to Java
+ */
+public class CompactSineLUT {
+    private static final int[] SIN_INT = new int[16384 + 1];
+    private static final float SIN_MIDPOINT;
+
+    static {
+        // Copy the sine table, covering to raw int bits
+        for (int i = 0; i < SIN_INT.length; i++) {
+            SIN_INT[i] = Float.floatToRawIntBits(Mth.SIN[i]);
+        }
+
+        SIN_MIDPOINT = Mth.SIN[Mth.SIN.length / 2];
+
+        // Test that the lookup table is correct during runtime
+        for (int i = 0; i < Mth.SIN.length; i++) {
+            float expected = Mth.SIN[i];
+            float value = lookup(i);
+
+            if (expected != value) {
+                throw new IllegalArgumentException(String.format("LUT error at index %d (expected: %s, found: %s)", i, expected, value));
+            }
+        }
+    }
+
+    // [VanillaCopy] Mth#sin(float)
+    public static float sin(float f) {
+        return lookup((int) (f * 10430.378f) & 0xFFFF);
+    }
+
+    // [VanillaCopy] Mth#cos(float)
+    public static float cos(float f) {
+        return lookup((int) (f * 10430.378f + 16384.0f) & 0xFFFF);
+    }
+
+    private static float lookup(int index) {
+        // A special case... Is there some way to eliminate this?
+        if (index == 32768) {
+            return SIN_MIDPOINT;
+        }
+
+        // Trigonometric identity: sin(-x) = -sin(x)
+        // Given a domain of 0 <= x <= 2*pi, just negate the value if x > pi.
+        // This allows the sin table size to be halved.
+        int neg = (index & 0x8000) << 16;
+
+        // All bits set if (pi/2 <= x), none set otherwise
+        // Extracts the 15th bit from 'half'
+        int mask = (index << 17) >> 31;
+
+        // Trigonometric identity: sin(x) = sin(pi/2 - x)
+        int pos = (0x8001 & mask) + (index ^ mask);
+
+        // Wrap the position in the table. Moving this down to immediately before the array access
+        // seems to help the Hotspot compiler optimize the bit math better.
+        pos &= 0x7fff;
+
+        // Fetch the corresponding value from the LUT and invert the sign bit as needed
+        // This directly manipulate the sign bit on the float bits to simplify logic
+        return Float.intBitsToFloat(SIN_INT[pos] ^ neg);
+    }
+}
diff --git a/src/main/java/me/satvrn/random/FastRandom.java b/src/main/java/me/satvrn/random/FastRandom.java
new file mode 100644
index 0000000000000000000000000000000000000000..f4d18dee6098183a4902b7657e4c7bacf8b72044
--- /dev/null
+++ b/src/main/java/me/satvrn/random/FastRandom.java
@@ -0,0 +1,28 @@
+package me.satvrn.random;
+
+import java.util.Random;
+
+import net.minecraft.world.level.levelgen.RandomSupport;
+import net.minecraft.world.level.levelgen.Xoroshiro128PlusPlus;
+
+public class FastRandom extends Random {
+    private Xoroshiro128PlusPlus source;
+
+    public FastRandom() {
+        super();
+    }
+
+    public FastRandom(long seed) {
+        super(seed);
+    }
+
+    @Override
+    public long nextLong() {
+        return this.source.nextLong();
+    }
+
+    @Override
+    public void setSeed(long seed) {
+        this.source = new Xoroshiro128PlusPlus(RandomSupport.upgradeSeedTo128bit(seed));
+    }
+}
diff --git a/src/main/java/me/steinborn/krypton/network/VarintByteDecoder.java b/src/main/java/me/steinborn/krypton/network/VarintByteDecoder.java
new file mode 100644
index 0000000000000000000000000000000000000000..1211d9859199fa0566700e5f689fc83b23889cfe
--- /dev/null
+++ b/src/main/java/me/steinborn/krypton/network/VarintByteDecoder.java
@@ -0,0 +1,65 @@
+package me.steinborn.krypton.network;
+
+/**
+ * Credits to the Andrew Steinborn for the original code (from Krypton): https://github.com/astei/krypton
+ * No changes made beyond changing mappings.
+ */
+
+import io.netty.util.ByteProcessor;
+
+public class VarintByteDecoder implements ByteProcessor {
+
+    private static final int MAXIMUM_VARINT_BYTE_SIZE = Boolean.getBoolean("krypton.permit-oversized-packets")
+            ? 5 : 3;
+
+    private int readVarint;
+    private int bytesRead;
+    private DecodeResult result = DecodeResult.TOO_SHORT;
+
+    @Override
+    public boolean process(byte k) {
+        if (k == 0 && bytesRead == 0) {
+            // tentatively say it's invalid, but there's a possibility of redemption
+            result = DecodeResult.RUN_OF_ZEROES;
+            return true;
+        }
+        if (result == DecodeResult.RUN_OF_ZEROES) {
+            return false;
+        }
+        readVarint |= (k & 0x7F) << bytesRead++ * 7;
+        if (bytesRead > MAXIMUM_VARINT_BYTE_SIZE) {
+            result = DecodeResult.TOO_BIG;
+            return false;
+        }
+        if ((k & 0x80) != 128) {
+            result = DecodeResult.SUCCESS;
+            return false;
+        }
+        return true;
+    }
+
+    public int getReadVarint() {
+        return readVarint;
+    }
+
+    public int getBytesRead() {
+        return bytesRead;
+    }
+
+    public DecodeResult getResult() {
+        return result;
+    }
+
+    public void reset() {
+        readVarint = 0;
+        bytesRead = 0;
+        result = DecodeResult.TOO_SHORT;
+    }
+
+    public enum DecodeResult {
+        SUCCESS,
+        TOO_SHORT,
+        TOO_BIG,
+        RUN_OF_ZEROES
+    }
+}
diff --git a/src/main/java/me/steinborn/krypton/network/util/QuietDecoderException.java b/src/main/java/me/steinborn/krypton/network/util/QuietDecoderException.java
new file mode 100644
index 0000000000000000000000000000000000000000..d55a91fb21521b246de8e751d71fffb7ac59f648
--- /dev/null
+++ b/src/main/java/me/steinborn/krypton/network/util/QuietDecoderException.java
@@ -0,0 +1,24 @@
+package me.steinborn.krypton.network.util;
+
+/**
+ * Credits to the Andrew Steinborn for the original code (from Krypton): https://github.com/astei/krypton
+ * No changes made beyond changing mappings.
+ */
+
+import io.netty.handler.codec.DecoderException;
+
+/**
+ * A special-purpose exception thrown when we want to indicate an error decoding but do not want
+ * to see a large stack trace in logs.
+ */
+public class QuietDecoderException extends DecoderException {
+
+    public QuietDecoderException(String message) {
+        super(message);
+    }
+
+    @Override
+    public synchronized Throwable fillInStackTrace() {
+        return this;
+    }
+}
diff --git a/src/main/java/me/steinborn/krypton/network/util/VarIntUtil.java b/src/main/java/me/steinborn/krypton/network/util/VarIntUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..4243c1401405ff4868ab063cc95ba1c3a5feae3e
--- /dev/null
+++ b/src/main/java/me/steinborn/krypton/network/util/VarIntUtil.java
@@ -0,0 +1,25 @@
+package me.steinborn.krypton.network.util;
+
+/**
+ * Credits to the Andrew Steinborn for the original code (from Krypton): https://github.com/astei/krypton
+ * No changes made beyond changing mappings.
+ */
+
+/**
+ * Maps VarInt byte sizes to a lookup table corresponding to the number of bits in the integer,
+ * from zero to 32.
+ */
+public class VarIntUtil {
+    private static final int[] VARINT_EXACT_BYTE_LENGTHS = new int[33];
+
+    static {
+        for (int i = 0; i <= 32; ++i) {
+            VARINT_EXACT_BYTE_LENGTHS[i] = (int) Math.ceil((31d - (i - 1)) / 7d);
+        }
+        VARINT_EXACT_BYTE_LENGTHS[32] = 1; // Special case for 0.
+    }
+
+    public static int getVarIntLength(int value) {
+        return VARINT_EXACT_BYTE_LENGTHS[Integer.numberOfLeadingZeros(value)];
+    }
+}
diff --git a/src/main/java/me/steinborn/krypton/network/util/WellKnownExceptions.java b/src/main/java/me/steinborn/krypton/network/util/WellKnownExceptions.java
new file mode 100644
index 0000000000000000000000000000000000000000..d89b86166f56b9932be8b220b2382d96113aa8f7
--- /dev/null
+++ b/src/main/java/me/steinborn/krypton/network/util/WellKnownExceptions.java
@@ -0,0 +1,13 @@
+package me.steinborn.krypton.network.util;
+
+/**
+ * Credits to the Andrew Steinborn for the original code (from Krypton): https://github.com/astei/krypton
+ * No changes made beyond changing mappings.
+ */
+
+public enum WellKnownExceptions {
+    ;
+
+    public static final QuietDecoderException BAD_LENGTH_CACHED = new QuietDecoderException("Bad packet length");
+    public static final QuietDecoderException VARINT_BIG_CACHED = new QuietDecoderException("VarInt too big");
+}
