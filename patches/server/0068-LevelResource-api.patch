From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 1229ed65 AH <1229ed65b2ccd3@crankymonkey.info>
Date: Fri, 26 Jan 2024 17:54:55 +0000
Subject: [PATCH] LevelResource api


diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 8b2fa0af9d12647e57a63babc33aa4cf2d044cc4..cd2124c4f2e54eed5062c5a7ac70f3fbd9a8d417 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -91,6 +91,7 @@ public class Main {
     // Canvas start
     public static File data_dir;
     public static List<File> loadedPluginPacks = new ArrayList<>();
+    public static LevelStorageSource.LevelStorageAccess rootLevelAccess = null;
     // Canvas end
 
     // public Main() {} // Canvas - why does this exist if this does nothing?
@@ -228,6 +229,7 @@ public class Main {
             String s = (String) Optional.ofNullable((String) optionset.valueOf("world")).orElse(dedicatedserversettings.getProperties().levelName);
             LevelStorageSource convertable = LevelStorageSource.createDefault(file.toPath());
             LevelStorageSource.LevelStorageAccess convertable_conversionsession = convertable.validateAndCreateAccess(s, LevelStem.OVERWORLD);
+            Main.rootLevelAccess = convertable_conversionsession; // Canvas
             // CraftBukkit end
             Dynamic dynamic;
 
diff --git a/src/main/java/net/minecraft/world/level/storage/LevelResource.java b/src/main/java/net/minecraft/world/level/storage/LevelResource.java
index fee8367d2812db559b15970f0a60023bedaaefc5..4e97799fd8f9d0f16d7f2b2c7a824b52d8fb9f60 100644
--- a/src/main/java/net/minecraft/world/level/storage/LevelResource.java
+++ b/src/main/java/net/minecraft/world/level/storage/LevelResource.java
@@ -1,6 +1,10 @@
 package net.minecraft.world.level.storage;
 
-public class LevelResource {
+import net.minecraft.server.Main; // Canvas
+import java.nio.file.*; // Cavnas
+import java.io.*; // Canvas
+
+public class LevelResource implements me.dueris.canvas.util.LevelResource { // Canvas
     public static final LevelResource PLAYER_ADVANCEMENTS_DIR = new LevelResource("advancements");
     public static final LevelResource PLAYER_STATS_DIR = new LevelResource("stats");
     public static final LevelResource PLAYER_DATA_DIR = new LevelResource("playerdata");
@@ -13,6 +17,12 @@ public class LevelResource {
     public static final LevelResource DATAPACK_DIR = new LevelResource("datapacks");
     public static final LevelResource MAP_RESOURCE_FILE = new LevelResource("resources.zip");
     public static final LevelResource ROOT = new LevelResource(".");
+    // Canvas start - LevelResource api
+    public static final LevelResource SERVER_ROOT = new LevelResource("../.");
+    public static final LevelResource SERVER_PROPERTIES = new LevelResource("../server.properties");
+    public static final LevelResource LOGS_DIR = new LevelResource("../logs");
+    public static final LevelResource CACHE_DIR = new LevelResource("../cache");
+    // Canvas end
     private final String id;
 
     private LevelResource(String relativePath) {
@@ -27,4 +37,90 @@ public class LevelResource {
     public String toString() {
         return "/" + this.id;
     }
+    // Canvas start - LevelResource api
+
+    public LevelResource(){
+        this.id = "./";
+    }
+
+    @Override
+    public Path datapackDir(){
+        return Main.rootLevelAccess.getLevelPath(DATAPACK_DIR);
+    }
+    
+    @Override
+    public Path advancementsDir(){
+        return Main.rootLevelAccess.getLevelPath(PLAYER_ADVANCEMENTS_DIR);
+    }
+    
+    @Override
+    public Path playerStatsDir(){
+        return Main.rootLevelAccess.getLevelPath(PLAYER_STATS_DIR);
+    }
+    
+    @Override
+    public Path playerdataDir(){
+        return Main.rootLevelAccess.getLevelPath(PLAYER_DATA_DIR);
+    }
+    
+    @Override
+    public Path legacyPlayerdataDir(){
+        return Main.rootLevelAccess.getLevelPath(PLAYER_OLD_DATA_DIR);
+    }
+    
+    @Override
+    public File leveldataFile(){
+        return Main.rootLevelAccess.getLevelPath(LEVEL_DATA_FILE).toFile();
+    }
+    
+    @Override
+    public File leveldataOldFile(){
+        return Main.rootLevelAccess.getLevelPath(OLD_LEVEL_DATA_FILE).toFile();
+    }
+    
+    @Override
+    public File iconFile(){
+        return Main.rootLevelAccess.getLevelPath(ICON_FILE).toFile();
+    }
+    
+    @Override
+    public File lockFile(){
+        return Main.rootLevelAccess.getLevelPath(LOCK_FILE).toFile();
+    }
+    
+    @Override
+    public Path generatedDir(){
+        return Main.rootLevelAccess.getLevelPath(GENERATED_DIR);
+    }
+    
+    @Override
+    public File mapResourceFile(){
+        return Main.rootLevelAccess.getLevelPath(MAP_RESOURCE_FILE).toFile();
+    }
+    
+    @Override
+    public Path mainWorldRoot(){
+        return Main.rootLevelAccess.getLevelPath(ROOT);
+    }
+    
+    @Override
+    public Path serverRoot(){
+        return Main.rootLevelAccess.getLevelPath(SERVER_ROOT);
+    }
+    
+    @Override
+    public File serverPropertiesFile(){
+        return Main.rootLevelAccess.getLevelPath(SERVER_PROPERTIES).toFile();
+    }
+    
+    @Override
+    public Path logsDir(){
+        return Main.rootLevelAccess.getLevelPath(LOGS_DIR);
+    }
+    
+    @Override
+    public Path cacheDir(){
+        return Main.rootLevelAccess.getLevelPath(CACHE_DIR);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 194a7b4a70f69ea494b7cde1502be233787d8951..3bac1972c40747e391f84cbf0f9231b1a6a38417 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -810,6 +810,11 @@ public final class CraftServer implements Server {
         return getProperties();
     }
 
+    @Override
+    public net.minecraft.world.level.storage.LevelResource getLevelResources(){
+        return new net.minecraft.world.level.storage.LevelResource();
+    }
+
     @Override
     public me.dueris.canvas.world.time.TimeManager getTimeManager(){
         return new me.dueris.canvas.world.time.CraftTimeManager();
