From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sat, 21 Oct 2023 20:01:52 -0700
Subject: [PATCH] Add more Entity-Specific APIs


diff --git a/src/main/java/io/papermc/paper/entity/PaperSchoolableFish.java b/src/main/java/io/papermc/paper/entity/PaperSchoolableFish.java
index 41bf71d116ffc5431586ce54abba7f8def6c1dcf..e5afe1989a65870624e9408e52223201d7e841c3 100644
--- a/src/main/java/io/papermc/paper/entity/PaperSchoolableFish.java
+++ b/src/main/java/io/papermc/paper/entity/PaperSchoolableFish.java
@@ -49,4 +49,14 @@ public class PaperSchoolableFish extends CraftFish implements SchoolableFish {
 
         return (SchoolableFish) leader.getBukkitEntity();
     }
+
+    @Override
+    public void moveToLeader() {
+        this.getHandle().pathToLeader();
+    }
+
+    @Override
+    public boolean inRangeOfLeader() {
+        return this.getHandle().inRangeOfLeader();
+    }
 }
diff --git a/src/main/java/net/minecraft/world/entity/ambient/Bat.java b/src/main/java/net/minecraft/world/entity/ambient/Bat.java
index 1eab1393a2636c4a247f25dae317cea60cc7021c..fda1fabb5b832c1445a437b30ce35f1e00098937 100644
--- a/src/main/java/net/minecraft/world/entity/ambient/Bat.java
+++ b/src/main/java/net/minecraft/world/entity/ambient/Bat.java
@@ -35,7 +35,7 @@ import org.bukkit.craftbukkit.event.CraftEventFactory;
 public class Bat extends AmbientCreature {
 
     public static final float FLAP_DEGREES_PER_TICK = 74.48451F;
-    public static final int TICKS_PER_FLAP = Mth.ceil(2.4166098F);
+    public static int TICKS_PER_FLAP = Mth.ceil(2.4166098F);
     private static final EntityDataAccessor<Byte> DATA_ID_FLAGS = SynchedEntityData.defineId(Bat.class, EntityDataSerializers.BYTE);
     private static final int FLAG_RESTING = 1;
     private static final TargetingConditions BAT_RESTING_TARGETING = TargetingConditions.forNonCombat().range(4.0D);
@@ -50,6 +50,15 @@ public class Bat extends AmbientCreature {
         }
 
     }
+    // Canvas start
+    public void setTicksPerFlap(int tpf){
+        this.TICKS_PER_FLAP = tpf;
+    }
+
+    public int getTicksPerFlap(){
+        return TICKS_PER_FLAP;
+    }
+    // Canvas end
 
     // Purpur start
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/Cat.java b/src/main/java/net/minecraft/world/entity/animal/Cat.java
index 6e5b4a50b8d2dddbd7f099426b4866b35bcb798a..db3c824104b681b50621dfb6efe3bb4812f8e476 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Cat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Cat.java
@@ -154,7 +154,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
         this.goalSelector.addGoal(1, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
         this.goalSelector.addGoal(1, new PanicGoal(this, 1.5D));
         this.goalSelector.addGoal(2, new SitWhenOrderedToGoal(this));
-        this.goalSelector.addGoal(3, new Cat.CatRelaxOnOwnerGoal(this));
+        this.goalSelector.addGoal(3, new Cat.CatRelaxOnOwnerGoal(this, this.getAllowMorningGift()));
         this.goalSelector.addGoal(4, this.temptGoal);
         this.goalSelector.addGoal(5, new CatLieOnBedGoal(this, 1.1D, 8));
         this.goalSelector.addGoal(6, new FollowOwnerGoal(this, 1.0D, 10.0F, 5.0F, false));
@@ -525,6 +525,44 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
 
     }
 
+    // Canvas start
+    public boolean allowMorningGift = true;
+
+    public void setAllowMorningGift(boolean allow){
+        this.allowMorningGift = allow;
+    }
+
+    public boolean getAllowMorningGift(){
+        return allowMorningGift;
+    }
+
+    public void giveMorningGift() {
+        RandomSource randomsource = getRandom();
+        BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
+
+        blockposition_mutableblockposition.set(isLeashed() ? getLeashHolder().blockPosition() : blockPosition());
+        randomTeleport((double) (blockposition_mutableblockposition.getX() + randomsource.nextInt(11) - 5), (double) (blockposition_mutableblockposition.getY() + randomsource.nextInt(5) - 2), (double) (blockposition_mutableblockposition.getZ() + randomsource.nextInt(11) - 5), false);
+        blockposition_mutableblockposition.set(blockPosition());
+        LootTable loottable = level().getServer().getLootData().getLootTable(BuiltInLootTables.CAT_MORNING_GIFT);
+        LootParams lootparams = (new LootParams.Builder((ServerLevel) level())).withParameter(LootContextParams.ORIGIN, position()).withParameter(LootContextParams.THIS_ENTITY, this).create(LootContextParamSets.GIFT);
+        List<ItemStack> list = loottable.getRandomItems(lootparams);
+        Iterator iterator = list.iterator();
+
+        while (iterator.hasNext()) {
+            ItemStack itemstack = (ItemStack) iterator.next();
+
+            ItemEntity entityitem = new ItemEntity(level(), (double) blockposition_mutableblockposition.getX() - (double) Mth.sin(yBodyRot * 0.017453292F), (double) blockposition_mutableblockposition.getY(), (double) blockposition_mutableblockposition.getZ() + (double) Mth.cos(yBodyRot * 0.017453292F), itemstack);
+            org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
+            entityitem.level().getCraftServer().getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                continue;
+            }
+            level().addFreshEntity(entityitem);
+        }
+    }
+
+    // Canvas end
+
     @Override
     public boolean isSteppingCarefully() {
         return this.isCrouching() || super.isSteppingCarefully();
@@ -568,7 +606,7 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
         }
     }
 
-    private static class CatRelaxOnOwnerGoal extends Goal {
+    public class CatRelaxOnOwnerGoal extends Goal {
 
         private final Cat cat;
         @Nullable
@@ -576,9 +614,11 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
         @Nullable
         private BlockPos goalPos;
         private int onBedTicks;
+        public boolean allowGift;
 
-        public CatRelaxOnOwnerGoal(Cat cat) {
+        public CatRelaxOnOwnerGoal(Cat cat, boolean allowMorningGift) {
             this.cat = cat;
+            this.allowGift = allowMorningGift;
         }
 
         @Override
@@ -664,33 +704,37 @@ public class Cat extends TamableAnimal implements VariantHolder<CatVariant> {
             this.cat.getNavigation().stop();
         }
 
-        private void giveMorningGift() {
-            RandomSource randomsource = this.cat.getRandom();
-            BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
-
-            blockposition_mutableblockposition.set(this.cat.isLeashed() ? this.cat.getLeashHolder().blockPosition() : this.cat.blockPosition());
-            this.cat.randomTeleport((double) (blockposition_mutableblockposition.getX() + randomsource.nextInt(11) - 5), (double) (blockposition_mutableblockposition.getY() + randomsource.nextInt(5) - 2), (double) (blockposition_mutableblockposition.getZ() + randomsource.nextInt(11) - 5), false);
-            blockposition_mutableblockposition.set(this.cat.blockPosition());
-            LootTable loottable = this.cat.level().getServer().getLootData().getLootTable(BuiltInLootTables.CAT_MORNING_GIFT);
-            LootParams lootparams = (new LootParams.Builder((ServerLevel) this.cat.level())).withParameter(LootContextParams.ORIGIN, this.cat.position()).withParameter(LootContextParams.THIS_ENTITY, this.cat).create(LootContextParamSets.GIFT);
-            List<ItemStack> list = loottable.getRandomItems(lootparams);
-            Iterator iterator = list.iterator();
-
-            while (iterator.hasNext()) {
-                ItemStack itemstack = (ItemStack) iterator.next();
-
-                // CraftBukkit start
-                ItemEntity entityitem = new ItemEntity(this.cat.level(), (double) blockposition_mutableblockposition.getX() - (double) Mth.sin(this.cat.yBodyRot * 0.017453292F), (double) blockposition_mutableblockposition.getY(), (double) blockposition_mutableblockposition.getZ() + (double) Mth.cos(this.cat.yBodyRot * 0.017453292F), itemstack);
-                org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.cat.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
-                entityitem.level().getCraftServer().getPluginManager().callEvent(event);
-                if (event.isCancelled()) {
-                    continue;
+        // Canvas start
+
+        public void giveMorningGift() {
+            if(allowGift){
+                RandomSource randomsource = this.cat.getRandom();
+                BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos();
+
+                blockposition_mutableblockposition.set(this.cat.isLeashed() ? this.cat.getLeashHolder().blockPosition() : this.cat.blockPosition());
+                this.cat.randomTeleport((double) (blockposition_mutableblockposition.getX() + randomsource.nextInt(11) - 5), (double) (blockposition_mutableblockposition.getY() + randomsource.nextInt(5) - 2), (double) (blockposition_mutableblockposition.getZ() + randomsource.nextInt(11) - 5), false);
+                blockposition_mutableblockposition.set(this.cat.blockPosition());
+                LootTable loottable = this.cat.level().getServer().getLootData().getLootTable(BuiltInLootTables.CAT_MORNING_GIFT);
+                LootParams lootparams = (new LootParams.Builder((ServerLevel) this.cat.level())).withParameter(LootContextParams.ORIGIN, this.cat.position()).withParameter(LootContextParams.THIS_ENTITY, this.cat).create(LootContextParamSets.GIFT);
+                List<ItemStack> list = loottable.getRandomItems(lootparams);
+                Iterator iterator = list.iterator();
+
+                while (iterator.hasNext()) {
+                    ItemStack itemstack = (ItemStack) iterator.next();
+
+                    // CraftBukkit start
+                    ItemEntity entityitem = new ItemEntity(this.cat.level(), (double) blockposition_mutableblockposition.getX() - (double) Mth.sin(this.cat.yBodyRot * 0.017453292F), (double) blockposition_mutableblockposition.getY(), (double) blockposition_mutableblockposition.getZ() + (double) Mth.cos(this.cat.yBodyRot * 0.017453292F), itemstack);
+                    org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.cat.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
+                    entityitem.level().getCraftServer().getPluginManager().callEvent(event);
+                    if (event.isCancelled()) {
+                        continue;
+                    }
+                    this.cat.level().addFreshEntity(entityitem);
+                    // CraftBukkit end
                 }
-                this.cat.level().addFreshEntity(entityitem);
-                // CraftBukkit end
             }
-
         }
+        // Canvas end
 
         @Override
         public void tick() {
diff --git a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
index c783ce59ea766e6c46a3313628b961f27e01ee8b..468d3f8c550ae4fe37ea41276073e8d64867ff13 100644
--- a/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
+++ b/src/main/java/net/minecraft/world/entity/animal/allay/Allay.java
@@ -337,50 +337,63 @@ public class Allay extends PathfinderMob implements InventoryCarrier, VibrationS
         return this.getBrain().checkMemory(MemoryModuleType.ITEM_PICKUP_COOLDOWN_TICKS, MemoryStatus.VALUE_PRESENT);
     }
 
+    // Canvas start
+    public boolean canInteract = true;
+
+    public void setCanInteract(boolean canInteract){
+        this.canInteract = canInteract;
+    }
+
     @Override
     protected InteractionResult mobInteract(Player player, InteractionHand hand) {
-        ItemStack itemstack = player.getItemInHand(hand);
-        ItemStack itemstack1 = this.getItemInHand(InteractionHand.MAIN_HAND);
+        if(canInteract){
+            ItemStack itemstack = player.getItemInHand(hand);
+            ItemStack itemstack1 = this.getItemInHand(InteractionHand.MAIN_HAND);
+
+            if (this.isDancing() && this.isDuplicationItem(itemstack) && this.canDuplicate()) {
+                // CraftBukkit start - handle cancel duplication
+                Allay allay = this.duplicateAllay();
+                if (allay == null) {
+                    return InteractionResult.SUCCESS;
+                }
+                // CraftBukkit end
+                this.level().broadcastEntityEvent(this, (byte) 18);
+                this.level().playSound(player, (Entity) this, SoundEvents.AMETHYST_BLOCK_CHIME, SoundSource.NEUTRAL, 2.0F, 1.0F);
+                this.removeInteractionItem(player, itemstack);
+                return InteractionResult.SUCCESS;
+            } else if (itemstack1.isEmpty() && !itemstack.isEmpty()) {
+                ItemStack itemstack2 = itemstack.copyWithCount(1);
 
-        if (this.isDancing() && this.isDuplicationItem(itemstack) && this.canDuplicate()) {
-            // CraftBukkit start - handle cancel duplication
-            Allay allay = this.duplicateAllay();
-            if (allay == null) {
+                this.setItemInHand(InteractionHand.MAIN_HAND, itemstack2);
+                this.removeInteractionItem(player, itemstack);
+                this.level().playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_GIVEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
+                this.getBrain().setMemory(MemoryModuleType.LIKED_PLAYER, player.getUUID()); // CraftBukkit - decompile error
                 return InteractionResult.SUCCESS;
-            }
-            // CraftBukkit end
-            this.level().broadcastEntityEvent(this, (byte) 18);
-            this.level().playSound(player, (Entity) this, SoundEvents.AMETHYST_BLOCK_CHIME, SoundSource.NEUTRAL, 2.0F, 1.0F);
-            this.removeInteractionItem(player, itemstack);
-            return InteractionResult.SUCCESS;
-        } else if (itemstack1.isEmpty() && !itemstack.isEmpty()) {
-            ItemStack itemstack2 = itemstack.copyWithCount(1);
-
-            this.setItemInHand(InteractionHand.MAIN_HAND, itemstack2);
-            this.removeInteractionItem(player, itemstack);
-            this.level().playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_GIVEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
-            this.getBrain().setMemory(MemoryModuleType.LIKED_PLAYER, player.getUUID()); // CraftBukkit - decompile error
-            return InteractionResult.SUCCESS;
-        } else if (!itemstack1.isEmpty() && hand == InteractionHand.MAIN_HAND && itemstack.isEmpty()) {
-            this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
-            this.level().playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_TAKEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
-            this.swing(InteractionHand.MAIN_HAND);
-            Iterator iterator = this.getInventory().removeAllItems().iterator();
+            } else if (!itemstack1.isEmpty() && hand == InteractionHand.MAIN_HAND && itemstack.isEmpty()) {
+                this.setItemSlot(EquipmentSlot.MAINHAND, ItemStack.EMPTY);
+                this.level().playSound(player, (Entity) this, SoundEvents.ALLAY_ITEM_TAKEN, SoundSource.NEUTRAL, 2.0F, 1.0F);
+                this.swing(InteractionHand.MAIN_HAND);
+                Iterator iterator = this.getInventory().removeAllItems().iterator();
 
-            while (iterator.hasNext()) {
-                ItemStack itemstack3 = (ItemStack) iterator.next();
+                while (iterator.hasNext()) {
+                    ItemStack itemstack3 = (ItemStack) iterator.next();
 
-                BehaviorUtils.throwItem(this, itemstack3, this.position());
-            }
+                    BehaviorUtils.throwItem(this, itemstack3, this.position());
+                }
 
-            this.getBrain().eraseMemory(MemoryModuleType.LIKED_PLAYER);
-            player.addItem(itemstack1);
-            return InteractionResult.SUCCESS;
-        } else {
+                this.getBrain().eraseMemory(MemoryModuleType.LIKED_PLAYER);
+                player.addItem(itemstack1);
+                return InteractionResult.SUCCESS;
+            } else {
+                return super.mobInteract(player, hand);
+            }
+        }else{
             return super.mobInteract(player, hand);
         }
     }
 
+    // Canvas end
+
     public void setJukeboxPlaying(BlockPos jukeboxPos, boolean playing) {
         if (playing) {
             if (!this.isDancing()) {
diff --git a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
index 7369290820f726c28c87bc63dba2a74f415bb126..bad73963e0cb71e2feb4a47fd9c08ca3777148a6 100644
--- a/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
+++ b/src/main/java/net/minecraft/world/entity/animal/axolotl/Axolotl.java
@@ -29,6 +29,7 @@ import net.minecraft.world.DifficultyInstance;
 import net.minecraft.world.InteractionHand;
 import net.minecraft.world.InteractionResult;
 import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.AgeableMob;
@@ -64,6 +65,12 @@ import net.minecraft.world.level.LevelReader;
 import net.minecraft.world.level.ServerLevelAccessor;
 import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.craftbukkit.CraftEffect;
+import org.bukkit.craftbukkit.potion.CraftPotionEffectType;
+import org.bukkit.craftbukkit.potion.CraftPotionUtil;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
+import org.bukkit.potion.PotionEffect;
+import org.bukkit.potion.PotionEffectType;
 import org.joml.Vector3f;
 
 public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolotl.Variant>, Bucketable {
@@ -453,6 +460,36 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
 
     }
 
+    // Canvas start
+    private boolean applySupportingEffects = true;
+    private MobEffect supportingEffectType = MobEffects.REGENERATION;
+    private int amplifier = 1;
+
+    public boolean getApplySupportingEffects(){
+        return applySupportingEffects;
+    }
+
+    public void setApplySupportingEffects(boolean applySupportingEffects) {
+        this.applySupportingEffects = applySupportingEffects;
+    }
+
+    public void setSupportingEffectType(PotionEffectType potionEffectType){
+        MobEffect effect = CraftPotionEffectType.bukkitToMinecraft(potionEffectType);
+        this.supportingEffectType = effect;
+    }
+
+    public PotionEffectType getSupportingPotionEffectType(){
+        return CraftPotionEffectType.minecraftToBukkit(supportingEffectType);
+    }
+
+    public void setSupportingEffectAmplifier(int amplifier){
+        this.amplifier = amplifier;
+    }
+
+    public int getSupportingEffectAmplifier(){
+        return this.amplifier;
+    }
+
     public void applySupportingEffects(Player player) {
         MobEffectInstance mobeffect = player.getEffect(MobEffects.REGENERATION);
 
@@ -460,12 +497,14 @@ public class Axolotl extends Animal implements LerpingModel, VariantHolder<Axolo
             int i = mobeffect != null ? mobeffect.getDuration() : 0;
             int j = Math.min(2400, 100 + i);
 
-            player.addEffect(new MobEffectInstance(MobEffects.REGENERATION, j, 0), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.AXOLOTL); // CraftBukkit
+            player.addEffect(new MobEffectInstance(supportingEffectType, j, amplifier), this, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.AXOLOTL); // CraftBukkit
         }
 
         player.removeEffect(MobEffects.DIG_SLOWDOWN, org.bukkit.event.entity.EntityPotionEffectEvent.Cause.AXOLOTL); // Paper
     }
 
+    // Canvas end
+
     @Override
     public boolean requiresCustomPersistence() {
         return super.requiresCustomPersistence() || this.fromBucket();
diff --git a/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java b/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java
index 1d84135c709a90843b1ee34fb47508e78a7ce95d..a611286c556092ca34b0274cca527b168f686ee9 100644
--- a/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java
+++ b/src/main/java/net/minecraft/world/entity/animal/camel/Camel.java
@@ -54,7 +54,7 @@ import org.joml.Vector3f;
 
 public class Camel extends AbstractHorse implements PlayerRideableJumping, Saddleable {
     public static final Ingredient TEMPTATION_ITEM = Ingredient.of(Items.CACTUS);
-    public static final float BABY_SCALE = 0.45F;
+    public static float BABY_SCALE = 0.45F;
     public static final int DASH_COOLDOWN_TICKS = 55;
     public static final int MAX_HEAD_Y_ROT = 30;
     private static final float RUNNING_SPEED_BONUS = 0.1F;
@@ -497,11 +497,17 @@ public class Camel extends AbstractHorse implements PlayerRideableJumping, Saddl
         return new Vector3f(0.0F, g, f * scaleFactor);
     }
 
+    // Canvas start
+
+    private float GROWN_SCALE = 1.0f;
+
     @Override
     public float getScale() {
-        return this.isBaby() ? 0.45F : 1.0F;
+        return this.isBaby() ? BABY_SCALE : GROWN_SCALE;
     }
 
+    // Canvas end
+
     private double getBodyAnchorAnimationYOffset(boolean primaryPassenger, float tickDelta, EntityDimensions dimensions, float scaleFactor) {
         double d = (double)(dimensions.height - 0.375F * scaleFactor);
         float f = scaleFactor * 1.43F;
diff --git a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
index 7f3c914358a3d623b07dbb69abc23e1341f0e58a..283832204c1b119e7c3d1419aa509c92a5c8a744 100644
--- a/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
+++ b/src/main/java/net/minecraft/world/entity/boss/enderdragon/EnderDragon.java
@@ -79,8 +79,8 @@ public class EnderDragon extends Mob implements Enemy {
     public int posPointer = -1;
     public final EnderDragonPart[] subEntities;
     public final EnderDragonPart head;
-    private final EnderDragonPart neck;
-    private final EnderDragonPart body;
+    public final EnderDragonPart neck; // Canvas
+    public final EnderDragonPart body; // Canvas
     private final EnderDragonPart tail1;
     private final EnderDragonPart tail2;
     private final EnderDragonPart tail3;
@@ -548,7 +548,7 @@ public class EnderDragon extends Mob implements Enemy {
 
     }
 
-    private void knockBack(List<Entity> entities) {
+    public void knockBack(List<Entity> entities) {
         double d0 = (this.body.getBoundingBox().minX + this.body.getBoundingBox().maxX) / 2.0D;
         double d1 = (this.body.getBoundingBox().minZ + this.body.getBoundingBox().maxZ) / 2.0D;
         Iterator iterator = entities.iterator();
@@ -589,7 +589,7 @@ public class EnderDragon extends Mob implements Enemy {
         return (float) Mth.wrapDegrees(yawDegrees);
     }
 
-    private boolean checkWalls(AABB box) {
+    public boolean checkWalls(AABB box) {
         int i = Mth.floor(box.minX);
         int j = Mth.floor(box.minY);
         int k = Mth.floor(box.minZ);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Blaze.java b/src/main/java/net/minecraft/world/entity/monster/Blaze.java
index a8b58469fd8a1ed4ec0ce443cf05557903527bd7..8636a7fe9032e8400ef473a5fb9b40feb3dbb6a4 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Blaze.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Blaze.java
@@ -186,7 +186,7 @@ public class Blaze extends Monster {
         return (this.entityData.get(DATA_FLAGS_ID) & 1) != 0;
     }
 
-    void setCharged(boolean fireActive) {
+    public void setCharged(boolean fireActive) { // Canvas
         byte b = this.entityData.get(DATA_FLAGS_ID);
         if (fireActive) {
             b = (byte)(b | 1);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Drowned.java b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
index 63a1cf5604c14025171d7be7434e2d6b64c98107..1bc451f4e3dba038be39c753ecbc72468eca0039 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Drowned.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Drowned.java
@@ -56,7 +56,7 @@ import net.minecraft.world.phys.Vec3;
 public class Drowned extends Zombie implements RangedAttackMob {
 
     public static final float NAUTILUS_SHELL_CHANCE = 0.03F;
-    boolean searchingForLand;
+    public boolean searchingForLand;
     public final WaterBoundPathNavigation waterNavigation;
     public final GroundPathNavigation groundNavigation;
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java b/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
index df8d1b34078031001c50325b8cf5bfa9a5c361fd..4377f54d1e110268a34d4d2a2380245402ac3b3a 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ElderGuardian.java
@@ -20,12 +20,55 @@ import org.joml.Vector3f;
 
 public class ElderGuardian extends Guardian {
 
-    public static final float ELDER_SIZE_SCALE = EntityType.ELDER_GUARDIAN.getWidth() / EntityType.GUARDIAN.getWidth();
-    private static final int EFFECT_INTERVAL = 1200;
-    private static final int EFFECT_RADIUS = 50;
-    private static final int EFFECT_DURATION = 6000;
-    private static final int EFFECT_AMPLIFIER = 2;
-    private static final int EFFECT_DISPLAY_LIMIT = 1200;
+    // Canvas start
+    public static float ELDER_SIZE_SCALE = EntityType.ELDER_GUARDIAN.getWidth() / EntityType.GUARDIAN.getWidth();
+    private static int EFFECT_INTERVAL = 1200;
+    private static int EFFECT_RADIUS = 50;
+    private static int EFFECT_DURATION = 6000;
+    private static int EFFECT_AMPLIFIER = 2;
+    private static int EFFECT_DISPLAY_LIMIT = 1200;
+
+    public void setEffectAmplifier(final int effectAmplifier) {
+        EFFECT_AMPLIFIER = effectAmplifier;
+    }
+
+    public int getEffectDuration() {
+        return EFFECT_DURATION;
+    }
+
+    public void setEffectDuration(final int effectDuration) {
+        EFFECT_DURATION = effectDuration;
+    }
+
+    public int getEffectAmplifier() {
+        return EFFECT_AMPLIFIER;
+    }
+
+    public int getEffectDisplayLimit() {
+        return EFFECT_DISPLAY_LIMIT;
+    }
+
+    public void setEffectDisplayLimit(final int effectDisplayLimit) {
+        EFFECT_DISPLAY_LIMIT = effectDisplayLimit;
+    }
+
+    public int getEffectInterval() {
+        return EFFECT_INTERVAL;
+    }
+
+    public void setEffectInterval(final int effectInterval) {
+        EFFECT_INTERVAL = effectInterval;
+    }
+
+    public int getEffectRadius() {
+        return EFFECT_RADIUS;
+    }
+
+    public void setEffectRadius(final int effectRadius) {
+        EFFECT_RADIUS = effectRadius;
+    }
+
+    // Canvas end
 
     public ElderGuardian(EntityType<? extends ElderGuardian> type, Level world) {
         super(type, world);
diff --git a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
index 4c9ffa8e1ab97d8156ead0ed189c769ffd9b4aae..60c8939dfa6f6c926bef772892ffb97e0d176410 100644
--- a/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
+++ b/src/main/java/net/minecraft/world/entity/monster/EnderMan.java
@@ -87,7 +87,7 @@ public class EnderMan extends Monster implements NeutralMob {
     private static final EntityDataAccessor<Boolean> DATA_STARED_AT = SynchedEntityData.defineId(EnderMan.class, EntityDataSerializers.BOOLEAN);
     private int lastStareSound = Integer.MIN_VALUE;
     private int targetChangeTime;
-    private static final UniformInt PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(20, 39);
+    public UniformInt PERSISTENT_ANGER_TIME; // Canvas
     private int remainingPersistentAngerTime;
     @Nullable
     private UUID persistentAngerTarget;
@@ -96,8 +96,19 @@ public class EnderMan extends Monster implements NeutralMob {
         super(type, world);
         this.setMaxUpStep(1.0F);
         if (isSensitiveToWater()) this.setPathfindingMalus(BlockPathTypes.WATER, -1.0F); // Purpur
+        PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(minRangeAnger, maxRangeAnger);
     }
 
+    // Canvas start
+    public int minRangeAnger = 20;
+    public int maxRangeAnger = 39;
+    public void setPersistentAngerTime(int min, int max){
+        this.PERSISTENT_ANGER_TIME = TimeUtil.rangeOfSeconds(min, max);
+        this.maxRangeAnger = max;
+        this.minRangeAnger = min;
+    }
+    // Canvas end
+
     // Purpur start
     @Override
     public boolean isRidable() {
@@ -194,7 +205,7 @@ public class EnderMan extends Monster implements NeutralMob {
 
     @Override
     public void startPersistentAngerTimer() {
-        this.setRemainingPersistentAngerTime(EnderMan.PERSISTENT_ANGER_TIME.sample(this.random));
+        this.setRemainingPersistentAngerTime(this.PERSISTENT_ANGER_TIME.sample(this.random)); // Canvas
     }
 
     @Override
@@ -272,7 +283,7 @@ public class EnderMan extends Monster implements NeutralMob {
         event.setCancelled(!shouldAttack);
         return event.callEvent();
     }
-    private boolean isLookingAtMe_check(Player player) {
+    public boolean isLookingAtMe_check(Player player) {
         // Paper end
         ItemStack itemstack = (ItemStack) player.getInventory().armor.get(3);
 
@@ -359,7 +370,7 @@ public class EnderMan extends Monster implements NeutralMob {
         return this.teleport(d1, d2, d3);
     }
 
-    private boolean teleport(double x, double y, double z) {
+    public boolean teleport(double x, double y, double z) { // Canvas
         BlockPos.MutableBlockPos blockposition_mutableblockposition = new BlockPos.MutableBlockPos(x, y, z);
 
         // Pufferfish start - single chunk lookup
diff --git a/src/main/java/net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java b/src/main/java/net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java
index 6c9a8f062f989db022154155e8a05b334a0510da..326a58ecf85f70ddd1b223352811beb827ca9aad 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/AbstractHurtingProjectile.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.entity.projectile;
 
 import net.minecraft.core.particles.ParticleOptions;
+import net.minecraft.core.particles.ParticleType;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.ListTag;
@@ -123,17 +124,35 @@ public abstract class AbstractHurtingProjectile extends Projectile {
         return super.canHitEntity(entity) && !entity.noPhysics;
     }
 
-    protected boolean shouldBurn() {
-        return true;
+    // Canvas start
+    private boolean shouldBurn = true;
+    private ParticleOptions trailType = ParticleTypes.SMOKE;
+    private float inertia = 0.95f;
+
+    public boolean shouldBurn() {
+        return shouldBurn;
+    }
+
+    public ParticleOptions getTrailParticle() {
+        return trailType;
+    }
+
+    public float getInertia() {
+        return inertia;
+    }
+
+    public void setShouldBurn(boolean burn) {
+        this.shouldBurn = burn;
     }
 
-    protected ParticleOptions getTrailParticle() {
-        return ParticleTypes.SMOKE;
+    public void setTrailParticle(ParticleOptions trailType) {
+        this.trailType = trailType;
     }
 
-    protected float getInertia() {
-        return 0.95F;
+    public void setInertia(float inertia) {
+        this.inertia = inertia;
     }
+    // Canvas end
 
     @Override
     public void addAdditionalSaveData(CompoundTag nbt) {
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
index c314febb75a85ef12051bde392c5b57e9c5d85ac..cfdd14e0f272371ae8e824cf228ec7bdcec67ec6 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/Boat.java
@@ -2,8 +2,10 @@ package net.minecraft.world.entity.vehicle;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.UnmodifiableIterator;
+import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.function.IntFunction;
 import javax.annotation.Nullable;
 import net.minecraft.BlockUtil;
@@ -241,16 +243,31 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
         }
     }
 
-    protected void destroy(DamageSource source) {
-        // Purpur start
-        final ItemStack boat = new ItemStack(this.getDropItem());
-        if (this.level().purpurConfig.persistentDroppableEntityDisplayNames && this.hasCustomName()) {
-            boat.setHoverName(this.getCustomName());
+    // Canvas start
+    private boolean canDestroy = true;
+
+    public boolean canDestroy() {
+        return canDestroy;
+    }
+
+    public void setCanDestroy(final boolean canDestroy) {
+        this.canDestroy = canDestroy;
+    }
+
+    public void destroy(DamageSource source) {
+        if(canDestroy){
+            // Purpur start
+            final ItemStack boat = new ItemStack(this.getDropItem());
+            if (this.level().purpurConfig.persistentDroppableEntityDisplayNames && this.hasCustomName()) {
+                boat.setHoverName(this.getCustomName());
+            }
+            this.spawnAtLocation(boat);
+            // Purpur end
         }
-        this.spawnAtLocation(boat);
-        // Purpur end
     }
 
+    // Canvas end
+
     @Override
     public void onAboveBubbleCol(boolean drag) {
         if (!this.level().isClientSide) {
@@ -302,41 +319,63 @@ public class Boat extends Entity implements VariantHolder<Boat.Type> {
 
     }
 
+    // Canvas start
     public Item getDropItem() {
         Item item;
 
         switch (this.getVariant()) {
             case SPRUCE:
-                item = Items.SPRUCE_BOAT;
+                item = boatDropMap.get(Type.SPRUCE);
                 break;
             case BIRCH:
-                item = Items.BIRCH_BOAT;
+                item = boatDropMap.get(Type.BIRCH);
                 break;
             case JUNGLE:
-                item = Items.JUNGLE_BOAT;
+                item = boatDropMap.get(Type.JUNGLE);
                 break;
             case ACACIA:
-                item = Items.ACACIA_BOAT;
+                item = boatDropMap.get(Type.ACACIA);
                 break;
             case CHERRY:
-                item = Items.CHERRY_BOAT;
+                item = boatDropMap.get(Type.CHERRY);
                 break;
             case DARK_OAK:
-                item = Items.DARK_OAK_BOAT;
+                item = boatDropMap.get(Type.DARK_OAK);
                 break;
             case MANGROVE:
-                item = Items.MANGROVE_BOAT;
+                item = boatDropMap.get(Type.MANGROVE);
                 break;
             case BAMBOO:
-                item = Items.BAMBOO_RAFT;
+                item = boatDropMap.get(Type.BAMBOO);
                 break;
             default:
-                item = Items.OAK_BOAT;
+                item = boatDropMap.get(Type.OAK);
         }
 
         return item;
     }
 
+    public static Map<Type, Item> boatDropMap = new HashMap<>();
+
+    public static void setupBoatDropMap(){
+        boatDropMap.clear();
+        boatDropMap.put(Type.SPRUCE, Items.SPRUCE_BOAT);
+        boatDropMap.put(Type.BIRCH, Items.BIRCH_BOAT);
+        boatDropMap.put(Type.JUNGLE, Items.JUNGLE_BOAT);
+        boatDropMap.put(Type.ACACIA, Items.ACACIA_BOAT);
+        boatDropMap.put(Type.CHERRY, Items.CHERRY_BOAT);
+        boatDropMap.put(Type.DARK_OAK, Items.DARK_OAK_BOAT);
+        boatDropMap.put(Type.MANGROVE, Items.MANGROVE_BOAT);
+        boatDropMap.put(Type.BAMBOO, Items.BAMBOO_RAFT);
+        boatDropMap.put(Type.OAK, Items.OAK_BOAT);
+    }
+
+    public Map<Type, Item> getBoatDropMap(){
+        return boatDropMap;
+    }
+
+    // Canvas end
+
     @Override
     public void animateHurt(float yaw) {
         this.setHurtDir(-this.getHurtDir());
diff --git a/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java b/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java
index d70c1206df96b03c031399049a65e6a765d80347..11ebe403f2899ebee93b093b6a997719e93be31e 100644
--- a/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java
+++ b/src/main/java/net/minecraft/world/entity/vehicle/ChestBoat.java
@@ -76,12 +76,16 @@ public class ChestBoat extends Boat implements HasCustomInventoryScreen, Contain
         this.readChestVehicleSaveData(nbt);
     }
 
+    /* -- Canvas start
+
     @Override
     public void destroy(DamageSource source) {
         super.destroy(source);
         this.chestVehicleDestroyed(source, this.level(), this);
     }
 
+    Canvas end -- */
+
     @Override
     public void remove(Entity.RemovalReason reason) {
         if (!this.level().isClientSide && reason.shouldDestroy()) {
@@ -117,6 +121,8 @@ public class ChestBoat extends Boat implements HasCustomInventoryScreen, Contain
 
     }
 
+    /* -- Canvas start
+
     @Override
     public Item getDropItem() {
         Item item;
@@ -153,6 +159,8 @@ public class ChestBoat extends Boat implements HasCustomInventoryScreen, Contain
         return item;
     }
 
+     Canvas end -- */
+
     @Override
     public void clearContent() {
         this.clearChestVehicleContent();
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index dee60b3623e6e1ac370b3c8aaf8fd61c07c14def..3c129342782618530ecbe3fbdcb2428887b00f45 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -91,6 +91,7 @@ import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ai.village.VillageSiege;
 import net.minecraft.world.entity.npc.CatSpawner;
 import net.minecraft.world.entity.npc.WanderingTraderSpawner;
+import net.minecraft.world.entity.vehicle.Boat;
 import net.minecraft.world.inventory.AbstractContainerMenu;
 import net.minecraft.world.inventory.CraftingContainer;
 import net.minecraft.world.inventory.CraftingMenu;
@@ -194,6 +195,7 @@ import org.bukkit.craftbukkit.packs.CraftDataPackManager;
 import org.bukkit.craftbukkit.potion.CraftPotionBrewer;
 import org.bukkit.craftbukkit.profile.CraftPlayerProfile;
 import org.bukkit.craftbukkit.scheduler.CraftScheduler;
+import org.bukkit.craftbukkit.scheduler.MinecraftInternalPlugin;
 import org.bukkit.craftbukkit.scoreboard.CraftCriteria;
 import org.bukkit.craftbukkit.scoreboard.CraftScoreboardManager;
 import org.bukkit.craftbukkit.structure.CraftStructureManager;
@@ -498,6 +500,8 @@ public final class CraftServer implements Server {
             MapPalette.setMapColorCache(new CraftMapColorCache(this.logger));
         }
         datapackManager = new io.papermc.paper.datapack.PaperDatapackManager(console.getPackRepository()); // Paper
+        Boat.setupBoatDropMap(); // Canvas - setup drop mappings
+        Bukkit.getPluginManager().registerEvents(new MinecraftInternalPlugin(), new MinecraftInternalPlugin()); // Canvas - register as listener
     }
 
     public boolean getCommandBlockOverride(String command) {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
index c64918175ec08d20cde2bda9e0cac8b474385fe0..d97200a67362021d3af0f4078914b073d07f896c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAllay.java
@@ -91,4 +91,17 @@ public class CraftAllay extends CraftCreature implements org.bukkit.entity.Allay
         BlockPos nmsJukeboxPos = this.getHandle().jukeboxPos;
         return (nmsJukeboxPos != null) ? CraftLocation.toBukkit(nmsJukeboxPos, this.getWorld()) : null;
     }
+
+    // Canvas start
+    @Override
+    public boolean canInteractWith() {
+        return this.getHandle().canInteract;
+    }
+
+    @Override
+    public void setCanInteractWith(final boolean canInteractWith) {
+        this.getHandle().setCanInteract(canInteractWith);
+    }
+    // Canvas end
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
index cbfca242f820d238b112f8ce64e9de8398c48a1c..da003ffbe485a55bb307eecdb8d10ad8cc04de22 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftAxolotl.java
@@ -3,6 +3,7 @@ package org.bukkit.craftbukkit.entity;
 import com.google.common.base.Preconditions;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Axolotl;
+import org.bukkit.potion.PotionEffectType;
 
 public class CraftAxolotl extends CraftAnimals implements Axolotl, io.papermc.paper.entity.PaperBucketable { // Paper - Bucketable API
 
@@ -41,4 +42,39 @@ public class CraftAxolotl extends CraftAnimals implements Axolotl, io.papermc.pa
 
         this.getHandle().setVariant(net.minecraft.world.entity.animal.axolotl.Axolotl.Variant.byId(variant.ordinal()));
     }
+
+    // Canvas start
+
+    @Override
+    public boolean getApplySupportingEffects() {
+        return this.getHandle().getApplySupportingEffects();
+    }
+
+    @Override
+    public void setApplySupportingEffects(final boolean applySupportingEffects) {
+        this.getHandle().setApplySupportingEffects(applySupportingEffects);
+    }
+
+    @Override
+    public void setSupportingEffectType(final PotionEffectType potionEffectType) {
+        this.getHandle().setSupportingEffectType(potionEffectType);
+    }
+
+    @Override
+    public PotionEffectType getSupportingPotionEffectType() {
+        return this.getHandle().getSupportingPotionEffectType();
+    }
+
+    @Override
+    public void setSupportingEffectAmplifier(final int amplifier) {
+        this.getHandle().setSupportingEffectAmplifier(amplifier);
+    }
+
+    @Override
+    public int getSupportingEffectAmplifier() {
+        return this.getHandle().getSupportingEffectAmplifier();
+    }
+
+    // Canvas end
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java
index 1bb72f28085f3885bec068b586ec222111044884..16279bfa93191288e6040e16ff759adb3a2acf4b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBat.java
@@ -47,5 +47,15 @@ public class CraftBat extends CraftAmbient implements Bat {
 
         this.getHandle().targetPosition = pos;
     }
+
+    @Override
+    public void setTicksPerFlap(final int tpf) {
+        this.getHandle().setTicksPerFlap(tpf);
+    }
+
+    @Override
+    public int getTicksPerFlap() {
+        return this.getHandle().getTicksPerFlap();
+    }
     // Paper end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
index a4c9c73691300880777483b0beb17e1bd6779d06..fa26c48d3d74c6cfd15f2a73636575b3ccbe8864 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBlaze.java
@@ -17,4 +17,16 @@ public class CraftBlaze extends CraftMonster implements Blaze {
     public String toString() {
         return "CraftBlaze";
     }
+
+    // Canvas start
+    @Override
+    public boolean isOnFire() {
+        return this.getHandle().isOnFire();
+    }
+
+    @Override
+    public void setCharged(final boolean fireActive) {
+        this.getHandle().setCharged(fireActive);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
index 859f233197ebe738511011e36668c4eb5d4b7d8e..700796371b811cec2cb8cb324b885e9fe0a947c5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftBoat.java
@@ -2,8 +2,17 @@ package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
 import java.util.stream.Collectors;
+import net.minecraft.world.damagesource.DamageSource;
+import net.minecraft.world.damagesource.DamageSources;
+import net.minecraft.world.damagesource.DamageType;
+import net.minecraft.world.damagesource.DamageTypes;
+import net.minecraft.world.item.Item;
+import net.minecraft.world.item.Items;
+import org.bukkit.Bukkit;
+import org.bukkit.Material;
 import org.bukkit.TreeSpecies;
 import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Boat;
 import org.bukkit.entity.Entity;
 
@@ -84,6 +93,86 @@ public class CraftBoat extends CraftVehicle implements Boat {
     public org.bukkit.Material getBoatMaterial() {
         return org.bukkit.craftbukkit.util.CraftMagicNumbers.getMaterial(this.getHandle().getDropItem());
     }
+
+    // Canvas start
+    @Override
+    public void shouldDropItemOnDestroy(final boolean shouldDrop) {
+        this.getHandle().setCanDestroy(shouldDrop);
+    }
+
+    @Override
+    public boolean getShouldDropItemOnDestroy() {
+        return this.getHandle().canDestroy();
+    }
+
+    @Override
+    public void destroy() {
+        this.getHandle().destroy(this.getHandle().getCommandSenderWorld().damageSources().generic());
+    }
+
+    @Override
+    public void setDropItem(final Boat.Type boatType, final Material itemMaterial) {
+        Item item = Items.AIR;
+        switch (boatType) {
+            case SPRUCE -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.SPRUCE);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.SPRUCE, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case BIRCH -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.BIRCH);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.BIRCH, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case JUNGLE -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.JUNGLE);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.JUNGLE, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case ACACIA -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.ACACIA);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.ACACIA, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case CHERRY -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.CHERRY);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.CHERRY, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case DARK_OAK -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.DARK_OAK);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.DARK_OAK, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case MANGROVE -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.MANGROVE);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.MANGROVE, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case BAMBOO -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.BAMBOO);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.BAMBOO, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+            case OAK -> {
+                this.getHandle().getBoatDropMap().remove(net.minecraft.world.entity.vehicle.Boat.Type.OAK);
+                item = this.getHandle().getBoatDropMap().put(net.minecraft.world.entity.vehicle.Boat.Type.OAK, CraftMagicNumbers.getItem(itemMaterial));
+                break;
+            }
+        }
+    }
+
+    @Override
+    public Material getDropItem(final Boat.Type boatMaterial) {
+        return CraftMagicNumbers.getMaterial(this.getHandle().getBoatDropMap().get(boatMaterial));
+    }
+
+    @Override
+    public void resetDropMap() {
+        net.minecraft.world.entity.vehicle.Boat.setupBoatDropMap();
+    }
+    // Canvas end
+
     // Paper end
 
     @Override
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
index 80e571c977db5cdf43bfbfce035f37a3fa325c95..69c8a50d6daf8763a0bce84ac0d6dc8911b4fd5b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCamel.java
@@ -5,6 +5,8 @@ import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Camel;
 import org.bukkit.entity.Horse;
 
+import static net.minecraft.world.entity.animal.camel.Camel.BABY_SCALE;
+
 public class CraftCamel extends CraftAbstractHorse implements Camel {
 
     public CraftCamel(CraftServer server, net.minecraft.world.entity.animal.camel.Camel entity) {
@@ -49,4 +51,5 @@ public class CraftCamel extends CraftAbstractHorse implements Camel {
             this.getHandle().standUp();
         }
     }
+
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
index 6c9531c018be29b5794d047b50007fde1b50b494..cea78de9713d5be1df3a6abdd167cd51093501f4 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCat.java
@@ -85,5 +85,31 @@ public class CraftCat extends CraftTameableAnimal implements Cat {
     public boolean isHeadUp() {
         return this.getHandle().isRelaxStateOne();
     }
-    // Paper End - More cat api
+
+    // Canvas start
+    @Override
+    public void hiss() {
+        this.getHandle().hiss();
+    }
+
+    @Override
+    public boolean isSteppingCarefully() {
+        return this.getHandle().isSteppingCarefully();
+    }
+
+    @Override
+    public boolean allowMorningGiftSpawn() {
+        return this.getHandle().allowMorningGift;
+    }
+
+    @Override
+    public void setAllowMorningGiftSpawn(final boolean allow) {
+        this.getHandle().setAllowMorningGift(allow);
+    }
+
+    @Override
+    public void spawnMorningGift() {
+        this.getHandle().giveMorningGift();
+    }
+    // Paper End - More cat api -&- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
index f1844d697b91e61878ade5b922cf2a3a538365c7..f3a1fa8051b5988152019bf01b956a9318115aeb 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftChestBoat.java
@@ -1,5 +1,6 @@
 package org.bukkit.craftbukkit.entity;
 
+import com.destroystokyo.paper.entity.CraftRangedEntity;
 import net.minecraft.resources.ResourceLocation;
 import net.minecraft.world.entity.vehicle.ChestBoat;
 import org.bukkit.Bukkit;
@@ -7,9 +8,12 @@ import org.bukkit.NamespacedKey;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.inventory.CraftInventory;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.entity.Player;
 import org.bukkit.inventory.Inventory;
 import org.bukkit.loot.LootTable;
 
+import static org.bukkit.craftbukkit.entity.CraftEntityType.bukkitToMinecraft;
+
 public class CraftChestBoat extends CraftBoat implements org.bukkit.entity.ChestBoat, com.destroystokyo.paper.loottable.PaperLootableEntityInventory { // Paper
     private final Inventory inventory;
 
@@ -64,4 +68,11 @@ public class CraftChestBoat extends CraftBoat implements org.bukkit.entity.Chest
         this.getHandle().setLootTable(newKey);
         this.getHandle().setLootTableSeed(seed);
     }
+
+    // Canvas start
+    @Override
+    public void openChestInventory(final Player player) {
+        this.getHandle().openCustomInventoryScreen(((CraftPlayer) player).getHandle());
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
index 96f6e2fd9c6b20d34122abfe5c7fba732502d5a0..904a1321f8402927771fabbd2b1d24cfea3d7246 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftChicken.java
@@ -40,4 +40,9 @@ public class CraftChicken extends CraftAnimals implements Chicken {
         this.getHandle().eggTime = eggLayTime;
     }
     // Paper end
+
+    @Override
+    public boolean isFlapping(){
+        return this.isFlapping();
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
index 664d9c1793b823ed03f198a936f2ebd9b7695898..b4896cdaa7f4a2497db59fe057888fc07f5c52a6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftCreature.java
@@ -2,6 +2,7 @@ package org.bukkit.craftbukkit.entity;
 
 import net.minecraft.world.entity.PathfinderMob;
 import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.entity.Allay;
 import org.bukkit.entity.Creature;
 
 public class CraftCreature extends CraftMob implements Creature {
@@ -18,4 +19,9 @@ public class CraftCreature extends CraftMob implements Creature {
     public String toString() {
         return "CraftCreature";
     }
+
+    @Override
+    public boolean isPanicking() {
+        return this.getHandle().isPanicking();
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
index 51fc4acae9f20e8891069704e4a27f212b870766..71be4d4690991dacc99307354ac860c9adc208c5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDrowned.java
@@ -18,4 +18,14 @@ public class CraftDrowned extends CraftZombie implements Drowned, com.destroysto
     public String toString() {
         return "CraftDrowned";
     }
+
+    @Override
+    public boolean isSearchingForLand() {
+        return this.getHandle().searchingForLand;
+    }
+
+    @Override
+    public void setSearchingForLand(boolean searching) {
+        this.getHandle().setSearchingForLand(searching);
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftElderGuardian.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftElderGuardian.java
index 0e5d7ba2a30b2110723b2a83ac08617d4de9a4ac..aa9b122a85aa644f0fdfac625ff7e087dd6c320d 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftElderGuardian.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftElderGuardian.java
@@ -18,4 +18,61 @@ public class CraftElderGuardian extends CraftGuardian implements ElderGuardian {
     public boolean isElder() {
         return true;
     }
+
+    @Override
+    public net.minecraft.world.entity.monster.ElderGuardian getHandle(){
+        return (net.minecraft.world.entity.monster.ElderGuardian) super.getHandle();
+    }
+
+    // Canvas start
+    @Override
+    public void setEffectAmplifier(final int effectAmplifier) {
+        this.getHandle().setEffectAmplifier(effectAmplifier);
+    }
+
+    @Override
+    public int getEffectDuration() {
+        return this.getHandle().getEffectDuration();
+    }
+
+    @Override
+    public void setEffectDuration(final int effectDuration) {
+        this.getHandle().setEffectDuration(effectDuration);
+    }
+
+    @Override
+    public int getEffectAmplifier() {
+        return this.getHandle().getEffectAmplifier();
+    }
+
+    @Override
+    public int getEffectDisplayLimit() {
+        return this.getHandle().getEffectDisplayLimit();
+    }
+
+    @Override
+    public void setEffectDisplayLimit(final int effectDisplayLimit) {
+        this.getHandle().setEffectDisplayLimit(effectDisplayLimit);
+    }
+
+    @Override
+    public int getEffectInterval() {
+        return this.getHandle().getEffectInterval();
+    }
+
+    @Override
+    public void setEffectInterval(final int effectInterval) {
+        this.getHandle().setEffectInterval(effectInterval);
+    }
+
+    @Override
+    public int getEffectRadius() {
+        return this.getHandle().getEffectRadius();
+    }
+
+    @Override
+    public void setEffectRadius(final int effectRadius) {
+        this.getHandle().setEffectRadius(effectRadius);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
index 6eae6efa35a1ccc224e2f311e25ecf13e8647ec8..9de216ccc815cfa2b5a5d941299aa817fad5c328 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderDragon.java
@@ -2,6 +2,8 @@ package org.bukkit.craftbukkit.entity;
 
 import com.google.common.collect.ImmutableSet;
 import com.google.common.collect.ImmutableSet.Builder;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Set;
 import net.minecraft.world.entity.boss.EnderDragonPart;
 import net.minecraft.world.entity.boss.enderdragon.phases.EnderDragonPhase;
@@ -12,6 +14,7 @@ import org.bukkit.craftbukkit.boss.CraftDragonBattle;
 import org.bukkit.entity.ComplexEntityPart;
 import org.bukkit.entity.EnderDragon;
 import org.bukkit.entity.EnderDragon.Phase;
+import org.bukkit.entity.Entity;
 
 public class CraftEnderDragon extends CraftMob implements EnderDragon, CraftEnemy {
 
@@ -64,9 +67,11 @@ public class CraftEnderDragon extends CraftMob implements EnderDragon, CraftEnem
         return battle != null ? battle.getBossBar() : null;
     }
 
+    DragonBattle dragonBattle = this.getHandle().getDragonFight() != null ? new CraftDragonBattle(this.getHandle().getDragonFight()) : null; // Canvas
+
     @Override
     public DragonBattle getDragonBattle() {
-        return this.getHandle().getDragonFight() != null ? new CraftDragonBattle(this.getHandle().getDragonFight()) : null;
+        return this.dragonBattle; // Canvas
     }
 
     @Override
@@ -90,5 +95,32 @@ public class CraftEnderDragon extends CraftMob implements EnderDragon, CraftEnem
             this.getHandle().setPodium(io.papermc.paper.util.MCUtil.toBlockPos(location));
         }
     }
-    // Paper end
+
+    // Canvas start
+    @Override
+    public void setDragonBattle(final DragonBattle dragonBattle) {
+        this.dragonBattle = dragonBattle;
+    }
+
+    @Override
+    public void knockback(final List<Entity> entities) {
+        List<net.minecraft.world.entity.Entity> entityList = new ArrayList<>();
+        for (Entity T : entities) {
+            entityList.add(((CraftEntity) T).getHandle());
+        }
+        this.getHandle().knockBack(entityList);
+    }
+
+    @Override
+    public void knockback(final Entity entity) {
+        List<net.minecraft.world.entity.Entity> entities = new ArrayList<>();
+        entities.add(((CraftEntity) entity).getHandle());
+        this.getHandle().knockBack(entities);
+    }
+
+    @Override
+    public boolean inWall() {
+        return this.getHandle().inWall;
+    }
+    // Paper end -/- Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
index 983b9d6ddb58eff297e96e5c8b28ec427efa267d..f50e30f247203e80b73275683109ebdd0f2696f6 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEnderman.java
@@ -3,6 +3,8 @@ package org.bukkit.craftbukkit.entity;
 import com.google.common.base.Preconditions;
 import net.minecraft.world.entity.monster.EnderMan;
 import net.minecraft.world.level.block.state.BlockState;
+import org.apache.commons.lang3.tuple.Pair;
+import org.bukkit.Location;
 import org.bukkit.Material;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.craftbukkit.CraftServer;
@@ -10,6 +12,7 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftMagicNumbers;
 import org.bukkit.entity.Enderman;
 import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
 import org.bukkit.material.MaterialData;
 
 public class CraftEnderman extends CraftMonster implements Enderman {
@@ -60,7 +63,53 @@ public class CraftEnderman extends CraftMonster implements Enderman {
     public void setHasBeenStaredAt(boolean hasBeenStaredAt) {
         this.getHandle().setHasBeenStaredAt(hasBeenStaredAt);
     }
-    // Paper end
+
+    // Canavs start
+    @Override
+    public void teleportTowards(final int x, final int y, final int z) {
+        Preconditions.checkArgument(new Location(this.getWorld(), x, y, z) != null, "location cannot be null");
+        this.getHandle().teleport(x, y, z);
+    }
+
+    @Override
+    public void setPersistentAngerTime(final int min, final int max) {
+        this.getHandle().setPersistentAngerTime(min, max);
+    }
+
+    @Override
+    public Pair<Integer, Integer> getPersistentAngerTime() {
+        int max = this.getHandle().maxRangeAnger;
+        int min = this.getHandle().minRangeAnger;
+        Pair<Integer, Integer> integerPair = new Pair<Integer, Integer>() {
+            @Override
+            @Deprecated(forRemoval = true)
+            public Integer setValue(final Integer value) {
+                return null;
+            }
+
+            @Override
+            public Integer getLeft() {
+                return min;
+            }
+
+            @Override
+            public Integer getRight() {
+                return max;
+            }
+        };
+        return integerPair;
+    }
+
+    @Override
+    public void playStareSound() {
+        this.getHandle().playStareSound();
+    }
+
+    @Override
+    public boolean isLookingAtMe(final Player player) {
+        return this.getHandle().isLookingAtMe_check(((CraftPlayer) player).getHandle());
+    }
+    // Paper end -/- Canvas end
 
     @Override
     public EnderMan getHandle() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
index 774ed1fdc909c911bf93a1b720285b43e9f728b8..c808b67959ee7f711cfb82f86bea90432354a895 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftFireball.java
@@ -1,7 +1,12 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
+import net.minecraft.core.particles.ParticleOptions;
+import net.minecraft.core.particles.ParticleType;
+import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.world.entity.projectile.AbstractHurtingProjectile;
+import org.bukkit.Particle;
+import org.bukkit.craftbukkit.CraftParticle;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.Fireball;
 import org.bukkit.projectiles.ProjectileSource;
@@ -39,6 +44,37 @@ public class CraftFireball extends AbstractProjectile implements Fireball {
         return new Vector(this.getHandle().xPower, this.getHandle().yPower, this.getHandle().zPower);
     }
 
+    @Override
+    public void setParticleTrailType(final Particle particle) {
+        ParticleOptions particleType = CraftParticle.bukkitToMinecraft(particle);
+        this.getHandle().setTrailParticle(particleType);
+    }
+
+    @Override
+    public Particle getParticleTrailType() {
+        return CraftParticle.minecraftToBukkit(this.getHandle().getTrailParticle().getType());
+    }
+
+    @Override
+    public void setShouldBurn(final boolean should) {
+        this.getHandle().setShouldBurn(should);
+    }
+
+    @Override
+    public boolean shouldBurn() {
+        return this.getHandle().shouldBurn();
+    }
+
+    @Override
+    public void setInertia(final float inertia) {
+        this.getHandle().setInertia(inertia);
+    }
+
+    @Override
+    public float getInertia() {
+        return this.getHandle().getInertia();
+    }
+
     @Override
     public void setDirection(Vector direction) {
         Preconditions.checkArgument(direction != null, "Vector direction cannot be null");
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
index b4e45d8e9851552f30c9c29d3d9671e1e9094c38..251724546cb1659ea52f88a124ccbaab5d62ebce 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftMob.java
@@ -10,6 +10,7 @@ import org.bukkit.craftbukkit.CraftSound;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Mob;
+import org.bukkit.entity.Player;
 import org.bukkit.loot.LootTable;
 
 public abstract class CraftMob extends CraftLivingEntity implements Mob {
@@ -32,6 +33,11 @@ public abstract class CraftMob extends CraftLivingEntity implements Mob {
         }
     }
 
+    @Override
+    public boolean canBeLeashed(Player player){
+        return this.getHandle().canBeLeashed(((CraftPlayer) player).getHandle());
+    }
+
     @Override
     public CraftLivingEntity getTarget() {
         if (this.getHandle().getTarget() == null) return null;
diff --git a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
index d96399e9bf1a58db5a4a22e58abb99e7660e0694..86a67cdeb6421c469c3bb9b22aded8c44eb11ddd 100644
--- a/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
+++ b/src/main/java/org/bukkit/craftbukkit/scheduler/MinecraftInternalPlugin.java
@@ -1,16 +1,23 @@
 package org.bukkit.craftbukkit.scheduler;
 
 
+import org.bukkit.Bukkit;
 import org.bukkit.Server;
 import org.bukkit.command.Command;
 import org.bukkit.command.CommandSender;
 import org.bukkit.configuration.file.FileConfiguration;
+import org.bukkit.entity.Camel;
+import org.bukkit.entity.EntityType;
+import org.bukkit.event.EventHandler;
+import org.bukkit.event.Listener;
+import org.bukkit.event.player.PlayerJoinEvent;
 import org.bukkit.generator.BiomeProvider;
 import org.bukkit.generator.ChunkGenerator;
 import org.bukkit.plugin.PluginBase;
 import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.plugin.PluginLoader;
 import org.bukkit.plugin.PluginLogger;
+import org.bukkit.scheduler.BukkitRunnable;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -18,7 +25,7 @@ import java.io.File;
 import java.io.InputStream;
 import java.util.List;
 
-public class MinecraftInternalPlugin extends PluginBase {
+public class MinecraftInternalPlugin extends PluginBase implements Listener {
     private boolean enabled = true;
 
     private final String pluginName;
@@ -143,4 +150,9 @@ public class MinecraftInternalPlugin extends PluginBase {
     public List<String> onTabComplete(CommandSender sender, Command command, String alias, String[] args) {
         throw new UnsupportedOperationException("Not supported.");
     }
+
+    @EventHandler
+    public void test(PlayerJoinEvent e){
+        // yeah just testing bro
+    }
 }
diff --git a/src/main/java/net/minecraft/world/entity/GlowSquid.java b/src/main/java/net/minecraft/world/entity/GlowSquid.java
index b18cbe85330e26de6f6cbfcc3d51a7418bd93877..b39002c9134e60a21fa0709e6017fbc001857793 100644
--- a/src/main/java/net/minecraft/world/entity/GlowSquid.java
+++ b/src/main/java/net/minecraft/world/entity/GlowSquid.java
@@ -57,7 +57,7 @@ public class GlowSquid extends Squid {
     }
 
     @Override
-    protected ParticleOptions getInkParticle() {
+    public ParticleOptions getInkParticle() { // Canvas - protected -> public
         return ParticleTypes.GLOW_SQUID_INK;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
index 1807c7bac6f5012da8130dd41edeb9dd4df32a47..d7d65903db4d51b04559b98255fcb7f63184a9e5 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Dolphin.java
@@ -244,6 +244,19 @@ public class Dolphin extends WaterAnimal {
         this.setGotFish(nbt.getBoolean("GotFish"));
         this.setMoisntessLevel(nbt.getInt("Moistness"));
     }
+    // Canvas start
+    public DolphinSwimToTreasureGoal swimToTreasureGoal;
+    public DolphinSwimWithPlayerGoal swimWithPlayerGoal;
+    public PlayWithItemsGoal playWithItemsGoal;
+    private double swimWithPlayerDistance = 4.0D;
+
+    public void setSwimWithPlayerDistance(double distance){
+        this.goalSelector.removeGoal(swimWithPlayerGoal);
+        this.swimWithPlayerDistance = distance;
+        this.swimWithPlayerGoal = new Dolphin.DolphinSwimWithPlayerGoal(this, swimWithPlayerDistance);
+        this.goalSelector.addGoal(2, this.swimWithPlayerGoal);
+    }
+    // Canvas end
 
     @Override
     protected void registerGoals() {
@@ -251,14 +264,21 @@ public class Dolphin extends WaterAnimal {
         this.goalSelector.addGoal(0, new TryFindWaterGoal(this));
         this.goalSelector.addGoal(1, new MeleeAttackGoal(this, 1.2000000476837158D, true)); // Purpur
         this.goalSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
-        this.goalSelector.addGoal(1, new Dolphin.DolphinSwimToTreasureGoal(this));
-        this.goalSelector.addGoal(2, new Dolphin.DolphinSwimWithPlayerGoal(this, 4.0D));
+        // Canvas start
+        this.swimToTreasureGoal = new Dolphin.DolphinSwimToTreasureGoal(this);
+        this.swimWithPlayerGoal = new Dolphin.DolphinSwimWithPlayerGoal(this, swimWithPlayerDistance);
+        this.goalSelector.addGoal(1, this.swimToTreasureGoal);
+        this.goalSelector.addGoal(2, this.swimWithPlayerGoal);
+        // Canvas end
         this.goalSelector.addGoal(4, new RandomSwimmingGoal(this, 1.0D, 10));
         this.goalSelector.addGoal(4, new RandomLookAroundGoal(this));
         this.goalSelector.addGoal(5, new LookAtPlayerGoal(this, Player.class, 6.0F));
         this.goalSelector.addGoal(5, new DolphinJumpGoal(this, 10));
         //this.goalSelector.addGoal(6, new MeleeAttackGoal(this, 1.2000000476837158D, true)); // Purpur - moved up
-        this.goalSelector.addGoal(8, new Dolphin.PlayWithItemsGoal());
+        // Canvas start
+        this.playWithItemsGoal = new Dolphin.PlayWithItemsGoal();
+        this.goalSelector.addGoal(8, this.playWithItemsGoal);
+        // Canvas end
         this.goalSelector.addGoal(8, new FollowBoatGoal(this));
         this.goalSelector.addGoal(9, new AvoidEntityGoal<>(this, Guardian.class, 8.0F, 1.0D, 1.0D));
         this.targetSelector.addGoal(0, new org.purpurmc.purpur.entity.ai.HasRider(this)); // Purpur
@@ -482,7 +502,7 @@ public class Dolphin extends WaterAnimal {
         return true;
     }
 
-    private static class DolphinSwimToTreasureGoal extends Goal {
+    public static class DolphinSwimToTreasureGoal extends Goal { // Canvas - private -> public
 
         private final Dolphin dolphin;
         private boolean stuck;
@@ -574,7 +594,7 @@ public class Dolphin extends WaterAnimal {
         }
     }
 
-    private static class DolphinSwimWithPlayerGoal extends Goal {
+    public static class DolphinSwimWithPlayerGoal extends Goal { // Canvas - private -> public
 
         private final Dolphin dolphin;
         private final double speedModifier;
@@ -625,7 +645,7 @@ public class Dolphin extends WaterAnimal {
         }
     }
 
-    private class PlayWithItemsGoal extends Goal {
+    public class PlayWithItemsGoal extends Goal { // Canvas - private -> public
 
         private int cooldown;
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Squid.java b/src/main/java/net/minecraft/world/entity/animal/Squid.java
index dd7f2beabf0edad4143ac2365ac04a22edf1f75e..c456e8959b4df057e04ca515e4f4b44f024a163f 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Squid.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Squid.java
@@ -1,7 +1,10 @@
 package net.minecraft.world.entity.animal;
 
+import org.bukkit.craftbukkit.CraftParticle;
+
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.particles.ParticleOptions;
+import net.minecraft.core.particles.ParticleType;
 import net.minecraft.core.particles.ParticleTypes;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.sounds.SoundEvent;
@@ -234,7 +237,7 @@ public class Squid extends WaterAnimal {
         return vec3.yRot(-this.yBodyRotO * ((float)Math.PI / 180F));
     }
 
-    private void spawnInk() {
+    public void spawnInk() { // Canvas - private -> public
         this.playSound(this.getSquirtSound(), this.getSoundVolume(), this.getVoicePitch());
         Vec3 vec3 = this.rotateVector(new Vec3(0.0D, -1.0D, 0.0D)).add(this.getX(), this.getY(), this.getZ());
 
@@ -246,7 +249,12 @@ public class Squid extends WaterAnimal {
 
     }
 
-    protected ParticleOptions getInkParticle() {
+    // Canvas start
+    public void setGlowingSquid(){
+        this.convertTo(EntityType.GLOW_SQUID, true);
+    }
+    // Canvas end
+    public ParticleOptions getInkParticle() { // Canvas - protected -> public
         return ParticleTypes.SQUID_INK;
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/animal/Turtle.java b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
index c8f3be5fd869f62472d5a248f9c02700dac0ac69..e1c012442ac80ccdef2c1f6744899629146ee750 100644
--- a/src/main/java/net/minecraft/world/entity/animal/Turtle.java
+++ b/src/main/java/net/minecraft/world/entity/animal/Turtle.java
@@ -119,7 +119,7 @@ public class Turtle extends Animal {
     }
 
     @Override
-    protected boolean isAlwaysExperienceDropper() {
+    public boolean isAlwaysExperienceDropper() { // Canvas - protected -> public
         return this.level().purpurConfig.turtleAlwaysDropExp;
     }
 
@@ -243,7 +243,7 @@ public class Turtle extends Animal {
 
     @Override
     public boolean isPushedByFluid() {
-        return false;
+        return false; 
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
index 5d7b20c30bc5e3be8511b300c318d12a1e4a49d0..96db6d8f0786932652f09592a052230bb697bff2 100644
--- a/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
+++ b/src/main/java/net/minecraft/world/entity/animal/goat/Goat.java
@@ -64,18 +64,42 @@ import org.bukkit.event.player.PlayerBucketFillEvent;
 public class Goat extends Animal {
 
     public static final EntityDimensions LONG_JUMPING_DIMENSIONS = EntityDimensions.scalable(0.9F, 1.3F).scale(0.7F);
-    private static final int ADULT_ATTACK_DAMAGE = 2;
-    private static final int BABY_ATTACK_DAMAGE = 1;
-    protected static final ImmutableList<SensorType<? extends Sensor<? super Goat>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.GOAT_TEMPTATIONS);
-    protected static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES, MemoryModuleType.WALK_TARGET, MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE, MemoryModuleType.PATH, MemoryModuleType.ATE_RECENTLY, MemoryModuleType.BREED_TARGET, MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS, MemoryModuleType.LONG_JUMP_MID_JUMP, MemoryModuleType.TEMPTING_PLAYER, MemoryModuleType.NEAREST_VISIBLE_ADULT, MemoryModuleType.TEMPTATION_COOLDOWN_TICKS, new MemoryModuleType[]{MemoryModuleType.IS_TEMPTED, MemoryModuleType.RAM_COOLDOWN_TICKS, MemoryModuleType.RAM_TARGET, MemoryModuleType.IS_PANICKING});
-    public static final int GOAT_FALL_DAMAGE_REDUCTION = 10;
-    public static final double GOAT_SCREAMING_CHANCE = 0.02D;
-    public static final double UNIHORN_CHANCE = 0.10000000149011612D;
+    // Canvas start - static/final -> public
+    private int ADULT_ATTACK_DAMAGE = 2;
+    private int BABY_ATTACK_DAMAGE = 1;
+    // Canvas end
+    public static final ImmutableList<SensorType<? extends Sensor<? super Goat>>> SENSOR_TYPES = ImmutableList.of(SensorType.NEAREST_LIVING_ENTITIES, SensorType.NEAREST_PLAYERS, SensorType.NEAREST_ITEMS, SensorType.NEAREST_ADULT, SensorType.HURT_BY, SensorType.GOAT_TEMPTATIONS); // Canvas protected -> public
+    // Canvas start - expand ImmutableList for easier readability
+    public static final ImmutableList<MemoryModuleType<?>> MEMORY_TYPES = ImmutableList.of(MemoryModuleType.LOOK_TARGET, // protected -> public
+                            MemoryModuleType.NEAREST_VISIBLE_LIVING_ENTITIES,
+                            MemoryModuleType.WALK_TARGET,
+                            MemoryModuleType.CANT_REACH_WALK_TARGET_SINCE,
+                            MemoryModuleType.PATH, MemoryModuleType.ATE_RECENTLY,
+                            MemoryModuleType.BREED_TARGET,
+                            MemoryModuleType.LONG_JUMP_COOLDOWN_TICKS,
+                            MemoryModuleType.LONG_JUMP_MID_JUMP,
+                            MemoryModuleType.TEMPTING_PLAYER,
+                            MemoryModuleType.NEAREST_VISIBLE_ADULT,
+                            MemoryModuleType.TEMPTATION_COOLDOWN_TICKS,
+                            new MemoryModuleType[]{MemoryModuleType.IS_TEMPTED,
+                                MemoryModuleType.RAM_COOLDOWN_TICKS,
+                                MemoryModuleType.RAM_TARGET,
+                                MemoryModuleType.IS_PANICKING}); 
+    // Canvas start - static/final -> public
+    public int GOAT_FALL_DAMAGE_REDUCTION = 10;
+    public double GOAT_SCREAMING_CHANCE = 0.02D;
+    public double UNIHORN_CHANCE = 0.10000000149011612D;
+    // Canvas end
     private static final EntityDataAccessor<Boolean> DATA_IS_SCREAMING_GOAT = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
     public static final EntityDataAccessor<Boolean> DATA_HAS_LEFT_HORN = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
     public static final EntityDataAccessor<Boolean> DATA_HAS_RIGHT_HORN = SynchedEntityData.defineId(Goat.class, EntityDataSerializers.BOOLEAN);
     private boolean isLoweringHead;
     private int lowerHeadTick;
+    // Canvas start
+    public boolean isLoweringHead(){
+        return this.isLoweringHead;
+    }
+    // Canvas end
 
     public Goat(EntityType<? extends Goat> type, Level world) {
         super(type, world);
@@ -149,10 +173,19 @@ public class Goat extends Animal {
         }
 
     }
+    // Canvas start
+    public void setFallDamageReduction(int fallDamageReduction){
+        this.GOAT_FALL_DAMAGE_REDUCTION = fallDamageReduction;
+    }
+
+    public int getFallDamageReduction(){
+        return this.GOAT_FALL_DAMAGE_REDUCTION;
+    }
+    // Canvas end
 
     @Override
     protected int calculateFallDamage(float fallDistance, float damageMultiplier) {
-        return super.calculateFallDamage(fallDistance, damageMultiplier) - 10;
+        return super.calculateFallDamage(fallDistance, damageMultiplier) - this.GOAT_FALL_DAMAGE_REDUCTION; // Canvas - set int to customizable int value
     }
 
     @Override
@@ -400,6 +433,23 @@ public class Goat extends Animal {
         this.entityData.set(Goat.DATA_HAS_LEFT_HORN, true);
         this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, true);
     }
+    // Canvas start
+    public void addRightHorn(){
+        this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, true);
+    }
+
+    public void removeRightHorn(){
+        this.entityData.set(Goat.DATA_HAS_RIGHT_HORN, false);
+    }
+
+    public void addLeftHorn(){
+        this.entityData.set(Goat.DATA_HAS_LEFT_HORN, true);
+    }
+
+    public void removeLeftHorn(){
+        this.entityData.set(Goat.DATA_HAS_LEFT_HORN, false);
+    }
+    // Canvas end
 
     public void removeHorns() {
         this.entityData.set(Goat.DATA_HAS_LEFT_HORN, false);
diff --git a/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java b/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
index dcb10e2ea1e0c7d0479adae5bc2ff57ece172aad..784b69e03225965b9fd85d3b68b95fd086725f12 100644
--- a/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
+++ b/src/main/java/net/minecraft/world/entity/animal/sniffer/Sniffer.java
@@ -150,9 +150,43 @@ public class Sniffer extends Animal {
     public EntityDimensions getDimensions(Pose pose) {
         return this.entityData.hasItem(Sniffer.DATA_STATE) && this.getState() == Sniffer.State.DIGGING ? Sniffer.DIGGING_DIMENSIONS.scale(this.getScale()) : super.getDimensions(pose);
     }
+    // Canvas start
+    public boolean canSearch = true;
+    public boolean canSniff = true;
+    public boolean storeExploredLocations = true;
+    public boolean canDig = true;
+
+    public void setCanSearch(boolean canSearch){
+        this.canSearch = canSearch;
+    }
+
+    public void setCanSniff(boolean canSniff){
+        this.canSniff = canSniff;
+    }
+
+    public void setStoreExploredLocations(boolean canStore){
+        this.storeExploredLocations = canStore;
+    }
+
+    public void setCanDig(boolean canDig){
+        this.canDig = canDig;
+    }
+
+    public boolean getCanSearch(){
+        return this.canSearch;
+    }
+
+    public boolean getCanSniff(){
+        return this.canSniff;
+    }
+
+    public boolean canStoreExploredLocations(){
+        return this.storeExploredLocations;
+    }
+    // Canvas end
 
     public boolean isSearching() {
-        return this.getState() == Sniffer.State.SEARCHING;
+        return canSearch && this.getState() == Sniffer.State.SEARCHING;
     }
 
     public boolean isTempted() {
@@ -160,11 +194,11 @@ public class Sniffer extends Animal {
     }
 
     public boolean canSniff() {
-        return !this.isTempted() && !this.isPanicking() && !this.isInWater() && !this.isInLove() && this.onGround() && !this.isPassenger() && !this.isLeashed();
+        return canSniff && !this.isTempted() && !this.isPanicking() && !this.isInWater() && !this.isInLove() && this.onGround() && !this.isPassenger() && !this.isLeashed();
     }
 
     public boolean canPlayDiggingSound() {
-        return this.getState() == Sniffer.State.DIGGING || this.getState() == Sniffer.State.SEARCHING;
+        return canDig && this.getState() == Sniffer.State.DIGGING || this.getState() == Sniffer.State.SEARCHING;
     }
 
     private BlockPos getHeadBlock() {
@@ -193,20 +227,34 @@ public class Sniffer extends Animal {
 
             this.resetAnimations();
             switch (sniffer_state) {
-                case SCENTING:
-                    this.scentingAnimationState.startIfStopped(this.tickCount);
-                    break;
-                case SNIFFING:
-                    this.sniffingAnimationState.startIfStopped(this.tickCount);
-                    break;
-                case DIGGING:
-                    this.diggingAnimationState.startIfStopped(this.tickCount);
-                    break;
-                case RISING:
+                // Canvas start
+                case SCENTING -> {
+                    if(canSearch){
+                        this.scentingAnimationState.startIfStopped(this.tickCount);
+                        break;
+                    }
+                }
+                case SNIFFING -> {
+                    if(canSniff){
+                        this.sniffingAnimationState.startIfStopped(this.tickCount);
+                        break;
+                    }
+                }
+                case DIGGING -> {
+                    if(canDig){
+                        this.diggingAnimationState.startIfStopped(this.tickCount);
+                        break;
+                    }
+                }
+                case RISING -> {
                     this.risingAnimationState.startIfStopped(this.tickCount);
                     break;
-                case FEELING_HAPPY:
+                }
+                case FEELING_HAPPY -> {
                     this.feelingHappyAnimationState.startIfStopped(this.tickCount);
+                    break;
+                }
+                // Canvas end
             }
 
             this.refreshDimensions();
@@ -254,21 +302,28 @@ public class Sniffer extends Animal {
     }
 
     private Sniffer onScentingStart() {
-        this.playSound(SoundEvents.SNIFFER_SCENTING, 1.0F, this.isBaby() ? 1.3F : 1.0F);
-        return this;
+        if(canSearch){
+            this.playSound(SoundEvents.SNIFFER_SCENTING, 1.0F, this.isBaby() ? 1.3F : 1.0F);
+            return this;
+        }else{
+            return this;
+        }
     }
 
     private Sniffer onDiggingStart() {
-        this.entityData.set(Sniffer.DATA_DROP_SEED_AT_TICK, this.tickCount + 120);
-        this.level().broadcastEntityEvent(this, (byte) 63);
-        return this;
+        if(canDig){
+            this.entityData.set(Sniffer.DATA_DROP_SEED_AT_TICK, this.tickCount + 120);
+            this.level().broadcastEntityEvent(this, (byte) 63);
+            return this;
+        }else{
+            return this;
+        }
     }
 
     public Sniffer onDiggingComplete(boolean explored) {
-        if (explored) {
+        if (explored && storeExploredLocations) {
             this.storeExploredPosition(this.getOnPos());
         }
-
         return this;
     }
 
@@ -281,15 +336,25 @@ public class Sniffer extends Animal {
     }
 
     public boolean canDig() {
-        return !this.isPanicking() && !this.isTempted() && !this.isBaby() && !this.isInWater() && this.onGround() && !this.isPassenger() && this.canDig(this.getHeadBlock().below());
+        return canDig && !this.isPanicking() && !this.isTempted() && !this.isBaby() && !this.isInWater() && this.onGround() && !this.isPassenger() && this.canDig(this.getHeadBlock().below());
     }
 
     private boolean canDig(BlockPos pos) {
-        return this.level().getBlockState(pos).is(BlockTags.SNIFFER_DIGGABLE_BLOCK) && this.getExploredPositions().noneMatch((globalpos) -> {
+        return canDig && this.level().getBlockState(pos).is(BlockTags.SNIFFER_DIGGABLE_BLOCK) && this.getExploredPositions().noneMatch((globalpos) -> {
             return GlobalPos.of(this.level().dimension(), pos).equals(globalpos);
         }) && (Boolean) Optional.ofNullable(this.getNavigation().createPath(pos, 1)).map(Path::canReach).orElse(false);
     }
 
+    // Canvas start
+    private net.minecraft.world.item.ItemStack dropItem = null;
+    public void setDiggingDropItem(org.bukkit.inventory.ItemStack item){
+        this.dropItem = org.bukkit.craftbukkit.inventory.CraftItemStack.asNMSCopy(item);
+    }
+
+    public org.bukkit.inventory.ItemStack getDiggingDropItem(){
+        return org.bukkit.craftbukkit.inventory.CraftItemStack.asBukkitCopy(this.dropItem);
+    }
+
     private void dropSeed() {
         if (!this.level().isClientSide() && (Integer) this.entityData.get(Sniffer.DATA_DROP_SEED_AT_TICK) == this.tickCount) {
             ServerLevel worldserver = (ServerLevel) this.level();
@@ -299,25 +364,35 @@ public class Sniffer extends Animal {
             BlockPos blockposition = this.getHeadBlock();
             Iterator iterator = list.iterator();
 
-            while (iterator.hasNext()) {
-                ItemStack itemstack = (ItemStack) iterator.next();
-                ItemEntity entityitem = new ItemEntity(worldserver, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), itemstack);
-
-                // CraftBukkit start - handle EntityDropItemEvent
-                org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
-                org.bukkit.Bukkit.getPluginManager().callEvent(event);
-                if (event.isCancelled()) {
-                    continue;
+            if(this.dropItem != null){
+                ItemStack itemstack = this.dropItem;
+                this.handleDigDrops(itemstack, blockposition, list, worldserver);
+            }else{
+                while (iterator.hasNext()) {
+                    ItemStack itemstack = (ItemStack) iterator.next();
+                    this.handleDigDrops(itemstack, blockposition, list, worldserver);
                 }
-                // CraftBukkit end
-                entityitem.setDefaultPickUpDelay();
-                worldserver.addFreshEntity(entityitem);
             }
 
             this.playSound(SoundEvents.SNIFFER_DROP_SEED, 1.0F, 1.0F);
         }
     }
 
+    private void handleDigDrops(ItemStack itemstack, BlockPos blockposition, List<ItemStack> list, ServerLevel worldserver){
+        ItemEntity entityitem = new ItemEntity(worldserver, (double) blockposition.getX(), (double) blockposition.getY(), (double) blockposition.getZ(), itemstack);
+    
+        // CraftBukkit start - handle EntityDropItemEvent
+        org.bukkit.event.entity.EntityDropItemEvent event = new org.bukkit.event.entity.EntityDropItemEvent(this.getBukkitEntity(), (org.bukkit.entity.Item) entityitem.getBukkitEntity());
+        org.bukkit.Bukkit.getPluginManager().callEvent(event);
+        if (event.isCancelled()) {
+            return;
+        }
+        // CraftBukkit end
+        entityitem.setDefaultPickUpDelay();
+        worldserver.addFreshEntity(entityitem);
+    }
+    // Canvas end
+
     private Sniffer emitDiggingParticles(AnimationState diggingAnimationState) {
         boolean flag = diggingAnimationState.getAccumulatedTime() > 1700L && diggingAnimationState.getAccumulatedTime() < 6000L;
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Husk.java b/src/main/java/net/minecraft/world/entity/monster/Husk.java
index 473f28e86a0e5157264b83d9c3c4a18c72216da3..ca489b169adebe7b3128a024a963405c758b7d9e 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Husk.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Husk.java
@@ -16,6 +16,8 @@ import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.item.ItemStack;
 import net.minecraft.world.level.Level;
 import net.minecraft.world.level.ServerLevelAccessor;
+
+import org.bukkit.craftbukkit.entity.CraftEntityType;
 import org.joml.Vector3f;
 
 public class Husk extends Zombie {
@@ -120,18 +122,36 @@ public class Husk extends Zombie {
     }
 
     @Override
-    protected boolean convertsInWater() {
-        return true;
+    public boolean convertsInWater() { // Canvas - protected -> public
+        return converts;
+    }
+
+    // Canvas start
+    public boolean converts = true;
+    public void setShouldConvertInWater(boolean shouldConvertInWater){
+        this.converts = shouldConvertInWater;
+    }
+
+    public void setEntityConversionType(org.bukkit.entity.EntityType entityType){
+        this.entityConversionType = CraftEntityType.bukkitToMinecraft(entityType);
     }
 
+    public org.bukkit.entity.EntityType getEntityConversionType(){
+        return CraftEntityType.minecraftToBukkit(this.entityConversionType);
+    }
+
+    private EntityType entityConversionType = EntityType.ZOMBIE;
+
     @Override
-    protected void doUnderWaterConversion() {
-        this.convertToZombieType(EntityType.ZOMBIE);
-        if (!this.isSilent()) {
-            this.level().levelEvent((Player) null, 1041, this.blockPosition(), 0);
+    public void doUnderWaterConversion() { // Canvas - protected -> public
+        if(convertsInWater()){
+            this.convertToZombieType(this.entityConversionType);
+            if (!this.isSilent()) {
+                this.level().levelEvent((Player) null, 1041, this.blockPosition(), 0);
+            }
         }
-
     }
+    // Canvas end
 
     @Override
     protected ItemStack getSkull() {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
index f4a47ac2c86cc95178922cce7320ba1ef5121b57..023689fdbcd60d927aee6479d7c6d14f80295f78 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Skeleton.java
@@ -26,7 +26,7 @@ import net.minecraft.core.particles.ParticleTypes;
 
 public class Skeleton extends AbstractSkeleton {
 
-    private static final int TOTAL_CONVERSION_TIME = 300;
+    private int TOTAL_CONVERSION_TIME = 300; // Canvas - static/final -> private
     public static final EntityDataAccessor<Boolean> DATA_STRAY_CONVERSION_ID = SynchedEntityData.defineId(Skeleton.class, EntityDataSerializers.BOOLEAN);
     public static final String CONVERSION_TAG = "StrayConversionTime";
     public int inPowderSnowTime;
@@ -82,6 +82,19 @@ public class Skeleton extends AbstractSkeleton {
         this.entityData.set(Skeleton.DATA_STRAY_CONVERSION_ID, converting);
     }
 
+    // Canvas start
+    public void forceFreezeConvert(){
+        Stray stray = this.convertTo(EntityType.STRAY, true, org.bukkit.event.entity.EntityTransformEvent.TransformReason.FROZEN, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.FROZEN);
+    }
+
+    public void forceFreezeConvert(boolean resetConvertTimer){
+        Stray stray = this.convertTo(EntityType.STRAY, true, org.bukkit.event.entity.EntityTransformEvent.TransformReason.FROZEN, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.FROZEN);
+        if(stray != null){
+            this.conversionTime = MAX_CONVERSION_TIME;
+        }
+    }
+    // Canvas end
+
     @Override
     public boolean isShaking() {
         return this.isFreezeConverting();
@@ -131,19 +144,31 @@ public class Skeleton extends AbstractSkeleton {
         this.setFreezeConverting(true);
     }
 
-    protected void doFreezeConversion() {
+    public void doFreezeConversion() { // Canvas - protected -> public
         Stray stray = this.convertTo(EntityType.STRAY, true, org.bukkit.event.entity.EntityTransformEvent.TransformReason.FROZEN, org.bukkit.event.entity.CreatureSpawnEvent.SpawnReason.FROZEN); // CraftBukkit - add spawn and transform reasons // Paper - track result of conversion
         if (!this.isSilent()) {
             this.level().levelEvent((Player) null, 1048, this.blockPosition(), 0);
         }
         // Paper start - reset conversion time to prevent event spam
         if (stray == null) {
-            this.conversionTime = 300;
+            this.conversionTime = MAX_CONVERSION_TIME; // Canvas - Change to make conversion time configurable
         }
         // Paper end
 
     }
 
+    // Canvas start
+    public int MAX_CONVERSION_TIME = 300;
+
+    public void setMaxConversionTime(int time){
+        this.MAX_CONVERSION_TIME = time;
+    }
+
+    public int getMaxConversionTime(){
+        return this.MAX_CONVERSION_TIME;
+    }
+    // Canvas end
+
     @Override
     public boolean canFreeze() {
         return false;
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
index f93f8f6509b12eb9b1e07c829278bb0822dd7988..36f15491cecfe781a98ef33a2a91b98fdf4ed0ea 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftDolphin.java
@@ -49,5 +49,20 @@ public class CraftDolphin extends CraftWaterMob implements Dolphin {
     public void setTreasureLocation(org.bukkit.Location location) {
         this.getHandle().setTreasurePos(io.papermc.paper.util.MCUtil.toBlockPosition(location));
     }
-    // Paper end - Missing Dolphin API
+    // Paper end - Missing Dolphin API -/- Canvas start
+    @Override
+    public void swimToTreasure(){
+        this.getHandle().swimToTreasureGoal.start();
+    }
+
+    @Override
+    public void setSwimWithPlayerDistance(double distance){
+        this.getHandle().setSwimWithPlayerDistance(distance);
+    }
+
+    @Override
+    public void tryPlayWithItems(){
+        this.getHandle().playWithItemsGoal.start();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
index 253a0d2f987163cbbb28d261674b47137cbbcbe2..2a60dc58b0841448b44dc64e0ad9f7ee532a557b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGlowSquid.java
@@ -1,6 +1,9 @@
 package org.bukkit.craftbukkit.entity;
 
 import com.google.common.base.Preconditions;
+
+import net.minecraft.world.entity.EntityType;
+
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.entity.GlowSquid;
 
@@ -30,4 +33,11 @@ public class CraftGlowSquid extends CraftSquid implements GlowSquid {
         Preconditions.checkArgument(darkTicksRemaining >= 0, "darkTicksRemaining must be >= 0");
         this.getHandle().setDarkTicks(darkTicksRemaining);
     }
+
+    // Canvas start
+    @Override
+    public void setNonGlowingSquid() {
+        this.getHandle().convertTo(EntityType.SQUID, true);
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
index 2c21de478bff9cdf13ba46cd041831d54c11e924..564448d4e07df91f6bb5cb5543cf399792c353d0 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftGoat.java
@@ -54,5 +54,33 @@ public class CraftGoat extends CraftAnimals implements Goat {
     public void ram(@org.jetbrains.annotations.NotNull org.bukkit.entity.LivingEntity entity) {
         this.getHandle().ram(((CraftLivingEntity) entity).getHandle());
     }
-    // Paper end
+    // Paper end -/- Canvas start
+    public boolean isLoweringHead(){
+        return this.getHandle().isLoweringHead();
+    }
+
+    public void setFallDamageReduction(int fallDamageReduction){
+        this.getHandle().setFallDamageReduction(fallDamageReduction);
+    }
+
+    public int getFallDamageReduction(){
+        return this.getHandle().getFallDamageReduction();
+    }
+
+    public void addRightHorn(){
+        this.getHandle().addRightHorn();
+    }
+
+    public void removeRightHorn(){
+        this.getHandle().removeRightHorn();
+    }
+
+    public void addLeftHorn(){
+        this.getHandle().addLeftHorn();
+    }
+
+    public void removeLeftHorn(){
+        this.getHandle().removeLeftHorn();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftHusk.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftHusk.java
index 4822c744cc2614ffd2b5fc44f897205c47557965..d8c443a37ec69c47cd8938e0ae6a88762e79b8ee 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftHusk.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftHusk.java
@@ -1,6 +1,7 @@
 package org.bukkit.craftbukkit.entity;
 
 import org.bukkit.craftbukkit.CraftServer;
+import org.bukkit.entity.EntityType;
 import org.bukkit.entity.Husk;
 
 public class CraftHusk extends CraftZombie implements Husk {
@@ -13,4 +14,29 @@ public class CraftHusk extends CraftZombie implements Husk {
     public String toString() {
         return "CraftHusk";
     }
+
+    @Override
+    public net.minecraft.world.entity.monster.Husk getHandle(){
+        return (net.minecraft.world.entity.monster.Husk) this.entity;
+    }
+
+    @Override
+    public void setShouldConvertInWater(boolean shouldConvertInWater) {
+        this.getHandle().setShouldConvertInWater(shouldConvertInWater);
+    }
+
+    @Override
+    public boolean convertsInWater() {
+        return this.getHandle().convertsInWater();
+    }
+
+    @Override
+    public void setEntityConversionType(EntityType entityType) {
+        this.getHandle().setEntityConversionType(entityType);
+    }
+
+    @Override
+    public EntityType getEntityConversionType() {
+        return this.getHandle().getEntityConversionType();
+    }
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
index 6f98da9be6aef35e3b5c940188b872459a383c8e..668f0c378c1836c0d4badaa066e135c03b84923c 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSkeleton.java
@@ -30,6 +30,27 @@ public class CraftSkeleton extends CraftAbstractSkeleton implements Skeleton {
             this.getHandle().startFreezeConversion(time);
         }
     }
+    // Canvas start
+    @Override
+    public void forceFreezeConvert(){
+        this.getHandle().forceFreezeConvert();
+    }
+
+    @Override
+    public void forceFreezeConvert(boolean resetConvertTimer){
+        this.getHandle().forceFreezeConvert(true);
+    }
+
+    @Override
+    public void setMaxConversionTime(int time){
+        this.getHandle().setMaxConversionTime(time);
+    }
+
+    @Override
+    public int getMaxConversionTime(){
+        return this.getHandle().getMaxConversionTime(); 
+    }
+    // Canvas end
 
     @Override
     public net.minecraft.world.entity.monster.Skeleton getHandle() {
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java
index 555337018fe218ac5a296a5e6a1d82720fee05e1..1bd1dbaea3ca3914ff137ea0ceef5f00e19f5d0b 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSniffer.java
@@ -97,4 +97,50 @@ public class CraftSniffer extends CraftAnimals implements Sniffer {
             case RISING -> Sniffer.State.RISING;
         };
     }
+    // Canvas start
+    @Override
+    public void setCanSearch(boolean canSearch){
+        this.getHandle().setCanSearch(canSearch);
+    }
+
+    @Override
+    public void setCanSniff(boolean canSniff){
+        this.getHandle().setCanSniff(canSniff);
+    }
+
+    @Override
+    public void setStoreExploredLocations(boolean canStore){
+        this.getHandle().setStoreExploredLocations(canStore);
+    }
+
+    @Override
+    public void setCanDig(boolean canDig){
+        this.getHandle().setCanDig(canDig);
+    }
+
+    @Override
+    public boolean getCanSearch(){
+        return this.getHandle().getCanSearch();
+    }
+
+    @Override
+    public boolean getCanSniff(){
+        return this.getHandle().getCanSniff();
+    }
+
+    @Override
+    public boolean canStoreExploredLocations(){
+        return this.getHandle().canStoreExploredLocations();
+    }
+    
+    @Override
+    public void setDiggingDropItem(org.bukkit.inventory.ItemStack item){
+        this.getHandle().setDiggingDropItem(item);
+    }
+
+    @Override
+    public org.bukkit.inventory.ItemStack getDiggingDropItem(){
+        return this.getHandle().getDiggingDropItem();
+    }
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
index a6e3b61c391a8b266d2b030d9ba600ac6be76952..7c2405b534e7c2c538b6c38ae4e25f9dfb3acd13 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftSquid.java
@@ -18,4 +18,9 @@ public class CraftSquid extends CraftWaterMob implements Squid {
     public String toString() {
         return "CraftSquid";
     }
+
+    @Override
+    public void setGlowingSquid() {
+        this.getHandle().setGlowingSquid();
+    }
 }
