From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Tue, 5 Nov 2024 19:29:21 -0800
Subject: [PATCH] Entity Goal Optimizations


diff --git a/src/main/java/io/github/dueris/canvas/CanvasConfig.java b/src/main/java/io/github/dueris/canvas/CanvasConfig.java
index e263cee7885538b93b17d790ef73c08b3890024a..87ec307918bacc413b20bc1d26dabe3d78c04256 100644
--- a/src/main/java/io/github/dueris/canvas/CanvasConfig.java
+++ b/src/main/java/io/github/dueris/canvas/CanvasConfig.java
@@ -173,6 +173,17 @@ public class CanvasConfig {
     public static boolean asyncPathfinding;
     public static int asyncPathfindingMaxThreads;
     public static int asyncPathfindingKeepalive;
+    public static int maxTickerThreads = 3;
+    public static boolean playerProximityRateReducer = true;
+    public static int playerProximityRateReducerScanRate = 40;
+    public static int zombieVillageRaidChance = 33;
+    public static boolean optimizeZombieVillageRaids = true;
+    public static int playerProximityRateReducerCutoff = 12;
+    public static int mobEnemyTargetingReducedRatePercentChance = 10;
+    public static boolean optimizeMobWandering = true;
+    public static int mobWanderingPercentChance = 100;
+    public static int mobWanderingReducedRateMultiplier = 6;
+    public static int mobWanderingDelay = 20 * 5;
 
     private static void optimizations(){
         asyncPathfinding = getBoolean("optimizations.async-pathfinding.enable", true);
@@ -186,6 +197,17 @@ public class CanvasConfig {
             asyncPathfindingMaxThreads = 0;
         else
             Bukkit.getLogger().log(Level.INFO, "Using " + asyncPathfindingMaxThreads + " threads for Async Pathfinding");
+        maxTickerThreads = getInt("optimizations.maxTickerThreads", maxTickerThreads);
+        zombieVillageRaidChance = getInt("optimizations.zombieVillageRaidChange", zombieVillageRaidChance);
+        optimizeZombieVillageRaids = getBoolean("optimizations.optimizeZombieVillageRaids", optimizeZombieVillageRaids);
+        playerProximityRateReducer = getBoolean("optimizations.entity.usePlayerProximityRateReducer", playerProximityRateReducer);
+        playerProximityRateReducerScanRate = getInt("optimizations.entity.playerProximityRateReducerScanRate", playerProximityRateReducerScanRate);
+        playerProximityRateReducerCutoff = getInt("optimizations.entity.playerProximityRateReducerCutoff", playerProximityRateReducerCutoff);
+        mobEnemyTargetingReducedRatePercentChance = getInt("optimizations.entity.mobEnemyTargetingReducedRatePercentChance", mobEnemyTargetingReducedRatePercentChance);
+        optimizeMobWandering = getBoolean("optimizations.optimizeMobWandering", optimizeMobWandering);
+        mobWanderingDelay = getInt("optimizations.mobWanderingDelay", mobWanderingDelay);
+        mobWanderingPercentChance = getInt("optimizations.mobWanderingPercentChance", mobWanderingPercentChance);
+        mobWanderingReducedRateMultiplier = getInt("optimizations.mobWanderingReducedRateMultiplier", mobWanderingReducedRateMultiplier);
     }
     
     private static void blocks(){
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index ccfe9ef24dce9f34613692adb13738d3ad0e7aac..dfe49edd915979f895fda0e372804f1d5f732699 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -691,6 +691,13 @@ public class Util {
     public static <T> Optional<T> getRandomSafe(List<T> list, RandomSource random) {
         return list.isEmpty() ? Optional.empty() : Optional.of(getRandom(list, random));
     }
+    // Canvas start
+
+    public static boolean rollPercentChance(float perc){
+        if(perc == 0) return false;
+        return new java.util.Random().nextFloat() <= (perc/100f);
+    }
+    // Canvas end
 
     private static BooleanSupplier createRenamer(Path src, Path dest) {
         return new BooleanSupplier() {
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index bef5290c39dc09ecf195af74dedd7e5cb8ce7612..8bde4662f520870cd642fb174b29aec7cf4e0ce5 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -433,6 +433,11 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     public boolean freezeLocked = false; // Paper - Freeze Tick Lock API
     public boolean fixedPose = false; // Paper - Expand Pose API
     public @Nullable Boolean immuneToFire = null; // Purpur - Fire immune API
+    // Canvas start - optimize entity goals
+    private long lastWanderTime;
+    private long lastPlayerScanTime;
+    private boolean playerInRange;
+    // Canvas end
 
     public void setOrigin(@javax.annotation.Nonnull Location location) {
         this.origin = location.toVector();
@@ -735,6 +740,32 @@ public abstract class Entity implements SyncedDataHolder, Nameable, EntityAccess
     public void setId(int id) {
         this.id = id;
     }
+    // Canvas start - optimize entity goals
+
+    public long getLastWanderTime(){
+        return this.lastWanderTime;
+    }
+
+    public void setLastWanderTime(long wanderTime){
+        this.lastWanderTime = wanderTime;
+    }
+
+    public long getLastPlayerScanTime(){
+        return this.lastPlayerScanTime;
+    }
+
+    public void setLastPlayerScanTime(long scanTime){
+        this.lastPlayerScanTime = scanTime;
+    }
+
+    public boolean isPlayerInRange(){
+        return this.playerInRange;
+    }
+
+    public void setPlayerInRange(boolean inRange){
+        this.playerInRange = inRange;
+    }
+    // Canvas end
 
     public Set<String> getTags() {
         return this.tags;
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/MoveThroughVillageGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/MoveThroughVillageGoal.java
index 708dce6a2a951c6ffb780a02146361b18a6aecf2..b7db4cda8ee029e3842e01f37610cec1f3e96e5f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/MoveThroughVillageGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/MoveThroughVillageGoal.java
@@ -43,9 +43,23 @@ public class MoveThroughVillageGoal extends Goal {
             throw new IllegalArgumentException("Unsupported mob for MoveThroughVillageGoal");
         }
     }
+    // Canvas start
+
+    public boolean canVillageRaid(){
+        if(io.github.dueris.canvas.CanvasConfig.optimizeZombieVillageRaids){
+            return net.minecraft.Util.rollPercentChance(io.github.dueris.canvas.CanvasConfig.zombieVillageRaidChance);
+        }
+        return true;
+    }
+    // Canvas end
 
     @Override
     public boolean canUse() {
+        // Canvas start
+        if(!this.canVillageRaid()){
+            return false;
+        }
+        // Canvas end
         if (!GoalUtils.hasGroundPathNavigation(this.mob)) {
             return false;
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/RandomStrollGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/RandomStrollGoal.java
index 676e1580849e8942eb41c7a3a80f464138b22764..2ffddbf594b8f49855841299c124a4e208e4e27d 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/RandomStrollGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/RandomStrollGoal.java
@@ -32,9 +32,55 @@ public class RandomStrollGoal extends Goal {
         this.checkNoActionTime = canDespawn;
         this.setFlags(EnumSet.of(Goal.Flag.MOVE));
     }
+    // Canvas start - optimize entity goals
+
+    public boolean canWander(PathfinderMob mob){
+        if(io.github.dueris.canvas.CanvasConfig.optimizeMobWandering){
+            if(net.minecraft.Util.rollPercentChance(io.github.dueris.canvas.CanvasConfig.mobWanderingPercentChance)) return false;
+
+            boolean useReducedRates = false;
+            if(io.github.dueris.canvas.CanvasConfig.playerProximityRateReducer){
+                long lastPlayerScan = this.mob.getLastPlayerScanTime();
+                if(lastPlayerScan + io.github.dueris.canvas.CanvasConfig.playerProximityRateReducerScanRate > this.mob.level().getGameTime()){
+                    useReducedRates = this.mob.isPlayerInRange();
+                } else {
+                    boolean playerInRangeBool = false;
+                    for(net.minecraft.world.entity.player.Player player : this.mob.level().players()){
+                        if(player.distanceToSqr(this.mob) < io.github.dueris.canvas.CanvasConfig.playerProximityRateReducerCutoff * io.github.dueris.canvas.CanvasConfig.playerProximityRateReducerCutoff){
+                            playerInRangeBool = true;
+                            break;
+                        }
+                    }
+
+                    if(playerInRangeBool){
+                        this.mob.setPlayerInRange(playerInRangeBool);
+                        this.mob.setLastPlayerScanTime(this.mob.level().getGameTime());
+                        useReducedRates = !playerInRangeBool;
+                    }
+                }
+            }
+
+            float multiplier = useReducedRates ? io.github.dueris.canvas.CanvasConfig.mobWanderingReducedRateMultiplier : 1;
+            long lastWander = this.mob.getLastWanderTime();
+
+            if(lastWander + io.github.dueris.canvas.CanvasConfig.mobWanderingDelay * multiplier > this.mob.level().getGameTime()){
+                return false;
+            }else{
+                this.mob.setLastWanderTime(mob.level().getGameTime());
+            }
+            return true;
+        }
+        return true;
+    }
+    // Canvas end
 
     @Override
     public boolean canUse() {
+        // Canvas start - optimize entity goals
+        if(!this.canWander(this.mob)){
+            return false;
+        }
+        // Canvas end
         if (this.mob.hasControllingPassenger()) {
             return false;
         } else {
diff --git a/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestAttackableTargetGoal.java b/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestAttackableTargetGoal.java
index 0fcf37ba84dd7f454bc3d48486596fcc7514133a..108ed6c76c3955617ccfa00165ff34e25613981f 100644
--- a/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestAttackableTargetGoal.java
+++ b/src/main/java/net/minecraft/world/entity/ai/goal/target/NearestAttackableTargetGoal.java
@@ -40,9 +40,45 @@ public class NearestAttackableTargetGoal<T extends LivingEntity> extends TargetG
         this.setFlags(EnumSet.of(Goal.Flag.TARGET));
         this.targetConditions = TargetingConditions.forCombat().range(this.getFollowDistance()).selector(targetPredicate);
     }
+    // Canvas start
+
+    public boolean canTarget(Mob mob){
+        boolean useReducedRates = false;
+        if(io.github.dueris.canvas.CanvasConfig.playerProximityRateReducer){
+            long lastPlayerScan = this.mob.getLastPlayerScanTime();
+            if(lastPlayerScan + io.github.dueris.canvas.CanvasConfig.playerProximityRateReducerScanRate > this.mob.level().getGameTime()){
+                useReducedRates = this.mob.isPlayerInRange();
+            } else {
+                boolean playerInRangeBool = false;
+                for(net.minecraft.world.entity.player.Player player : this.mob.level().players()){
+                    if(player.distanceToSqr(this.mob) < io.github.dueris.canvas.CanvasConfig.playerProximityRateReducerCutoff * io.github.dueris.canvas.CanvasConfig.playerProximityRateReducerCutoff){
+                        playerInRangeBool = true;
+                        break;
+                    }
+                }
+
+                if(playerInRangeBool){
+                    this.mob.setPlayerInRange(playerInRangeBool);
+                    this.mob.setLastPlayerScanTime(this.mob.level().getGameTime());
+                    useReducedRates = !playerInRangeBool;
+                }
+            }
+        }
+
+        if(useReducedRates){
+            return net.minecraft.Util.rollPercentChance(io.github.dueris.canvas.CanvasConfig.mobEnemyTargetingReducedRatePercentChance);
+        }
+        return true;
+    }
+    // Canvas end
 
     @Override
     public boolean canUse() {
+        // Canvas start - optimize entity goals
+        if(!this.canTarget(this.mob)){
+            return false;
+        }
+        // Canvas end
         if (this.randomInterval > 0 && this.mob.getRandom().nextInt(this.randomInterval) != 0) {
             return false;
         } else {
