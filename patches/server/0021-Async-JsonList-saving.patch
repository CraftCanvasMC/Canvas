From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: 1229ed65 AH <1229ed65b2ccd3@crankymonkey.info>
Date: Tue, 30 Jan 2024 03:07:00 +0000
Subject: [PATCH] Async JsonList saving


diff --git a/src/main/java/net/minecraft/server/players/StoredUserList.java b/src/main/java/net/minecraft/server/players/StoredUserList.java
index a7115c0a3ac20ba058fae221573259ff6763ba10..f77e92e7a51f35c067081a92ce54301cf7242e71 100644
--- a/src/main/java/net/minecraft/server/players/StoredUserList.java
+++ b/src/main/java/net/minecraft/server/players/StoredUserList.java
@@ -126,9 +126,11 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
     }
 
     public void save() throws IOException {
+        Runnable runnable = () -> { // Akarin - Save json list async
         this.removeExpired(); // Paper - remove expired values before saving
         JsonArray jsonarray = new JsonArray();
-        Stream<JsonObject> stream = this.map.values().stream().map((jsonlistentry) -> { // CraftBukkit - decompile error
+        // Canvas start
+        /*Stream<JsonObject> stream = this.map.values().stream().map((jsonlistentry) -> { // CraftBukkit - decompile error
             JsonObject jsonobject = new JsonObject();
 
             Objects.requireNonNull(jsonlistentry);
@@ -136,7 +138,14 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
         });
 
         Objects.requireNonNull(jsonarray);
-        stream.forEach(jsonarray::add);
+        stream.forEach(jsonarray::add);*/
+        for (V value : this.map.values()) {
+            JsonObject obj = new JsonObject();
+            value.serialize(obj);
+            jsonarray.add(obj);
+        }
+        // Canvas end
+        try {
         BufferedWriter bufferedwriter = Files.newWriter(this.file, StandardCharsets.UTF_8);
 
         try {
@@ -156,6 +165,11 @@ public abstract class StoredUserList<K, V extends StoredUserEntry<K>> {
         if (bufferedwriter != null) {
             bufferedwriter.close();
         }
+        } catch (IOException e) {
+            StoredUserList.LOGGER.warn("Failed to async save " + this.file, e); // Akarin - Save json list async
+        }
+        }; // Akarin - Save json list async
+        io.papermc.paper.util.MCUtil.scheduleAsyncTask(runnable); // Akarin - Save json list async
 
     }
 
