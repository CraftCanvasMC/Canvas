From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Sat, 21 Dec 2024 13:45:18 -0800
Subject: [PATCH] More WorldGen Optimizations


diff --git a/src/main/java/io/canvasmc/canvas/util/RandomUtils.java b/src/main/java/io/canvasmc/canvas/util/RandomUtils.java
new file mode 100644
index 0000000000000000000000000000000000000000..13a833690fd792a2d822bb20b65ba3ffa5053215
--- /dev/null
+++ b/src/main/java/io/canvasmc/canvas/util/RandomUtils.java
@@ -0,0 +1,41 @@
+package io.canvasmc.canvas.util;
+
+import net.minecraft.util.Mth;
+import net.minecraft.util.RandomSource;
+import net.minecraft.world.level.levelgen.LegacyRandomSource;
+import net.minecraft.world.level.levelgen.PositionalRandomFactory;
+import net.minecraft.world.level.levelgen.SingleThreadedRandomSource;
+import net.minecraft.world.level.levelgen.Xoroshiro128PlusPlus;
+import net.minecraft.world.level.levelgen.XoroshiroRandomSource;
+import org.jetbrains.annotations.NotNull;
+
+public class RandomUtils {
+
+    public static @NotNull RandomSource getRandom(PositionalRandomFactory deriver) {
+        if (deriver instanceof XoroshiroRandomSource.XoroshiroPositionalRandomFactory) {
+            return new XoroshiroRandomSource(0L, 0L);
+        }
+        if (deriver instanceof LegacyRandomSource.LegacyPositionalRandomFactory) {
+            return new SingleThreadedRandomSource(0L);
+        }
+        throw new IllegalArgumentException();
+    }
+
+    private static final ThreadLocal<XoroshiroRandomSource> xoroshiro = ThreadLocal.withInitial(() -> new XoroshiroRandomSource(0L, 0L));
+    private static final ThreadLocal<SingleThreadedRandomSource> simple = ThreadLocal.withInitial(() -> new SingleThreadedRandomSource(0L));
+
+    public static void derive(PositionalRandomFactory deriver, RandomSource random, int x, int y, int z) {
+        if (deriver instanceof final XoroshiroRandomSource.XoroshiroPositionalRandomFactory deriver1) {
+            final Xoroshiro128PlusPlus implementation = ((XoroshiroRandomSource) random).randomNumberGenerator;
+            implementation.seedLo = (Mth.getSeed(x, y, z) ^ deriver1.seedLo());
+            implementation.seedHi = (deriver1.seedHi());
+            return;
+        }
+        if (deriver instanceof LegacyRandomSource.LegacyPositionalRandomFactory(long seed)) {
+            final SingleThreadedRandomSource random1 = (SingleThreadedRandomSource) random;
+            random1.setSeed(Mth.getSeed(x, y, z) ^ seed);
+            return;
+        }
+        throw new IllegalArgumentException();
+    }
+}
diff --git a/src/main/java/net/minecraft/world/level/biome/TheEndBiomeSource.java b/src/main/java/net/minecraft/world/level/biome/TheEndBiomeSource.java
index 38ff293ae509a7afb30ad168b8d679b6133443a2..b3c7faa9655c00d40f491b9f184d8b3fad9c0f2d 100644
--- a/src/main/java/net/minecraft/world/level/biome/TheEndBiomeSource.java
+++ b/src/main/java/net/minecraft/world/level/biome/TheEndBiomeSource.java
@@ -3,11 +3,13 @@ package net.minecraft.world.level.biome;
 import com.mojang.serialization.MapCodec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
 import java.util.stream.Stream;
+import it.unimi.dsi.fastutil.longs.Long2ObjectLinkedOpenHashMap;
 import net.minecraft.core.Holder;
 import net.minecraft.core.HolderGetter;
 import net.minecraft.core.QuartPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.resources.RegistryOps;
+import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.levelgen.DensityFunction;
 
 public class TheEndBiomeSource extends BiomeSource {
@@ -26,6 +28,32 @@ public class TheEndBiomeSource extends BiomeSource {
     private final Holder<Biome> midlands;
     private final Holder<Biome> islands;
     private final Holder<Biome> barrens;
+    // Canvas start
+    private Holder<Biome> getBiomeForNoiseGenVanilla(int x, int y, int z, Climate.Sampler noise) {
+        int i = QuartPos.toBlock(x);
+        int j = QuartPos.toBlock(y);
+        int k = QuartPos.toBlock(z);
+        int l = SectionPos.blockToSectionCoord(i);
+        int m = SectionPos.blockToSectionCoord(k);
+        if ((long)l * (long)l + (long)m * (long)m <= 4096L) {
+            return this.end;
+        } else {
+            int n = (SectionPos.blockToSectionCoord(i) * 2 + 1) * 8;
+            int o = (SectionPos.blockToSectionCoord(k) * 2 + 1) * 8;
+            double d = noise.erosion().compute(new DensityFunction.SinglePointContext(n, j, o));
+            if (d > 0.25D) {
+                return this.highlands;
+            } else if (d >= -0.0625D) {
+                return this.midlands;
+            } else {
+                return d < -0.21875D ? this.islands : this.barrens;
+            }
+        }
+    }
+
+    private final ThreadLocal<Long2ObjectLinkedOpenHashMap<Holder<Biome>>> cache = ThreadLocal.withInitial(Long2ObjectLinkedOpenHashMap::new);
+    private final int cacheCapacity = 1024;
+    // Canvas end
 
     public static TheEndBiomeSource create(HolderGetter<Biome> biomeLookup) {
         return new TheEndBiomeSource(
@@ -58,25 +86,23 @@ public class TheEndBiomeSource extends BiomeSource {
     }
 
     @Override
-    public Holder<Biome> getNoiseBiome(int x, int y, int z, Climate.Sampler noise) {
-        int i = QuartPos.toBlock(x);
-        int j = QuartPos.toBlock(y);
-        int k = QuartPos.toBlock(z);
-        int l = SectionPos.blockToSectionCoord(i);
-        int m = SectionPos.blockToSectionCoord(k);
-        if ((long)l * (long)l + (long)m * (long)m <= 4096L) {
-            return this.end;
+    // Canvas start
+    public Holder<Biome> getNoiseBiome(int biomeX, int biomeY, int biomeZ, Climate.Sampler multiNoiseSampler) {
+        final long key = ChunkPos.asLong(biomeX, biomeZ);
+        final Long2ObjectLinkedOpenHashMap<Holder<Biome>> cacheThreadLocal = cache.get();
+        final Holder<Biome> biome = cacheThreadLocal.get(key);
+        if (biome != null) {
+            return biome;
         } else {
-            int n = (SectionPos.blockToSectionCoord(i) * 2 + 1) * 8;
-            int o = (SectionPos.blockToSectionCoord(k) * 2 + 1) * 8;
-            double d = noise.erosion().compute(new DensityFunction.SinglePointContext(n, j, o));
-            if (d > 0.25) {
-                return this.highlands;
-            } else if (d >= -0.0625) {
-                return this.midlands;
-            } else {
-                return d < -0.21875 ? this.islands : this.barrens;
+            final Holder<Biome> gennedBiome = getBiomeForNoiseGenVanilla(biomeX, biomeY, biomeZ, multiNoiseSampler);
+            cacheThreadLocal.put(key, gennedBiome);
+            if (cacheThreadLocal.size() > cacheCapacity) {
+                for (int i = 0; i < cacheCapacity / 16; i ++) {
+                    cacheThreadLocal.removeFirst();
+                }
             }
+            return gennedBiome;
         }
+    // Canvas end
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/Aquifer.java b/src/main/java/net/minecraft/world/level/levelgen/Aquifer.java
index 0203f9668c05970e4be337929fdaf3173e04a6ba..1eab7c6c9991d1dd51e6bc83023f5d9f23425607 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/Aquifer.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/Aquifer.java
@@ -2,6 +2,7 @@ package net.minecraft.world.level.levelgen;
 
 import java.util.Arrays;
 import javax.annotation.Nullable;
+import io.canvasmc.canvas.util.RandomUtils;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.SectionPos;
 import net.minecraft.util.Mth;
@@ -85,6 +86,15 @@ public interface Aquifer {
         private final int minGridZ;
         private final int gridSizeX;
         private final int gridSizeZ;
+        // Canvas start
+        private int c2me$dist1;
+        private int c2me$dist2;
+        private int c2me$dist3;
+        private long c2me$pos1;
+        private long c2me$pos2;
+        private long c2me$pos3;
+        private double c2me$mutableDoubleThingy;
+        // Canvas end
         private static final int[][] SURFACE_SAMPLING_OFFSETS_IN_CHUNKS = new int[][]{
             {0, 0}, {-2, -1}, {-1, -1}, {0, -1}, {1, -1}, {-3, 0}, {-2, 0}, {-1, 0}, {1, 0}, {-2, 1}, {-1, 1}, {0, 1}, {1, 1}
         };
@@ -120,6 +130,35 @@ public interface Aquifer {
             this.aquiferCache = new Aquifer.FluidStatus[m];
             this.aquiferLocationCache = new long[m];
             Arrays.fill(this.aquiferLocationCache, Long.MAX_VALUE);
+            // preload position cache
+            if (this.aquiferLocationCache.length % (this.gridSizeX * this.gridSizeZ) != 0) {
+                throw new AssertionError("Array length");
+            }
+
+            int sizeY = this.aquiferLocationCache.length / (this.gridSizeX * this.gridSizeZ);
+
+            final RandomSource random = RandomUtils.getRandom(this.positionalRandomFactory);
+            // index: y, z, x
+            for (int y = 0; y < sizeY; y++) {
+                for (int z = 0; z < this.gridSizeZ; z++) {
+                    for (int x = 0; x < this.gridSizeX; x++) {
+                        final int x1 = x + this.minGridX;
+                        final int y1 = y + this.minGridY;
+                        final int z1 = z + this.minGridZ;
+                        RandomUtils.derive(this.positionalRandomFactory, random, x1, y1, z1);
+                        int x2 = x1 * 16 + random.nextInt(10);
+                        int y2 = y1 * 12 + random.nextInt(9);
+                        int z2 = z1 * 16 + random.nextInt(10);
+                        int index = this.getIndex(x1, y1, z1);
+                        this.aquiferLocationCache[index] = BlockPos.asLong(x2, y2, z2);
+                    }
+                }
+            }
+            for (long blockPosition : this.aquiferLocationCache) {
+                if (blockPosition == Long.MAX_VALUE) {
+                    throw new AssertionError("Array initialization");
+                }
+            }
         }
 
         private int getIndex(int x, int y, int z) {
@@ -132,6 +171,7 @@ public interface Aquifer {
         @Nullable
         @Override
         public BlockState computeSubstance(DensityFunction.FunctionContext pos, double density) {
+            /* // Canvas start - replace
             int i = pos.blockX();
             int j = pos.blockY();
             int k = pos.blockZ();
@@ -266,6 +306,24 @@ public interface Aquifer {
                     }
                 }
             }
+            */
+            int i = pos.blockX();
+            int j = pos.blockY();
+            int k = pos.blockZ();
+            if (density > 0.0) {
+                this.shouldScheduleFluidUpdate = false;
+                return null;
+            } else {
+                Aquifer.FluidStatus fluidLevel = this.globalFluidPicker.computeFluid(i, j, k);
+                if (fluidLevel.at(j).is(Blocks.LAVA)) {
+                    this.shouldScheduleFluidUpdate = false;
+                    return Blocks.LAVA.defaultBlockState();
+                } else {
+                    aquiferExtracted$refreshDistPosIdx(i, j, k);
+                    return aquiferExtracted$applyPost(pos, density, j, i, k);
+                }
+            }
+            // Canvas end
         }
 
         @Override
@@ -278,64 +336,27 @@ public interface Aquifer {
             return 1.0 - (double)Math.abs(a - i) / 25.0;
         }
 
+        // Canvas start
         private double calculatePressure(
-            DensityFunction.FunctionContext pos, MutableDouble mutableDouble, Aquifer.FluidStatus fluidStatus, Aquifer.FluidStatus fluidStatus2
+            DensityFunction.FunctionContext pos, MutableDouble mutableDouble, Aquifer.FluidStatus fluidLevel, Aquifer.FluidStatus fluidLevel2
         ) {
             int i = pos.blockY();
-            BlockState blockState = fluidStatus.at(i);
-            BlockState blockState2 = fluidStatus2.at(i);
+            BlockState blockState = fluidLevel.at(i);
+            BlockState blockState2 = fluidLevel2.at(i);
             if ((!blockState.is(Blocks.LAVA) || !blockState2.is(Blocks.WATER)) && (!blockState.is(Blocks.WATER) || !blockState2.is(Blocks.LAVA))) {
-                int j = Math.abs(fluidStatus.fluidLevel - fluidStatus2.fluidLevel);
+                int j = Math.abs(fluidLevel.fluidLevel - fluidLevel2.fluidLevel);
                 if (j == 0) {
                     return 0.0;
                 } else {
-                    double d = 0.5 * (double)(fluidStatus.fluidLevel + fluidStatus2.fluidLevel);
-                    double e = (double)i + 0.5 - d;
-                    double f = (double)j / 2.0;
-                    double g = 0.0;
-                    double h = 2.5;
-                    double k = 1.5;
-                    double l = 3.0;
-                    double m = 10.0;
-                    double n = 3.0;
-                    double o = f - Math.abs(e);
-                    double q;
-                    if (e > 0.0) {
-                        double p = 0.0 + o;
-                        if (p > 0.0) {
-                            q = p / 1.5;
-                        } else {
-                            q = p / 2.5;
-                        }
-                    } else {
-                        double s = 3.0 + o;
-                        if (s > 0.0) {
-                            q = s / 3.0;
-                        } else {
-                            q = s / 10.0;
-                        }
-                    }
-
-                    double v = 2.0;
-                    double z;
-                    if (!(q < -2.0) && !(q > 2.0)) {
-                        double x = mutableDouble.getValue();
-                        if (Double.isNaN(x)) {
-                            double y = this.barrierNoise.compute(pos);
-                            mutableDouble.setValue(y);
-                            z = y;
-                        } else {
-                            z = x;
-                        }
-                    } else {
-                        z = 0.0;
-                    }
+                    double d = 0.5 * (double)(fluidLevel.fluidLevel + fluidLevel2.fluidLevel);
+                    final double q = aquiferExtracted$getQ(i, d, j);
 
-                    return 2.0 * (z + q);
+                    return aquiferExtracted$postCalculateDensity(pos, mutableDouble, q);
                 }
             } else {
                 return 2.0;
             }
+            // Canvas end
         }
 
         private int gridX(int x) {
@@ -354,18 +375,20 @@ public interface Aquifer {
             int i = BlockPos.getX(pos);
             int j = BlockPos.getY(pos);
             int k = BlockPos.getZ(pos);
-            int l = this.gridX(i);
-            int m = this.gridY(j);
-            int n = this.gridZ(k);
+            // Canvas start - optimize
+            int l = i >> 4; // C2ME - inline: floorDiv(i, 16)
+            int m = Math.floorDiv(j, 12); // C2ME - inline
+            int n = k >> 4; // C2ME - inline: floorDiv(k, 16)
             int o = this.getIndex(l, m, n);
-            Aquifer.FluidStatus fluidStatus = this.aquiferCache[o];
-            if (fluidStatus != null) {
-                return fluidStatus;
+            Aquifer.FluidStatus fluidLevel = this.aquiferCache[o];
+            if (fluidLevel != null) {
+                return fluidLevel;
             } else {
-                Aquifer.FluidStatus fluidStatus2 = this.computeFluid(i, j, k);
-                this.aquiferCache[o] = fluidStatus2;
-                return fluidStatus2;
+                Aquifer.FluidStatus fluidLevel2 = this.computeFluid(i, j, k);
+                this.aquiferCache[o] = fluidLevel2;
+                return fluidLevel2;
             }
+            // Canvas end
         }
 
         private Aquifer.FluidStatus computeFluid(int blockX, int blockY, int blockZ) {
@@ -407,33 +430,32 @@ public interface Aquifer {
         }
 
         private int computeSurfaceLevel(int blockX, int blockY, int blockZ, Aquifer.FluidStatus defaultFluidLevel, int surfaceHeightEstimate, boolean bl) {
-            DensityFunction.SinglePointContext singlePointContext = new DensityFunction.SinglePointContext(blockX, blockY, blockZ);
+            // Canvas start
+            DensityFunction.SinglePointContext unblendedNoisePos = new DensityFunction.SinglePointContext(blockX, blockY, blockZ);
             double d;
             double e;
-            if (OverworldBiomeBuilder.isDeepDarkRegion(this.erosion, this.depth, singlePointContext)) {
+            if (OverworldBiomeBuilder.isDeepDarkRegion(this.erosion, this.depth, unblendedNoisePos)) {
                 d = -1.0;
                 e = -1.0;
             } else {
                 int i = surfaceHeightEstimate + 8 - blockY;
-                int j = 64;
-                double f = bl ? Mth.clampedMap((double)i, 0.0, 64.0, 1.0, 0.0) : 0.0;
-                double g = Mth.clamp(this.fluidLevelFloodednessNoise.compute(singlePointContext), -1.0, 1.0);
-                double h = Mth.map(f, 1.0, 0.0, -0.3, 0.8);
-                double k = Mth.map(f, 1.0, 0.0, -0.8, 0.4);
-                d = g - k;
-                e = g - h;
+                double f = bl ? Mth.clampedLerp(1.0, 0.0, ((double) i) / 64.0) : 0.0; // inline
+                double g = Mth.clamp(this.fluidLevelFloodednessNoise.compute(unblendedNoisePos), -1.0, 1.0);
+                d = g + 0.8 + (f - 1.0) * 1.2; // inline
+                e = g + 0.3 + (f - 1.0) * 1.1; // inline
             }
 
-            int n;
+            int i;
             if (e > 0.0) {
-                n = defaultFluidLevel.fluidLevel;
+                i = defaultFluidLevel.fluidLevel;
             } else if (d > 0.0) {
-                n = this.computeRandomizedFluidSurfaceLevel(blockX, blockY, blockZ, surfaceHeightEstimate);
+                i = this.computeRandomizedFluidSurfaceLevel(blockX, blockY, blockZ, surfaceHeightEstimate);
             } else {
-                n = DimensionType.WAY_BELOW_MIN_Y;
+                i = DimensionType.WAY_BELOW_MIN_Y;
             }
 
-            return n;
+            return i;
+            // Canvas end
         }
 
         private int computeRandomizedFluidSurfaceLevel(int blockX, int blockY, int blockZ, int surfaceHeightEstimate) {
@@ -466,5 +488,185 @@ public interface Aquifer {
 
             return blockState;
         }
+        // Canvas start
+
+        private @org.jetbrains.annotations.Nullable BlockState aquiferExtracted$applyPost(DensityFunction.FunctionContext pos, double density, int j, int i, int k) {
+            Aquifer.FluidStatus fluidLevel2 = this.getAquiferStatus(this.c2me$pos1);
+            double d = similarity(this.c2me$dist1, this.c2me$dist2);
+            BlockState blockState = fluidLevel2.at(j);
+            if (d <= 0.0) {
+                this.shouldScheduleFluidUpdate = d >= FLOWING_UPDATE_SIMULARITY;
+                return blockState;
+            } else if (blockState.is(Blocks.WATER) && this.globalFluidPicker.computeFluid(i, j - 1, k).at(j - 1).is(Blocks.LAVA)) {
+                this.shouldScheduleFluidUpdate = true;
+                return blockState;
+            } else {
+//            MutableDouble mutableDouble = new MutableDouble(Double.NaN); // 234MB/s alloc rate at 480 cps
+                this.c2me$mutableDoubleThingy = Double.NaN;
+                Aquifer.FluidStatus fluidLevel3 = this.getAquiferStatus(this.c2me$pos2);
+                double e = d * this.c2me$calculateDensityModified(pos, fluidLevel2, fluidLevel3);
+                if (density + e > 0.0) {
+                    this.shouldScheduleFluidUpdate = false;
+                    return null;
+                } else {
+                    return aquiferExtracted$getFinalBlockState(pos, density, d, fluidLevel2, fluidLevel3, blockState);
+                }
+            }
+        }
+
+        private BlockState aquiferExtracted$getFinalBlockState(DensityFunction.FunctionContext pos, double density, double d, Aquifer.FluidStatus fluidLevel2, Aquifer.FluidStatus fluidLevel3, BlockState blockState) {
+            Aquifer.FluidStatus fluidLevel4 = this.getAquiferStatus(this.c2me$pos3);
+            double f = similarity(this.c2me$dist1, this.c2me$dist3);
+            if (aquiferExtracted$extractedCheckFG(pos, density, d, fluidLevel2, f, fluidLevel4)) return null;
+
+            double g = similarity(this.c2me$dist2, this.c2me$dist3);
+            if (aquiferExtracted$extractedCheckFG(pos, density, d, fluidLevel3, g, fluidLevel4)) return null;
+
+            this.shouldScheduleFluidUpdate = true;
+            return blockState;
+        }
+
+        private boolean aquiferExtracted$extractedCheckFG(DensityFunction.FunctionContext pos, double density, double d, Aquifer.FluidStatus fluidLevel2, double f, Aquifer.FluidStatus fluidLevel4) {
+            if (f > 0.0) {
+                double g = d * f * this.c2me$calculateDensityModified(pos, fluidLevel2, fluidLevel4);
+                if (density + g > 0.0) {
+                    this.shouldScheduleFluidUpdate = false;
+                    return true;
+                }
+            }
+            return false;
+        }
+
+        private void aquiferExtracted$refreshDistPosIdx(int x, int y, int z) {
+            int gx = (x - 5) >> 4;
+            int gy = Math.floorDiv(y + 1, 12);
+            int gz = (z - 5) >> 4;
+            int dist1 = Integer.MAX_VALUE;
+            int dist2 = Integer.MAX_VALUE;
+            int dist3 = Integer.MAX_VALUE;
+            long pos1 = 0;
+            long pos2 = 0;
+            long pos3 = 0;
+
+            for (int offY = -1; offY <= 1; ++offY) {
+                for (int offZ = 0; offZ <= 1; ++offZ) {
+                    for (int offX = 0; offX <= 1; ++offX) {
+                        int posIdx = this.getIndex(gx + offX, gy + offY, gz + offZ);
+
+                        long position = this.aquiferLocationCache[posIdx];
+
+                        int dx = BlockPos.getX(position) - x;
+                        int dy = BlockPos.getY(position) - y;
+                        int dz = BlockPos.getZ(position) - z;
+                        int dist = dx * dx + dy * dy + dz * dz;
+
+                        // unexplainable branch prediction magic
+                        if (dist3 >= dist) {
+                            pos3 = position;
+                            dist3 = dist;
+                        }
+                        if (dist2 >= dist) {
+                            pos3 = pos2;
+                            dist3 = dist2;
+                            pos2 = position;
+                            dist2 = dist;
+                        }
+                        if (dist1 >= dist) {
+                            pos2 = pos1;
+                            dist2 = dist1;
+                            pos1 = position;
+                            dist1 = dist;
+                        }
+                    }
+                }
+            }
+
+            this.c2me$dist1 = dist1;
+            this.c2me$dist2 = dist2;
+            this.c2me$dist3 = dist3;
+            this.c2me$pos1 = pos1;
+            this.c2me$pos2 = pos2;
+            this.c2me$pos3 = pos3;
+        }
+
+        private double c2me$calculateDensityModified(
+            DensityFunction.FunctionContext pos, Aquifer.FluidStatus fluidLevel, Aquifer.FluidStatus fluidLevel2
+        ) {
+            int i = pos.blockY();
+            BlockState blockState = fluidLevel.at(i);
+            BlockState blockState2 = fluidLevel2.at(i);
+            if ((!blockState.is(Blocks.LAVA) || !blockState2.is(Blocks.WATER)) && (!blockState.is(Blocks.WATER) || !blockState2.is(Blocks.LAVA))) {
+                int j = Math.abs(fluidLevel.fluidLevel - fluidLevel2.fluidLevel);
+                if (j == 0) {
+                    return 0.0;
+                } else {
+                    double d = 0.5 * (double)(fluidLevel.fluidLevel + fluidLevel2.fluidLevel);
+                    final double q = aquiferExtracted$getQ(i, d, j);
+
+                    return aquiferExtracted$postCalculateDensityModified(pos, q);
+                }
+            } else {
+                return 2.0;
+            }
+        }
+
+        private double aquiferExtracted$postCalculateDensity(DensityFunction.FunctionContext pos, MutableDouble mutableDouble, double q) {
+            double r;
+            if (!(q < -2.0) && !(q > 2.0)) {
+                double s = mutableDouble.getValue();
+                if (Double.isNaN(s)) {
+                    double t = this.barrierNoise.compute(pos);
+                    mutableDouble.setValue(t);
+                    r = t;
+                } else {
+                    r = s;
+                }
+            } else {
+                r = 0.0;
+            }
+
+            return 2.0 * (r + q);
+        }
+
+        private double aquiferExtracted$postCalculateDensityModified(DensityFunction.FunctionContext pos, double q) {
+            double r;
+            if (!(q < -2.0) && !(q > 2.0)) {
+                double s = this.c2me$mutableDoubleThingy;
+                if (Double.isNaN(s)) {
+                    double t = this.barrierNoise.compute(pos);
+                    this.c2me$mutableDoubleThingy = t;
+                    r = t;
+                } else {
+                    r = s;
+                }
+            } else {
+                r = 0.0;
+            }
+
+            return 2.0 * (r + q);
+        }
+
+        private static double aquiferExtracted$getQ(double i, double d, double j) {
+            double e = i + 0.5 - d;
+            double f = j / 2.0;
+            double o = f - Math.abs(e);
+            double q;
+            if (e > 0.0) {
+                if (o > 0.0) {
+                    q = o / 1.5;
+                } else {
+                    q = o / 2.5;
+                }
+            } else {
+                double p = 3.0 + o;
+                if (p > 0.0) {
+                    q = p / 3.0;
+                } else {
+                    q = p / 10.0;
+                }
+            }
+            return q;
+        }
+        // Canvas end
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/Beardifier.java b/src/main/java/net/minecraft/world/level/levelgen/Beardifier.java
index ca93a97256350789ca56f910862c9d717ca7670b..fdc3b888613e0ba9cf5d478efad5d6e8ee536fa4 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/Beardifier.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/Beardifier.java
@@ -1,6 +1,7 @@
 package net.minecraft.world.level.levelgen;
 
 import com.google.common.annotations.VisibleForTesting;
+import com.google.common.collect.Iterators;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import it.unimi.dsi.fastutil.objects.ObjectList;
 import it.unimi.dsi.fastutil.objects.ObjectListIterator;
@@ -29,6 +30,17 @@ public class Beardifier implements DensityFunctions.BeardifierOrMarker {
     });
     private final ObjectListIterator<Beardifier.Rigid> pieceIterator;
     private final ObjectListIterator<JigsawJunction> junctionIterator;
+    // Canvas start
+    private Beardifier.Rigid[] c2me$pieceArray;
+    private JigsawJunction[] c2me$junctionArray;
+
+    private void c2me$initArrays() {
+        this.c2me$pieceArray = Iterators.toArray(this.pieceIterator, Beardifier.Rigid.class);
+        this.pieceIterator.back(Integer.MAX_VALUE);
+        this.c2me$junctionArray = Iterators.toArray(this.junctionIterator, JigsawJunction.class);
+        this.junctionIterator.back(Integer.MAX_VALUE);
+    }
+    // Canvas end
 
     public static Beardifier forStructuresInChunk(StructureManager world, ChunkPos pos) {
         int i = pos.getMinBlockX();
@@ -78,47 +90,56 @@ public class Beardifier implements DensityFunctions.BeardifierOrMarker {
 
     @Override
     public double compute(DensityFunction.FunctionContext pos) {
+        // Canvas start - optimize impl
+        if (this.c2me$pieceArray == null || this.c2me$junctionArray == null) {
+            this.c2me$initArrays();
+        }
+
         int i = pos.blockX();
         int j = pos.blockY();
         int k = pos.blockZ();
         double d = 0.0;
 
-        while (this.pieceIterator.hasNext()) {
-            Beardifier.Rigid rigid = this.pieceIterator.next();
-            BoundingBox boundingBox = rigid.box();
-            int l = rigid.groundLevelDelta();
-            int m = Math.max(0, Math.max(boundingBox.minX() - i, i - boundingBox.maxX()));
-            int n = Math.max(0, Math.max(boundingBox.minZ() - k, k - boundingBox.maxZ()));
-            int o = boundingBox.minY() + l;
+        for (Beardifier.Rigid piece : this.c2me$pieceArray) {
+            BoundingBox blockBox = piece.box();
+            int l = piece.groundLevelDelta();
+            int m = Math.max(0, Math.max(blockBox.minX() - i, i - blockBox.maxX()));
+            int n = Math.max(0, Math.max(blockBox.minZ() - k, k - blockBox.maxZ()));
+            int o = blockBox.minY() + l;
             int p = j - o;
 
-            int q = switch (rigid.terrainAdjustment()) {
-                case NONE -> 0;
-                case BURY, BEARD_THIN -> p;
-                case BEARD_BOX -> Math.max(0, Math.max(o - j, j - boundingBox.maxY()));
-                case ENCAPSULATE -> Math.max(0, Math.max(boundingBox.minY() - j, j - boundingBox.maxY()));
-            };
-
-            d += switch (rigid.terrainAdjustment()) {
+//            int q = switch (piece.terrainAdjustment()) {
+//                case NONE -> 0;
+//                case BURY, BEARD_THIN -> p;
+//                case BEARD_BOX -> Math.max(0, Math.max(o - j, j - blockBox.getMaxY()));
+//                case ENCAPSULATE -> Math.max(0, Math.max(blockBox.getMinY() - j, j - blockBox.getMaxY()));
+//            };
+//
+//            d += switch (piece.terrainAdjustment()) {
+//                case NONE -> 0.0;
+//                case BURY -> getMagnitudeWeight(m, (double)q / 2.0, n);
+//                case BEARD_THIN, BEARD_BOX -> getStructureWeight(m, q, n, p) * 0.8;
+//                case ENCAPSULATE -> getMagnitudeWeight((double)m / 2.0, (double)q / 2.0, (double)n / 2.0) * 0.8;
+//            };
+
+            d += switch (piece.terrainAdjustment()) { // 2 switch statement merged
                 case NONE -> 0.0;
-                case BURY -> getBuryContribution((double)m, (double)q / 2.0, (double)n);
-                case BEARD_THIN, BEARD_BOX -> getBeardContribution(m, q, n, p) * 0.8;
-                case ENCAPSULATE -> getBuryContribution((double)m / 2.0, (double)q / 2.0, (double)n / 2.0) * 0.8;
+                case BURY -> getBuryContribution(m, (double)p / 2.0, n);
+                case BEARD_THIN -> getBeardContribution(m, p, n, p) * 0.8;
+                case BEARD_BOX -> getBeardContribution(m, Math.max(0, Math.max(o - j, j - blockBox.maxY())), n, p) * 0.8;
+                case ENCAPSULATE -> getBuryContribution((double)m / 2.0, (double)Math.max(0, Math.max(blockBox.minY() - j, j - blockBox.maxY())) / 2.0, (double)n / 2.0) * 0.8;
             };
         }
 
-        this.pieceIterator.back(Integer.MAX_VALUE);
-
-        while (this.junctionIterator.hasNext()) {
-            JigsawJunction jigsawJunction = this.junctionIterator.next();
+        for (JigsawJunction jigsawJunction : this.c2me$junctionArray) {
             int r = i - jigsawJunction.getSourceX();
-            int s = j - jigsawJunction.getSourceGroundY();
-            int t = k - jigsawJunction.getSourceZ();
-            d += getBeardContribution(r, s, t, s) * 0.4;
+            int l = j - jigsawJunction.getSourceGroundY();
+            int m = k - jigsawJunction.getSourceZ();
+            d += getBeardContribution(r, l, m, l) * 0.4;
         }
 
-        this.junctionIterator.back(Integer.MAX_VALUE);
         return d;
+        // Canvas end
     }
 
     @Override
@@ -132,8 +153,14 @@ public class Beardifier implements DensityFunctions.BeardifierOrMarker {
     }
 
     private static double getBuryContribution(double x, double y, double z) {
-        double d = Mth.length(x, y, z);
-        return Mth.clampedMap(d, 0.0, 6.0, 1.0, 0.0);
+        // Canvas start - optimize impl
+        double d = Math.sqrt(x * x + y * y + z * z);
+        if (d > 6.0) {
+            return 0.0;
+        } else {
+            return 1.0 - d / 6.0;
+        }
+        // Canvas end
     }
 
     private static double getBeardContribution(int x, int y, int z, int yy) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/LegacyRandomSource.java b/src/main/java/net/minecraft/world/level/levelgen/LegacyRandomSource.java
index 13ebd2367b540f184104fde2859ad6ae636a5859..3ded005f5c060c97a6f45cb1235242392a2b8a5f 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/LegacyRandomSource.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/LegacyRandomSource.java
@@ -4,7 +4,6 @@ import com.google.common.annotations.VisibleForTesting;
 import java.util.concurrent.atomic.AtomicLong;
 import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
-import net.minecraft.util.ThreadingDetector;
 
 public class LegacyRandomSource implements BitRandomSource {
     private static final int MODULUS_BITS = 48;
@@ -52,12 +51,13 @@ public class LegacyRandomSource implements BitRandomSource {
         return this.gaussianSource.nextGaussian();
     }
 
-    public static class LegacyPositionalRandomFactory implements PositionalRandomFactory {
-        private final long seed;
-
-        public LegacyPositionalRandomFactory(long seed) {
-            this.seed = seed;
-        }
+    // Canvas start
+    /**
+     * Made to record class
+     * @param seed Canvas - private -> public
+     */
+    public record LegacyPositionalRandomFactory(long seed) implements PositionalRandomFactory {
+    // Canvas end
 
         @Override
         public RandomSource at(int x, int y, int z) {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
index 6c19e8979e8cccbe7f1274661dc522371529967c..667e8386cc5e352d9864d8634f9885e713183ba7 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/NoiseBasedChunkGenerator.java
@@ -75,14 +75,13 @@ public final class NoiseBasedChunkGenerator extends ChunkGenerator {
     }
 
     private static Aquifer.FluidPicker createFluidPicker(NoiseGeneratorSettings settings) {
-        Aquifer.FluidStatus aquifer_b = new Aquifer.FluidStatus(-54, Blocks.LAVA.defaultBlockState());
+        // Canvas start - optimize
+        Aquifer.FluidStatus fluidLevel = new Aquifer.FluidStatus(-54, Blocks.LAVA.defaultBlockState());
         int i = settings.seaLevel();
-        Aquifer.FluidStatus aquifer_b1 = new Aquifer.FluidStatus(i, settings.defaultFluid());
-        Aquifer.FluidStatus aquifer_b2 = new Aquifer.FluidStatus(DimensionType.MIN_Y * 2, Blocks.AIR.defaultBlockState());
-
-        return (j, k, l) -> {
-            return k < Math.min(-54, i) ? aquifer_b : aquifer_b1;
-        };
+        Aquifer.FluidStatus fluidLevel2 = new Aquifer.FluidStatus(i, settings.defaultFluid());
+        final int min = Math.min(-54, i);
+        return (j, k, lx) -> k < min ? fluidLevel : fluidLevel2;
+        // Canvas end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/level/levelgen/Xoroshiro128PlusPlus.java b/src/main/java/net/minecraft/world/level/levelgen/Xoroshiro128PlusPlus.java
index dc4e48648bd7cf3806567c32d5d9962c43d968da..ffe62d650953e925021bee206bd32640e8ee72e9 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/Xoroshiro128PlusPlus.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/Xoroshiro128PlusPlus.java
@@ -5,8 +5,8 @@ import java.util.stream.LongStream;
 import net.minecraft.Util;
 
 public class Xoroshiro128PlusPlus {
-    private long seedLo;
-    private long seedHi;
+    public long seedLo; // Canvas - private -> public
+    public long seedHi; // Canvas - private -> public
     public static final Codec<Xoroshiro128PlusPlus> CODEC = Codec.LONG_STREAM
         .comapFlatMap(
             stream -> Util.fixedSize(stream, 2).map(seeds -> new Xoroshiro128PlusPlus(seeds[0], seeds[1])),
diff --git a/src/main/java/net/minecraft/world/level/levelgen/XoroshiroRandomSource.java b/src/main/java/net/minecraft/world/level/levelgen/XoroshiroRandomSource.java
index e0272abaac65feb76b93d24df5f519280be86dc2..7c3a58797dd3674d33efa615f8067983c9d54954 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/XoroshiroRandomSource.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/XoroshiroRandomSource.java
@@ -10,7 +10,7 @@ public class XoroshiroRandomSource implements RandomSource {
     private static final double DOUBLE_UNIT = 1.110223E-16F;
     public static final Codec<XoroshiroRandomSource> CODEC = Xoroshiro128PlusPlus.CODEC
         .xmap(implementation -> new XoroshiroRandomSource(implementation), random -> random.randomNumberGenerator);
-    private Xoroshiro128PlusPlus randomNumberGenerator;
+    public Xoroshiro128PlusPlus randomNumberGenerator; // Canvas - private -> public
     private final MarsagliaPolarGaussian gaussianSource = new MarsagliaPolarGaussian(this);
 
     public XoroshiroRandomSource(long seed) {
@@ -106,14 +106,13 @@ public class XoroshiroRandomSource implements RandomSource {
         return this.randomNumberGenerator.nextLong() >>> 64 - bits;
     }
 
-    public static class XoroshiroPositionalRandomFactory implements PositionalRandomFactory {
-        private final long seedLo;
-        private final long seedHi;
-
-        public XoroshiroPositionalRandomFactory(long seedLo, long seedHi) {
-            this.seedLo = seedLo;
-            this.seedHi = seedHi;
-        }
+    // Canvas start
+    /**
+     * @param seedLo Canvas - private -> public
+     * @param seedHi Canvas - private -> public
+     */
+    public record XoroshiroPositionalRandomFactory(long seedLo, long seedHi) implements PositionalRandomFactory {
+    // Canvas end
 
         @Override
         public RandomSource at(int x, int y, int z) {
