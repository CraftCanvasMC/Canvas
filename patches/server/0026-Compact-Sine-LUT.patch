From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Thu, 9 Jan 2025 19:05:13 -0800
Subject: [PATCH] Compact Sine LUT


diff --git a/src/main/java/io/canvasmc/canvas/Config.java b/src/main/java/io/canvasmc/canvas/Config.java
index 62b76881b445cb171efabc432a2dc6d7fc26f10e..2484aca4193a858e76afe20e49c3f09ec69048ba 100644
--- a/src/main/java/io/canvasmc/canvas/Config.java
+++ b/src/main/java/io/canvasmc/canvas/Config.java
@@ -76,6 +76,8 @@ public class Config implements ConfigData {
 	public boolean optimizePistonMovingBlockEntity = true;
 	@Comment("More efficiently clumps XP orbs")
 	public boolean clumpOrbs = true;
+	@Comment("Use faster sin/cos math operations")
+	public boolean useCompactSineLUT = true;
 
 	public static Config init() {
 		AutoConfig.register(Config.class, JanksonConfigSerializer::new);
diff --git a/src/main/java/io/canvasmc/canvas/util/CompactSineLUT.java b/src/main/java/io/canvasmc/canvas/util/CompactSineLUT.java
new file mode 100644
index 0000000000000000000000000000000000000000..06ebff5ce261ce70d8f8f537250bc8ba2ef690ef
--- /dev/null
+++ b/src/main/java/io/canvasmc/canvas/util/CompactSineLUT.java
@@ -0,0 +1,67 @@
+package io.canvasmc.canvas.util;
+
+import net.minecraft.util.Mth;
+
+public class CompactSineLUT {
+    private static final int[] SINE_TABLE_INT = new int[16384 + 1];
+    private static final float SINE_TABLE_MIDPOINT;
+
+    static {
+        // Copy the sine table, covering to raw int bits
+        for (int i = 0; i < SINE_TABLE_INT.length; i++) {
+            SINE_TABLE_INT[i] = Float.floatToRawIntBits(Mth.SIN[i]);
+        }
+
+        SINE_TABLE_MIDPOINT = Mth.SIN[Mth.SIN.length / 2];
+
+        // Test that the lookup table is correct during runtime
+        for (int i = 0; i < Mth.SIN.length; i++) {
+            float expected = Mth.SIN[i];
+            float value = lookup(i);
+
+            if (expected != value) {
+                throw new IllegalArgumentException(String.format("LUT error at index %d (expected: %s, found: %s)", i, expected, value));
+            }
+        }
+    }
+
+    public static void init() {
+    }
+
+    // [VanillaCopy] MathHelper#sin(float)
+    public static float sin(float f) {
+        return lookup((int) (f * 10430.378f) & 0xFFFF);
+    }
+
+    // [VanillaCopy] MathHelper#cos(float)
+    public static float cos(float f) {
+        return lookup((int) (f * 10430.378f + 16384.0f) & 0xFFFF);
+    }
+
+    private static float lookup(int index) {
+        // A special case... Is there some way to eliminate this?
+        if (index == 32768) {
+            return SINE_TABLE_MIDPOINT;
+        }
+
+        // Trigonometric identity: sin(-x) = -sin(x)
+        // Given a domain of 0 <= x <= 2*pi, just negate the value if x > pi.
+        // This allows the sin table size to be halved.
+        int neg = (index & 0x8000) << 16;
+
+        // All bits set if (pi/2 <= x), none set otherwise
+        // Extracts the 15th bit from 'half'
+        int mask = (index << 17) >> 31;
+
+        // Trigonometric identity: sin(x) = sin(pi/2 - x)
+        int pos = (0x8001 & mask) + (index ^ mask);
+
+        // Wrap the position in the table. Moving this down to immediately before the array access
+        // seems to help the Hotspot compiler optimize the bit math better.
+        pos &= 0x7fff;
+
+        // Fetch the corresponding value from the LUT and invert the sign bit as needed
+        // This directly manipulate the sign bit on the float bits to simplify logic
+        return Float.intBitsToFloat(SINE_TABLE_INT[pos] ^ neg);
+    }
+}
diff --git a/src/main/java/net/minecraft/util/Mth.java b/src/main/java/net/minecraft/util/Mth.java
index ef93fc37759e0b54387c8a59adc2b19258cfeb7d..631ea97703e52b03486b161c7b7ee45d2786b0c6 100644
--- a/src/main/java/net/minecraft/util/Mth.java
+++ b/src/main/java/net/minecraft/util/Mth.java
@@ -4,6 +4,8 @@ import java.util.Locale;
 import java.util.UUID;
 import java.util.function.IntPredicate;
 import java.util.stream.IntStream;
+import io.canvasmc.canvas.Config;
+import io.canvasmc.canvas.util.CompactSineLUT;
 import net.minecraft.Util;
 import net.minecraft.core.Vec3i;
 import net.minecraft.world.phys.AABB;
@@ -29,7 +31,7 @@ public class Mth {
     public static final Vector3f Y_AXIS = new Vector3f(0.0F, 1.0F, 0.0F);
     public static final Vector3f X_AXIS = new Vector3f(1.0F, 0.0F, 0.0F);
     public static final Vector3f Z_AXIS = new Vector3f(0.0F, 0.0F, 1.0F);
-    private static final float[] SIN = Util.make(new float[65536], sineTable -> {
+    public static final float[] SIN = Util.make(new float[65536], sineTable -> { // Canvas - private -> public
         for (int ix = 0; ix < sineTable.length; ix++) {
             sineTable[ix] = (float)Math.sin((double)ix * Math.PI * 2.0 / 65536.0);
         }
@@ -45,11 +47,23 @@ public class Mth {
     private static final double[] ASIN_TAB = new double[257];
     private static final double[] COS_TAB = new double[257];
 
+    // Canvas start
+    static {
+        CompactSineLUT.init();
+    }
+
     public static float sin(float value) {
+        if (Config.INSTANCE.useCompactSineLUT) {
+            return CompactSineLUT.sin(value);
+        }
         return SIN[(int)(value * 10430.378F) & 65535];
     }
 
     public static float cos(float value) {
+        if (Config.INSTANCE.useCompactSineLUT) {
+            return CompactSineLUT.cos(value);
+        }
+    // Canvas end
         return SIN[(int)(value * 10430.378F + 16384.0F) & 65535];
     }
 
