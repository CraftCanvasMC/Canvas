From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <122416109+Dueris@users.noreply.github.com>
Date: Mon, 17 Jun 2024 17:58:12 +0000
Subject: [PATCH] Optimize Math.round and Math.hypot


diff --git a/src/main/java/carpetfixes/helpers/FastMath.java b/src/main/java/carpetfixes/helpers/FastMath.java
new file mode 100644
index 0000000000000000000000000000000000000000..f49bf4052924cdeebc9735c4377d2693ccf44286
--- /dev/null
+++ b/src/main/java/carpetfixes/helpers/FastMath.java
@@ -0,0 +1,59 @@
+package carpetfixes.helpers;
+
+public class FastMath {
+
+    private static final double HYPOT_MAX_MAG = 2^511;
+    private static final double HYPOT_FACTOR = 2^750;
+
+    /**
+     * @author FX - PR0CESS
+     * ~1.25x faster than {@link Math#round(float)}
+     */
+    public static int round(float a) {
+        if (true) return a > 0F ? (int)(a + .5F) : (int)(a - .5F);
+        return Math.round(a);
+    }
+
+    /**
+     * @author FX - PR0CESS
+     * ~1.28x faster than {@link Math#round(double)}
+     */
+    public static long round(double a) {
+        if (true) return a > 0D ? (long)(a + .5D) : (long)(a - .5D);
+        return Math.round(a);
+    }
+
+    /**
+     * @author FX - PR0CESS
+     * Hypot implementation from the jafama library. Not 100% accurate! (3E-14%, 15 is perfectly accurate)
+     * ~1.6x faster than {@link Math#hypot(double,double)}
+     */
+    public static double hypot(double x, double y) {
+        x = Math.abs(x);
+        y = Math.abs(y);
+        if (y < x) { // Ensuring x <= y
+            final double a = x;
+            x = y;
+            y = a;
+        } else if (!(y >= x)) { // Testing if we have some NaN
+            return x == Double.POSITIVE_INFINITY ? Double.POSITIVE_INFINITY : Double.NaN;
+        }
+        if (y-x == y) { // x too small to subtract from y
+            return y;
+        } else {
+            double factor;
+            if (y > HYPOT_MAX_MAG) { // y is too large: scaling down
+                x *= (1/HYPOT_FACTOR);
+                y *= (1/HYPOT_FACTOR);
+                factor = HYPOT_FACTOR;
+            } else if (x < (1/HYPOT_MAX_MAG)) { // x is too small: scaling up
+                x *= HYPOT_FACTOR;
+                y *= HYPOT_FACTOR;
+                factor = (1/HYPOT_FACTOR);
+            } else {
+                factor = 1.0;
+            }
+            return factor * Math.sqrt(x*x+y*y);
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
index 308f67d0616e2d6bb135258f1fda53ccdee01430..b161dd2ecc8a2cdba6a07f84b681b225a16e8761 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
@@ -81,6 +81,6 @@ public class RAMDetails extends JList<String> {
     }
 
     private static String format(double tps) {
-        return ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 );
+        return ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( carpetfixes.helpers.FastMath.round( tps * 100.0 ) / 100.0, 20.0 ); // Mirai
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java b/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java
index c3e54da4ab6440811aab2f9dd1e218802ac13285..db1319c51a5410ee106d023fce759f1e390872e2 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMGraph.java
@@ -128,7 +128,7 @@ public class RAMGraph extends JComponent {
             graphics.setColor(data.getLineColor());
             graphics.fillOval(m.x - 2, 100 - used - 2, 5, 5);
             setToolTipText(String.format("<html><body>Used: %s mb (%s%%)<br/>%s</body></html>",
-                Math.round(data.getUsedMem() / 1024F / 1024F),
+                carpetfixes.helpers.FastMath.round(data.getUsedMem() / 1024F / 1024F), // Mirai
                 used, getTime(m.x)));
         }
     }
diff --git a/src/main/java/net/minecraft/commands/arguments/TimeArgument.java b/src/main/java/net/minecraft/commands/arguments/TimeArgument.java
index 0a1aa5488683143b37fe1010dcf4e8f18b8bef27..a9e7e15bd2f9b805c5de5a5d5d4d912c26d9a89e 100644
--- a/src/main/java/net/minecraft/commands/arguments/TimeArgument.java
+++ b/src/main/java/net/minecraft/commands/arguments/TimeArgument.java
@@ -48,7 +48,7 @@ public class TimeArgument implements ArgumentType<Integer> {
         if (i == 0) {
             throw ERROR_INVALID_UNIT.createWithContext(stringReader);
         } else {
-            int j = Math.round(f * (float)i);
+            int j = carpetfixes.helpers.FastMath.round(f * (float)i); // Canvas
             if (j < this.minimum) {
                 throw ERROR_TICK_COUNT_TOO_LOW.createWithContext(stringReader, j, this.minimum);
             } else {
diff --git a/src/main/java/net/minecraft/network/protocol/game/VecDeltaCodec.java b/src/main/java/net/minecraft/network/protocol/game/VecDeltaCodec.java
index 74276c368016fcc4dbf9579b2ecbadc9614baf15..67ff9f5a42249e7f19b825471c10a8f3c6cabf0a 100644
--- a/src/main/java/net/minecraft/network/protocol/game/VecDeltaCodec.java
+++ b/src/main/java/net/minecraft/network/protocol/game/VecDeltaCodec.java
@@ -9,7 +9,7 @@ public class VecDeltaCodec {
 
     @VisibleForTesting
     static long encode(double value) {
-        return Math.round(value * 4096.0); // Paper - Fix MC-4; diff on change
+        return carpetfixes.helpers.FastMath.round(value * 4096.0); // Paper - Fix MC-4; diff on change // Canvas
     }
 
     @VisibleForTesting
diff --git a/src/main/java/net/minecraft/server/gui/StatsComponent.java b/src/main/java/net/minecraft/server/gui/StatsComponent.java
index cd0a8a6a1be75cab8bbb8ee3ac17bb732b9e7108..b2e616da719a92a16996a397d3d8a98acaef997d 100644
--- a/src/main/java/net/minecraft/server/gui/StatsComponent.java
+++ b/src/main/java/net/minecraft/server/gui/StatsComponent.java
@@ -78,7 +78,7 @@ public class StatsComponent extends JComponent {
 
     // Paper start - Improve ServerGUI
     private static String format(double tps) {
-        return (( tps > 21.0 ) ? "*" : "") + Math.min(Math.round(tps * 100.0) / 100.0, 20.0); // only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
+        return (( tps > 21.0 ) ? "*" : "") + Math.min(carpetfixes.helpers.FastMath.round(tps * 100.0) / 100.0, 20.0); // only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise // Mirai
     }
     // Paper end - Improve ServerGUI
 }
diff --git a/src/main/java/net/minecraft/util/Mth.java b/src/main/java/net/minecraft/util/Mth.java
index f298cdfcf1539e467f57f9f7789de3cf2ca54665..c485e6af0f7e44e901f4a6dcc79e3c6631e8a475 100644
--- a/src/main/java/net/minecraft/util/Mth.java
+++ b/src/main/java/net/minecraft/util/Mth.java
@@ -29,7 +29,7 @@ public class Mth {
     public static final Vector3f Y_AXIS = new Vector3f(0.0F, 1.0F, 0.0F);
     public static final Vector3f X_AXIS = new Vector3f(1.0F, 0.0F, 0.0F);
     public static final Vector3f Z_AXIS = new Vector3f(0.0F, 0.0F, 1.0F);
-    private static final float[] SIN = Util.make(new float[65536], sineTable -> {
+    public static final float[] SIN = Util.make(new float[65536], sineTable -> { // Canvas - private -> public
         for (int ix = 0; ix < sineTable.length; ix++) {
             sineTable[ix] = (float)Math.sin((double)ix * Math.PI * 2.0 / 65536.0);
         }
@@ -631,6 +631,7 @@ public class Mth {
     }
 
     public static double length(double a, double b) {
+        if (true) return carpetfixes.helpers.FastMath.hypot(a, b); // Mirai
         return Math.sqrt(lengthSquared(a, b));
     }
 
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 2d5324c8c06620b129f72e7b22261a7b70c7ff00..32a7b721634e51b6cd555dc67e571e94f7d3a588 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -1657,7 +1657,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
             if (this instanceof ServerPlayer) {
                 CriteriaTriggers.ENTITY_HURT_PLAYER.trigger((ServerPlayer) this, source, f1, amount, flag);
                 if (f2 > 0.0F && f2 < 3.4028235E37F) {
-                    ((ServerPlayer) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, Math.round(f2 * 10.0F));
+                    ((ServerPlayer) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, carpetfixes.helpers.FastMath.round(f2 * 10.0F)); // Canvas
                 }
             }
 
@@ -2268,7 +2268,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
                     if (this instanceof ServerPlayer) {
                         ((ServerPlayer) this).awardStat(Stats.DAMAGE_RESISTED, Math.round(f3 * 10.0F));
                     } else if (source.getEntity() instanceof ServerPlayer) {
-                        ((ServerPlayer) source.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, Math.round(f3 * 10.0F));
+                        ((ServerPlayer) source.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, carpetfixes.helpers.FastMath.round(f3 * 10.0F)); // Canvas
                     }
                 }
             }
@@ -2404,9 +2404,9 @@ public abstract class LivingEntity extends Entity implements Attackable {
                 float f3 = (float) -event.getDamage(DamageModifier.RESISTANCE);
                 if (f3 > 0.0F && f3 < 3.4028235E37F) {
                     if (this instanceof ServerPlayer) {
-                        ((ServerPlayer) this).awardStat(Stats.DAMAGE_RESISTED, Math.round(f3 * 10.0F));
+                        ((ServerPlayer) this).awardStat(Stats.DAMAGE_RESISTED, carpetfixes.helpers.FastMath.round(f3 * 10.0F)); // Canvas
                     } else if (damagesource.getEntity() instanceof ServerPlayer) {
-                        ((ServerPlayer) damagesource.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, Math.round(f3 * 10.0F));
+                        ((ServerPlayer) damagesource.getEntity()).awardStat(Stats.DAMAGE_DEALT_RESISTED, carpetfixes.helpers.FastMath.round(f3 * 10.0F)); // Canvas
                     }
                 }
             }
@@ -2439,7 +2439,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
             float f2 = absorptionModifier;
 
             if (f2 > 0.0F && f2 < 3.4028235E37F && this instanceof net.minecraft.world.entity.player.Player) {
-                ((net.minecraft.world.entity.player.Player) this).awardStat(Stats.DAMAGE_ABSORBED, Math.round(f2 * 10.0F));
+                ((net.minecraft.world.entity.player.Player) this).awardStat(Stats.DAMAGE_ABSORBED, carpetfixes.helpers.FastMath.round(f2 * 10.0F)); // Canvas
             }
             // CraftBukkit end
 
@@ -2449,7 +2449,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
                 if (entity instanceof ServerPlayer) {
                     ServerPlayer entityplayer = (ServerPlayer) entity;
 
-                    entityplayer.awardStat(Stats.DAMAGE_DEALT_ABSORBED, Math.round(f2 * 10.0F));
+                    entityplayer.awardStat(Stats.DAMAGE_DEALT_ABSORBED, carpetfixes.helpers.FastMath.round(f2 * 10.0F)); // Canvas
                 }
             }
 
@@ -2459,7 +2459,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
                     // PAIL: Be sure to drag all this code from the EntityHuman subclass each update.
                     ((net.minecraft.world.entity.player.Player) this).causeFoodExhaustion(damagesource.getFoodExhaustion(), org.bukkit.event.entity.EntityExhaustionEvent.ExhaustionReason.DAMAGED); // CraftBukkit - EntityExhaustionEvent
                     if (f < 3.4028235E37F) {
-                        ((net.minecraft.world.entity.player.Player) this).awardStat(Stats.DAMAGE_TAKEN, Math.round(f * 10.0F));
+                        ((net.minecraft.world.entity.player.Player) this).awardStat(Stats.DAMAGE_TAKEN, carpetfixes.helpers.FastMath.round(f * 10.0F)); // Canvas
                     }
                 }
                 // CraftBukkit end
@@ -2479,7 +2479,7 @@ public abstract class LivingEntity extends Entity implements Attackable {
                         CriteriaTriggers.ENTITY_HURT_PLAYER.trigger((ServerPlayer) this, damagesource, originalDamage, f, true); // Paper - fix taken/dealt param order
                         f2 = (float) -event.getDamage(DamageModifier.BLOCKING);
                         if (f2 > 0.0F && f2 < 3.4028235E37F) {
-                            ((ServerPlayer) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, Math.round(originalDamage * 10.0F));
+                            ((ServerPlayer) this).awardStat(Stats.DAMAGE_BLOCKED_BY_SHIELD, carpetfixes.helpers.FastMath.round(originalDamage * 10.0F)); // Canvas
                         }
                     }
 
@@ -3277,13 +3277,13 @@ public abstract class LivingEntity extends Entity implements Attackable {
         //this.level().getProfiler().push("rangeChecks"); // Purpur
 
         // Paper start - stop large pitch and yaw changes from crashing the server
-        this.yRotO += Math.round((this.getYRot() - this.yRotO) / 360.0F) * 360.0F;
+        this.yRotO += carpetfixes.helpers.FastMath.round((this.getYRot() - this.yRotO) / 360.0F) * 360.0F; // Canvas
 
-        this.yBodyRotO += Math.round((this.yBodyRot - this.yBodyRotO) / 360.0F) * 360.0F;
+        this.yBodyRotO += carpetfixes.helpers.FastMath.round((this.yBodyRot - this.yBodyRotO) / 360.0F) * 360.0F; // Canvas
 
-        this.xRotO += Math.round((this.getXRot() - this.xRotO) / 360.0F) * 360.0F;
+        this.xRotO += carpetfixes.helpers.FastMath.round((this.getXRot() - this.xRotO) / 360.0F) * 360.0F; // Canvas
 
-        this.yHeadRotO += Math.round((this.yHeadRot - this.yHeadRotO) / 360.0F) * 360.0F;
+        this.yHeadRotO += carpetfixes.helpers.FastMath.round((this.yHeadRot - this.yHeadRotO) / 360.0F) * 360.0F; // Canvas
         // Paper end
 
         //this.level().getProfiler().pop(); // Purpur
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 88160dcd2af87a334c0a7caa8bca020bdff3713c..2605b605b37ec80c86165c64499c0034c603a43d 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -1142,7 +1142,7 @@ public abstract class Player extends LivingEntity {
             float f2 = f1 - f;
 
             if (f2 > 0.0F && f2 < 3.4028235E37F) {
-                this.awardStat(Stats.DAMAGE_ABSORBED, Math.round(f2 * 10.0F));
+                this.awardStat(Stats.DAMAGE_ABSORBED, carpetfixes.helpers.FastMath.round(f2 * 10.0F)); // Mirai
             }
 
             if (f != 0.0F) {
@@ -1150,7 +1150,7 @@ public abstract class Player extends LivingEntity {
                 this.getCombatTracker().recordDamage(damagesource, f);
                 this.setHealth(this.getHealth() - f);
                 if (f < 3.4028235E37F) {
-                    this.awardStat(Stats.DAMAGE_TAKEN, Math.round(f * 10.0F));
+                    this.awardStat(Stats.DAMAGE_TAKEN, carpetfixes.helpers.FastMath.round(f * 10.0F)); // Mirai
                 }
 
                 this.gameEvent(GameEvent.ENTITY_DAMAGE);
diff --git a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
index 8a5baed3d82e49af55f4d58e8729f14c0cd466f2..ff01a31b5c23b94354e4366f169039a501726be2 100644
--- a/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
+++ b/src/main/java/net/minecraft/world/entity/projectile/Projectile.java
@@ -328,7 +328,7 @@ public abstract class Projectile extends Entity implements TraceableEntity {
     }
 
     protected static float lerpRotation(float prevRot, float newRot) {
-        prevRot += Math.round((newRot - prevRot) / 360.0F) * 360.0F; // Paper - stop large look changes from crashing the server
+        prevRot += carpetfixes.helpers.FastMath.round((newRot - prevRot) / 360.0F) * 360.0F; // Paper - stop large look changes from crashing the server // Mirai
 
         return Mth.lerp(0.2F, prevRot, newRot);
     }
diff --git a/src/main/java/net/minecraft/world/item/Item.java b/src/main/java/net/minecraft/world/item/Item.java
index 8fd54bccb7af59da9113d8a289d12d8fad1fb467..6c3fc74984d8595fe4ff1656db014fdb4cc96392 100644
--- a/src/main/java/net/minecraft/world/item/Item.java
+++ b/src/main/java/net/minecraft/world/item/Item.java
@@ -162,7 +162,7 @@ public class Item implements FeatureElement, ItemLike {
     }
 
     public int getBarWidth(ItemStack stack) {
-        return Mth.clamp(Math.round(13.0F - (float)stack.getDamageValue() * 13.0F / (float)stack.getMaxDamage()), 0, 13);
+        return Mth.clamp(carpetfixes.helpers.FastMath.round(13.0F - (float)stack.getDamageValue() * 13.0F / (float)stack.getMaxDamage()), 0, 13);
     }
 
     public int getBarColor(ItemStack stack) {
diff --git a/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java b/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
index 26ec4838c476b8091f80aeac61db8041d5c89e88..b74042399b0c9d150f9e5d6178a2a850083e2e4d 100644
--- a/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
+++ b/src/main/java/net/minecraft/world/level/block/DaylightDetectorBlock.java
@@ -69,7 +69,7 @@ public class DaylightDetectorBlock extends BaseEntityBlock {
             float f1 = f < 3.1415927F ? 0.0F : 6.2831855F;
 
             f += (f1 - f) * 0.2F;
-            i = Math.round((float) i * Mth.cos(f));
+            i = carpetfixes.helpers.FastMath.round((float) i * Mth.cos(f)); // Mirai
         }
 
         i = Mth.clamp(i, 0, 15);
diff --git a/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java b/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
index a6b6e5ea191c0e2cd7a2e4f01b89d8af40a83c1b..149a73a5b7383ad3ec91c73f76f7913100202e8d 100644
--- a/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
+++ b/src/main/java/net/minecraft/world/level/chunk/ChunkGeneratorStructureState.java
@@ -239,8 +239,8 @@ public class ChunkGeneratorStructureState {
 
             for (int j1 = 0; j1 < j; ++j1) {
                 double d1 = (double) (4 * i + i * i1 * 6) + (randomsource.nextDouble() - 0.5D) * (double) i * 2.5D;
-                int k1 = (int) Math.round(Math.cos(d0) * d1);
-                int l1 = (int) Math.round(Math.sin(d0) * d1);
+                int k1 = (int) carpetfixes.helpers.FastMath.round(Math.cos(d0) * d1);  // Mirai
+                int l1 = (int) carpetfixes.helpers.FastMath.round(Math.sin(d0) * d1);  // Mirai
                 RandomSource randomsource1 = randomsource.fork();
 
                 list.add(CompletableFuture.supplyAsync(() -> {
diff --git a/src/main/java/net/minecraft/world/level/levelgen/SurfaceSystem.java b/src/main/java/net/minecraft/world/level/levelgen/SurfaceSystem.java
index 466cba9d2184fe7565abbb820587a272d8d109dd..8c2428f680a091047e6839c218b918a7c5bf89d0 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/SurfaceSystem.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/SurfaceSystem.java
@@ -322,7 +322,7 @@ public class SurfaceSystem {
     }
 
     protected BlockState getBand(int x, int y, int z) {
-        int i = (int)Math.round(this.clayBandsOffsetNoise.getValue((double)x, 0.0, (double)z) * 4.0);
+        int i = (int)carpetfixes.helpers.FastMath.round(this.clayBandsOffsetNoise.getValue((double)x, 0.0, (double)z) * 4.0); // Canvas
         return this.clayBands[(y + i + this.clayBands.length) % this.clayBands.length];
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/levelgen/feature/ScatteredOreFeature.java b/src/main/java/net/minecraft/world/level/levelgen/feature/ScatteredOreFeature.java
index 9cd3ed6c2673fabc5b5a700646e7c75c7e8d2a92..ac88a64c835a0553cccbd4f13fe60418bb68d057 100644
--- a/src/main/java/net/minecraft/world/level/levelgen/feature/ScatteredOreFeature.java
+++ b/src/main/java/net/minecraft/world/level/levelgen/feature/ScatteredOreFeature.java
@@ -46,6 +46,6 @@ public class ScatteredOreFeature extends Feature<OreConfiguration> {
     }
 
     private int getRandomPlacementInOneAxisRelativeToOrigin(RandomSource random, int spread) {
-        return Math.round((random.nextFloat() - random.nextFloat()) * (float)spread);
+        return carpetfixes.helpers.FastMath.round((random.nextFloat() - random.nextFloat()) * (float)spread); // Canvas
     }
 }
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/providers/number/NumberProvider.java b/src/main/java/net/minecraft/world/level/storage/loot/providers/number/NumberProvider.java
index 2a7c75ea447b179ea1ab9db56e8a39d03faa0bce..53ca87c7659a4fff9e99d21217d1ad08c8765836 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/providers/number/NumberProvider.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/providers/number/NumberProvider.java
@@ -7,7 +7,7 @@ public interface NumberProvider extends LootContextUser {
     float getFloat(LootContext context);
 
     default int getInt(LootContext context) {
-        return Math.round(this.getFloat(context));
+        return carpetfixes.helpers.FastMath.round(this.getFloat(context)); // Mirai
     }
 
     LootNumberProviderType getType();
diff --git a/src/main/java/net/minecraft/world/phys/shapes/Shapes.java b/src/main/java/net/minecraft/world/phys/shapes/Shapes.java
index 86df4ef44d0a5107ee929dfd40d8ccb0779e8bfc..6b9ffce7d63f88caa09a454b52bdfea79603a519 100644
--- a/src/main/java/net/minecraft/world/phys/shapes/Shapes.java
+++ b/src/main/java/net/minecraft/world/phys/shapes/Shapes.java
@@ -98,8 +98,8 @@ public final class Shapes {
                 int j = 1 << i;
                 double d = min * (double)j;
                 double e = max * (double)j;
-                boolean bl = Math.abs(d - (double)Math.round(d)) < 1.0E-7 * (double)j;
-                boolean bl2 = Math.abs(e - (double)Math.round(e)) < 1.0E-7 * (double)j;
+                boolean bl = Math.abs(d - (double)carpetfixes.helpers.FastMath.round(d)) < 1.0E-7 * (double)j; // Canvas
+                boolean bl2 = Math.abs(e - (double)carpetfixes.helpers.FastMath.round(e)) < 1.0E-7 * (double)j; // Canvas
                 if (bl && bl2) {
                     return i;
                 }
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index f144a08e88f8268b84eb188a36bf470457f59958..cad8e1b811dcdb1fad323b9dc2cbc7a098adeaea 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -62,7 +62,7 @@ public class TicksPerSecondCommand extends Command
     {
         // Paper
         net.kyori.adventure.text.format.TextColor color = ( ( tps > 18.0 ) ? net.kyori.adventure.text.format.NamedTextColor.GREEN : ( tps > 16.0 ) ? net.kyori.adventure.text.format.NamedTextColor.YELLOW : net.kyori.adventure.text.format.NamedTextColor.RED );
-        String amount = Math.min(Math.round(tps * 100.0) / 100.0, 20.0) + (tps > 21.0  ? "*" : ""); // Paper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
+        String amount = Math.min(carpetfixes.helpers.FastMath.round(tps * 100.0) / 100.0, 20.0) + (tps > 21.0  ? "*" : ""); // Paper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise // Mirai
         return net.kyori.adventure.text.Component.text(amount, color);
         // Paper end
     }
