From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris MC <purplewolf.mc1@gmail.com>
Date: Wed, 22 Nov 2023 01:46:13 +0000
Subject: [PATCH] Add BiomeSource API


diff --git a/src/main/java/me/dueris/canvas/biome/CanvasBiomeHolder.java b/src/main/java/me/dueris/canvas/biome/CanvasBiomeHolder.java
new file mode 100644
index 0000000000000000000000000000000000000000..ebf70f68446af8d8b6073e5788fa80d93b166087
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/biome/CanvasBiomeHolder.java
@@ -0,0 +1,158 @@
+package me.dueris.canvas.biome;
+
+import java.util.Optional;
+import java.util.jar.Attributes.Name;
+
+import org.bukkit.MusicInstrument;
+import org.bukkit.NamespacedKey;
+import org.bukkit.Particle;
+import org.bukkit.Sound;
+import org.bukkit.World;
+import org.bukkit.Material;
+import org.bukkit.Location;
+import org.bukkit.craftbukkit.CraftMusicInstrument;
+import org.bukkit.craftbukkit.CraftParticle;
+import org.bukkit.craftbukkit.CraftRegistry;
+import org.bukkit.craftbukkit.util.CraftNamespacedKey;
+import org.bukkit.craftbukkit.CraftSound;
+import org.bukkit.craftbukkit.block.CraftBiome;
+
+import net.minecraft.core.registries.Registries;
+import net.minecraft.resources.ResourceKey;
+import net.minecraft.sounds.Music;
+import net.minecraft.world.level.biome.Biome;
+import net.minecraft.core.Registry;
+
+public class CanvasBiomeHolder implements BiomeSource{
+    private Biome minecraftBiome;
+    private org.bukkit.block.Biome bukkitBiome;
+    private NamespacedKey namespacedKey;
+    
+    public CanvasBiomeHolder(NamespacedKey biomeKey){
+        net.minecraft.core.Registry<net.minecraft.world.level.biome.Biome> registry = CraftRegistry.getMinecraftRegistry(Registries.BIOME);
+        this.minecraftBiome = registry.get(CraftNamespacedKey.toMinecraft(biomeKey));
+        this.bukkitBiome = org.bukkit.Registry.BIOME.get(CraftNamespacedKey.fromMinecraft(
+            registry.getResourceKey(this.minecraftBiome).orElseThrow().location()
+        ));
+        this.namespacedKey = biomeKey;
+    }
+
+    @Override
+    public NamespacedKey getKey(){
+        return this.namespacedKey;
+    }
+
+	@Override
+	public float getTemperature() {
+		return this.getHandle().climateSettings.temperature();
+	}
+
+    @Override
+    public org.bukkit.block.Biome getBukkitBiome(){
+        if(this.bukkitBiome == org.bukkit.block.Biome.CUSTOM){
+            return org.bukkit.block.Biome.CUSTOM;
+        }else{
+            return this.bukkitBiome;
+        }
+    }
+
+    public Biome getHandle(){
+        return this.minecraftBiome;
+    }
+
+    @Override
+    public float getDownfall(){
+        return this.getHandle().climateSettings.downfall();
+    }
+
+    @Override
+    public boolean hasPrecipitation(){
+        return this.getHandle().climateSettings.hasPrecipitation();
+    }
+
+    @Override
+    public boolean isFrozen(){
+        return this.getHandle().climateSettings.temperatureModifier() == Biome.TemperatureModifier.FROZEN;
+    }
+
+    @Override
+    public int getSkyColor(){
+        return this.getHandle().getSkyColor();
+    }
+
+    @Override
+    public int getGrassColor(World world, double x, double y, double z){
+        Location location = new Location(world, x, y, z);
+        if(location.getBlock().getBiome() != this.bukkitBiome){
+            throw new RuntimeException("Must be the same biome as the META being currently viewed. [META: %M, LOC: %L]"
+                .replace("%M", this.bukkitBiome.toString())
+                .replace("%L", location.getBlock().getBiome().toString()));
+        }
+        if(location.getBlock().getType() == Material.GRASS_BLOCK ||
+           location.getBlock().getType() == Material.DIRT){
+            if(location.getBlock().getType() == Material.DIRT){
+                return 0;
+            }else{
+                return this.getHandle().getGrassColor(x, z);
+            }
+        }
+        return 0;
+    }
+
+    @Override
+    public int getFoliageColor(){
+        return this.getHandle().getFoliageColor();
+    }
+
+    @Override
+    public float getBaseTemperature(){
+        return this.getHandle().getBaseTemperature();
+    }
+
+    @Override
+    public int getWaterColor(){
+        return this.getHandle().getWaterColor();
+    }
+
+    @Override
+    public int getWaterFogColor(){
+        return this.getHandle().getWaterFogColor();
+    }
+
+    @Override
+    public float getCreatureProbability(){
+        return this.getHandle().getMobSettings().getCreatureProbability();
+    }
+
+    @Override
+    public Optional<Sound> getBackgroundMusic(){
+        Optional<Music> music = this.getHandle().getBackgroundMusic();
+        if(music.isPresent()){
+            return Optional.of(
+                CraftSound.minecraftToBukkit(music.get().getEvent().value())
+            );
+        }
+        return Optional.of(null);
+    }
+
+    @Override
+    public Optional<Particle> getAmbientParticle(){
+        if(this.getHandle().getAmbientParticle().isPresent()){
+            return Optional.of(
+                CraftParticle.minecraftToBukkit(this.getHandle().getAmbientParticle().get().getOptions().getType())
+            );
+        }
+        return Optional.of(null);
+    }
+
+    @Override
+    public Optional<Sound> getAmbientLoop(){
+        if(this.getHandle().getAmbientLoop().isPresent()){
+            return Optional.of(
+                CraftSound.minecraftToBukkit(this.getHandle().getAmbientLoop().get().value())
+            );
+        }
+        return Optional.of(null);
+    }
+    
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 29eed24346044f5b1b22d0f3654da6a0e2a241cf..3e569c22bbc41d62bca67e9c0f2c29eb7d857294 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -984,6 +984,13 @@ public final class CraftServer implements Server {
     public CraftScheduler getScheduler() {
         return this.scheduler;
     }
+    // Canvas start
+
+    @Override
+    public me.dueris.canvas.biome.CanvasBiomeHolder getBiomeSource(org.bukkit.NamespacedKey key){
+        return new me.dueris.canvas.biome.CanvasBiomeHolder(key);
+    }
+    // Canvas end
 
     @Override
     public ServicesManager getServicesManager() {
