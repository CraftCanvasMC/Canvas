From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Thu, 2 Jan 2025 16:31:14 -0800
Subject: [PATCH] Optimize Hoppers


diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
index 1a37654aff9a9c86c9f7af10a1cf721371f0c5ec..bdba6bf109c360bf17057ae2464d9cc8ffc05336 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSectionBlocksUpdatePacket.java
@@ -29,13 +29,11 @@ public class ClientboundSectionBlocksUpdatePacket implements Packet<ClientGamePa
         this.states = new BlockState[i];
         int j = 0;
 
-        for (ShortIterator shortiterator = positions.iterator(); shortiterator.hasNext(); ++j) {
-            short short0 = (Short) shortiterator.next();
-
+        for (short short0 : positions) {
             this.positions[j] = short0;
             this.states[j] = (section != null) ? section.getBlockState(SectionPos.sectionRelativeX(short0), SectionPos.sectionRelativeY(short0), SectionPos.sectionRelativeZ(short0)) : net.minecraft.world.level.block.Blocks.AIR.defaultBlockState(); // CraftBukkit - SPIGOT-6076, Mojang bug when empty chunk section notified
+            j++;
         }
-
     }
 
     // CraftBukkit start - Add constructor
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 6fcad9dff2aa3be366c1d3191f8d43f05b81f821..6d2c6d39993f1b1fec4a7ba2a112256f573cf995 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -39,10 +39,10 @@ import java.util.Optional;
 import java.util.Queue;
 import java.util.Set;
 import java.util.UUID;
-import java.util.concurrent.ConcurrentHashMap;
 import java.util.concurrent.ConcurrentLinkedQueue;
 import java.util.concurrent.CopyOnWriteArrayList;
 import java.util.concurrent.Executor;
+import java.util.concurrent.atomic.AtomicBoolean;
 import java.util.function.BooleanSupplier;
 import java.util.function.Function;
 import java.util.function.Predicate;
@@ -232,7 +232,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
     private final LevelTicks<Fluid> fluidTicks = new LevelTicks<>(this::isPositionTickingWithEntitiesLoaded);
     private final PathTypeCache pathTypesByPosCache = new PathTypeCache();
     final Set<Mob> navigatingMobs = new ConcurrentSet<>(); // Canvas
-    volatile boolean isUpdatingNavigations;
+    final AtomicBoolean isUpdatingNavigations = new AtomicBoolean(false); // Canvas
     protected final Raids raids;
     private final List<BlockEventData> blockEvents = new CopyOnWriteArrayList<>(); // Canvas
     private final Queue<BlockEventData> blockEventsToReschedule = new ConcurrentLinkedQueue<>(); // Canvas
@@ -854,7 +854,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
 
         hasPhysicsEvent = org.bukkit.event.block.BlockPhysicsEvent.getHandlerList().getRegisteredListeners().length > 0;
         hasEntityMoveEvent = io.papermc.paper.event.entity.EntityMoveEvent.getHandlerList().getRegisteredListeners().length > 0;
-        net.minecraft.world.level.block.entity.HopperBlockEntity.skipHopperEvents = paperConfig().hopper.disableMoveEvent || org.bukkit.event.inventory.InventoryMoveItemEvent.getHandlerList().getRegisteredListeners().length == 0;
+        // net.minecraft.world.level.block.entity.HopperBlockEntity.skipHopperEvents = paperConfig().hopper.disableMoveEvent || org.bukkit.event.inventory.InventoryMoveItemEvent.getHandlerList().getRegisteredListeners().length == 0;
         updateLagCompensationTick();
         hasRidableMoveEvent = org.purpurmc.purpur.event.entity.RidableMoveEvent.getHandlerList().getRegisteredListeners().length > 0;
     // Canvas end
@@ -1952,7 +1952,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
 
     @Override
     public void sendBlockUpdated(BlockPos pos, BlockState oldState, BlockState newState, int flags) {
-        if (this.isUpdatingNavigations) {
+        if (this.isUpdatingNavigations.get()) { // Canvas
             String s = "recursive call to sendBlockUpdated";
 
             Util.logAndPauseIfInIde("recursive call to sendBlockUpdated", new IllegalStateException("recursive call to sendBlockUpdated"));
@@ -1989,7 +1989,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             }
 
             try {
-                this.isUpdatingNavigations = true;
+                this.isUpdatingNavigations.set(true); // Canvas
                 iterator = list.iterator();
 
                 while (iterator.hasNext()) {
@@ -1998,7 +1998,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
                     navigationabstract1.recomputePath();
                 }
             } finally {
-                this.isUpdatingNavigations = false;
+                this.isUpdatingNavigations.set(false); // Canvas
             }
 
         }
@@ -2908,7 +2908,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             }
 
             if (entity instanceof Mob entityinsentient) {
-                if (false && ServerLevel.this.isUpdatingNavigations) { // Paper - Remove unnecessary onTrackingStart during navigation warning
+                if (false && ServerLevel.this.isUpdatingNavigations.get()) { // Paper - Remove unnecessary onTrackingStart during navigation warning // Canvas
                     String s = "onTrackingStart called during navigation iteration";
 
                     Util.logAndPauseIfInIde("onTrackingStart called during navigation iteration", new IllegalStateException("onTrackingStart called during navigation iteration"));
@@ -2989,7 +2989,7 @@ public class ServerLevel extends Level implements ServerEntityGetter, WorldGenLe
             }
 
             if (entity instanceof Mob entityinsentient) {
-                if (false && ServerLevel.this.isUpdatingNavigations) { // Paper - Remove unnecessary onTrackingStart during navigation warning
+                if (false && ServerLevel.this.isUpdatingNavigations.get()) { // Paper - Remove unnecessary onTrackingStart during navigation warning // Canvas
                     String s = "onTrackingStart called during navigation iteration";
 
                     Util.logAndPauseIfInIde("onTrackingStart called during navigation iteration", new IllegalStateException("onTrackingStart called during navigation iteration"));
diff --git a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
index 5ebbdb94d9b91c442ff60eb6872f740ebd790fa0..8913f434967457a16dd708252834ba001ada1a03 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/HopperBlockEntity.java
@@ -156,43 +156,6 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
     }
 
-    // Paper start - Perf: Optimize Hoppers
-    private static final int HOPPER_EMPTY = 0;
-    private static final int HOPPER_HAS_ITEMS = 1;
-    private static final int HOPPER_IS_FULL = 2;
-
-    private static int getFullState(final HopperBlockEntity tileEntity) {
-        tileEntity.unpackLootTable(null);
-
-        final List<ItemStack> hopperItems = tileEntity.getItems();
-
-        boolean empty = true;
-        boolean full = true;
-
-        for (int i = 0, len = hopperItems.size(); i < len; ++i) {
-            final ItemStack stack = hopperItems.get(i);
-            if (stack.isEmpty()) {
-                full = false;
-                continue;
-            }
-
-            if (!full) {
-                // can't be full
-                return HOPPER_HAS_ITEMS;
-            }
-
-            empty = false;
-
-            if (stack.getCount() != stack.getMaxStackSize()) {
-                // can't be full or empty
-                return HOPPER_HAS_ITEMS;
-            }
-        }
-
-        return empty ? HOPPER_EMPTY : (full ? HOPPER_IS_FULL : HOPPER_HAS_ITEMS);
-    }
-    // Paper end - Perf: Optimize Hoppers
-
     private static boolean tryMoveItems(Level world, BlockPos pos, BlockState state, HopperBlockEntity blockEntity, BooleanSupplier booleansupplier) {
         if (world.isClientSide) {
             return false;
@@ -200,12 +163,11 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
             if (!blockEntity.isOnCooldown() && (Boolean) state.getValue(HopperBlock.ENABLED)) {
                 boolean flag = false;
 
-                final int fullState = getFullState(blockEntity); // Paper - Perf: Optimize Hoppers
-                if (fullState != HOPPER_EMPTY) { // Paper - Perf: Optimize Hoppers
+                if (!blockEntity.isEmpty()) {
                     flag = HopperBlockEntity.ejectItems(world, pos, blockEntity);
                 }
 
-                if (fullState != HOPPER_IS_FULL || flag) { // Paper - Perf: Optimize Hoppers
+                if (!blockEntity.inventoryFull()) {
                     flag |= booleansupplier.getAsBoolean();
                 }
 
@@ -236,202 +198,6 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         return false;
     }
 
-    // Paper start - Perf: Optimize Hoppers
-    private static boolean skipPullModeEventFire;
-    private static boolean skipPushModeEventFire;
-    public static boolean skipHopperEvents;
-
-    private static boolean hopperPush(final Level level, final Container destination, final Direction direction, final HopperBlockEntity hopper) {
-        skipPushModeEventFire = skipHopperEvents;
-        boolean foundItem = false;
-        for (int i = 0; i < hopper.getContainerSize(); ++i) {
-            final ItemStack item = hopper.getItem(i);
-            if (!item.isEmpty()) {
-                foundItem = true;
-                ItemStack origItemStack = item;
-                ItemStack movedItem = origItemStack;
-
-                final int originalItemCount = origItemStack.getCount();
-                final int movedItemCount = Math.min(level.spigotConfig.hopperAmount, originalItemCount);
-                origItemStack.setCount(movedItemCount);
-
-                // We only need to fire the event once to give protection plugins a chance to cancel this event
-                // Because nothing uses getItem, every event call should end up the same result.
-                if (!skipPushModeEventFire) {
-                    movedItem = callPushMoveEvent(destination, movedItem, hopper);
-                    if (movedItem == null) { // cancelled
-                        origItemStack.setCount(originalItemCount);
-                        return false;
-                    }
-                }
-
-                final ItemStack remainingItem = addItem(hopper, destination, movedItem, direction);
-                final int remainingItemCount = remainingItem.getCount();
-                if (remainingItemCount != movedItemCount) {
-                    origItemStack = origItemStack.copy(true);
-                    origItemStack.setCount(originalItemCount);
-                    if (!origItemStack.isEmpty()) {
-                        origItemStack.setCount(originalItemCount - movedItemCount + remainingItemCount);
-                    }
-                    hopper.setItem(i, origItemStack);
-                    destination.setChanged();
-                    return true;
-                }
-                origItemStack.setCount(originalItemCount);
-            }
-        }
-        if (foundItem && level.paperConfig().hopper.cooldownWhenFull) { // Inventory was full - cooldown
-            hopper.setCooldown(level.spigotConfig.hopperTransfer);
-        }
-        return false;
-    }
-
-    private static boolean hopperPull(final Level level, final Hopper hopper, final Container container, ItemStack origItemStack, final int i) {
-        ItemStack movedItem = origItemStack;
-        final int originalItemCount = origItemStack.getCount();
-        final int movedItemCount = Math.min(level.spigotConfig.hopperAmount, originalItemCount);
-        container.setChanged(); // original logic always marks source inv as changed even if no move happens.
-        movedItem.setCount(movedItemCount);
-
-        if (!skipPullModeEventFire) {
-            movedItem = callPullMoveEvent(hopper, container, movedItem);
-            if (movedItem == null) { // cancelled
-                origItemStack.setCount(originalItemCount);
-                // Drastically improve performance by returning true.
-                // No plugin could of relied on the behavior of false as the other call
-                // site for IMIE did not exhibit the same behavior
-                return true;
-            }
-        }
-
-        final ItemStack remainingItem = addItem(container, hopper, movedItem, null);
-        final int remainingItemCount = remainingItem.getCount();
-        if (remainingItemCount != movedItemCount) {
-            origItemStack = origItemStack.copy(true);
-            origItemStack.setCount(originalItemCount);
-            if (!origItemStack.isEmpty()) {
-                origItemStack.setCount(originalItemCount - movedItemCount + remainingItemCount);
-            }
-
-            ignoreTileUpdates = true;
-            container.setItem(i, origItemStack);
-            ignoreTileUpdates = false;
-            container.setChanged();
-            return true;
-        }
-        origItemStack.setCount(originalItemCount);
-
-        if (level.paperConfig().hopper.cooldownWhenFull) {
-            cooldownHopper(hopper);
-        }
-
-        return false;
-    }
-
-    @Nullable
-    private static ItemStack callPushMoveEvent(Container iinventory, ItemStack itemstack, HopperBlockEntity hopper) {
-        final Inventory destinationInventory = getInventory(iinventory);
-        final io.papermc.paper.event.inventory.PaperInventoryMoveItemEvent event = new io.papermc.paper.event.inventory.PaperInventoryMoveItemEvent(hopper.getOwner(false).getInventory(),
-            CraftItemStack.asCraftMirror(itemstack), destinationInventory, true);
-        final boolean result = event.callEvent();
-        if (!event.calledGetItem && !event.calledSetItem) {
-            skipPushModeEventFire = true;
-        }
-        if (!result) {
-            cooldownHopper(hopper);
-            return null;
-        }
-
-        if (event.calledSetItem) {
-            return CraftItemStack.asNMSCopy(event.getItem());
-        } else {
-            return itemstack;
-        }
-    }
-
-    @Nullable
-    private static ItemStack callPullMoveEvent(final Hopper hopper, final Container container, final ItemStack itemstack) {
-        final Inventory sourceInventory = getInventory(container);
-        final Inventory destination = getInventory(hopper);
-
-        // Mirror is safe as no plugins ever use this item
-        final io.papermc.paper.event.inventory.PaperInventoryMoveItemEvent event = new io.papermc.paper.event.inventory.PaperInventoryMoveItemEvent(sourceInventory, CraftItemStack.asCraftMirror(itemstack), destination, false);
-        final boolean result = event.callEvent();
-        if (!event.calledGetItem && !event.calledSetItem) {
-            skipPullModeEventFire = true;
-        }
-        if (!result) {
-            cooldownHopper(hopper);
-            return null;
-        }
-
-        if (event.calledSetItem) {
-            return CraftItemStack.asNMSCopy(event.getItem());
-        } else {
-            return itemstack;
-        }
-    }
-
-    private static Inventory getInventory(final Container container) {
-        final Inventory sourceInventory;
-        if (container instanceof CompoundContainer compoundContainer) {
-            // Have to special-case large chests as they work oddly
-            sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest(compoundContainer);
-        } else if (container instanceof BlockEntity blockEntity) {
-            sourceInventory = blockEntity.getOwner(false).getInventory();
-        } else if (container.getOwner() != null) {
-            sourceInventory = container.getOwner().getInventory();
-        } else {
-            sourceInventory = new CraftInventory(container);
-        }
-        return sourceInventory;
-    }
-
-    private static void cooldownHopper(final Hopper hopper) {
-        if (hopper instanceof HopperBlockEntity blockEntity && blockEntity.getLevel() != null) {
-            blockEntity.setCooldown(blockEntity.getLevel().spigotConfig.hopperTransfer);
-        }
-    }
-
-    private static boolean allMatch(Container iinventory, Direction enumdirection, java.util.function.BiPredicate<ItemStack, Integer> test) {
-        if (iinventory instanceof WorldlyContainer) {
-            for (int i : ((WorldlyContainer) iinventory).getSlotsForFace(enumdirection)) {
-                if (!test.test(iinventory.getItem(i), i)) {
-                    return false;
-                }
-            }
-        } else {
-            int size = iinventory.getContainerSize();
-            for (int i = 0; i < size; i++) {
-                if (!test.test(iinventory.getItem(i), i)) {
-                    return false;
-                }
-            }
-        }
-        return true;
-    }
-
-    private static boolean anyMatch(Container iinventory, Direction enumdirection, java.util.function.BiPredicate<ItemStack, Integer> test) {
-        if (iinventory instanceof WorldlyContainer) {
-            for (int i : ((WorldlyContainer) iinventory).getSlotsForFace(enumdirection)) {
-                if (test.test(iinventory.getItem(i), i)) {
-                    return true;
-                }
-            }
-        } else {
-            int size = iinventory.getContainerSize();
-            for (int i = 0; i < size; i++) {
-                if (test.test(iinventory.getItem(i), i)) {
-                    return true;
-                }
-            }
-        }
-        return true;
-    }
-    private static final java.util.function.BiPredicate<ItemStack, Integer> STACK_SIZE_TEST = (itemstack, i) -> itemstack.getCount() >= itemstack.getMaxStackSize();
-    private static final java.util.function.BiPredicate<ItemStack, Integer> IS_EMPTY_TEST = (itemstack, i) -> itemstack.isEmpty();
-    // Paper end - Perf: Optimize Hoppers
-
     private static boolean ejectItems(Level world, BlockPos pos, HopperBlockEntity blockEntity) {
         Container iinventory = HopperBlockEntity.getAttachedContainer(world, pos, blockEntity);
 
@@ -443,55 +209,52 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
             if (HopperBlockEntity.isFullContainer(iinventory, enumdirection)) {
                 return false;
             } else {
-                // Paper start - Perf: Optimize Hoppers
-                return hopperPush(world, iinventory, enumdirection, blockEntity);
-                //for (int i = 0; i < blockEntity.getContainerSize(); ++i) {
-                //    ItemStack itemstack = blockEntity.getItem(i);
-
-                //    if (!itemstack.isEmpty()) {
-                //        int j = itemstack.getCount();
-                //        // CraftBukkit start - Call event when pushing items into other inventories
-                //        ItemStack original = itemstack.copy();
-                //        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(blockEntity.removeItem(i, world.spigotConfig.hopperAmount)); // Spigot
-
-                //        Inventory destinationInventory;
-                //        // Have to special case large chests as they work oddly
-                //        if (iinventory instanceof CompoundContainer) {
-                //            destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((CompoundContainer) iinventory);
-                //        } else if (iinventory.getOwner() != null) {
-                //            destinationInventory = iinventory.getOwner().getInventory();
-                //        } else {
-                //            destinationInventory = new CraftInventory(iinventory);
-                //        }
-
-                //        InventoryMoveItemEvent event = new InventoryMoveItemEvent(tileentityhopper.getOwner().getInventory(), oitemstack, destinationInventory, true);
-                //        world.getCraftServer().getPluginManager().callEvent(event);
-                //        if (event.isCancelled()) {
-                //            blockEntity.setItem(i, original);
-                //            blockEntity.setCooldown(world.spigotConfig.hopperTransfer); // Delay hopper checks // Spigot
-                //            return false;
-                //        }
-                //        int origCount = event.getItem().getAmount(); // Spigot
-                //        ItemStack itemstack1 = HopperBlockEntity.addItem(blockEntity, iinventory, CraftItemStack.asNMSCopy(event.getItem()), enumdirection);
-                //        // CraftBukkit end
-
-                //        if (itemstack1.isEmpty()) {
-                //            iinventory.setChanged();
-                //            return true;
-                //        }
-
-                //        itemstack.setCount(j);
-                //        // Spigot start
-                //        itemstack.shrink(origCount - itemstack1.getCount());
-                //        if (j <= world.spigotConfig.hopperAmount) {
-                //          // Spigot end
-                //            blockEntity.setItem(i, itemstack);
-                //        }
-                //    }
-                //}
-
-                // return false;
-                // Paper end - Perf: Optimize Hoppers
+                for (int i = 0; i < blockEntity.getContainerSize(); ++i) {
+                    ItemStack itemstack = blockEntity.getItem(i);
+
+                    if (!itemstack.isEmpty()) {
+                        int j = itemstack.getCount();
+                        // CraftBukkit start - Call event when pushing items into other inventories
+                        ItemStack original = itemstack.copy();
+                        CraftItemStack oitemstack = CraftItemStack.asCraftMirror(blockEntity.removeItem(i, world.spigotConfig.hopperAmount)); // Spigot
+
+                        Inventory destinationInventory;
+                        // Have to special case large chests as they work oddly
+                        if (iinventory instanceof CompoundContainer) {
+                            destinationInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((CompoundContainer) iinventory);
+                        } else if (iinventory.getOwner() != null) {
+                            destinationInventory = iinventory.getOwner().getInventory();
+                        } else {
+                            destinationInventory = new CraftInventory(iinventory);
+                        }
+
+                        InventoryMoveItemEvent event = new InventoryMoveItemEvent(blockEntity.getOwner().getInventory(), oitemstack, destinationInventory, true);
+                        world.getCraftServer().getPluginManager().callEvent(event);
+                        if (event.isCancelled()) {
+                            blockEntity.setItem(i, original);
+                            blockEntity.setCooldown(world.spigotConfig.hopperTransfer); // Delay hopper checks // Spigot
+                            return false;
+                        }
+                        int origCount = event.getItem().getAmount(); // Spigot
+                        ItemStack itemstack1 = HopperBlockEntity.addItem(blockEntity, iinventory, CraftItemStack.asNMSCopy(event.getItem()), enumdirection);
+                        // CraftBukkit end
+
+                        if (itemstack1.isEmpty()) {
+                            iinventory.setChanged();
+                            return true;
+                        }
+
+                        itemstack.setCount(j);
+                        // Spigot start
+                        itemstack.shrink(origCount - itemstack1.getCount());
+                        if (j <= world.spigotConfig.hopperAmount) {
+                            // Spigot end
+                            blockEntity.setItem(i, itemstack);
+                        }
+                    }
+                }
+
+                return false;
             }
         }
     }
@@ -542,6 +305,7 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
                 return false;
             }
         }
+
         return true;
     }
 
@@ -552,7 +316,6 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
         if (iinventory != null) {
             Direction enumdirection = Direction.DOWN;
-            skipPullModeEventFire = skipHopperEvents; // Paper - Perf: Optimize Hoppers
             int[] aint = HopperBlockEntity.getSlots(iinventory, enumdirection);
             int i = aint.length;
 
@@ -588,52 +351,49 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
         ItemStack itemstack = iinventory.getItem(i);
 
         if (!itemstack.isEmpty() && HopperBlockEntity.canTakeItemFromContainer(ihopper, iinventory, itemstack, i, enumdirection)) {
-            // Paper start - Perf: Optimize Hoppers
-            return hopperPull(world, ihopper, iinventory, itemstack, i);
-        //    int j = itemstack.getCount();
-        //    // CraftBukkit start - Call event on collection of items from inventories into the hopper
-        //    ItemStack original = itemstack.copy();
-        //    CraftItemStack oitemstack = CraftItemStack.asCraftMirror(iinventory.removeItem(i, world.spigotConfig.hopperAmount)); // Spigot
-
-        //    Inventory sourceInventory;
-        //    // Have to special case large chests as they work oddly
-        //    if (iinventory instanceof CompoundContainer) {
-        //        sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((CompoundContainer) iinventory);
-        //    } else if (iinventory.getOwner() != null) {
-        //        sourceInventory = iinventory.getOwner().getInventory();
-        //    } else {
-        //        sourceInventory = new CraftInventory(iinventory);
-        //    }
-
-        //    InventoryMoveItemEvent event = new InventoryMoveItemEvent(sourceInventory, oitemstack, ihopper.getOwner().getInventory(), false);
-
-        //    Bukkit.getServer().getPluginManager().callEvent(event);
-        //    if (event.isCancelled()) {
-        //        iinventory.setItem(i, original);
-
-        //        if (ihopper instanceof HopperBlockEntity) {
-        //            ((HopperBlockEntity) ihopper).setCooldown(world.spigotConfig.hopperTransfer); // Spigot
-        //        }
-
-        //        return false;
-        //    }
-        //    int origCount = event.getItem().getAmount(); // Spigot
-        //    ItemStack itemstack1 = HopperBlockEntity.addItem(iinventory, ihopper, CraftItemStack.asNMSCopy(event.getItem()), null);
-        //    // CraftBukkit end
-
-        //    if (itemstack1.isEmpty()) {
-        //        iinventory.setChanged();
-        //        return true;
-        //    }
-
-        //    itemstack.setCount(j);
-        //    // Spigot start
-        //    itemstack.shrink(origCount - itemstack1.getCount());
-        //    if (j <= world.spigotConfig.hopperAmount) {
-        //        // Spigot end
-        //        iinventory.setItem(i, itemstack);
-        //    }
-            // Paper end - Perf: Optimize Hoppers
+            int j = itemstack.getCount();
+            // CraftBukkit start - Call event on collection of items from inventories into the hopper
+            ItemStack original = itemstack.copy();
+            CraftItemStack oitemstack = CraftItemStack.asCraftMirror(iinventory.removeItem(i, world.spigotConfig.hopperAmount)); // Spigot
+
+            Inventory sourceInventory;
+            // Have to special case large chests as they work oddly
+            if (iinventory instanceof CompoundContainer) {
+                sourceInventory = new org.bukkit.craftbukkit.inventory.CraftInventoryDoubleChest((CompoundContainer) iinventory);
+            } else if (iinventory.getOwner() != null) {
+                sourceInventory = iinventory.getOwner().getInventory();
+            } else {
+                sourceInventory = new CraftInventory(iinventory);
+            }
+
+            InventoryMoveItemEvent event = new InventoryMoveItemEvent(sourceInventory, oitemstack, ihopper.getOwner().getInventory(), false);
+
+            Bukkit.getServer().getPluginManager().callEvent(event);
+            if (event.isCancelled()) {
+                iinventory.setItem(i, original);
+
+                if (ihopper instanceof HopperBlockEntity) {
+                    ((HopperBlockEntity) ihopper).setCooldown(world.spigotConfig.hopperTransfer); // Spigot
+                }
+
+                return false;
+            }
+            int origCount = event.getItem().getAmount(); // Spigot
+            ItemStack itemstack1 = HopperBlockEntity.addItem(iinventory, ihopper, CraftItemStack.asNMSCopy(event.getItem()), null);
+            // CraftBukkit end
+
+            if (itemstack1.isEmpty()) {
+                iinventory.setChanged();
+                return true;
+            }
+
+            itemstack.setCount(j);
+            // Spigot start
+            itemstack.shrink(origCount - itemstack1.getCount());
+            if (j <= world.spigotConfig.hopperAmount) {
+                // Spigot end
+                iinventory.setItem(i, itemstack);
+            }
         }
 
         return false;
@@ -642,14 +402,12 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
     public static boolean addItem(Container inventory, ItemEntity itemEntity) {
         boolean flag = false;
         // CraftBukkit start
-        if (InventoryPickupItemEvent.getHandlerList().getRegisteredListeners().length > 0) { // Paper - optimize hoppers
-        InventoryPickupItemEvent event = new InventoryPickupItemEvent(getInventory(inventory), (org.bukkit.entity.Item) itemEntity.getBukkitEntity()); // Paper - Perf: Optimize Hoppers; use getInventory() to avoid snapshot creation
+        InventoryPickupItemEvent event = new InventoryPickupItemEvent(inventory.getOwner().getInventory(), (org.bukkit.entity.Item) itemEntity.getBukkitEntity());
         itemEntity.level().getCraftServer().getPluginManager().callEvent(event);
         if (event.isCancelled()) {
             return false;
         }
         // CraftBukkit end
-        } // Paper - Perf: Optimize Hoppers
         ItemStack itemstack = itemEntity.getItem().copy();
         ItemStack itemstack1 = HopperBlockEntity.addItem((Container) null, inventory, itemstack, (Direction) null);
 
@@ -737,19 +495,15 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
             if (itemstack1.isEmpty()) {
                 // Spigot start - SPIGOT-6693, InventorySubcontainer#setItem
-                ItemStack leftover = ItemStack.EMPTY; // Paper - Make hoppers respect inventory max stack size
                 if (!stack.isEmpty() && stack.getCount() > to.getMaxStackSize()) {
-                    leftover = stack; // Paper - Make hoppers respect inventory max stack size
                     stack = stack.split(to.getMaxStackSize());
                 }
                 // Spigot end
-                ignoreTileUpdates = true; // Paper - Perf: Optimize Hoppers
                 to.setItem(slot, stack);
-                ignoreTileUpdates = false; // Paper - Perf: Optimize Hoppers
-                stack = leftover; // Paper - Make hoppers respect inventory max stack size
+                stack = ItemStack.EMPTY;
                 flag = true;
             } else if (HopperBlockEntity.canMergeItems(itemstack1, stack)) {
-                int j = Math.min(stack.getMaxStackSize(), to.getMaxStackSize()) - itemstack1.getCount(); // Paper - Make hoppers respect inventory max stack size
+                int j = stack.getMaxStackSize() - itemstack1.getCount();
                 int k = Math.min(stack.getCount(), j);
 
                 stack.shrink(k);
@@ -825,20 +579,14 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
     @Nullable
     public static Container getContainerAt(Level world, BlockPos pos) {
-        return HopperBlockEntity.getContainerAt(world, pos, world.getBlockState(pos), (double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D, true);
+        return HopperBlockEntity.getContainerAt(world, pos, world.getBlockState(pos), (double) pos.getX() + 0.5D, (double) pos.getY() + 0.5D, (double) pos.getZ() + 0.5D);
     }
 
     @Nullable
     private static Container getContainerAt(Level world, BlockPos pos, BlockState state, double x, double y, double z) {
-        // Paper start - Perf: Optimize Hoppers
-        return HopperBlockEntity.getContainerAt(world, pos, state, x, y, z, false);
-    }
-    @Nullable
-    private static Container getContainerAt(Level world, BlockPos pos, BlockState state, double x, double y, double z, boolean optimizeEntities) {
-        // Paper end - Perf: Optimize Hoppers
         Container iinventory = HopperBlockEntity.getBlockContainer(world, pos, state);
 
-        if (iinventory == null && (!optimizeEntities || !world.paperConfig().hopper.ignoreOccludingBlocks || !state.getBukkitMaterial().isOccluding())) { // Paper - Perf: Optimize Hoppers
+        if (iinventory == null) {
             iinventory = HopperBlockEntity.getEntityContainer(world, x, y, z);
         }
 
@@ -873,13 +621,13 @@ public class HopperBlockEntity extends RandomizableContainerBlockEntity implemen
 
     @Nullable
     private static Container getEntityContainer(Level world, double x, double y, double z) {
-        List<Entity> list = world.getEntitiesOfClass((Class) Container.class, new AABB(x - 0.5D, y - 0.5D, z - 0.5D, x + 0.5D, y + 0.5D, z + 0.5D), EntitySelector.CONTAINER_ENTITY_SELECTOR); // Paper - Perf: Optimize hoppers
+        List<Entity> list = world.getEntities((Entity) null, new AABB(x - 0.5D, y - 0.5D, z - 0.5D, x + 0.5D, y + 0.5D, z + 0.5D), EntitySelector.CONTAINER_ENTITY_SELECTOR);
 
         return !list.isEmpty() ? (Container) list.get(world.random.nextInt(list.size())) : null;
     }
 
     private static boolean canMergeItems(ItemStack first, ItemStack second) {
-        return first.getCount() < first.getMaxStackSize() && ItemStack.isSameItemSameComponents(first, second); // Paper - Perf: Optimize Hoppers; used to return true for full itemstacks?!
+        return first.getCount() <= first.getMaxStackSize() && ItemStack.isSameItemSameComponents(first, second);
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/ticks/LevelChunkTicks.java b/src/main/java/net/minecraft/world/ticks/LevelChunkTicks.java
index 3858c83c58e78435a6e29de84c33faa2f26d593d..7dc31c28a0e9e9a4a640385600148e312d52a8a3 100644
--- a/src/main/java/net/minecraft/world/ticks/LevelChunkTicks.java
+++ b/src/main/java/net/minecraft/world/ticks/LevelChunkTicks.java
@@ -16,8 +16,11 @@ import javax.annotation.Nullable;
 import net.minecraft.core.BlockPos;
 import net.minecraft.nbt.ListTag;
 import net.minecraft.world.level.ChunkPos;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
 
-public class LevelChunkTicks<T> implements SerializableTickContainer<T>, TickContainerAccess<T>, ca.spottedleaf.moonrise.patches.chunk_system.ticks.ChunkSystemLevelChunkTicks { // Paper - rewrite chunk system
+public class LevelChunkTicks<T> implements SerializableTickContainer<T>, TickContainerAccess<T>, ca.spottedleaf.moonrise.patches.chunk_system.ticks.ChunkSystemLevelChunkTicks {
+    private static final Logger log = LogManager.getLogger(LevelChunkTicks.class); // Paper - rewrite chunk system
     private final Queue<ScheduledTick<T>> tickQueue = new PriorityQueue<>(ScheduledTick.DRAIN_ORDER);
     @Nullable
     private List<SavedTick<T>> pendingTicks;
@@ -71,9 +74,17 @@ public class LevelChunkTicks<T> implements SerializableTickContainer<T>, TickCon
 
     @Nullable
     public ScheduledTick<T> poll() {
-        ScheduledTick<T> scheduledTick = this.tickQueue.poll();
-        if (scheduledTick != null) {
-            this.ticksPerPosition.remove(scheduledTick); this.dirty = true; // Paper - rewrite chunk system
+        // Canvas start
+        ScheduledTick<T> scheduledTick = null;
+        try {
+            scheduledTick = this.tickQueue.poll();
+            if (scheduledTick != null) {
+                this.ticksPerPosition.remove(scheduledTick); this.dirty = true; // Paper - rewrite chunk system
+            }
+        } catch (Exception e) {
+            log.error("Encountered caught exception when polling chunk ticks, blocking and returning null.", e);
+            return null;
+        // Canvas end
         }
 
         return scheduledTick;
