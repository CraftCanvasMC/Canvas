From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Fri, 12 Jul 2024 11:10:02 -0700
Subject: [PATCH] Async EntityTracker


diff --git a/src/main/java/me/dueris/canvas/CanvasConfig.java b/src/main/java/me/dueris/canvas/CanvasConfig.java
index 6badaa66189d59e9888086a53f5a4af2af535c41..042d11f8911ac655447fe49121b2385bb4f5f233 100644
--- a/src/main/java/me/dueris/canvas/CanvasConfig.java
+++ b/src/main/java/me/dueris/canvas/CanvasConfig.java
@@ -211,6 +211,7 @@ public class CanvasConfig {
     public static double orbMergeSearchInfaltionRadius = 0.8;
     public static int maxEntitiesToReducePathfindingRates = 2;
     public static boolean spectatorsSpawnMobs = false;
+    public static int asyncEntityTrackerThreadCount = 1;
 
     public static boolean disableFeatures = false;
 
@@ -261,6 +262,7 @@ public class CanvasConfig {
         playerInstaAbsorbOrbs = getBoolean("playerInstaAbsorbOrbs", playerInstaAbsorbOrbs);
         useCanvasOrbOptimizations = getBoolean("useCanvasOrbOptimizations", useCanvasOrbOptimizations);
         orbMergeSearchInfaltionRadius = getDouble("orbMergeSearchInfaltionRadius", orbMergeSearchInfaltionRadius);
+        asyncEntityTrackerThreadCount = getInt("asyncEntityTrackerThreadCount", asyncEntityTrackerThreadCount);
     }
     
     private static void blocks(){
diff --git a/src/main/java/me/dueris/canvas/thread/tracker/AsyncEntityTracker.java b/src/main/java/me/dueris/canvas/thread/tracker/AsyncEntityTracker.java
new file mode 100644
index 0000000000000000000000000000000000000000..5d26d74c987e80e0793f7e2545d558896756328e
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/thread/tracker/AsyncEntityTracker.java
@@ -0,0 +1,45 @@
+package me.dueris.canvas.thread.tracker;
+
+import me.dueris.canvas.CanvasConfig;
+import me.dueris.canvas.thread.NamedTickThreadFactory;
+import java.util.Iterator;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.TimeUnit;
+
+public class AsyncEntityTracker {
+    private final ExecutorService executor;
+    private final BlockingQueue<Runnable> taskQueue;
+
+    public AsyncEntityTracker() {
+        this.executor = Executors.newFixedThreadPool(CanvasConfig.asyncEntityTrackerThreadCount, new NamedTickThreadFactory("AsyncEntityTracker"));
+        this.taskQueue = new LinkedBlockingQueue<>();
+    }
+
+    public void scheduleUpdate(Runnable runnable) {
+        taskQueue.add(runnable);
+    }
+
+    public void tick() {
+        if (taskQueue.isEmpty()) return;
+        Iterator<Runnable> taskIterator = taskQueue.iterator();
+        while (taskIterator.hasNext()) {
+            Runnable task = taskIterator.next();
+            taskQueue.remove(task);
+            executor.submit(task);
+        }
+    }
+
+    public void stopTicking() {
+        executor.shutdown();
+        try {
+            if (!executor.awaitTermination(60, TimeUnit.SECONDS)) {
+                executor.shutdownNow();
+            }
+        } catch (InterruptedException e) {
+            throw new RuntimeException(e);
+        }
+    }
+}
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 174b9f850a4d5ebaf9501a80bb898edbb8d9852e..d369991fede9456448f4a6544081a5f8b0c3ec12 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -53,6 +53,7 @@ import java.util.stream.Stream;
 import javax.annotation.Nullable;
 import javax.imageio.ImageIO;
 import me.dueris.canvas.thread.WorldTickThread;
+import me.dueris.canvas.thread.tracker.AsyncEntityTracker;
 import me.dueris.canvas.world.TickManagerHolder;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
@@ -355,6 +356,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         });
         return managers;
     }
+
+    public final AsyncEntityTracker tracker;
     // Canvas end
 
     // Paper start - rewrite chunk system
@@ -509,6 +512,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         Runtime.getRuntime().addShutdownHook(new org.bukkit.craftbukkit.util.ServerShutdownThread(this));
         // CraftBukkit end
         this.paperConfigurations = services.paperConfigurations(); // Paper - add paper configuration files
+        this.tracker = new AsyncEntityTracker(); // Canvas
     }
 
     private void readScoreboard(DimensionDataStorage persistentStateManager) {
@@ -1979,6 +1983,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 level.connections.removeAll();
             }
         }
+
+        this.tracker.tick();
         // Canvas end
 
         //this.profiler.popPush("connection"); // Purpur
diff --git a/src/main/java/net/minecraft/server/level/ChunkMap.java b/src/main/java/net/minecraft/server/level/ChunkMap.java
index 4fcafcd8f64e758bbb36d30bc1236b95bf188677..0b75fad2c577490d1ae7d46f90abf35464199699 100644
--- a/src/main/java/net/minecraft/server/level/ChunkMap.java
+++ b/src/main/java/net/minecraft/server/level/ChunkMap.java
@@ -923,6 +923,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
     // Paper start - optimise entity tracker
     private void newTrackerTick() {
+        this.level.getServer().tracker.scheduleUpdate(() -> { // Canvas
         final ca.spottedleaf.moonrise.common.misc.NearbyPlayers nearbyPlayers = ((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getNearbyPlayers();
         final ca.spottedleaf.moonrise.patches.chunk_system.level.entity.server.ServerEntityLookup entityLookup = (ca.spottedleaf.moonrise.patches.chunk_system.level.entity.server.ServerEntityLookup)((ca.spottedleaf.moonrise.patches.chunk_system.level.ChunkSystemServerLevel)this.level).moonrise$getEntityLookup();;
 
@@ -951,6 +952,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
             }
             ((ca.spottedleaf.moonrise.patches.entity_tracker.EntityTrackerTrackedEntity)tracker).moonrise$clearPlayers();
         }
+        }); // Canvas
     }
     // Paper end - optimise entity tracker
 
@@ -1243,7 +1245,7 @@ public class ChunkMap extends ChunkStorage implements ChunkHolder.PlayerProvider
 
         public void updatePlayer(ServerPlayer player) {
             org.spigotmc.AsyncCatcher.catchOp("player tracker update"); // Spigot
-            if (player != this.entity) {
+            if (player != this.entity && player != null) { // Canvas
                 // Paper start - remove allocation of Vec3D here
                 // Vec3 vec3d = player.position().subtract(this.entity.position());
                 double vec3d_dx = player.getX() - this.entity.getX();
