From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Fri, 3 Jan 2025 02:43:50 -0800
Subject: [PATCH] Optimize InventoryChangeTrigger


diff --git a/src/main/java/io/github/dueris/canvas/Config.java b/src/main/java/io/github/dueris/canvas/Config.java
index 3eed4512592a6f958855c45979d7cbb1d169c722..5100aaef67376e907640a0df8c89cc75b99b8fcf 100644
--- a/src/main/java/io/github/dueris/canvas/Config.java
+++ b/src/main/java/io/github/dueris/canvas/Config.java
@@ -17,6 +17,7 @@ public class Config implements JsonConfig {
     public Pathfinding pathfinding = new Pathfinding();
     public EntityTracking entityTracking = new EntityTracking();
     public boolean enableAsyncSpawning = true;
+    public int skipTicksAdvancements = 3;
 
     public static Config init() {
         final JsonConfigAPI jsonConfigAPI = new JsonConfigAPI(true);
diff --git a/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java b/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
index ebbad97920df3d1645637e646a98e16cb04d361e..4590208f0fa47838cc96a122ec9fd8358d65c788 100644
--- a/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
+++ b/src/main/java/net/minecraft/advancements/critereon/InventoryChangeTrigger.java
@@ -2,6 +2,7 @@ package net.minecraft.advancements.critereon;
 
 import com.mojang.serialization.Codec;
 import com.mojang.serialization.codecs.RecordCodecBuilder;
+import io.github.dueris.canvas.Config;
 import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import java.util.List;
 import java.util.Map;
@@ -22,24 +23,45 @@ public class InventoryChangeTrigger extends SimpleCriterionTrigger<InventoryChan
         return InventoryChangeTrigger.TriggerInstance.CODEC;
     }
 
+    // Canvas start - optimize inventory change triggers via skip-ticks
+    private int ticksSkipped;
+
+    private boolean tryTick() {
+        int skipTicksAmount = Config.INSTANCE.skipTicksAdvancements;
+        if (skipTicksAmount <= 0)
+            return true;
+
+        this.ticksSkipped++;
+        if (this.ticksSkipped > skipTicksAmount) {
+            this.ticksSkipped = 0;
+            return true;
+        }
+
+        return false;
+    }
+
     public void trigger(ServerPlayer player, Inventory inventory, ItemStack stack) {
+        if (!this.tryTick())
+            return;
+
         int i = 0;
         int j = 0;
         int k = 0;
 
-        for (int l = 0; l < inventory.getContainerSize(); l++) {
-            ItemStack itemStack = inventory.getItem(l);
-            if (itemStack.isEmpty()) {
-                j++;
+        for (int l = 0; l < inventory.getContainerSize(); ++l) {
+            ItemStack itemstack = inventory.getItem(l);
+            if (itemstack.isEmpty()) {
+                ++j;
             } else {
-                k++;
-                if (itemStack.getCount() >= itemStack.getMaxStackSize()) {
-                    i++;
+                ++k;
+                if (itemstack.getCount() >= itemstack.getMaxStackSize()) {
+                    ++i;
                 }
             }
         }
 
         this.trigger(player, inventory, stack, i, j, k);
+    // Canvas end
     }
 
     private void trigger(ServerPlayer player, Inventory inventory, ItemStack stack, int full, int empty, int occupied) {
