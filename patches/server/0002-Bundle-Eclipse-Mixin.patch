From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Mon, 4 Nov 2024 19:55:29 -0800
Subject: [PATCH] Bundle Eclipse Mixin


diff --git a/src/main/java/io/github/dueris/canvas/plugin/EclipseProviderSource.java b/src/main/java/io/github/dueris/canvas/plugin/EclipseProviderSource.java
new file mode 100644
index 0000000000000000000000000000000000000000..f8388231f6cfce673b9ae5f2dcbad3b22e16adea
--- /dev/null
+++ b/src/main/java/io/github/dueris/canvas/plugin/EclipseProviderSource.java
@@ -0,0 +1,90 @@
+package io.github.dueris.canvas.plugin;
+
+import com.mojang.logging.LogUtils;
+import io.papermc.paper.plugin.entrypoint.Entrypoint;
+import io.papermc.paper.plugin.entrypoint.EntrypointHandler;
+import io.papermc.paper.plugin.entrypoint.LaunchEntryPointHandler;
+import io.papermc.paper.plugin.provider.PluginProvider;
+import io.papermc.paper.plugin.provider.source.FileProviderSource;
+import io.papermc.paper.plugin.provider.source.ProviderSource;
+import java.io.File;
+import java.net.URL;
+import java.net.URLConnection;
+import java.nio.file.Files;
+import java.nio.file.Path;
+import java.nio.file.StandardCopyOption;
+import java.util.concurrent.atomic.AtomicBoolean;
+import org.bukkit.plugin.java.JavaPlugin;
+import org.slf4j.Logger;
+
+public class EclipseProviderSource implements ProviderSource<Path, Path> {
+
+    public static final EclipseProviderSource INSTANCE = new EclipseProviderSource();
+    public static final String VERSION = "1.3.2";
+    public static final String DOWNLOAD_SOURCE = "https://cdn.modrinth.com/data/2ri1uTe6/versions/5qU0pLh5/eclipse-" + VERSION + "-all.jar";
+    private static final FileProviderSource FILE_PROVIDER_SOURCE = new FileProviderSource("File '%s' specified by Canvas"::formatted);
+    private static final Logger LOGGER = LogUtils.getClassLogger();
+
+    private static boolean hasEclipse() {
+        for (PluginProvider<JavaPlugin> provider : LaunchEntryPointHandler.INSTANCE.get(Entrypoint.PLUGIN).getRegisteredProviders()) {
+            if (provider.getMeta().getName().equalsIgnoreCase("eclipse")) {
+                return true;
+            }
+        }
+        try {
+            Class<?> boot = Class.forName("me.dueris.eclipse.ignite.IgniteBootstrap");
+            return ((AtomicBoolean) boot.getDeclaredField("BOOTED").get(null)).get();
+        } catch (ClassNotFoundException e) {
+            return false;
+        } catch (NoSuchFieldException | IllegalAccessException e) {
+            throw new RuntimeException("Unable to reflect into eclipse! Corrupted?", e);
+        } catch (LinkageError ignored) {
+        }
+        return true;
+    }
+
+    @Override
+    public Path prepareContext(final Path context) {
+        // Give server owners opportunity to disable eclipse
+        if (Boolean.getBoolean("Canvas.IReallyDontWantMixin") || hasEclipse()) {
+            return null;
+        }
+        LOGGER.info("Downloading and bundling Eclipse version '{}'...", VERSION);
+        try {
+            File file = context.toFile();
+            file.getParentFile().mkdirs();
+
+            if (!file.exists()) {
+
+                URLConnection urlConnection = new URL(DOWNLOAD_SOURCE).openConnection();
+                urlConnection.setReadTimeout(5000);
+                urlConnection.setConnectTimeout(5000);
+
+                // Update!
+                LOGGER.info("Updating bundled Eclipse version...");
+                Files.copy(urlConnection.getInputStream(), file.toPath(), StandardCopyOption.REPLACE_EXISTING);
+            }
+
+            // register Eclipse
+            System.setProperty("eclipse.isprovidercontext", "true");
+            return FILE_PROVIDER_SOURCE.prepareContext(context);
+        } catch (Throwable throwable) {
+            LOGGER.error("An unhandled exception occurred when attempting to load the Eclipse provider!", throwable);
+        }
+        return null;
+    }
+
+    @Override
+    public void registerProviders(final EntrypointHandler entrypointHandler, final Path context) throws Exception {
+        if (context == null) {
+            return;
+        }
+
+        try {
+            FILE_PROVIDER_SOURCE.registerProviders(entrypointHandler, context);
+        } catch (IllegalArgumentException ignored) {
+        } catch (Throwable throwable) {
+            LOGGER.error("Error loading Eclipse plugin!: {}", throwable.getMessage(), throwable);
+        }
+    }
+}
diff --git a/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java b/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
index 70413fddd23ca1165cb5090cce4fddcb1bbca93f..fd1b8de75e1dd6dca134e8ef486d25ca88266635 100644
--- a/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
+++ b/src/main/java/io/papermc/paper/plugin/PluginInitializerManager.java
@@ -111,6 +111,7 @@ public class PluginInitializerManager {
 
         // Register the default plugin directory
         io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(io.papermc.paper.plugin.provider.source.DirectoryProviderSource.INSTANCE, pluginSystem.pluginDirectoryPath());
+        io.papermc.paper.plugin.util.EntrypointUtil.registerProvidersFromSource(io.github.dueris.canvas.plugin.EclipseProviderSource.INSTANCE, new File("cache", "eclipse-{}.jar".replace("{}", io.github.dueris.canvas.plugin.EclipseProviderSource.VERSION)).toPath()); // Canvas - include Eclipse
 
         // Register plugins from the flag
         @SuppressWarnings("unchecked")
