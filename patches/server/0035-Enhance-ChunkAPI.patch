From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sun, 22 Oct 2023 13:16:37 -0700
Subject: [PATCH] Enhance ChunkAPI


diff --git a/src/main/java/com/dueris/canvas/CanvasConfig.java b/src/main/java/com/dueris/canvas/CanvasConfig.java
index 6ab31ffe2d10c9a3391fe9e10911baa8b9d408cf..caae656d62922a73fd7ee7c228261fb67e2613d6 100644
--- a/src/main/java/com/dueris/canvas/CanvasConfig.java
+++ b/src/main/java/com/dueris/canvas/CanvasConfig.java
@@ -170,10 +170,15 @@ public class CanvasConfig {
 
     public static boolean disableMixin = false;
     public static boolean obfuscateIps = false;
+    public static boolean bypassStartupCheck = false;
+
     private static void mixin(){
         disableMixin = getBoolean("mixin.disableMixins", disableMixin);
     }
     private static void logger(){
         obfuscateIps = getBoolean("logger.obfuscateIps", obfuscateIps);
     }
+    private static void general(){
+        bypassStartupCheck = getBoolean("bypassStartupCheck", bypassStartupCheck);
+    }
 }
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 1457a844a7304e41f3d11ffc4418541e0509a59d..f9bd0f45218c7d9648516f870a91be2e68f2ddac 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -209,11 +209,11 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         // Spigot end
         // Canvas start
         try {
-                CanvasConfig.init((java.io.File) options.valueOf("canvas-settings"));
-            } catch (Exception e) {
-                DedicatedServer.LOGGER.error("Unable to load canvas-server configuration", e);
-                return false;
-            }
+            CanvasConfig.init((java.io.File) options.valueOf("canvas-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load canvas-server configuration", e);
+            return false;
+        }
         // Canvas end
         // Paper start
         io.papermc.paper.util.ObfHelper.INSTANCE.getClass(); // Paper - load mappings for stacktrace deobf and etc.
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
index 41981307bc7d5bfce99f902290201ddd377dfc22..efe4cd2c703053ef7411f9176537f5e97760cf08 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftChunk.java
@@ -5,10 +5,16 @@ import com.google.common.base.Predicates;
 import com.mojang.serialization.Codec;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.HashMap;
+import java.util.List;
 import java.util.Objects;
+import java.util.Random;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.locks.LockSupport;
 import java.util.function.BooleanSupplier;
 import java.util.function.Predicate;
+import io.papermc.paper.math.Position;
 import net.minecraft.core.BlockPos;
 import net.minecraft.core.Holder;
 import net.minecraft.core.Registry;
@@ -17,6 +23,8 @@ import net.minecraft.core.registries.Registries;
 import net.minecraft.nbt.CompoundTag;
 import net.minecraft.nbt.NbtOps;
 import net.minecraft.server.level.ServerLevel;
+import net.minecraft.util.Mth;
+import net.minecraft.util.RandomSource;
 import net.minecraft.util.thread.ProcessorMailbox;
 import net.minecraft.world.level.ChunkPos;
 import net.minecraft.world.level.LightLayer;
@@ -26,6 +34,7 @@ import net.minecraft.world.level.chunk.ChunkAccess;
 import net.minecraft.world.level.chunk.ChunkStatus;
 import net.minecraft.world.level.chunk.DataLayer;
 import net.minecraft.world.level.chunk.ImposterProtoChunk;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.chunk.LevelChunkSection;
 import net.minecraft.world.level.chunk.PalettedContainer;
 import net.minecraft.world.level.chunk.PalettedContainerRO;
@@ -35,8 +44,11 @@ import net.minecraft.world.level.entity.PersistentEntitySectionManager;
 import net.minecraft.world.level.levelgen.Heightmap;
 import net.minecraft.world.level.levelgen.WorldgenRandom;
 import net.minecraft.world.level.lighting.LevelLightEngine;
+import org.bukkit.Bukkit;
 import org.bukkit.Chunk;
 import org.bukkit.ChunkSnapshot;
+import org.bukkit.Location;
+import org.bukkit.Material;
 import org.bukkit.World;
 import org.bukkit.block.Biome;
 import org.bukkit.block.Block;
@@ -45,9 +57,18 @@ import org.bukkit.block.data.BlockData;
 import org.bukkit.craftbukkit.block.CraftBiome;
 import org.bukkit.craftbukkit.block.CraftBlock;
 import org.bukkit.craftbukkit.block.data.CraftBlockData;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.entity.CraftPlayer;
+import org.bukkit.craftbukkit.generator.CraftChunkData;
+import org.bukkit.craftbukkit.generator.CustomChunkGenerator;
+import org.bukkit.craftbukkit.util.RandomSourceWrapper;
 import org.bukkit.entity.Entity;
+import org.bukkit.entity.Player;
+import org.bukkit.generator.ChunkGenerator;
+import org.bukkit.generator.WorldInfo;
 import org.bukkit.persistence.PersistentDataContainer;
 import org.bukkit.plugin.Plugin;
+import org.jetbrains.annotations.Nullable;
 
 public class CraftChunk implements Chunk {
     private final ServerLevel worldServer;
@@ -349,6 +370,72 @@ public class CraftChunk implements Chunk {
         return LoadLevel.values()[chunk.getFullStatus().ordinal()];
     }
 
+    // Canvas start
+    @Override
+    public void clearAllEntities() {
+        for(Entity entity : this.getEntities()){
+            CraftEntity craftEntity = (CraftEntity) entity;
+            craftEntity.getHandle().remove(net.minecraft.world.entity.Entity.RemovalReason.DISCARDED);
+        }
+    }
+
+    @Override
+    public List<Entity> getEntitiesInChunk() {
+        return Arrays.stream(getEntities()).toList();
+    }
+
+    @Override
+    public void replaceBlocksInChunk(final Material oldMat, final Material newMat) {
+        for (Block block : this.getBlocksInChunk()) {
+            if (block.getType() == oldMat) {
+                block.setType(newMat);
+            }
+        }
+    }
+
+    @Override
+    public void reloadChunk() {
+        this.unload(true);
+        this.load();
+    }
+
+    @Override
+    public void addEntityToChunk(final Entity entity) {
+        entity.spawnAt(this.getCenter());
+    }
+
+    @Override
+    public void addEntityToChunk(final Entity entity, final Location location) {
+        entity.spawnAt(location);
+    }
+
+    @Override
+    public Location getCenter() {
+        return this.getBlock(0, 0, 0).getLocation();
+    }
+
+    @Override
+    public Block[] getBlocksInChunk() {
+        World world = this.getWorld();
+        int chunkX = this.getX();
+        int chunkZ = this.getZ();
+
+        Block[] blocks = new Block[16 * 256 * 16];
+        int index = 0;
+
+        for (int x = 0; x < 16; x++) {
+            for (int y = 0; y < 256; y++) {
+                for (int z = 0; z < 16; z++) {
+                    Location blockLocation = new Location(world, chunkX * 16 + x, y, chunkZ * 16 + z);
+                    Block block = blockLocation.getBlock();
+                    blocks[index++] = block;
+                }
+            }
+        }
+        return blocks;
+    }
+    // Canvas end
+
     @Override
     public boolean equals(Object o) {
         if (this == o) return true;
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 22f5dfe81ef6d333e3d5903f77a3d0c35ec717c0..0ee05e3cee7f59ad6197c414620ff3ec6a2f6dd9 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -9,6 +9,7 @@ import java.util.Date;
 import java.util.List;
 import java.util.logging.Level;
 import java.util.logging.Logger;
+import com.dueris.canvas.CanvasConfig;
 import com.dueris.canvas.logger.CanvasLogger;
 import com.dueris.canvas.logger.CraftCanvasLogger;
 import com.mojang.logging.LogUtils;
@@ -30,10 +31,12 @@ public class Main {
 
     public static void main(String[] args) {
         // Canvas start - ensure loading canvas correctly
-        try {
-            Class.forName("space.vectrix.ignite.applaunch.IgniteBootstrap");
-        } catch (ClassNotFoundException e) {
-            throw new RuntimeException("Unable to start Canvas, please use the Canvas Launcher");
+        if(!CanvasConfig.bypassStartupCheck){
+            try {
+                Class.forName("space.vectrix.ignite.applaunch.IgniteBootstrap");
+            } catch (ClassNotFoundException e) {
+                throw new RuntimeException("Unable to start Canvas, please use the Canvas Launcher");
+            }
         }
         // Canvas end -/- Paper start
         final String warnWhenLegacyFormattingDetected = String.join(".", "net", "kyori", "adventure", "text", "warnWhenLegacyFormattingDetected");
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 74b80df6c08a0a27481ee3430418e6d3397f8b80..9ead4b6af6dcc75880dc9b3b930086133bfc33ea 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -102,6 +102,7 @@ import net.minecraft.world.phys.Vec3;
 import org.bukkit.BanEntry;
 import org.bukkit.BanList;
 import org.bukkit.Bukkit;
+import org.bukkit.Chunk;
 import org.bukkit.DyeColor;
 import org.bukkit.Effect;
 import org.bukkit.GameMode;
@@ -2932,6 +2933,30 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return false;
     }
 
+    @Override
+    public Chunk[] getChunksInRenderDistance() {
+        int viewDistance = this.getClientViewDistance();
+        int playerChunkX = this.getLocation().getChunk().getX();
+        int playerChunkZ = this.getLocation().getChunk().getZ();
+
+        int startChunkX = playerChunkX - viewDistance;
+        int endChunkX = playerChunkX + viewDistance;
+        int startChunkZ = playerChunkZ - viewDistance;
+        int endChunkZ = playerChunkZ + viewDistance;
+
+        Chunk[] chunksInPlayerView = new Chunk[(endChunkX - startChunkX + 1) * (endChunkZ - startChunkZ + 1)];
+        int index = 0;
+
+        for (int x = startChunkX; x <= endChunkX; x++) {
+            for (int z = startChunkZ; z <= endChunkZ; z++) {
+                chunksInPlayerView[index] = this.getWorld().getChunkAt(x, z);
+                index++;
+            }
+        }
+
+        return chunksInPlayerView;
+    }
+
     @Override
     public void deleteMessage(net.kyori.adventure.chat.SignedMessage.Signature signature) {
         if (getHandle().connection == null) return;
diff --git a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
index d46ccc3b3aaacf937631a44a7e0f91b793a83c86..d0b99243e1ad1dd149663e94a9af23b790b19a99 100644
--- a/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
+++ b/src/main/java/org/bukkit/craftbukkit/generator/CustomChunkGenerator.java
@@ -97,7 +97,7 @@ public class CustomChunkGenerator extends InternalChunkGenerator {
         return this.delegate;
     }
 
-    private static WorldgenRandom getSeededRandom() {
+    public static WorldgenRandom getSeededRandom() {
         return new WorldgenRandom(new LegacyRandomSource(0));
     }
 
