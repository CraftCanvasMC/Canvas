From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sun, 18 Feb 2024 15:59:13 -0800
Subject: [PATCH] Silent Command Sender


diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 19f1b465801e825d5e2d880c1d51d7bf0008a6b5..6acc225e08daa6fdd3bceed7b2ce9bba19930fb1 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -43,11 +43,20 @@ import java.util.Optional;
 import java.util.Set;
 import java.util.UUID;
 import java.util.function.Consumer;
+import java.util.function.Predicate;
 import java.util.logging.Level;
 import java.util.logging.Logger;
 import java.util.stream.Collectors;
 import javax.imageio.ImageIO;
 // import jline.console.ConsoleReader;
+import net.kyori.adventure.audience.Audience;
+import net.kyori.adventure.chat.ChatType;
+import net.kyori.adventure.chat.SignedMessage;
+import net.kyori.adventure.identity.Identified;
+import net.kyori.adventure.identity.Identity;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.ComponentLike;
+import net.kyori.adventure.util.TriState;
 import net.minecraft.advancements.AdvancementHolder;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.commands.Commands;
@@ -246,6 +255,8 @@ import org.bukkit.packs.DataPackManager;
 import org.bukkit.packs.ResourcePack;
 import org.bukkit.permissions.Permissible;
 import org.bukkit.permissions.Permission;
+import org.bukkit.permissions.PermissionAttachment;
+import org.bukkit.permissions.PermissionAttachmentInfo;
 import org.bukkit.plugin.Plugin;
 import org.bukkit.plugin.PluginLoadOrder;
 import org.bukkit.plugin.PluginManager;
@@ -735,6 +746,198 @@ public final class CraftServer implements Server {
     public me.dueris.canvas.world.time.TimeManager getTimeManager(){
         return new me.dueris.canvas.world.time.CraftTimeManager();
     }
+
+    public static class SilentCommandSender implements CommandSender{
+        @Override
+        public void sendMessage(@NotNull String message) {
+
+        }
+
+        @Override
+        public void sendMessage(@NotNull String... messages) {
+
+        }
+
+        @Override
+        public void sendMessage(@Nullable UUID sender, @NotNull String message) {
+
+        }
+
+        @Override
+        public void sendMessage(@Nullable UUID sender, @NotNull String... messages) {
+
+        }
+
+        @Override
+        public @NotNull Server getServer() {
+            return null;
+        }
+
+        @Override
+        public @NotNull String getName() {
+            return null;
+        }
+
+        @Override
+        public @NotNull Spigot spigot() {
+            return null;
+        }
+
+        @Override
+        public @NotNull Component name() {
+            return null;
+        }
+
+        @Override
+        public void sendRichMessage(@NotNull String message) {
+            CommandSender.super.sendRichMessage(message);
+        }
+
+        @Override
+        public void sendPlainMessage(@NotNull String message) {
+            CommandSender.super.sendPlainMessage(message);
+        }
+
+        @Override
+        public boolean isPermissionSet(@NotNull String name) {
+            return false;
+        }
+
+        @Override
+        public boolean isPermissionSet(@NotNull Permission perm) {
+            return false;
+        }
+
+        @Override
+        public boolean hasPermission(@NotNull String name) {
+            return false;
+        }
+
+        @Override
+        public boolean hasPermission(@NotNull Permission perm) {
+            return false;
+        }
+
+        @Override
+        public @NotNull PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value) {
+            return null;
+        }
+
+        @Override
+        public @NotNull PermissionAttachment addAttachment(@NotNull Plugin plugin) {
+            return null;
+        }
+
+        @Override
+        public @Nullable PermissionAttachment addAttachment(@NotNull Plugin plugin, @NotNull String name, boolean value, int ticks) {
+            return null;
+        }
+
+        @Override
+        public @Nullable PermissionAttachment addAttachment(@NotNull Plugin plugin, int ticks) {
+            return null;
+        }
+
+        @Override
+        public void removeAttachment(@NotNull PermissionAttachment attachment) {
+
+        }
+
+        @Override
+        public void recalculatePermissions() {
+
+        }
+
+        @Override
+        public @NotNull Set<PermissionAttachmentInfo> getEffectivePermissions() {
+            return null;
+        }
+
+        @Override
+        public @NotNull TriState permissionValue(@NotNull Permission permission) {
+            return CommandSender.super.permissionValue(permission);
+        }
+
+        @Override
+        public @NotNull TriState permissionValue(@NotNull String permission) {
+            return CommandSender.super.permissionValue(permission);
+        }
+
+        @Override
+        public boolean isOp() {
+            return false;
+        }
+
+        @Override
+        public void setOp(boolean value) {
+
+        }
+
+        @Override
+        public @NotNull Audience filterAudience(@NotNull Predicate<? super Audience> filter) {
+            return CommandSender.super.filterAudience(filter);
+        }
+
+        @Override
+        public void forEachAudience(@NotNull Consumer<? super Audience> action) {
+            CommandSender.super.forEachAudience(action);
+        }
+
+        @Override
+        public void sendMessage(@NotNull ComponentLike message) {
+            CommandSender.super.sendMessage(message);
+        }
+
+        @Override
+        public void sendMessage(@NotNull Component message) {
+            CommandSender.super.sendMessage(message);
+        }
+
+        @Override
+        public void sendMessage(@NotNull Identified source, @NotNull ComponentLike message) {
+            CommandSender.super.sendMessage(source, message);
+        }
+
+        @Override
+        public void sendMessage(@NotNull Identity source, @NotNull ComponentLike message) {
+            CommandSender.super.sendMessage(source, message);
+        }
+
+        @Override
+        public void sendMessage(@NotNull Identified source, @NotNull Component message) {
+            CommandSender.super.sendMessage(source, message);
+        }
+
+        @Override
+        public void sendMessage(@NotNull Identity source, @NotNull Component message) {
+            CommandSender.super.sendMessage(source, message);
+        }
+
+        @Override
+        public void sendMessage(@NotNull Component message, ChatType.@NotNull Bound boundChatType) {
+            CommandSender.super.sendMessage(message, boundChatType);
+        }
+
+        @Override
+        public void sendMessage(@NotNull ComponentLike message, ChatType.@NotNull Bound boundChatType) {
+            CommandSender.super.sendMessage(message, boundChatType);
+        }
+
+        @Override
+        public void sendMessage(@NotNull SignedMessage signedMessage, ChatType.@NotNull Bound boundChatType) {
+            CommandSender.super.sendMessage(signedMessage, boundChatType);
+        }
+
+        @Override
+        public void deleteMessage(@NotNull SignedMessage signedMessage) {
+            CommandSender.super.deleteMessage(signedMessage);
+        }
+
+        @Override
+        public void deleteMessage(SignedMessage.@NotNull Signature signature) {
+            CommandSender.super.deleteMessage(signature);
+        }
+    }
     // Canvas end
 
     @Override
