From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris MC <purplewolf.mc1@gmail.com>
Date: Wed, 22 Nov 2023 01:50:11 +0000
Subject: [PATCH] Add BiomeSource Javadocs


diff --git a/src/main/java/io/github/dueris/biome/BiomeSource.java b/src/main/java/io/github/dueris/biome/BiomeSource.java
index dfa12006bcdd3371ccf43cc820b67ff262456678..26813d973eb3da3478858e932713a4d438677d0a 100644
--- a/src/main/java/io/github/dueris/biome/BiomeSource.java
+++ b/src/main/java/io/github/dueris/biome/BiomeSource.java
@@ -7,37 +7,124 @@ import org.bukkit.World;
 
 import java.util.Optional;
 
+/**
+ * Represents a source of biome-related information.
+ */
 public interface BiomeSource {
 
+    /**
+     * Retrieves the key associated with this biome.
+     *
+     * @return The key associated with this biome.
+     */
     public NamespacedKey getKey();
 
-	public float getTemperature();
-
+    /**
+     * Retrieves the temperature of the biome.
+     *
+     * @return The temperature of the biome.
+     */
+    public float getTemperature();
+
+    /**
+     * Retrieves the Bukkit biome representation for this biome source.
+     *
+     * @return The Bukkit biome representation for this biome source.
+     */
     public org.bukkit.block.Biome getBukkitBiome();
 
+    /**
+     * Retrieves the amount of precipitation in the biome.
+     *
+     * @return The amount of precipitation in the biome.
+     */
     public float getDownfall();
 
+    /**
+     * Checks if the biome has precipitation (rain, snow, etc.).
+     *
+     * @return True if the biome has precipitation, false otherwise.
+     */
     public boolean hasPrecipitation();
 
+    /**
+     * Checks if the biome is frozen.
+     *
+     * @return True if the biome is frozen, false otherwise.
+     */
     public boolean isFrozen();
 
+    /**
+     * Retrieves the color of the sky in this biome.
+     *
+     * @return The color of the sky in this biome.
+     */
     public int getSkyColor();
 
+    /**
+     * Retrieves the color of the grass at the given coordinates within the specified world.
+     *
+     * @param world The world where the grass color needs to be determined.
+     * @param x     The x-coordinate.
+     * @param y     The y-coordinate.
+     * @param z     The z-coordinate.
+     * @return The color of the grass at the specified coordinates.
+     */
     public int getGrassColor(World world, double x, double y, double z);
 
+    /**
+     * Retrieves the color of the foliage in this biome.
+     *
+     * @return The color of the foliage in this biome.
+     */
     public int getFoliageColor();
 
+    /**
+     * Retrieves the base temperature of the biome.
+     *
+     * @return The base temperature of the biome.
+     */
     public float getBaseTemperature();
 
+    /**
+     * Retrieves the color of the water in this biome.
+     *
+     * @return The color of the water in this biome.
+     */
     public int getWaterColor();
 
+    /**
+     * Retrieves the color of the water fog in this biome.
+     *
+     * @return The color of the water fog in this biome.
+     */
     public int getWaterFogColor();
 
+    /**
+     * Retrieves the probability of creatures spawning in this biome.
+     *
+     * @return The probability of creatures spawning in this biome.
+     */
     public float getCreatureProbability();
 
+    /**
+     * Retrieves an optional background music associated with this biome.
+     *
+     * @return An optional background music associated with this biome.
+     */
     public Optional<Sound> getBackgroundMusic();
 
+    /**
+     * Retrieves an optional ambient particle for this biome.
+     *
+     * @return An optional ambient particle for this biome.
+     */
     public Optional<Particle> getAmbientParticle();
 
+    /**
+     * Retrieves an optional ambient loop sound for this biome.
+     *
+     * @return An optional ambient loop sound for this biome.
+     */
     public Optional<Sound> getAmbientLoop();
-}
\ No newline at end of file
+}
