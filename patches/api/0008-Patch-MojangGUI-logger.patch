From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sun, 22 Oct 2023 18:06:13 -0700
Subject: [PATCH] Patch MojangGUI logger


diff --git a/src/main/java/com/dueris/canvas/CraftServerGui.java b/src/main/java/com/dueris/canvas/CraftServerGui.java
index 611e0795d5fe9cee5efd7fd21b393d33d7bc4fbe..e2b37949653ee1bcee2beec3e450ca72bb10d33f 100644
--- a/src/main/java/com/dueris/canvas/CraftServerGui.java
+++ b/src/main/java/com/dueris/canvas/CraftServerGui.java
@@ -113,4 +113,14 @@ public class CraftServerGui extends JComponent implements MojangServerGui {
     public Font getGuiFont() {
         return null;
     }
+
+    @Override
+    public void removePanel(JComponent jComponent) {
+
+    }
+
+    @Override
+    public void setIconFromResources(String fileName, Class mainClass) {
+
+    }
 }
diff --git a/src/main/java/com/dueris/canvas/MojangServerGui.java b/src/main/java/com/dueris/canvas/MojangServerGui.java
index 6812e0d0b86f09771b5ecf31bba19bc2238a34a4..9e3aabf1df8ce15b4f37e24b0b28225e30b654e0 100644
--- a/src/main/java/com/dueris/canvas/MojangServerGui.java
+++ b/src/main/java/com/dueris/canvas/MojangServerGui.java
@@ -9,57 +9,194 @@ import javax.swing.plaf.ComponentUI;
 import java.awt.*;
 import java.awt.event.WindowListener;
 import java.awt.image.ColorModel;
+import java.io.IOException;
 import java.util.Collection;
 import java.util.HashMap;
+import java.util.Objects;
 import java.util.concurrent.atomic.AtomicBoolean;
 
 public interface MojangServerGui {
-
+    /**
+     * Adds a Swing component to the GUI with the specified constraints.
+     *
+     * @param jComponent   The Swing component to add.
+     * @param constraints  The constraints for placing the component.
+     */
     public void addPanel(JComponent jComponent, String constraints);
 
+    /**
+     * Retrieves the Mojang chat panel.
+     *
+     * @return The Mojang chat panel as a Swing component.
+     */
     public JComponent getMojangChatPanel();
 
+    /**
+     * Retrieves the Mojang info panel.
+     *
+     * @return The Mojang info panel as a Swing component.
+     */
     public JComponent getMojangInfoPanel();
 
+    /**
+     * Adds a dynamic title to the GUI based on the given condition.
+     *
+     * @param condition  The condition that determines which title to display.
+     * @param falseT     The title to display when the condition is false.
+     * @param trueT      The title to display when the condition is true.
+     */
     public void addDynamicTitle(boolean condition, String falseT, String trueT);
 
+    /**
+     * Retrieves the font used in the GUI.
+     *
+     * @return The font used in the GUI.
+     */
     public Font getFont();
 
+    /**
+     * Retrieves the current title of the GUI.
+     *
+     * @return The current title of the GUI.
+     */
     public String getTitle();
 
+    /**
+     * Retrieves the title to be displayed when the GUI is shutting down.
+     *
+     * @return The title displayed when the GUI is shutting down.
+     */
     public String getShutdownTitle();
 
+    /**
+     * Sets the icon of the GUI.
+     *
+     * @param icon  The image to set as the GUI's icon.
+     */
     public void setIcon(Image icon);
 
+    /**
+     * Retrieves the JFrame associated with the GUI.
+     *
+     * @return The JFrame of the GUI.
+     */
     public JFrame getJFrame();
 
+    /**
+     * Sets the visibility of the GUI.
+     *
+     * @param visible  true to make the GUI visible, false to hide it.
+     */
     public void setVisible(boolean visible);
 
+    /**
+     * Adds a window listener to the GUI.
+     *
+     * @param windowListener  The WindowListener to add to the GUI.
+     */
     public void addWindowListener(WindowListener windowListener);
 
+    /**
+     * Retrieves an AtomicBoolean indicating whether the GUI is closing.
+     *
+     * @return An AtomicBoolean indicating if the GUI is in the process of closing.
+     */
     public AtomicBoolean getIsClosing();
 
+    /**
+     * Retrieves a collection of finalizers.
+     *
+     * @return A collection of Runnable finalizers.
+     */
     public Collection<Runnable> getFinalizers();
 
+    /**
+     * Retrieves the chat history.
+     *
+     * @return A LinkedList of chat history messages.
+     */
     public java.util.LinkedList<String> getHistory();
 
+    /**
+     * Retrieves the icon of the GUI.
+     *
+     * @return The icon of the GUI as an image.
+     */
     public Image getIcon();
 
+    /**
+     * Retrieves the current index in the chat history.
+     *
+     * @return The index in the chat history.
+     */
     public int getHistoryIndex();
 
+    /**
+     * Retrieves a mapping of Swing components to their constraints.
+     *
+     * @return A HashMap mapping Swing components to their constraints.
+     */
     public HashMap<JComponent, String> getPanels();
 
+    /**
+     * Sets the current command in the GUI.
+     *
+     * @param currentCommand  The current command to set.
+     */
     public void setCurrentCommand(final String currentCommand);
 
+    /**
+     * Retrieves the current command in the GUI.
+     *
+     * @return The current command in the GUI.
+     */
     public String getCurrentCommand();
 
+    /**
+     * Sets the title to be displayed when the GUI is shutting down.
+     *
+     * @param title  The title to display when the GUI is shutting down.
+     */
     public void setShutdownTitle(String title);
 
+    /**
+     * Sets the maximum limit for chat history.
+     *
+     * @param max  The maximum number of chat history messages to retain.
+     */
     public void setHistoryLimit(int max);
 
+    /**
+     * Updates the appearance of the GUI frame.
+     */
     public void updateFrame();
 
+    /**
+     * Retrieves the font used in the GUI.
+     *
+     * @return The GUI font.
+     */
     public Font getGuiFont();
 
+    /**
+     * Sets the font used in the GUI.
+     *
+     * @param font  The font to set for the GUI.
+     */
     public void setFont(Font font);
+
+    /**
+     * Removes a Swing component from the GUI.
+     *
+     * @param jComponent  The Swing component to remove.
+     */
+    public void removePanel(JComponent jComponent);
+
+    /**
+     * Sets the icon of the GUI from resources with the specified file name and main class.
+     *
+     * @param fileName    The name of the icon file in resources.
+     * @param mainClass   The main class used to access resources.
+     */
+    public void setIconFromResources(String fileName, Class mainClass);
 }
