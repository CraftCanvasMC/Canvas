From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris MC <purplewolf.mc1@gmail.com>
Date: Wed, 22 Nov 2023 01:46:15 +0000
Subject: [PATCH] Add BiomeSource API


diff --git a/src/main/java/io/github/dueris/canvas/biome/BiomeSource.java b/src/main/java/io/github/dueris/canvas/biome/BiomeSource.java
new file mode 100644
index 0000000000000000000000000000000000000000..bb8bcaf0c4779350728f5189df416d683d4913e8
--- /dev/null
+++ b/src/main/java/io/github/dueris/canvas/biome/BiomeSource.java
@@ -0,0 +1,130 @@
+package io.github.dueris.canvas.biome;
+
+import org.bukkit.NamespacedKey;
+import org.bukkit.Particle;
+import org.bukkit.Sound;
+import org.bukkit.World;
+
+import java.util.Optional;
+
+/**
+ * Represents a source of biome-related information.
+ */
+public interface BiomeSource {
+
+    /**
+     * Retrieves the key associated with this biome.
+     *
+     * @return The key associated with this biome.
+     */
+    public NamespacedKey getKey();
+
+    /**
+     * Retrieves the temperature of the biome.
+     *
+     * @return The temperature of the biome.
+     */
+    public float getTemperature();
+
+    /**
+     * Retrieves the Bukkit biome representation for this biome source.
+     *
+     * @return The Bukkit biome representation for this biome source.
+     */
+    public org.bukkit.block.Biome getBukkitBiome();
+
+    /**
+     * Retrieves the amount of precipitation in the biome.
+     *
+     * @return The amount of precipitation in the biome.
+     */
+    public float getDownfall();
+
+    /**
+     * Checks if the biome has precipitation (rain, snow, etc.).
+     *
+     * @return True if the biome has precipitation, false otherwise.
+     */
+    public boolean hasPrecipitation();
+
+    /**
+     * Checks if the biome is frozen.
+     *
+     * @return True if the biome is frozen, false otherwise.
+     */
+    public boolean isFrozen();
+
+    /**
+     * Retrieves the color of the sky in this biome.
+     *
+     * @return The color of the sky in this biome.
+     */
+    public int getSkyColor();
+
+    /**
+     * Retrieves the color of the grass at the given coordinates within the specified world.
+     *
+     * @param world The world where the grass color needs to be determined.
+     * @param x     The x-coordinate.
+     * @param y     The y-coordinate.
+     * @param z     The z-coordinate.
+     * @return The color of the grass at the specified coordinates.
+     */
+    public int getGrassColor(World world, double x, double y, double z);
+
+    /**
+     * Retrieves the color of the foliage in this biome.
+     *
+     * @return The color of the foliage in this biome.
+     */
+    public int getFoliageColor();
+
+    /**
+     * Retrieves the base temperature of the biome.
+     *
+     * @return The base temperature of the biome.
+     */
+    public float getBaseTemperature();
+
+    /**
+     * Retrieves the color of the water in this biome.
+     *
+     * @return The color of the water in this biome.
+     */
+    public int getWaterColor();
+
+    /**
+     * Retrieves the color of the water fog in this biome.
+     *
+     * @return The color of the water fog in this biome.
+     */
+    public int getWaterFogColor();
+
+    /**
+     * Retrieves the probability of creatures spawning in this biome.
+     *
+     * @return The probability of creatures spawning in this biome.
+     */
+    public float getCreatureProbability();
+
+    /**
+     * Retrieves an optional background music associated with this biome.
+     *
+     * @return An optional background music associated with this biome.
+     */
+    public Optional<Sound> getBackgroundMusic();
+
+    /**
+     * Retrieves an optional ambient particle for this biome.
+     *
+     * @return An optional ambient particle for this biome.
+     */
+    public Optional<Particle> getAmbientParticle();
+
+    /**
+     * Retrieves an optional ambient loop sound for this biome.
+     *
+     * @return An optional ambient loop sound for this biome.
+     */
+    public Optional<Sound> getAmbientLoop();
+}
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 6732782f7a3ff87a8d477c73166ac325b6154bc7..bcdb863ebb45ddbab586c3445aea1aba63a5d2cf 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -831,6 +831,14 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
     @Deprecated // Paper
     @NotNull
     public ItemStack createExplorerMap(@NotNull World world, @NotNull Location location, @NotNull StructureType structureType);
+    // Canvas start
+
+    /**
+     * Gets the biome source from an org.bukkit Biome
+     */
+    @NotNull
+    public io.github.dueris.canvas.biome.BiomeSource getBiomeSource(org.bukkit.NamespacedKey key);
+    // Canvas end
 
     /**
      * Create a new explorer map targeting the closest nearby structure of a
diff --git a/src/main/java/org/bukkit/block/Biome.java b/src/main/java/org/bukkit/block/Biome.java
index 5d8fa5b39a5d50cca48ba63af3a84b80f279b649..20df5595262796f0b5a7fcac5aeb2ada0739370e 100644
--- a/src/main/java/org/bukkit/block/Biome.java
+++ b/src/main/java/org/bukkit/block/Biome.java
@@ -96,4 +96,10 @@ public enum Biome implements Keyed, net.kyori.adventure.translation.Translatable
         return "biome.minecraft." + this.key.getKey();
     }
     // Paper end
+    // Canvas start - more biome api
+
+    public io.github.dueris.canvas.biome.BiomeSource getBiomeMetaSource(){
+        return org.bukkit.Bukkit.getServer().getBiomeSource(this.getKey());
+    }
+    // Canvas end
 }
