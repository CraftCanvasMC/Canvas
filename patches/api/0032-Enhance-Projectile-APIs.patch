From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sat, 18 Nov 2023 14:57:28 -0800
Subject: [PATCH] Enhance Projectile APIs


diff --git a/src/main/java/me/dueris/canvas/event/item/EyeOfEnderTryBreakEvent.java b/src/main/java/me/dueris/canvas/event/item/EyeOfEnderTryBreakEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..07af60f17e98a834910baa447db3e36674e1e48e
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/event/item/EyeOfEnderTryBreakEvent.java
@@ -0,0 +1,53 @@
+package me.dueris.canvas.event.item;
+
+import org.bukkit.Location;
+import org.bukkit.event.Event;
+import org.bukkit.event.HandlerList;
+import org.jetbrains.annotations.NotNull;
+
+public class EyeOfEnderTryBreakEvent extends Event {
+    public static final HandlerList HANDLER_LIST = new HandlerList();
+    private Location location;
+    private boolean broke;
+    private boolean canceled;
+
+    public EyeOfEnderTryBreakEvent(boolean broke, Location location) {
+        this.broke = broke;
+        this.location = location;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return HANDLER_LIST;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return HANDLER_LIST;
+    }
+
+    public boolean isCanceled(){
+        return canceled;
+    }
+
+    public void setCanceled(boolean canceled){
+        this.canceled = canceled;
+    }
+
+    public Location getLocation() {
+        return location;
+    }
+
+    public void setLocation(final Location location) {
+        this.location = location;
+    }
+
+    public boolean getShouldBreak(){
+        return broke;
+    }
+
+    public void setShouldBreak(boolean broke){
+        this.broke = broke;
+    }
+}
diff --git a/src/main/java/org/bukkit/entity/DragonFireball.java b/src/main/java/org/bukkit/entity/DragonFireball.java
index 6c475a3723721b33bb7709d8c1bbf487a10f9bbe..2d226fa7980861600f2f3365d78a5d796400747e 100644
--- a/src/main/java/org/bukkit/entity/DragonFireball.java
+++ b/src/main/java/org/bukkit/entity/DragonFireball.java
@@ -1,3 +1,45 @@
 package org.bukkit.entity;
 
-public interface DragonFireball extends Fireball {}
+public interface DragonFireball extends Fireball {
+    // Canvas start
+
+    /**
+     * Sets the effect cloud radius of the fireball
+     * @param radius
+     */
+    public void setEffectRadius(float radius);
+
+    /**
+     * Retrieves the effect cloud radius of the fireball
+     *
+     * @return float value of the effect cloud radius
+     */
+    public float getEffectRadius();
+
+    /**
+     * Gets the effect cloud amplifier for the fireball
+     *
+     * @return int value of the effect cloud amplifier
+     */
+    public int getCloudAmplifier();
+
+    /**
+     * Sets the effect cloud amplifier
+     * @param cloudAmplifier
+     */
+    public void setCloudAmplifier(int cloudAmplifier);
+
+    /**
+     * Retrieves how long the cloud will remain before despawning
+     *
+     * @return int value of the amount of time in ticks for how long it takes to despawn
+     */
+    public int getCloudDuration();
+
+    /**
+     * Sets the int value of how long it will take for the cloud to despawn
+     * @param duration
+     */
+    public void setCloudDuration(int duration);
+    // Canvas end
+}
diff --git a/src/main/java/org/bukkit/entity/EvokerFangs.java b/src/main/java/org/bukkit/entity/EvokerFangs.java
index 7d5f9ccbd1bab0b959e84e0dbc31c761f96029b0..86bb62f40c16074f0a240fc918606780e20b7c18 100644
--- a/src/main/java/org/bukkit/entity/EvokerFangs.java
+++ b/src/main/java/org/bukkit/entity/EvokerFangs.java
@@ -35,4 +35,20 @@ public interface EvokerFangs extends Entity {
      * @param delay the delay, must be positive
      */
     void setAttackDelay(int delay);
+    // Canvas start
+
+    /**
+     * Gets the damage the fangs will inflict upon the
+     * target entity
+     *
+     * @return the damage value for the fangs
+     */
+    public float getFangDamage();
+
+    /**
+     * Sets the damage the fangs will inflict upon the target
+     * @param fangDamage
+     */
+    public void setFangDamage(float fangDamage);
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Firework.java b/src/main/java/org/bukkit/entity/Firework.java
index 217d348ad0bbef720b25d3b507a55ca8105b7731..c60fb9c53babd3028a393c50b92292f68b69d69f 100644
--- a/src/main/java/org/bukkit/entity/Firework.java
+++ b/src/main/java/org/bukkit/entity/Firework.java
@@ -96,6 +96,14 @@ public interface Firework extends Projectile {
      * remaining fuse.
      */
     void detonate();
+    // Canvas start - why not just call the nms method for exploding it lol
+
+    /**
+     * Does the same as the "detonate()" method, but uses the nms explode method
+     * instead of setting the life of the firework to 1 tick
+     */
+    void explode();
+    // Canvas end
 
     /**
      * Check whether or not this firework has detonated.
diff --git a/src/main/java/org/bukkit/entity/FishHook.java b/src/main/java/org/bukkit/entity/FishHook.java
index 6ed83d3e4d23e0dc0e1b156a1ee221aaba5c7210..465c63125cfe9afb49d5c172a1f0785051d78cae 100644
--- a/src/main/java/org/bukkit/entity/FishHook.java
+++ b/src/main/java/org/bukkit/entity/FishHook.java
@@ -224,6 +224,15 @@ public interface FishHook extends Projectile {
      */
     @Deprecated
     public void setBiteChance(double chance) throws IllegalArgumentException;
+    // Canvas start
+
+    /**
+     * Retrieves if an entity is biting the hook
+     *
+     * @return an entity is biting the hook
+     */
+    public boolean isBiting();
+    // Canvas end
 
     /**
      * Check whether or not this fish hook is in open water.
diff --git a/src/main/java/org/bukkit/entity/Trident.java b/src/main/java/org/bukkit/entity/Trident.java
index d21df39ceef657575f3c2e9070bf6d2671978c7a..778ab17b3194bcaff8cd69629cc0bad6501150bb 100644
--- a/src/main/java/org/bukkit/entity/Trident.java
+++ b/src/main/java/org/bukkit/entity/Trident.java
@@ -75,5 +75,35 @@ public interface Trident extends AbstractArrow, ThrowableProjectile {
      * @return base damage amount
      */
     double getDamage();
+    // Canvas start
+
+    /**
+     * Gets if the trident has the channeling effect or
+     * is forced to use the channeling effect
+     *
+     * @return boolean for if it should summon lightning upon hitting something
+     */
+    public boolean getChanneling();
+
+    /**
+     * Sets if the trident should be forced to summon
+     * lightning upon hitting something
+     *
+     * @param force
+     */
+    public void forceChanneling(boolean force);
+
+    /**
+     * Gets the inertia while underwater
+     * @return the inertia of the trident while underwater
+     */
+    public float getWaterInertia();
+
+    /**
+     * Sets the inertia while underwater
+     * @param inertia
+     */
+    public void setWaterInertia(float inertia);
+    // Canvas end
 }
 // Paper end
