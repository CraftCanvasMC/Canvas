From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <159172167+PurpleWolfMC@users.noreply.github.com>
Date: Wed, 7 Feb 2024 07:02:44 +0000
Subject: [PATCH] More Entity API


diff --git a/src/main/java/io/papermc/paper/entity/SchoolableFish.java b/src/main/java/io/papermc/paper/entity/SchoolableFish.java
index 39ad7d283609d7e427a2ab35b6fad839e032fe92..19b28ee412a2cef1241054e71b7e6970842824bb 100644
--- a/src/main/java/io/papermc/paper/entity/SchoolableFish.java
+++ b/src/main/java/io/papermc/paper/entity/SchoolableFish.java
@@ -44,4 +44,8 @@ public interface SchoolableFish extends Fish {
     @Nullable
     SchoolableFish getSchoolLeader();
 
+    public void moveToLeader();
+
+    public boolean inRangeOfLeader();
+
 }
diff --git a/src/main/java/me/dueris/canvas/entity/MobType.java b/src/main/java/me/dueris/canvas/entity/MobType.java
new file mode 100644
index 0000000000000000000000000000000000000000..fa3f622fe7804ca2303f66180617fdbd558b7ea0
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/entity/MobType.java
@@ -0,0 +1,9 @@
+package me.dueris.canvas.entity;
+
+public enum MobType {
+    UNDEFINED,
+    WATER,
+    UNDEAD,
+    ARTHROPOD,
+    ILLAGER;
+}
diff --git a/src/main/java/org/bukkit/entity/AbstractHorse.java b/src/main/java/org/bukkit/entity/AbstractHorse.java
index 8b1048c94dffd058eb9fd9144f7f59fc9bd219ad..e8af83c57e8279fee2d8f673b7c3a0ee35a54904 100644
--- a/src/main/java/org/bukkit/entity/AbstractHorse.java
+++ b/src/main/java/org/bukkit/entity/AbstractHorse.java
@@ -172,5 +172,26 @@ public interface AbstractHorse extends Vehicle, InventoryHolder, Tameable {
      * @param eating eating animation is active
      */
     public void setEating(boolean eating);
-    // Paper end - Horse API
+    // Paper end - Horse API -/- Canvas start
+    /**
+     * Attempts to make this entity angry. The success of this action may vary based on the entity type.
+     */
+    void tryMakeAngry();
+
+    /**
+     * Causes the entity to run around in a hyperactive or erratic manner, displaying unusual behavior.
+     */
+    void runAroundLikeCrazy();
+
+    /**
+     * Checks if this horse is saddled.
+     *
+     * @return {@code true} if the entity is saddled, {@code false} otherwise.
+     */
+    boolean isSaddled();
+    
+    public void zombify();
+    
+    public void skeletonify();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Allay.java b/src/main/java/org/bukkit/entity/Allay.java
index e5e79202b97172efae31031c9c86808b9a268ce5..60dec25823e8c46d3720be23df50c17d86b10cae 100644
--- a/src/main/java/org/bukkit/entity/Allay.java
+++ b/src/main/java/org/bukkit/entity/Allay.java
@@ -3,6 +3,7 @@ package org.bukkit.entity;
 import org.bukkit.Location;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.inventory.InventoryHolder;
+import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 
@@ -103,4 +104,30 @@ public interface Allay extends Creature, InventoryHolder {
      */
     @Nullable
     public Location getJukebox();
+
+    // Canvas start
+
+    /**
+     * Checks if the entity can interact with something.
+     *
+     * @return true if the entity can interact, false otherwise.
+     */
+    public boolean canInteractWith();
+
+    /**
+     * Sets whether the entity can interact with something.
+     *
+     * @param canInteractWith true to allow interaction, false to restrict it.
+     */
+    public void setCanInteractWith(boolean canInteractWith);
+
+    public void setJukeboxListenRadius(int radius);
+
+    public boolean considersItemsEqual(ItemStack item1, ItemStack item2);
+
+    public void setItemPickupReach(int reach);
+
+    public int getItemPickupReach();
+
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Axolotl.java b/src/main/java/org/bukkit/entity/Axolotl.java
index c8c738b1b72e9ad89d97b7a1f5450d58045a72ca..47b583896351d6fd4f360ad2017f336b3fbddb8b 100644
--- a/src/main/java/org/bukkit/entity/Axolotl.java
+++ b/src/main/java/org/bukkit/entity/Axolotl.java
@@ -1,5 +1,6 @@
 package org.bukkit.entity;
 
+import org.bukkit.potion.PotionEffectType;
 import org.jetbrains.annotations.NotNull;
 
 /**
@@ -66,4 +67,58 @@ public interface Axolotl extends Animals, io.papermc.paper.entity.Bucketable { /
          */
         BLUE;
     }
+
+    // Canvas start
+
+    /**
+     * Returns whether supporting effects should be applied.
+     *
+     * @return true if supporting effects should be applied, false otherwise.
+     */
+    public boolean getApplySupportingEffects();
+
+    /**
+     * Sets whether supporting effects should be applied.
+     *
+     * @param applySupportingEffects true to apply supporting effects, false to disable.
+     */
+    public void setApplySupportingEffects(boolean applySupportingEffects);
+
+    /**
+     * Sets the type of supporting potion effect.
+     *
+     * @param potionEffectType The type of potion effect to apply as support.
+     */
+    public void setSupportingEffectType(PotionEffectType potionEffectType);
+
+    /**
+     * Returns the type of supporting potion effect.
+     *
+     * @return The type of potion effect used for support.
+     */
+    public PotionEffectType getSupportingPotionEffectType();
+
+    /**
+     * Sets the amplifier (strength) of the supporting effect.
+     *
+     * @param amplifier The amplifier value for the supporting effect.
+     */
+    public void setSupportingEffectAmplifier(int amplifier);
+
+    /**
+     * Returns the amplifier (strength) of the supporting effect.
+     *
+     * @return The amplifier value of the supporting effect.
+     */
+    public int getSupportingEffectAmplifier();
+
+    public int getRareVarientChanceBound();
+
+    public void resetRareVarientChanceBound();
+
+    public void setRareVarientChanceBound(int bound);
+
+    public void rehydrate();
+
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Bee.java b/src/main/java/org/bukkit/entity/Bee.java
index 1f6702b0de00b87dbed7f6d93e911655e8667b0b..b91432ddd89ed4b3c8ba170ff438f5b2e814c5b8 100644
--- a/src/main/java/org/bukkit/entity/Bee.java
+++ b/src/main/java/org/bukkit/entity/Bee.java
@@ -2,6 +2,8 @@ package org.bukkit.entity;
 
 import org.bukkit.Location;
 import org.jetbrains.annotations.Nullable;
+import org.apache.commons.lang3.tuple.Pair;
+import java.lang.Integer;
 
 /**
  * Represents a Bee.
@@ -144,5 +146,22 @@ public interface Bee extends Animals {
      * @return number of ticks
      */
     int getTicksSincePollination();
-    // Paper end
+    // Paper end -/- Canvas start
+
+    public void rerollFlowerLocateTimer();
+
+    public int getFlowerLocateTimer();
+
+    public void setPersistentAngerTime(final int min, final int max);
+
+    public Pair<Integer, Integer> getPersistentAngerTime();
+
+    public void tryEnterClosestHive();
+
+    public void tryPollinate();
+
+    public void goToKnownFlower();
+
+    public void tryFindNewHive();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Blaze.java b/src/main/java/org/bukkit/entity/Blaze.java
index 7a5505b7fa84629f81c152fb6da90bdb2392f9df..072163cd7b06360e382aea2091883923b2729a43 100644
--- a/src/main/java/org/bukkit/entity/Blaze.java
+++ b/src/main/java/org/bukkit/entity/Blaze.java
@@ -4,5 +4,20 @@ package org.bukkit.entity;
  * Represents a Blaze monster
  */
 public interface Blaze extends Monster {
+    // Canvas start
+    /**
+     * Checks if the entity is currently on fire.
+     *
+     * @return true if the entity is on fire, false otherwise.
+     */
+    public boolean isOnFire();
 
+    /**
+     * Sets whether the entity is charged with fire.
+     *
+     * @param fireActive true to set the entity on fire, false to extinguish it.
+     */
+    public void setCharged(boolean fireActive);
+
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Boat.java b/src/main/java/org/bukkit/entity/Boat.java
index 2ac685fb1817f3ce06ebe6391cc863712d68367c..3f683c128f2800123823fc04af477265a91cdeee 100644
--- a/src/main/java/org/bukkit/entity/Boat.java
+++ b/src/main/java/org/bukkit/entity/Boat.java
@@ -186,4 +186,46 @@ public interface Boat extends Vehicle {
     @NotNull
     public Material getBoatMaterial();
     // Paper end
+
+    // Canvas start
+    ///**
+    // * Sets whether the boat should drop an item when destroyed.
+    // *
+    // * @param shouldDrop true if the boat should drop an item, false otherwise.
+    // */
+    //public void shouldDropItemOnDestroy(boolean shouldDrop);
+
+    ///**
+    // * Checks if the boat should drop an item when destroyed.
+    // *
+    // * @return true if the boat should drop an item on destroy, false otherwise.
+    // */
+    //public boolean getShouldDropItemOnDestroy();
+
+    ///**
+    // * Destroys the boat, potentially dropping an item if specified.
+    // */
+    //public void destroy();
+
+    /**
+     * Sets the drop item material for the boat when destroyed.
+     *
+     * @param itemMaterial The material of the item to drop.
+     * @param boatType The material of the boat that can drop the item.
+     */
+    public void setDropItem(final Boat.Type boatType, final Material itemMaterial);
+
+    /**
+     * Gets the drop item material for the boat when destroyed, considering the boat material.
+     *
+     * @param boatMaterial The material of the boat.
+     * @return The material of the item to drop.
+     */
+    public Material getDropItem(Boat.Type boatMaterial);
+
+    /**
+     * Resets the drop map to its default state, removing any custom drop settings.
+     */
+    public void resetDropMap();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Cat.java b/src/main/java/org/bukkit/entity/Cat.java
index d03adfaa4176617ef2ace2754fe02b63860e3aee..93aa0671a245831461309c3c6fce7082931ff8ea 100644
--- a/src/main/java/org/bukkit/entity/Cat.java
+++ b/src/main/java/org/bukkit/entity/Cat.java
@@ -102,4 +102,38 @@ public interface Cat extends Tameable, Sittable, io.papermc.paper.entity.CollarC
      */
     public boolean isHeadUp();
     // Paper end - More cat api
+
+    // Canvas start
+    /**
+     * Make the cat hiss, typically producing a hissing sound or behavior.
+     * This can be used to simulate the cat's hissing action.
+     */
+    public void hiss();
+
+    /**
+     * Check if the cat is currently stepping carefully, slower movement
+     *
+     * @return True if the cat is stepping carefully; false otherwise.
+     */
+    public boolean isSteppingCarefully();
+
+    /**
+     * Check if the cat allows the spawning of morning gifts
+     *
+     * @return True if morning gift spawn is allowed; false otherwise.
+     */
+    public boolean allowMorningGiftSpawn();
+
+    /**
+     * Set whether the cat allows the spawning of morning gifts.
+     *
+     * @param allow True to allow morning gift spawn, false to disallow it.
+     */
+    public void setAllowMorningGiftSpawn(boolean allow);
+
+    /**
+     * Spawns a morning gift
+     */
+    public void spawnMorningGift();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/ChestBoat.java b/src/main/java/org/bukkit/entity/ChestBoat.java
index 4ebe1033c55dbd58d0794809435c935236fabcc2..29392c1f62aecb25bc6225d11af5953176b1989c 100644
--- a/src/main/java/org/bukkit/entity/ChestBoat.java
+++ b/src/main/java/org/bukkit/entity/ChestBoat.java
@@ -7,4 +7,12 @@ import org.bukkit.loot.Lootable;
  * A {@link Boat} with a chest.
  */
 public interface ChestBoat extends Boat, InventoryHolder, com.destroystokyo.paper.loottable.LootableEntityInventory { // Paper
+    // Canvas start
+    /**
+     * Opens a chest inventory for a player
+     *
+     * @param player The player for whom the chest inventory is being opened.
+     */
+    public void openChestInventory(Player player);
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Chicken.java b/src/main/java/org/bukkit/entity/Chicken.java
index b4c1a262602d4ca5ffc9fcc21d6aa79af8c040a7..8c73249ff50c7e1b12f2d80d5065b82f0e6606f6 100644
--- a/src/main/java/org/bukkit/entity/Chicken.java
+++ b/src/main/java/org/bukkit/entity/Chicken.java
@@ -33,5 +33,12 @@ public interface Chicken extends Animals {
      * @param eggLayTime ticks till the chicken lays an egg
      */
     void setEggLayTime(int eggLayTime);
+
+    /**
+     * Returns a boolean for if the chicken is flapping
+     *
+     * @return Is entity flapping
+     */
+    public boolean isFlapping();
 }
 // Paper end
diff --git a/src/main/java/org/bukkit/entity/Cow.java b/src/main/java/org/bukkit/entity/Cow.java
index cd4ed4de01c7376c1b35f31af0bba6ac4e26f947..3b526ba2dd6d0e716a498d1aee83509e0b0dd94f 100644
--- a/src/main/java/org/bukkit/entity/Cow.java
+++ b/src/main/java/org/bukkit/entity/Cow.java
@@ -3,4 +3,11 @@ package org.bukkit.entity;
 /**
  * Represents a Cow.
  */
-public interface Cow extends Animals {}
+public interface Cow extends Animals {
+    // Canvas start
+    /**
+     * Converts the Cow to a Mushroom Cow
+     */
+    public void convertToMushroom();
+    // Canvas end
+}
diff --git a/src/main/java/org/bukkit/entity/Creature.java b/src/main/java/org/bukkit/entity/Creature.java
index 6c9c5e85ead62b258f3b86a647be4c9db7bb3a27..c70d9431cba4d15dee34132fd2de39d736662158 100644
--- a/src/main/java/org/bukkit/entity/Creature.java
+++ b/src/main/java/org/bukkit/entity/Creature.java
@@ -4,4 +4,11 @@ package org.bukkit.entity;
  * Represents a Creature. Creatures are non-intelligent monsters or animals
  * which have very simple abilities.
  */
-public interface Creature extends Mob {}
+public interface Creature extends Mob {
+    /**
+     * Checks if the entity is currently in a state of panic
+     *
+     * @return true if the entity is panicking; false otherwise.
+     */
+    public boolean isPanicking();
+}
diff --git a/src/main/java/org/bukkit/entity/Dolphin.java b/src/main/java/org/bukkit/entity/Dolphin.java
index 8ab329946daaff25646f3dd4582feb9e4c0685ca..6485459fbe45184202336591769f806280ff9214 100644
--- a/src/main/java/org/bukkit/entity/Dolphin.java
+++ b/src/main/java/org/bukkit/entity/Dolphin.java
@@ -49,4 +49,22 @@ public interface Dolphin extends WaterMob { // Paper start - Dolphin API
      *  @param location location to guide to
      */
     void setTreasureLocation(@org.jetbrains.annotations.NotNull Location location);
-} // Paper end - Dolphin API
+    
+    // Canvas start
+    /**
+     * Instructs the Dolphin to swim towards nearby underwater treasures.
+     */
+    void swimToTreasure();
+
+    /**
+     * Sets the distance at which the Dolphin will swim alongside the player.
+     *
+     * @param distance The distance at which the Dolphin should swim with the player.
+     */
+    void setSwimWithPlayerDistance(double distance);
+
+    /**
+     * Encourages the Dolphin to play with nearby items in the water.
+     */
+    void tryPlayWithItems();
+} // Paper end - Dolphin API -/- Canvas end
diff --git a/src/main/java/org/bukkit/entity/Drowned.java b/src/main/java/org/bukkit/entity/Drowned.java
index 8d1ad9ef757cb1e8d72b145262df73612a76c746..0eae75026d280b94b6a54056c0685c9efa17a4c4 100644
--- a/src/main/java/org/bukkit/entity/Drowned.java
+++ b/src/main/java/org/bukkit/entity/Drowned.java
@@ -5,4 +5,10 @@ import com.destroystokyo.paper.entity.RangedEntity;
 /**
  * Drowned zombie.
  */
-public interface Drowned extends Zombie, RangedEntity { } // Paper
+public interface Drowned extends Zombie, RangedEntity { // Paper
+    // Canvas start
+    public boolean isSearchingForLand();
+
+    public void setSearchingForLand(boolean searching);
+    // Canvas end
+}
diff --git a/src/main/java/org/bukkit/entity/ElderGuardian.java b/src/main/java/org/bukkit/entity/ElderGuardian.java
index 5ca1d4c9f235918070e4180608ab92d6f1b25343..acd2664b4907f597cba315fa163056c497eeaf7d 100644
--- a/src/main/java/org/bukkit/entity/ElderGuardian.java
+++ b/src/main/java/org/bukkit/entity/ElderGuardian.java
@@ -3,4 +3,76 @@ package org.bukkit.entity;
 /**
  * Represents an ElderGuardian - variant of {@link Guardian}.
  */
-public interface ElderGuardian extends Guardian { }
+public interface ElderGuardian extends Guardian {
+    // Canvas start
+    /**
+     * Sets the effect amplifier for the Elder Guardian. The effect amplifier determines the strength of the Guardian's special effect.
+     *
+     * @param effectAmplifier The effect amplifier to set.
+     */
+    public void setEffectAmplifier(final int effectAmplifier);
+
+    /**
+     * Gets the duration of the Guardian's special effect.
+     *
+     * @return The duration of the Guardian's special effect.
+     */
+    public int getEffectDuration();
+
+    /**
+     * Sets the duration of the Guardian's special effect.
+     *
+     * @param effectDuration The duration to set for the Guardian's special effect.
+     */
+    public void setEffectDuration(final int effectDuration);
+
+    /**
+     * Gets the effect amplifier for the Elder Guardian. The effect amplifier determines the strength of the Guardian's special effect.
+     *
+     * @return The effect amplifier of the Guardian.
+     */
+    public int getEffectAmplifier();
+
+    /**
+     * Gets the maximum limit for displaying the Guardian's special effect.
+     *
+     * @return The maximum limit for displaying the Guardian's special effect.
+     */
+    public int getEffectDisplayLimit();
+
+    /**
+     * Sets the maximum limit for displaying the Guardian's special effect. This limit determines when the special effect is visible.
+     *
+     * @param effectDisplayLimit The maximum limit for displaying the Guardian's special effect.
+     */
+    public void setEffectDisplayLimit(final int effectDisplayLimit);
+
+    /**
+     * Gets the interval at which the Guardian's special effect is applied or checked.
+     *
+     * @return The interval for the Guardian's special effect.
+     */
+    public int getEffectInterval();
+
+    /**
+     * Sets the interval at which the Guardian's special effect is applied or checked.
+     *
+     * @param effectInterval The interval for the Guardian's special effect.
+     */
+    public void setEffectInterval(final int effectInterval);
+
+    /**
+     * Gets the radius at which the Guardian's special effect can affect entities.
+     *
+     * @return The radius for the Guardian's special effect.
+     */
+    public int getEffectRadius();
+
+    /**
+     * Sets the radius at which the Guardian's special effect can affect entities.
+     *
+     * @param effectRadius The radius for the Guardian's special effect.
+     */
+    public void setEffectRadius(final int effectRadius);
+    // Canvas end
+}
diff --git a/src/main/java/org/bukkit/entity/EnderDragon.java b/src/main/java/org/bukkit/entity/EnderDragon.java
index 68f58c40a56791df177967de5661cca976a7e98c..42aeb0a2b5c62c65798a1a42f60c245d76bc14a3 100644
--- a/src/main/java/org/bukkit/entity/EnderDragon.java
+++ b/src/main/java/org/bukkit/entity/EnderDragon.java
@@ -4,6 +4,7 @@ import org.bukkit.World;
 import org.bukkit.boss.DragonBattle;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+import java.util.List;
 
 /**
  * Represents an Ender Dragon
@@ -126,4 +127,32 @@ public interface EnderDragon extends ComplexLivingEntity, Boss, Mob, Enemy {
      */
     void setPodium(@Nullable org.bukkit.Location location);
     // Paper end
+
+    // Canvas start
+    /**
+     * Sets the Dragon Battle for the entity
+     *
+     * @param dragonBattle The Dragon Battle instance to set for this entity.
+     */
+    public void setDragonBattle(DragonBattle dragonBattle);
+
+    /**
+     * Applies knockback to a list of entities with the knockback source of the Dragon
+     *
+     * @param entities The list of entities to apply knockback to.
+     */
+    public void knockback(List<Entity> entities);
+
+    /**
+     * Applies knockback to a specific entity with a knockback source of the Dragon
+     *
+     * @param entity The entity to apply knockback to.
+     */
+    public void knockback(Entity entity);
+
+    /**
+     * Checks for obstacles or walls in the environment that may affect the entity's movement or behavior.
+     */
+    public boolean inWall();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Enderman.java b/src/main/java/org/bukkit/entity/Enderman.java
index b8ad718dbc6bc6e4000480d35c499cc1542998fa..41ff23aed616532e514b4618cc9a5b680a1201f4 100644
--- a/src/main/java/org/bukkit/entity/Enderman.java
+++ b/src/main/java/org/bukkit/entity/Enderman.java
@@ -1,5 +1,6 @@
 package org.bukkit.entity;
 
+import org.apache.commons.lang3.tuple.Pair;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.material.MaterialData;
 import org.jetbrains.annotations.ApiStatus;
@@ -121,4 +122,44 @@ public interface Enderman extends Monster {
      */
     void setHasBeenStaredAt(boolean hasBeenStaredAt);
     // Paper end
+
+    // Canvas start
+    /**
+     * Teleports the entity towards the specified coordinates (x, y, z).
+     *
+     * @param x The x-coordinate to teleport towards.
+     * @param y The y-coordinate to teleport towards.
+     * @param z The z-coordinate to teleport towards.
+     */
+    public void teleportTowards(int x, int y, int z);
+
+    /**
+     * Sets the persistent anger time for the entity, defining the minimum and maximum values.
+     *
+     * @param min The minimum persistent anger time value.
+     * @param max The maximum persistent anger time value.
+     */
+    public void setPersistentAngerTime(int min, int max);
+
+    /**
+     * Gets the persistent anger time as a pair of values, where the left value represents the minimum and the right value represents the maximum.
+     * setValue() method doesnt work and shouldnt be used. It will always return null.
+     * @return A Pair containing the minimum and maximum persistent anger time values.
+     */
+    public Pair<Integer, Integer> getPersistentAngerTime();
+
+    /**
+     * Plays the Enderman staring sound.
+     */
+    public void playStareSound();
+
+    /**
+     * Checks if the player is looking at the Enderman.
+     *
+     * @param player The player to check if the entity is looking at.
+     * @return true if the player is looking at the Enderman, false otherwise.
+     */
+    public boolean isLookingAtMe(Player player);
+
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Evoker.java b/src/main/java/org/bukkit/entity/Evoker.java
index 76f81cd124090337876c9e5e469862a1c8da4ec8..72b42d81dcfc58f47880487a923261d48e594af6 100644
--- a/src/main/java/org/bukkit/entity/Evoker.java
+++ b/src/main/java/org/bukkit/entity/Evoker.java
@@ -78,5 +78,22 @@ public interface Evoker extends Spellcaster {
      * @param sheep new wololo target
      */
     void setWololoTarget(@Nullable Sheep sheep);
-    // Paper end
+    // Paper end -/- Canvas start
+    /**
+     * Performs a summon spell unique to the Evoker, summoning vexes.
+     */
+    void performSummonSpell();
+
+    /**
+     * Performs an attack spell, aka summons Evoker fangs.
+     */
+    void performAttackSpell();
+
+    /**
+     * Performs a Wololo spell unique to the Evoker to convert a sheep into a different state or color.
+     *
+     * @param wololoTarget The sheep entity to be targeted and affected by the Evoker's Wololo spell.
+     */
+    void performWololoSpell(org.bukkit.entity.Sheep wololoTarget);
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/ExperienceOrb.java b/src/main/java/org/bukkit/entity/ExperienceOrb.java
index dec70bbfaf73a9d525b2c45682b804c684e1645b..53ae9f86eed0961d3276c9841241b9c5692a32a2 100644
--- a/src/main/java/org/bukkit/entity/ExperienceOrb.java
+++ b/src/main/java/org/bukkit/entity/ExperienceOrb.java
@@ -115,5 +115,22 @@ public interface ExperienceOrb extends Entity {
      */
     @NotNull
     SpawnReason getSpawnReason();
-    // Paper end
+    // Paper end -/- Canvas start
+
+    /**
+     * Sets if the orb is allowed to merge.
+     * @<code>false</code> If false, the orb will not be able to merge with other orbs
+     *
+     * @<code>true</code> If true, the orb will be able to merge with other orbs
+     *
+     * @param allowMerge
+     */
+    public void setAllowMerge(boolean allowMerge);
+
+    /**
+     * Returns if the orb is allowed to merge with other orbs
+     * @return if the orb can merge with other orbs
+     */
+    public boolean allowMerge();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Fireball.java b/src/main/java/org/bukkit/entity/Fireball.java
index 7a44707f2307dc4dbfea4de3f4baf3cc0490dc93..339034dc57aa9ac5b9febdd0ee1cd7cc55fd6fc8 100644
--- a/src/main/java/org/bukkit/entity/Fireball.java
+++ b/src/main/java/org/bukkit/entity/Fireball.java
@@ -1,5 +1,6 @@
 package org.bukkit.entity;
 
+import org.bukkit.Particle;
 import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 
@@ -23,4 +24,16 @@ public interface Fireball extends Projectile, Explosive {
     @NotNull
     public Vector getDirection();
 
+    public void setHasParticleTrail(boolean hasParticleTrail);
+
+    public boolean getHasParticleTrail();
+
+    public void setShouldBurn(boolean should);
+
+    public boolean shouldBurn();
+
+    public void setInertia(float inertia);
+
+    public float getInertia();
+
 }
diff --git a/src/main/java/org/bukkit/entity/Fish.java b/src/main/java/org/bukkit/entity/Fish.java
index 86da8dc401ed7db19a39bc682721055cd341ccde..1643bd8726027693871049652185170df1195f28 100644
--- a/src/main/java/org/bukkit/entity/Fish.java
+++ b/src/main/java/org/bukkit/entity/Fish.java
@@ -3,4 +3,14 @@ package org.bukkit.entity;
 /**
  * Represents a fish entity.
  */
-public interface Fish extends WaterMob, io.papermc.paper.entity.Bucketable { } // Paper - Bucketable API
+public interface Fish extends WaterMob, io.papermc.paper.entity.Bucketable { // Paper - Bucketable API
+    // Canvas start
+    public void setCanRandomSwim(boolean can);
+
+    public boolean getCanRandomSwim();
+
+    public int getMaxSpawnClusterSize();
+
+    public void setMaxSpawnClusterSize(int size);
+    // Canvas end
+}
diff --git a/src/main/java/org/bukkit/entity/Fox.java b/src/main/java/org/bukkit/entity/Fox.java
index 473a7e36ad64f866d1d2e09e2ecb2e9881668faf..837a6ac8aeabc667d569002f5390ce73ebc2494d 100644
--- a/src/main/java/org/bukkit/entity/Fox.java
+++ b/src/main/java/org/bukkit/entity/Fox.java
@@ -142,5 +142,17 @@ public interface Fox extends Animals, Sittable {
      * @param faceplanted face planted
      */
     public void setFaceplanted(boolean faceplanted);
-    // Paper end - Add more fox behavior API
+    // Paper end - Add more fox behavior API -/- Canvas start
+
+    public void faceplant();
+
+    public void tryStalkPrey();
+
+    public void seekShelter();
+
+    public void sleep();
+
+    public void searchForItems();
+
+    public void tryPounce();
 }
diff --git a/src/main/java/org/bukkit/entity/Frog.java b/src/main/java/org/bukkit/entity/Frog.java
index 0960bdbb3253bfe109dc6283244b8c9d95a850f7..b026ca9fe4119aed334aa8d97465488915c19103 100644
--- a/src/main/java/org/bukkit/entity/Frog.java
+++ b/src/main/java/org/bukkit/entity/Frog.java
@@ -70,4 +70,7 @@ public interface Frog extends Animals {
             return key;
         }
     }
+    // Canvas start
+    public void youngify();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Ghast.java b/src/main/java/org/bukkit/entity/Ghast.java
index 9c618a27d590f186f29c5d9094fc565efd40ca49..967ae57773175248fb12b8f34be1ba064d77ec56 100644
--- a/src/main/java/org/bukkit/entity/Ghast.java
+++ b/src/main/java/org/bukkit/entity/Ghast.java
@@ -34,5 +34,11 @@ public interface Ghast extends Flying, Enemy {
      * @throws IllegalArgumentException if the explosion power is less than 0 or greater than 127
      */
     void setExplosionPower(int explosionPower);
-    // Paper end
+    // Paper end -/- Canvas start
+
+    /**
+     * Shoots a fireball at the targeted entity
+     */
+    void shootFireBall();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/GlowSquid.java b/src/main/java/org/bukkit/entity/GlowSquid.java
index fc80cb3da7edbbf7ec2bf474aa181fb0c68f2728..0aba6f24f42148bf768958720e5a80e604563585 100644
--- a/src/main/java/org/bukkit/entity/GlowSquid.java
+++ b/src/main/java/org/bukkit/entity/GlowSquid.java
@@ -22,4 +22,9 @@ public interface GlowSquid extends Squid {
      * @param darkTicksRemaining dark ticks remaining
      */
     void setDarkTicksRemaining(int darkTicksRemaining);
+
+    /**
+     * Sets the EntityType to a normal Squid
+     */
+    void setNonGlowingSquid();
 }
diff --git a/src/main/java/org/bukkit/entity/Goat.java b/src/main/java/org/bukkit/entity/Goat.java
index 18e48bbb04076f1535b6a4c10e139908e82da44e..fcb74e0ae27e37462f00acfc4bdb30e42a5dff4a 100644
--- a/src/main/java/org/bukkit/entity/Goat.java
+++ b/src/main/java/org/bukkit/entity/Goat.java
@@ -59,5 +59,47 @@ public interface Goat extends Animals {
      * @param entity the entity to ram at
      */
     void ram(@org.jetbrains.annotations.NotNull LivingEntity entity);
-    // Paper end
+    // Paper end -/- Canvas start
+    
+    /**
+     * Checks if the Goat is currently lowering its head.
+     *
+     * @return true if the Goat is lowering its head, false otherwise.
+     */
+    public boolean isLoweringHead();
+
+    /**
+     * Sets the amount of fall damage reduction for the Goat.
+     *
+     * @param fallDamageReduction The amount of fall damage reduction to set for the Goat.
+     */
+    public void setFallDamageReduction(int fallDamageReduction);
+
+    /**
+     * Gets the current amount of fall damage reduction for the Goat.
+     *
+     * @return The current fall damage reduction value.
+     */
+    public int getFallDamageReduction();
+
+    /**
+     * Adds a right horn to the Goat's appearance.
+     */
+    public void addRightHorn();
+
+    /**
+     * Removes the right horn from the Goat's appearance.
+     */
+    public void removeRightHorn();
+
+    /**
+     * Adds a left horn to the Goat's appearance.
+     */
+    public void addLeftHorn();
+
+    /**
+     * Removes the left horn from the Goat's appearance.
+     */
+    public void removeLeftHorn();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Husk.java b/src/main/java/org/bukkit/entity/Husk.java
index 85ada1c670a95e46511bffd58714d0546e70d8f5..c48f8f4feaf068e516de4edfd22e3ff8401d0acd 100644
--- a/src/main/java/org/bukkit/entity/Husk.java
+++ b/src/main/java/org/bukkit/entity/Husk.java
@@ -38,4 +38,36 @@ public interface Husk extends Zombie {
      */
     @Override
     void setConversionTime(int time);
+
+    // Canvas start
+    /**
+     * Sets wether the Entity should convert to the Entity Conversion Type while in water
+     * 
+     * Default true.
+     */
+    public void setShouldConvertInWater(boolean shouldConvertInWater);
+
+    /**
+     * Returns if the Entity converts to the Entity Conversion Type while in water
+     * 
+     * @return if the Entity should convert in water
+     */
+    public boolean convertsInWater();
+
+    /**
+     * Sets the Entity Conversion Type for while the Entity is in water.
+     * 
+     * Default ZOMBIE.
+     * 
+     * @param entityType The type of Entity it should convert to
+     */
+    public void setEntityConversionType(org.bukkit.entity.EntityType entityType);
+
+    /**
+     * Returns the EntityType of the Entity type the Entity converts to while in water
+     * 
+     * @return the EntityType of the Entity type the Entity converts to while in water
+     */
+    public org.bukkit.entity.EntityType getEntityConversionType();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/IronGolem.java b/src/main/java/org/bukkit/entity/IronGolem.java
index 09fd716c8fc9ea34a1cbf87bcbe22df035422a51..8d02d982ea0b80caf891454dd7ccc857e26785df 100644
--- a/src/main/java/org/bukkit/entity/IronGolem.java
+++ b/src/main/java/org/bukkit/entity/IronGolem.java
@@ -1,5 +1,7 @@
 package org.bukkit.entity;
 
+import org.bukkit.Material;
+
 /**
  * An iron Golem that protects Villages.
  */
@@ -35,4 +37,34 @@ public interface IronGolem extends Golem {
      */
     void setSummoner(@org.jetbrains.annotations.Nullable java.util.UUID summoner);
     // Purpur end
+
+    // Canvas start
+    /**
+     * Returns the crackiness of the Iron Golem
+     * @return int value of Crackiness from the ordinal()
+     */
+    public int getCrackiness();
+
+    /**
+     * Sets the velocity that is applied to the entity when flung into the air by the Iron Golem
+     * Default is 0.4000000059604645D
+     * @param amt
+     */
+    public void setFlingVelocity(double amt);
+
+    /**
+     * Sets the velocity that is applied to the entity when flung into the air by the Iron Golem
+     * Default is 0.4000000059604645D
+     * @return velocity amplifier for the velocity applied to the entity upon being flung
+     */
+    public double getFlingVelocity();
+
+    public boolean canRepair();
+
+    public void setCanRepair(boolean can);
+
+    public void offerFlower(boolean lookingAtVillager);
+
+    public void setRepairItem(Material material);
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/LivingEntity.java b/src/main/java/org/bukkit/entity/LivingEntity.java
index 744b869c028324d5de30d2d64ab080b050fa3c47..cc24bedc5d5d063e00e04041fa0bb588912e36b9 100644
--- a/src/main/java/org/bukkit/entity/LivingEntity.java
+++ b/src/main/java/org/bukkit/entity/LivingEntity.java
@@ -4,6 +4,7 @@ import java.util.Collection;
 import java.util.List;
 import java.util.Set;
 import java.util.UUID;
+import me.dueris.canvas.entity.MobType;
 import org.bukkit.FluidCollisionMode;
 import org.bukkit.Location;
 import org.bukkit.Material;
@@ -1346,5 +1347,55 @@ public interface LivingEntity extends Attributable, Damageable, ProjectileSource
      * @param shouldBurnInDay True to burn in sunlight
      */
     void setShouldBurnInDay(boolean shouldBurnInDay);
-    // Purpur end
+    // Purpur end -/- Canvas start
+    /**
+     * Sets the type of the mob.
+     *
+     * @param mobType The type of mob to set(see me.dueris.canvas.entity.MobType).
+     */
+    void setMobType(MobType mobType);
+
+    /**
+     * Gets the type of the mob.
+     *
+     * @return The type of the mob.
+     */
+    MobType getMobType();
+
+    /**
+     * Makes the entity jump.
+     */
+    void jump();
+
+    /**
+     * Makes the entity jump while in a liquid (e.g., water).
+     */
+    void jumpInLiquid();
+
+    /**
+     * Causes the entity to descend in water.
+     */
+    void goDownInWater();
+
+    /**
+     * Sets the slowdown factor for the entity when moving in water.
+     *
+     * @param waterSlowdown The factor determining how much the entity is slowed down in water.
+     */
+    void setWaterSlowdown(float waterSlowdown);
+
+    /**
+     * Gets the slowdown factor for the entity when moving in water.
+     *
+     * @return The factor indicating the entity's slowdown in water.
+     */
+    float getWaterSlowdown();
+
+    /**
+     * Consumes an item from the provided ItemStack.
+     *
+     * @param itemStack The ItemStack containing the item to be consumed.
+     */
+    void consumeItem(ItemStack itemStack);
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Mob.java b/src/main/java/org/bukkit/entity/Mob.java
index 30ef0c20df8ff2ed56adb40fea103265dd3e886c..4811796c3db9bd3f4a07b557d13e0a9ceb877130 100644
--- a/src/main/java/org/bukkit/entity/Mob.java
+++ b/src/main/java/org/bukkit/entity/Mob.java
@@ -10,6 +10,15 @@ import org.jetbrains.annotations.Nullable;
  */
 public interface Mob extends LivingEntity, Lootable {
 
+    // Canvas start
+    /**
+     * Checks if the entity can be leashed by a player
+     *
+     * @return true if the entity can be leashed by a player; false otherwise.
+     */
+    public boolean canBeLeashed(Player player);
+    // Canvas end
+
     // Paper start
     @Override
     org.bukkit.inventory.@org.jetbrains.annotations.NotNull EntityEquipment getEquipment();
@@ -220,5 +229,14 @@ public interface Mob extends LivingEntity, Lootable {
      * @return the amount of experience the mob will possibly drop
      */
     public int getPossibleExperienceReward();
-    // Paper end
+    // Paper end -/- Canvas start
+
+    /**
+     * Allows you to convert any mob to another EntityType
+     * 
+     * @param entityType EntityType to convert the mob to
+     * @param keepEquipment Should keep equipment on transformation
+     */
+    public void convertTo(EntityType entityType, boolean keepEquipment);
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/MushroomCow.java b/src/main/java/org/bukkit/entity/MushroomCow.java
index a6020bf1e927c1478b5ab90ec9a6ee21f03579da..b700e717dcaf41a27ce97ec84e91e7d697cad974 100644
--- a/src/main/java/org/bukkit/entity/MushroomCow.java
+++ b/src/main/java/org/bukkit/entity/MushroomCow.java
@@ -105,5 +105,10 @@ public interface MushroomCow extends Cow, io.papermc.paper.entity.Shearable { //
      * @param effects effect entry list
      */
     void setStewEffects(java.util.@NotNull List<io.papermc.paper.potion.SuspiciousEffectEntry> effects);
-    // Paper end
+    // Paper end -/- Canvas start
+    /**
+     * Converts the Mushroom Cow to a normal Cow
+     */
+    public void convertToNormal();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Panda.java b/src/main/java/org/bukkit/entity/Panda.java
index aa5686df134185334a74429576ff0709a604dbfd..e9d0877452ecb0880eba4728c675eedc3ea3fc0b 100644
--- a/src/main/java/org/bukkit/entity/Panda.java
+++ b/src/main/java/org/bukkit/entity/Panda.java
@@ -225,4 +225,11 @@ public interface Panda extends Animals, Sittable {
             return recessive;
         }
     }
+    // Canvas start
+    public void roll();
+
+    public void sneeze();
+
+    public void lieOnBack();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Parrot.java b/src/main/java/org/bukkit/entity/Parrot.java
index c545a025c2ff5d3a0a4fff4e379277f38acf5c06..035c968963ce39c708680789c761bf8a6eb5d43c 100644
--- a/src/main/java/org/bukkit/entity/Parrot.java
+++ b/src/main/java/org/bukkit/entity/Parrot.java
@@ -54,4 +54,12 @@ public interface Parrot extends Tameable, Sittable {
          */
         GRAY;
     }
+    // Canvas start
+
+    public void landOnShoulder();
+
+    public void setPoisonousFood(org.bukkit.Material material);
+
+    public org.bukkit.Material getPoisonousFood();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/PigZombie.java b/src/main/java/org/bukkit/entity/PigZombie.java
index b2ec535bb1b0ce0c114ddd7638b90218b05cd835..102aac250adb83f2de61be93783c9088848f9f31 100644
--- a/src/main/java/org/bukkit/entity/PigZombie.java
+++ b/src/main/java/org/bukkit/entity/PigZombie.java
@@ -55,4 +55,8 @@ public interface PigZombie extends Zombie {
      */
     @Override
     public void setConversionTime(int time);
+    // Canvas start
+
+    public void convertToNormal();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Piglin.java b/src/main/java/org/bukkit/entity/Piglin.java
index eb0b7c18c1266748ff1e8e18e49b6c4f6e078b83..a3c8cf8b7d46c734c8138f279255a14b5e242659 100644
--- a/src/main/java/org/bukkit/entity/Piglin.java
+++ b/src/main/java/org/bukkit/entity/Piglin.java
@@ -131,6 +131,9 @@ public interface Piglin extends PiglinAbstract, InventoryHolder, com.destroystok
      * @return is dancing
      */
     boolean isDancing();
-    // Paper end
+    // Paper end -/- Canvas start
+
+    public void convertToZombified();
+    // Canvas end
 
 }
diff --git a/src/main/java/org/bukkit/entity/PufferFish.java b/src/main/java/org/bukkit/entity/PufferFish.java
index 2d26c19b53ba3887a171010a9a5b47fdc3d86995..c33fee71f9596624f30d8a0e11cfff25a15a7145 100644
--- a/src/main/java/org/bukkit/entity/PufferFish.java
+++ b/src/main/java/org/bukkit/entity/PufferFish.java
@@ -18,4 +18,16 @@ public interface PufferFish extends Fish {
      * @param state new puff state
      */
     void setPuffState(int state);
+    // Canvas start
+    
+    public void setScaleSizeSmall(float scale);
+
+    public void setScaleSizeMedium(float scale);
+
+    public void setScaleSizeLarge(float scale);
+
+    public void setCanPoison(boolean can);
+
+    public boolean getCanPoison();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Rabbit.java b/src/main/java/org/bukkit/entity/Rabbit.java
index 979062aa476e3bd75166458d8831894fba8778cd..55266ca0cc17c15fdac5da8661195d88b3d6f8d9 100644
--- a/src/main/java/org/bukkit/entity/Rabbit.java
+++ b/src/main/java/org/bukkit/entity/Rabbit.java
@@ -66,4 +66,8 @@ public interface Rabbit extends Animals {
          */
         THE_KILLER_BUNNY
     }
+    // Canvas start
+
+    public boolean wantsMoreFood();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Ravager.java b/src/main/java/org/bukkit/entity/Ravager.java
index 0eb7214472f3a43641a3526000af6beeefb7b36f..29c56a2502b9457be295c48d3e60600818bbc3d3 100644
--- a/src/main/java/org/bukkit/entity/Ravager.java
+++ b/src/main/java/org/bukkit/entity/Ravager.java
@@ -58,6 +58,9 @@ public interface Ravager extends Raider {
      * @param ticks ticks roaring or -1 if they should no longer be roaring
      */
     void setRoarTicks(int ticks);
+    // Canvas start
 
+    public void roar();
+    // Canvas end
 }
 // Paper end
diff --git a/src/main/java/org/bukkit/entity/Skeleton.java b/src/main/java/org/bukkit/entity/Skeleton.java
index c61eba5f400d146a8643542048904e353df94f4b..c104d15560d08b51384ab62188923cede1b66fe6 100644
--- a/src/main/java/org/bukkit/entity/Skeleton.java
+++ b/src/main/java/org/bukkit/entity/Skeleton.java
@@ -74,4 +74,13 @@ public interface Skeleton extends AbstractSkeleton {
          */
         STRAY;
     }
+    // Canvas start
+    public void forceFreezeConvert();
+
+    public void forceFreezeConvert(boolean resetConvertTimer);
+
+    public void setMaxConversionTime(int max);
+
+    public int getMaxConversionTime();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/SkeletonHorse.java b/src/main/java/org/bukkit/entity/SkeletonHorse.java
index 38539d5b77e06865aa65b8db0c1a3b6eaa914d03..ea589e7e4d1e5f64db6d16926270741150b137dc 100644
--- a/src/main/java/org/bukkit/entity/SkeletonHorse.java
+++ b/src/main/java/org/bukkit/entity/SkeletonHorse.java
@@ -56,5 +56,9 @@ public interface SkeletonHorse extends AbstractHorse {
      */
     @Deprecated
     void setTrap(boolean trap);
-    // Paper end
+    // Paper end -/- Canvas start
+    public void revertToHorse();
+    
+    public void zombify();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Sniffer.java b/src/main/java/org/bukkit/entity/Sniffer.java
index 15a0a733b0e5804655b5957cbf20831290d52a08..bce088a51234178d07ae97145dbf0a1f564a9f7e 100644
--- a/src/main/java/org/bukkit/entity/Sniffer.java
+++ b/src/main/java/org/bukkit/entity/Sniffer.java
@@ -82,4 +82,69 @@ public interface Sniffer extends Animals {
         DIGGING,
         RISING;
     }
+    // Canvas start
+    /**
+     * Sets whether the entity can search for items.
+     *
+     * @param canSearch {@code true} to allow searching, {@code false} to disable it.
+     */
+    public void setCanSearch(boolean canSearch);
+
+    /**
+     * Sets whether the entity can sniff out hidden items.
+     *
+     * @param canSniff {@code true} to enable sniffing, {@code false} to disable it.
+     */
+    public void setCanSniff(boolean canSniff);
+
+    /**
+     * Sets whether the entity should store explored locations in its memory.
+     *
+     * @param canStore {@code true} to enable storing, {@code false} to disable it.
+     */
+    public void setStoreExploredLocations(boolean canStore);
+
+    /**
+     * Sets whether the entity can dig or break blocks.
+     *
+     * @param canDig {@code true} to allow digging, {@code false} to disable it.
+     */
+    public void setCanDig(boolean canDig);
+
+    /**
+     * Checks if the entity can search for items.
+     *
+     * @return {@code true} if the entity can search, {@code false} otherwise.
+     */
+    public boolean getCanSearch();
+
+    /**
+     * Checks if the entity can sniff out hidden items.
+     *
+     * @return {@code true} if the entity can sniff, {@code false} otherwise.
+     */
+    public boolean getCanSniff();
+
+    /**
+     * Checks if the entity should store explored locations in its memory.
+     *
+     * @return {@code true} if the entity stores explored locations, {@code false} otherwise.
+     */
+
+    public boolean canStoreExploredLocations();
+
+    /**
+     * Sets the item that the entity will drop when it digs or breaks a block. If the item is null, it uses the default Sniffer Loottable.
+     *
+     * @param item The item to drop when digging or breaking blocks.
+     */
+    public void setDiggingDropItem(org.bukkit.inventory.ItemStack item);
+
+    /**
+     * Gets the item that the entity will drop when it digs or breaks a block. If it's null, the default Sniffer Loottable is used.
+     *
+     * @return The item to drop when digging or breaking blocks, or the default looting item if it's null.
+     */
+    public org.bukkit.inventory.ItemStack getDiggingDropItem();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Squid.java b/src/main/java/org/bukkit/entity/Squid.java
index fb47968ef925e3b6f8d485afc477d03c68b32d22..92ce48cec3a54bec96a1fa13c220848722c52e69 100644
--- a/src/main/java/org/bukkit/entity/Squid.java
+++ b/src/main/java/org/bukkit/entity/Squid.java
@@ -3,4 +3,16 @@ package org.bukkit.entity;
 /**
  * Represents a Squid.
  */
-public interface Squid extends WaterMob {}
+public interface Squid extends WaterMob {
+    // Canvas start
+    /**
+     * Sets the EntityType to a Glow Squid.
+     */
+    public void setGlowingSquid();
+
+    /**
+     * Squirts ink as if the Squid was ingured
+     */
+    public void squirtInk();
+    // Canvas end
+}
diff --git a/src/main/java/org/bukkit/entity/Tadpole.java b/src/main/java/org/bukkit/entity/Tadpole.java
index 8e097ad55d208a6980c320e2a849efdcc504cff1..38b0582b950073bdaa4756887750e3e72bdcba71 100644
--- a/src/main/java/org/bukkit/entity/Tadpole.java
+++ b/src/main/java/org/bukkit/entity/Tadpole.java
@@ -34,5 +34,12 @@ public interface Tadpole extends Fish {
      * @return the current agelock
      */
     boolean getAgeLock();
-    // Paper end
+    // Paper end -/- Canvas start
+
+    public void makeOld();
+
+    public void setCanAgeUp(boolean canAge);
+
+    public boolean getCanAgeUp();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Villager.java b/src/main/java/org/bukkit/entity/Villager.java
index 4a5edf4e72e81b22c1abb2ade244f7f4292e993c..439a436bec7e5d2715359311c7991c2de490d339 100644
--- a/src/main/java/org/bukkit/entity/Villager.java
+++ b/src/main/java/org/bukkit/entity/Villager.java
@@ -337,5 +337,15 @@ public interface Villager extends AbstractVillager {
      * @return True if lobotomized
      */
     boolean isLobotomized();
-    // Purpur end
+    // Purpur end -/- Canvas start
+    void restock();
+
+    boolean needsToRestock();
+
+    void updateDemand();
+
+    void trySpawnGolem();
+
+    void trySpawnGolem(int amt);
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Warden.java b/src/main/java/org/bukkit/entity/Warden.java
index efaa45f41bc1dc8df6665c55b4e5ade343d60d4c..1f08ab9a5f8f230154b896708af0ad315dfe1c82 100644
--- a/src/main/java/org/bukkit/entity/Warden.java
+++ b/src/main/java/org/bukkit/entity/Warden.java
@@ -111,4 +111,8 @@ public interface Warden extends Monster {
          */
         ANGRY;
     }
+
+    public void setCanDisableShield(boolean canDisableShield);
+
+    public boolean getCanDisableShield();
 }
diff --git a/src/main/java/org/bukkit/entity/Zombie.java b/src/main/java/org/bukkit/entity/Zombie.java
index 93de95f68af45dba6a1da350a46adc1d1d058899..9775b41ce63075b7a070a772fc2c326b48c2eacc 100644
--- a/src/main/java/org/bukkit/entity/Zombie.java
+++ b/src/main/java/org/bukkit/entity/Zombie.java
@@ -174,5 +174,7 @@ public interface Zombie extends Monster, Ageable {
      * @return true if entity supports breaking doors
      */
     boolean supportsBreakingDoors();
-    // Paper end
+    // Paper end -/- Canvas start
+    void convertToGiant();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/ZombieHorse.java b/src/main/java/org/bukkit/entity/ZombieHorse.java
index 4179b68bdb0f7ee5472b52d7b8534a5d9cb6cde5..b9b7f9ce2625d859bd854e71f1bb4663156d08ea 100644
--- a/src/main/java/org/bukkit/entity/ZombieHorse.java
+++ b/src/main/java/org/bukkit/entity/ZombieHorse.java
@@ -3,4 +3,10 @@ package org.bukkit.entity;
 /**
  * Represents a ZombieHorse - variant of {@link AbstractHorse}.
  */
-public interface ZombieHorse extends AbstractHorse { }
+public interface ZombieHorse extends AbstractHorse {
+    // Canvas start
+    public void revertToHorse();
+    
+    public void skeletonify();
+    // Canvas end
+}
