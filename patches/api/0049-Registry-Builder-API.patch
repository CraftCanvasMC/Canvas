From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris MC <purplewolf.mc1@gmail.com>
Date: Thu, 7 Dec 2023 03:35:21 +0000
Subject: [PATCH] Registry Builder API


diff --git a/src/main/java/com/destroystokyo/paper/NamespacedTag.java b/src/main/java/com/destroystokyo/paper/NamespacedTag.java
index 28f3fda950999a9c964a3608042ca60567ae1d6a..3775108ac93628a1780432674a4a36fec4e68440 100644
--- a/src/main/java/com/destroystokyo/paper/NamespacedTag.java
+++ b/src/main/java/com/destroystokyo/paper/NamespacedTag.java
@@ -31,8 +31,8 @@ public final class NamespacedTag implements com.destroystokyo.paper.Namespaced {
      */
     public static final String BUKKIT = "bukkit";
     //
-    private static final Pattern VALID_NAMESPACE = Pattern.compile("[a-z0-9._-]+");
-    private static final Pattern VALID_KEY = Pattern.compile("[a-z0-9/._-]+");
+    public static final Pattern VALID_NAMESPACE = Pattern.compile("[a-z0-9._-]+"); // Canvas - private -> public
+    public static final Pattern VALID_KEY = Pattern.compile("[a-z0-9/._-]+"); // Canvas - private -> public
     //
     private final String namespace;
     private final String key;
diff --git a/src/main/java/me/dueris/canvas/placeholder b/src/main/java/me/dueris/canvas/placeholder
deleted file mode 100644
index cf969db5a5ea454edd0d2fb9f6a65df345163bdb..0000000000000000000000000000000000000000
--- a/src/main/java/me/dueris/canvas/placeholder
+++ /dev/null
@@ -1 +0,0 @@
-# PLACEHOLDER FOR CANVAS
diff --git a/src/main/java/me/dueris/canvas/registry/PluginRegistryUser.java b/src/main/java/me/dueris/canvas/registry/PluginRegistryUser.java
new file mode 100644
index 0000000000000000000000000000000000000000..8db41cc423ac974664c876f02b58499533263b5b
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/PluginRegistryUser.java
@@ -0,0 +1,36 @@
+package me.dueris.canvas.registry;
+
+import me.dueris.canvas.registry.builders.advancement.*;
+import me.dueris.canvas.registry.builders.*;
+import me.dueris.canvas.registry.builders.biome.*;
+import me.dueris.canvas.registry.builders.damage_type.*;
+import me.dueris.canvas.registry.builders.mcfunction.*;
+import me.dueris.canvas.registry.builders.tag.*;
+import me.dueris.canvas.registry.builders.dimension_type.*;
+import java.util.ArrayList;
+
+public interface PluginRegistryUser {
+    public DamageTypeBuilder createDamageBuilder(String key);
+
+    public TagTypeBuilder createTagBuilder(String key, ResourceLocationType resourceLocation);
+
+    public AdvancementTypeBuilder createAdvancementBuilder(String key);
+
+    public BiomeTypeBuilder createBiomeBuilder(String key);
+
+    public DimensionTypeBuilder createDimensionBuilder(String key);
+
+    public FunctionTypeBuilder createFunctionBuilder(String key);
+
+    public void registerBuilder(RegistrySource source);
+
+    public String getNamespace();
+
+    public void setNamespace(String namespace);
+
+    public RegistryProvider getProvider();
+
+    public void setProvider();
+
+    public ArrayList<RegistrySource> getRegisteredBuilders();
+}
diff --git a/src/main/java/me/dueris/canvas/registry/RegistryBuilder.java b/src/main/java/me/dueris/canvas/registry/RegistryBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..7ce494e59e2f253ffbd9acff37846af953c3d497
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/RegistryBuilder.java
@@ -0,0 +1,21 @@
+package me.dueris.canvas.registry;
+
+import me.dueris.canvas.registry.RegistryProvider;
+import java.util.ArrayList;
+
+public class RegistryBuilder {
+    private static RegistryProvider provider;
+    private static ArrayList<PluginRegistryUser> users;
+
+    public static void setRegistryProvider(RegistryProvider providerImpl){
+        provider = providerImpl;
+    }
+
+    public static RegistryProvider getRegistryProvider(){
+        return provider;
+    }
+
+    public static ArrayList<PluginRegistryUser> getUsers(){
+        return users;
+    }
+}
diff --git a/src/main/java/me/dueris/canvas/registry/RegistryProvider.java b/src/main/java/me/dueris/canvas/registry/RegistryProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..ecfd794956b5e0b7a9b253fb33caba6204076e07
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/RegistryProvider.java
@@ -0,0 +1,9 @@
+package me.dueris.canvas.registry;
+
+import me.dueris.canvas.registry.builders.*;
+import me.dueris.canvas.registry.builders.damage_type.*;
+import me.dueris.canvas.registry.*;
+
+public interface RegistryProvider {
+    public PluginRegistryUser initPlugin(String namespace);
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/RegistrySource.java b/src/main/java/me/dueris/canvas/registry/builders/RegistrySource.java
new file mode 100644
index 0000000000000000000000000000000000000000..6d2fabc2f9dec6a2715e5e91f0385592f978219d
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/RegistrySource.java
@@ -0,0 +1,18 @@
+package me.dueris.canvas.registry.builders;
+
+import me.dueris.canvas.registry.PluginRegistryUser;
+import me.dueris.canvas.registry.RegistryProvider;
+
+public interface RegistrySource {
+    RegistrySource build();
+
+    String getCompiledOutputData();
+
+    void presetDefaults();
+
+    String getKey();
+
+    void setKey(String key);
+
+    PluginRegistryUser getUser();
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/advancement/AdvancementTypeBuilder.java b/src/main/java/me/dueris/canvas/registry/builders/advancement/AdvancementTypeBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..59ae59c445fe7ca3a018c9c6037dc54b43428658
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/advancement/AdvancementTypeBuilder.java
@@ -0,0 +1,154 @@
+package me.dueris.canvas.registry.builders.advancement;
+
+import org.bukkit.Material;
+import org.bukkit.advancement.AdvancementProgress;
+
+import io.papermc.paper.advancement.AdvancementDisplay;
+import me.dueris.canvas.registry.builders.RegistrySource;
+
+/**
+ * This is meant to create a base template for advancements.
+ * Minecraft will register this, but plugins need to control
+ * what the conditions are, and what the reward is using certain events.
+ */
+public interface AdvancementTypeBuilder extends RegistrySource{
+    /**
+     * Retrieves the display icon material.
+     *
+     * @return The Material used as the display icon.
+     */
+    public Material getDisplayIcon();
+
+    /**
+     * Sets the display icon material.
+     *
+     * @param mat The Material to set as the display icon.
+     */
+    public void setDisplayIcon(Material mat);
+
+    /**
+     * Retrieves the display title.
+     *
+     * @return The display title as a String.
+     */
+    public String getDisplayTitle();
+
+    /**
+     * Sets the display title.
+     *
+     * @param title The title to set.
+     */
+    public void setDisplayTitle(String title);
+
+    /**
+     * Retrieves the item NBT (Named Binary Tag).
+     *
+     * @return The item NBT as a String.
+     */
+    public String getItemNBT();
+
+    /**
+     * Sets the item NBT (Named Binary Tag).
+     *
+     * @param nbt The NBT to set.
+     */
+    public void setItemNBT(String nbt);
+
+    /**
+     * Retrieves the frame for the advancement display.
+     *
+     * @return The frame type for the display.
+     */
+    public AdvancementDisplay.Frame getFrame();
+
+    /**
+     * Sets the frame for the advancement display.
+     *
+     * @param frame The frame type to set.
+     */
+    public void setFrame(AdvancementDisplay.Frame frame);
+
+    /**
+     * Retrieves the description of the advancement.
+     *
+     * @return The advancement description as a String.
+     */
+    public String getDescription();
+
+    /**
+     * Sets the description of the advancement.
+     *
+     * @param description The description to set.
+     */
+    public void setDescription(String description);
+
+    /**
+     * Checks if the toast should be shown for the advancement.
+     *
+     * @return True if the toast should be shown, false otherwise.
+     */
+    public boolean getShowToast();
+
+    /**
+     * Sets whether the toast should be shown for the advancement.
+     *
+     * @param show True to show the toast, false otherwise.
+     */
+    public void setShowToast(boolean show);
+
+    /**
+     * Checks if the advancement should be announced to chat.
+     *
+     * @return True if the advancement should be announced, false otherwise.
+     */
+    public boolean getAnnounceToChat();
+
+    /**
+     * Sets whether the advancement should be announced to chat.
+     *
+     * @param announce True to announce the advancement, false otherwise.
+     */
+    public void setAnnounceToChat(boolean announce);
+
+    /**
+     * Checks if the advancement is hidden.
+     *
+     * @return True if the advancement is hidden, false otherwise.
+     */
+    public boolean getHidden();
+
+    /**
+     * Sets whether the advancement is hidden.
+     *
+     * @param hidden True to hide the advancement, false otherwise.
+     */
+    public void setHidden(boolean hidden);
+
+    /**
+     * Retrieves the parent of the advancement.
+     *
+     * @return The parent advancement as a String.
+     */
+    public String getParent();
+
+    /**
+     * Sets the parent of the advancement.
+     *
+     * @param parent The parent advancement to set.
+     */
+    public void setAdvancementParent(String parent);
+
+    /**
+     * Retrieves the criterion of the advancement.
+     *
+     * @return The advancement criterion as a String.
+     */
+    public String getCriterion();
+
+    /**
+     * Sets the criterion of the advancement.
+     *
+     * @param criteria The criterion to set.
+     */
+    public void setCriterion(String criteria);
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeColorPresets.java b/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeColorPresets.java
new file mode 100644
index 0000000000000000000000000000000000000000..2c1533f3ad39509395794eea2c5591c2134c3880
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeColorPresets.java
@@ -0,0 +1,30 @@
+package me.dueris.canvas.registry.builders.biome;
+
+public enum BiomeColorPresets {
+    RED(11141120),
+    BRIGHT_RED(16715008),
+    RED_ORANGE(16073989),
+    ORANGE(16091397),
+    LEMON(16109829),
+    YELLOW(16116802),
+    LIME(12711173),
+    LIGHT_GREEN(8254725),
+    DARK_GREEN(4423686),
+    TEAL(65459),
+    LIGHT_BLUE(391143),
+    BLUE(368375),
+    DARK_BLUE(341495),
+    PURPLE(12518903),
+    PINK(16188895),
+    HOT_PINK(16188810);
+    
+    private final int value;
+
+    BiomeColorPresets(int value) {
+        this.value = value;
+    }
+
+    public int getValue() {
+        return value;
+    }
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeGenerator.java b/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeGenerator.java
new file mode 100644
index 0000000000000000000000000000000000000000..412dabb9cac0e23c1f8392657d9739be1511578e
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeGenerator.java
@@ -0,0 +1,237 @@
+package me.dueris.canvas.registry.builders.biome;
+
+import java.util.*;
+
+public class BiomeGenerator {
+    public Map<String, Float> ambientMap = new HashMap();
+
+    /**
+     * Works as a sound and range relationship.
+     * The sound and range depend on eachother for creating the map
+     * for it, and the ambientMap is public to be accessed.
+     * 
+     * @param key is the string identifier for the sound namespace being used
+     * @param range is the int for the range of the sound
+     */
+    public void setAmbientMap(String key, float range){
+        ambientMap.clear();
+        ambientMap.put(key, range);
+    }
+
+    /**
+     * Clears the ambient mappings
+     */
+    public void resetMap(){
+        ambientMap.clear();
+    }
+
+    private ArrayList<String> RAW_GEN = new ArrayList<>();
+    private ArrayList<String> LAKES = new ArrayList<>();
+    private ArrayList<String> LOCAL_MODIFICATIONS = new ArrayList<>();
+    private ArrayList<String> UNDERGROUND_STRUCTURES = new ArrayList<>();
+    private ArrayList<String> SURFACE_STRUCTURES = new ArrayList<>();
+    private ArrayList<String> STRONGHOLDS = new ArrayList<>();
+    private ArrayList<String> UNDERGROUND_ORES = new ArrayList<>();
+    private ArrayList<String> UNDERGROUND_DECORATION = new ArrayList<>();
+    private ArrayList<String> FLUID_SPRINGS = new ArrayList<>();
+    private ArrayList<String> VEGETAL_DECORATION = new ArrayList<>();
+    private ArrayList<String> TOP_LAYER_MODIFICATION = new ArrayList<>();
+
+    /**
+     * Get the RAW_GEN ArrayList.
+     *
+     * @return The RAW_GEN ArrayList
+     */
+    public ArrayList<String> getRawGen() {
+        return RAW_GEN;
+    }
+
+    /**
+     * Set the RAW_GEN ArrayList.
+     *
+     * @param rawGen The ArrayList to set for RAW_GEN
+     */
+    public void setRawGen(ArrayList<String> rawGen) {
+        RAW_GEN = rawGen;
+    }
+
+    /**
+     * Get the LAKES ArrayList.
+     *
+     * @return The LAKES ArrayList
+     */
+    public ArrayList<String> getLakes() {
+        return LAKES;
+    }
+
+    /**
+     * Set the LAKES ArrayList.
+     *
+     * @param lakes The ArrayList to set for LAKES
+     */
+    public void setLakes(ArrayList<String> lakes) {
+        LAKES = lakes;
+    }
+
+    /**
+     * Get the LOCAL_MODIFICATIONS ArrayList.
+     *
+     * @return The LOCAL_MODIFICATIONS ArrayList
+     */
+    public ArrayList<String> getLocalModifications() {
+        return LOCAL_MODIFICATIONS;
+    }
+
+    /**
+     * Set the LOCAL_MODIFICATIONS ArrayList.
+     *
+     * @param localModifications The ArrayList to set for LOCAL_MODIFICATIONS
+     */
+    public void setLocalModifications(ArrayList<String> localModifications) {
+        LOCAL_MODIFICATIONS = localModifications;
+    }
+
+    /**
+     * Get the UNDERGROUND_STRUCTURES ArrayList.
+     *
+     * @return The UNDERGROUND_STRUCTURES ArrayList
+     */
+    public ArrayList<String> getUndergroundStructures() {
+        return UNDERGROUND_STRUCTURES;
+    }
+
+    /**
+     * Set the UNDERGROUND_STRUCTURES ArrayList.
+     *
+     * @param undergroundStructures The ArrayList to set for UNDERGROUND_STRUCTURES
+     */
+    public void setUndergroundStructures(ArrayList<String> undergroundStructures) {
+        UNDERGROUND_STRUCTURES = undergroundStructures;
+    }
+
+    /**
+     * Get the SURFACE_STRUCTURES ArrayList.
+     *
+     * @return The SURFACE_STRUCTURES ArrayList
+     */
+    public ArrayList<String> getSurfaceStructures() {
+        return SURFACE_STRUCTURES;
+    }
+
+    /**
+     * Set the SURFACE_STRUCTURES ArrayList.
+     *
+     * @param surfaceStructures The ArrayList to set for SURFACE_STRUCTURES
+     */
+    public void setSurfaceStructures(ArrayList<String> surfaceStructures) {
+        SURFACE_STRUCTURES = surfaceStructures;
+    }
+
+    /**
+     * Get the STRONGHOLDS ArrayList.
+     *
+     * @return The STRONGHOLDS ArrayList
+     */
+    public ArrayList<String> getStrongholds() {
+        return STRONGHOLDS;
+    }
+
+    /**
+     * Set the STRONGHOLDS ArrayList.
+     *
+     * @param strongholds The ArrayList to set for STRONGHOLDS
+     */
+    public void setStrongholds(ArrayList<String> strongholds) {
+        STRONGHOLDS = strongholds;
+    }
+
+    /**
+     * Get the UNDERGROUND_ORES ArrayList.
+     *
+     * @return The UNDERGROUND_ORES ArrayList
+     */
+    public ArrayList<String> getUndergroundOres() {
+        return UNDERGROUND_ORES;
+    }
+
+    /**
+     * Set the UNDERGROUND_ORES ArrayList.
+     *
+     * @param undergroundOres The ArrayList to set for UNDERGROUND_ORES
+     */
+    public void setUndergroundOres(ArrayList<String> undergroundOres) {
+        UNDERGROUND_ORES = undergroundOres;
+    }
+
+    /**
+     * Get the UNDERGROUND_DECORATION ArrayList.
+     *
+     * @return The UNDERGROUND_DECORATION ArrayList
+     */
+    public ArrayList<String> getUndergroundDecoration() {
+        return UNDERGROUND_DECORATION;
+    }
+
+    /**
+     * Set the UNDERGROUND_DECORATION ArrayList.
+     *
+     * @param undergroundDecoration The ArrayList to set for UNDERGROUND_DECORATION
+     */
+    public void setUndergroundDecoration(ArrayList<String> undergroundDecoration) {
+        UNDERGROUND_DECORATION = undergroundDecoration;
+    }
+
+    /**
+     * Get the FLUID_SPRINGS ArrayList.
+     *
+     * @return The FLUID_SPRINGS ArrayList
+     */
+    public ArrayList<String> getFluidSprings() {
+        return FLUID_SPRINGS;
+    }
+
+    /**
+     * Set the FLUID_SPRINGS ArrayList.
+     *
+     * @param fluidSprings The ArrayList to set for FLUID_SPRINGS
+     */
+    public void setFluidSprings(ArrayList<String> fluidSprings) {
+        FLUID_SPRINGS = fluidSprings;
+    }
+
+    /**
+     * Get the VEGETAL_DECORATION ArrayList.
+     *
+     * @return The VEGETAL_DECORATION ArrayList
+     */
+    public ArrayList<String> getVegetalDecoration() {
+        return VEGETAL_DECORATION;
+    }
+
+    /**
+     * Set the VEGETAL_DECORATION ArrayList.
+     *
+     * @param vegetalDecoration The ArrayList to set for VEGETAL_DECORATION
+     */
+    public void setVegetalDecoration(ArrayList<String> vegetalDecoration) {
+        VEGETAL_DECORATION = vegetalDecoration;
+    }
+
+    /**
+     * Get the TOP_LAYER_MODIFICATION ArrayList.
+     *
+     * @return The TOP_LAYER_MODIFICATION ArrayList
+     */
+    public ArrayList<String> getTopLayerModification() {
+        return TOP_LAYER_MODIFICATION;
+    }
+
+    /**
+     * Set the TOP_LAYER_MODIFICATION ArrayList.
+     *
+     * @param topLayerModification The ArrayList to set for TOP_LAYER_MODIFICATION
+     */
+    public void setTopLayerModification(ArrayList<String> topLayerModification) {
+        TOP_LAYER_MODIFICATION = topLayerModification;
+    }
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeGrassColorModifier.java b/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeGrassColorModifier.java
new file mode 100644
index 0000000000000000000000000000000000000000..b8ec51544010b244da315327253da21891758124
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeGrassColorModifier.java
@@ -0,0 +1,7 @@
+package me.dueris.canvas.registry.builders.biome;
+
+public enum BiomeGrassColorModifier {
+    NONE,
+    DARK_FOREST,
+    SWAMP
+}
\ No newline at end of file
diff --git a/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeMobSpawner.java b/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeMobSpawner.java
new file mode 100644
index 0000000000000000000000000000000000000000..eeb97240e98ec72f089631eeb848e001307ed0ca
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeMobSpawner.java
@@ -0,0 +1,50 @@
+package me.dueris.canvas.registry.builders.biome;
+
+import org.bukkit.NamespacedKey;
+
+public class BiomeMobSpawner {
+    public NamespacedKey mobKey;
+    public int weight;
+    public int minCount;
+    public int maxCount;
+    public SpawnerCategory category;
+
+    public BiomeMobSpawner(SpawnerCategory category, NamespacedKey mobKey, int weight, int maxCount, int minCount){
+        this.category = category;
+        this.mobKey = mobKey;
+        this.weight = weight;
+        this.minCount = minCount;
+        this.maxCount = maxCount;
+    }
+
+    public void setMobKey(NamespacedKey key){
+        this.mobKey = key;
+    }
+
+    public void setWeight(int weight){
+        this.weight = weight;
+    }
+
+    public void setMaxCount(int maxCount){
+        this.maxCount = maxCount;
+    }
+
+    public void setMinCount(int minCount){
+        this.minCount = minCount;
+    }
+
+    public void setCategory(SpawnerCategory category){
+        this.category = category;
+    }
+    
+    public static enum SpawnerCategory {
+        MONSTER,
+        CREATURE,
+        AMBIENT,
+        WATER_CREATURE,
+        UNDERGROUND_WATER_CREATURE,
+        WATER_AMBIENT,
+        MISC,
+        AXOLOTLS;
+    }
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeParticle.java b/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeParticle.java
new file mode 100644
index 0000000000000000000000000000000000000000..f4cf9ac1b0f00f3ca32aa768b3846ef848d33dee
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeParticle.java
@@ -0,0 +1,21 @@
+package me.dueris.canvas.registry.builders.biome;
+
+import java.util.ArrayList;
+import java.util.Map;
+
+/**
+ * Works as a template for the BiomeParticles, like in the nether.
+ * r, g, and b work as the RGB values for the dust color.
+ */
+public class BiomeParticle {
+    public float probability;
+    public String id;
+
+    public void setProbability(float probability){
+        this.probability = probability;
+    }
+
+    public void setParticleId(String id){
+        this.id = id;
+    }
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeTempModifier.java b/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeTempModifier.java
new file mode 100644
index 0000000000000000000000000000000000000000..8d1cb5c409dc25f3a1e6b48093b0a07d3ada64f7
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeTempModifier.java
@@ -0,0 +1,6 @@
+package me.dueris.canvas.registry.builders.biome;
+
+public enum BiomeTempModifier {
+    NONE,
+    FROZEN;
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeTypeBuilder.java b/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeTypeBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..09e95c6849f4f16c73be2acd96b11071847df93e
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/biome/BiomeTypeBuilder.java
@@ -0,0 +1,225 @@
+package me.dueris.canvas.registry.builders.biome;
+
+import java.util.ArrayList;
+
+import me.dueris.canvas.registry.builders.*;
+
+public interface BiomeTypeBuilder extends RegistrySource{
+    
+    /**
+     * Determines whether or not the biome has precipitation.
+     */
+    boolean hasPrecipitation();
+
+    /**
+     * @param has
+     */
+    void setHasPrecipitation(boolean has);
+
+    /**
+     * Controls gameplay features like grass and foliage color,
+     * and a height adjusted temperature (which controls whether
+     * raining or snowing if  has_precipitation is true, and generation
+     * details of some features).
+     */
+    float getTemperature();
+
+    /**
+     * @param temp
+     */
+    void setTemperature(float temp);
+
+    /**
+     * (optional, defaults to none) Either none or frozen.
+     * Modifies temperature before calculating the height
+     * adjusted temperature. If frozen, makes some places'
+     * temperature high enough to rain (0.2).
+     */
+    BiomeTempModifier getTempModifier();
+
+    /**
+     * @param modifier
+     */
+    void setTempModifier(BiomeTempModifier modifier);
+
+    /**
+     * Controls grass and foliage color.
+     */
+    float getDownfall();
+
+    /**
+     * @param downfall
+     */
+    void setDownfall(float downfall);
+
+    /**
+     * Decimal value converted from Hex color to use for fog.
+     */
+    int getFogColor();
+
+    /**
+     * @param T
+     */
+    void setFogColor(int T);
+
+    /**
+     * Decimal value converted from Hex color to use for the sky.
+     */
+    int getSkyColor();
+
+    /**
+     * @param T
+     */
+    void setSkyColor(int T);
+
+    /**
+     * Decimal value converted from Hex color to use for
+     * water blocks and cauldrons.
+     */
+    int getWaterColor();
+
+    /**
+     * @param T
+     */
+    void setWaterColor(int T);
+
+    /**
+     * Decimal value converted from Hex color to use for fog.
+     */
+    int getWaterFogColor();
+
+    /**
+     * @param T
+     */
+    void setWaterFogColor(int T);
+
+    /**
+     * (optional) Decimal value converted from Hex color
+     * to use for tree leaves and vines. If not present,
+     * the value depends on downfall and the temperature.
+     */
+    int getFoliageColor();
+
+    /**
+     * @param T
+     */
+    void setFoliageColor(int T);
+
+    /**
+     * (optional) Decimal value converted from Hex color to use
+     * for grass blocks, grass, tall grass, ferns, tall ferns,
+     * and sugar cane. If not present, the value depends on
+     * downfall and temperature.
+     */
+    int getGrassColor();
+
+    /**
+     * @param T
+     */
+    void setGrassColor(int T);
+
+    /**
+     * (optional, defaults to none) Can be none, dark_forest or swamp.
+     */
+    BiomeGrassColorModifier getGrassColorModifier();
+
+    /**
+     * @param modifier
+     */
+    void setGrassColorModifier(BiomeGrassColorModifier modifier);
+
+    /**
+     * (optional) Higher value results in more creatures spawned
+     * in world generation. Must be between 0.0 and 0.9999999 (both inclusive).
+     */
+    float getCreatureSpawnProb();
+
+    /**
+     * @param T
+     */
+    void setCreatureSpawnProb(float T);
+
+    /**
+     * (Required, but can be empty. If this object doesn't
+     * contain a certain category, mobs in this category will
+     * not be spawned) Entity spawning settings.
+     * 
+     * <mob category>: (Can be empty. If empty, mobs in this category will not be
+     * spawned) The key must be one of monster, creature, ambient, water_creature,
+     * underground_water_creature, water_ambient, misc, or axolotls. A list of spawner
+     * data objects, one for each mob which should spawn in this biome.
+     * 
+     * The spawner data for a single mob.
+     *   type: The namespaced entity id of the mob.
+     *   weight: How often this mob should spawn, higher values produce more spawns.
+     *   minCount: The minimum count of mobs to spawn in a pack. Must be greater than 0.
+     *   maxCount: The maximum count of mobs to spawn in a pack. Must be greater than 0.
+     */
+    ArrayList<BiomeMobSpawner> getAllSpawners();
+
+    /**
+     * @param T
+     */
+    void addSpawner(BiomeMobSpawner T);
+
+    /**
+     * @param T
+     */
+    void removeSpawner(BiomeMobSpawner T);
+
+    /**
+     * features: (Can be empty) A list of 11 elements. Each element can
+     * be a tag of placed feature, a list of placed feature IDs,
+     * or a list of placed feature objects. The features are applied to each chunk
+     * in order in each step. The same placed features in the same step in two
+     * biomes cannot be in different orders. In each step, all feature IDs need
+     * to be ordered consistently across biomes. For example, in UNDERGROUND_ORES
+     * step of minecraft:plains, ore_dirt is before ore_gravel, so in other
+     * biomes' UNDERGROUND_ORES step, if there are ore_dirt and ore_gravel,
+     * ore_gravel cannot be after ore_dirt. The generation steps are also used in stucture features.
+     * 
+     *  : Generation step RAW_GENERATION. Used by small end island features in vanilla.
+     *  : Generation step LAKES. Used by lava lakes in vanilla.
+     *  : Generation step LOCAL_MODIFICATIONS. Used for amethyst geodes and icebergs in vanilla.
+     *  : Generation step UNDERGROUND_STRUCTURES. Used for dungeons and overworld fossils in vanilla.
+     *  : Generation step SURFACE_STRUCTURES. Used for desert wells and blue ice patches in vanilla.
+     *  : Generation step STRONGHOLDS. Not used for features in vanilla.
+     *  : Generation step UNDERGROUND_ORES. Used for overworld ore blobs, overworld dirt/gravel/stone variant blobs, and sand/gravel/clay disks in vanilla.
+     *  : Generation step UNDERGROUND_DECORATION. Used for infested block blobs, nether gravel and blackstone blobs, and all nether ore blobs in vanilla.
+     *  : Generation step FLUID_SPRINGS. Used for water and lava springs in vanilla.
+     *  : Generation step VEGETAL_DECORATION. Used for trees, bamboo, cacti, kelp, and other ground and ocean vegetation in vanilla.
+     *  : Generation step TOP_LAYER_MODIFICATION. Used for surface freezing in vanilla.
+     */
+    BiomeGenerator getBiomeGenerator();
+
+    /**
+     * @param generator
+     */
+    void setGenerator(BiomeGenerator generator);
+
+    /**
+     * (optional) The particle to use throughout this biome.
+     */
+    BiomeParticle getParticleOptions();
+
+    /**
+     * @param particle
+     */
+    void setParticleOptions(BiomeParticle particle);
+
+    /**
+     * (Optional, can be empty) List of carvers used during the air cave generation
+     * step. Can be an id of a configured carver, a tag of configured carvers,
+     * or a configured carver object, or a list of configured carver IDs, or a
+     * list of configured carver objects.
+     */
+    public ArrayList<String> getAirCarvers();
+
+    /**
+     * (Optional, can be empty) List of carvers used during the liquid cave
+     * generation step. Currently doesn't work. Can be an id of a configured
+     * carver, a tag of configured carvers, or a configured carver object,
+     * or a list of configured carver IDs, or a list of configured carver objects.
+     */
+    public ArrayList<String> getLiquidCarvers();
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/damage_type/DamageTypeBuilder.java b/src/main/java/me/dueris/canvas/registry/builders/damage_type/DamageTypeBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..d456a648b994ee7385690bb598f49052e2d2f939
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/damage_type/DamageTypeBuilder.java
@@ -0,0 +1,80 @@
+package me.dueris.canvas.registry.builders.damage_type;
+
+import me.dueris.canvas.registry.builders.RegistrySource;
+
+public interface DamageTypeBuilder extends RegistrySource {
+    /**
+     * Retrieves the message ID associated with the damage type.
+     * 
+     * @return The message ID as a String.
+     */
+    public String getMessageID();
+
+    /**
+     * Sets the message ID associated with the damage type.
+     * 
+     * @param msg The message ID to set.
+     * @return The DamageTypeBuilder instance.
+     */
+    public DamageTypeBuilder setMessageID(String msg);
+
+    /**
+     * Retrieves the exhaustion value of the damage type.
+     * 
+     * @return The exhaustion value as a float.
+     */
+    public float getExhaustion();
+
+    /**
+     * Sets the exhaustion value of the damage type.
+     * 
+     * @param exhaustion The exhaustion value to set.
+     * @return The DamageTypeBuilder instance.
+     */
+    public DamageTypeBuilder setExhaustion(float exhaustion);
+
+    /**
+     * Retrieves the scaling type of the damage type.
+     * 
+     * @return The scaling type as a Scaling enum.
+     */
+    public Scaling getScaling();
+
+    /**
+     * Sets the scaling type of the damage type.
+     * 
+     * @param scaling The scaling type to set.
+     * @return The DamageTypeBuilder instance.
+     */
+    public DamageTypeBuilder setScaling(Scaling scaling);
+
+    /**
+     * Retrieves the effects associated with the damage type.
+     * 
+     * @return The effects as an Effects object.
+     */
+    public Effects getEffects();
+
+    /**
+     * Sets the effects associated with the damage type.
+     * 
+     * @param effect The effects to set.
+     * @return The DamageTypeBuilder instance.
+     */
+    public DamageTypeBuilder setEffects(Effects effect);
+
+    /**
+     * Retrieves the death message type of the damage type.
+     * 
+     * @return The death message type as a DeathMessageType enum.
+     */
+    public DeathMessageType getDeathMessageType();
+
+    /**
+     * Sets the death message type of the damage type.
+     * 
+     * @param type The death message type to set.
+     * @return The DamageTypeBuilder instance.
+     */
+    public DamageTypeBuilder setDeathMessageType(DeathMessageType type);
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/damage_type/DeathMessageType.java b/src/main/java/me/dueris/canvas/registry/builders/damage_type/DeathMessageType.java
new file mode 100644
index 0000000000000000000000000000000000000000..3e255b4c427c7a99e7f14b7209c3e8de75f9be91
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/damage_type/DeathMessageType.java
@@ -0,0 +1,7 @@
+package me.dueris.canvas.registry.builders.damage_type;
+
+public enum DeathMessageType {
+    DEFAULT,
+    FALL_VARIENTS,
+    INTENTIONAL_GAME_DESIGN
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/damage_type/Effects.java b/src/main/java/me/dueris/canvas/registry/builders/damage_type/Effects.java
new file mode 100644
index 0000000000000000000000000000000000000000..67d1e53647695f76539dd25d433373161fde021f
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/damage_type/Effects.java
@@ -0,0 +1,10 @@
+package me.dueris.canvas.registry.builders.damage_type;
+
+public enum Effects {
+    THORNS,
+    DROWNING,
+    BURNING,
+    POKING,
+    FREEZING,
+    HURT
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/damage_type/Scaling.java b/src/main/java/me/dueris/canvas/registry/builders/damage_type/Scaling.java
new file mode 100644
index 0000000000000000000000000000000000000000..41767577681e8b8f2306ec27b93b8792c9dbc112
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/damage_type/Scaling.java
@@ -0,0 +1,7 @@
+package me.dueris.canvas.registry.builders.damage_type;
+
+public enum Scaling {
+    NEVER,
+    ALWAYS,
+    WHEN_CAUSED_BY_NON_LIVING_PLAYERT
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/dimension_type/DimensionEffects.java b/src/main/java/me/dueris/canvas/registry/builders/dimension_type/DimensionEffects.java
new file mode 100644
index 0000000000000000000000000000000000000000..4ac65af6f27b97009b4163a0697dfcbc22310df5
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/dimension_type/DimensionEffects.java
@@ -0,0 +1,7 @@
+package me.dueris.canvas.registry.builders.dimension_type;
+
+public enum DimensionEffects {
+    OVERWORLD,
+    NETHER,
+    THE_END;
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/dimension_type/DimensionTypeBuilder.java b/src/main/java/me/dueris/canvas/registry/builders/dimension_type/DimensionTypeBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..30b88492282c592adcc38784ce141628edd0984c
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/dimension_type/DimensionTypeBuilder.java
@@ -0,0 +1,259 @@
+package me.dueris.canvas.registry.builders.dimension_type;
+
+import me.dueris.canvas.registry.builders.RegistrySource;
+import me.dueris.canvas.registry.builders.dimension_type.*;
+
+/**
+ * This creates a Dimension TYPE, not an actual dimension.
+ * Dimension types are like templates to work off of, that define
+ * the characteristics of a new dimension type, like superflat or amplified,
+ * or the metadata of the dimension
+ * 
+ * This registry is meant to be able to expand the world creator to furthur customize
+ * what you can do with it.
+ * 
+ * To create your dimension with Canvas/CraftBukkit use the Bukkit world creator
+ * api and use the type("your_dimension_key") method to set the type to this one.
+ */
+public interface DimensionTypeBuilder extends RegistrySource {
+    /**
+     * Whether the dimensions behaves like the nether (water evaporates and 
+     * sponges dry) or not. Also lets stalactites drip lava and causes lava 
+     * to spread faster and thinner.
+     * 
+     * @return ultrawarm
+     */
+    boolean getUltrawarm();
+
+    /**
+     * @param ultrawarm
+     */
+    void setUltrawarn(boolean ultrawarm);
+
+    /**
+     * When false, compasses spin randomly, and using a bed to set the
+     * respawn point or sleep, is disabled. When true, nether portals
+     * can spawn zombified piglins.
+     * 
+     * @return natural
+     */
+    boolean getNatural();
+
+    /**
+     * @param nat
+     */
+    void setNatural(boolean nat);
+
+    /**
+     * The multiplier applied to coordinates when leaving the dimension.
+     * Value between 0.00001 and 30000000.0 (both inclusive)。
+     * 
+     * @return coord scale
+     */
+    double getCoordScale();
+
+    /**
+     * @param scale
+     */
+    void setCoordScale(double scale);
+
+    /**
+     * Whether the dimension has skylight or not.
+     * 
+     * @return has skylight
+     */
+    boolean hasSkylight();
+
+    /**
+     * @param skylight
+     */
+    void setHasSkylight(boolean skylight);
+
+    /**
+     * Whether the dimension has a bedrock ceiling. Note that this is
+     * only a logical ceiling. It is unrelated with whether the dimension
+     * really has a block ceiling.
+     * 
+     * @return has ceiling
+     */
+    boolean hasCeiling();
+
+    /**
+     * @param has
+     */
+    void setHasCeiling(boolean has);
+
+    /**
+     * How much light the dimension has. When set to 0, it completely
+     * follows the light level; when set to 1, there is no ambient lighting
+     * 
+     * @return ambient light value
+     */
+    float getAmbientLight();
+
+    /**
+     * @param light
+     */
+    void setAmbientLight(float light);
+
+    /**
+     * @return if the dimension should have a fixed time, default false
+     */
+    boolean getUseFixedTime();
+
+    /**
+     * @param fixedTime
+     */
+    void setUseFixedTime(boolean fixedTime);
+
+    /**
+     * (optional) If this is set to an int, the time of the day is the
+     * specified value. To ensure a normal time cycle, leave the attribute undefined
+     * (i.e, set the value of use fixed time to false).
+     * 
+     * @return fixed time
+     */
+    long getFixedTime();
+
+    /**
+     * @param time
+     */
+    void setFixedTime(long time);
+
+    /**
+     * Value between 0 and 15 (both inclusive). Maximum light required when the monster
+     * spawns. The formula of this light is: max( skyLight - 10, blockLight ) during
+     * thunderstorms, and max( internalSkyLight, blockLight ) during other weather.
+     * 
+     * @return monster spawn light level
+     */
+    int getMonsterSpawnLightLevel();
+
+    /**
+     * @param lvl
+     */
+    void setMonsterSpawnLightLevel(int lvl);
+
+    /**
+     * Value between 0 and 15 (both inclusive). Maximum block light required
+     * when the monster spawns.
+     * 
+     * @return monster spawn block light limit
+     */
+    int getMonsterSpawnBlockLightLimit();
+
+    /**
+     * @param limit
+     */
+    void setMonsterSpawnBlockLightLimit(int limit);
+
+    /**
+     * Whether Piglin and hoglin shake and transform to zombified entities.
+     * 
+     * @return is pigling safe
+     */
+    boolean getPiglinSafe();
+
+    /**
+     * @param safe
+     */
+    void setPiglinSafe(boolean safe);
+
+    /**
+     * When false, the bed blows up when trying to sleep.
+     * 
+     * @return if bed works
+     */
+    boolean getBedWorks();
+
+    /**
+     * @param works
+     */
+    void setBedWorks(boolean works);
+
+    /**
+     * When false, the respawn anchor blows up when trying to set spawn point.
+     * 
+     * @return respawn anchor works
+     */
+    boolean getRespawnAnchorWorks();
+
+    /**
+     * @param works
+     */
+    void setRespawnAnchorWorks(boolean works);
+
+    /**
+     * Whether players with the Bad Omen effect can cause a raid.
+     * 
+     * @return has raids
+     */
+    boolean hasRaids();
+
+    /**
+     * @param has
+     */
+    void setHasRaids(boolean has);
+
+    /**
+     * The maximum height to which chorus fruits and nether portals can
+     * bring players within this dimension. This excludes portals that
+     * were already built above the limit as they still connect normally
+     * Cannot be greater than height.
+     * 
+     * @return logical height
+     */
+    int getLogicalHeight();
+
+    /**
+     * @param logical_height
+     */
+    void setLogicalHeight(int logical_height);
+
+    /**
+     * The minimum height in which blocks can exist within this dimension.
+     * Must be between -2032 and 2031 and be a multiple of 16.
+     * (effectively making 2016 the maximum)
+     * 
+     * @return min y
+     */
+    int getMinY();
+
+    /**
+     * @param y
+     */
+    void setMinY(int y);
+
+    /**
+     * The total height in which blocks can exist within this dimension.
+     * Must be between 16 and 4064 and be a multiple of 16. The maximum
+     * building height = min_y + height - 1, which cannot be greater than 2031.
+     * 
+     * @return height
+     */
+    int getHeight();
+
+    /**
+     * @param height
+     */
+    void setHeight(int height);
+
+    /**
+     * (optional, defaults to minecraft:overworld) Can be "minecraft:overworld",
+     * "minecraft:the_nether" and "minecraft:the_end". Determines the dimension
+     * effect used for this dimension. Setting to overworld makes the dimension
+     * have clouds, sun, stars and moon. Setting to the nether makes the dimension
+     * have thick fog blocking that sight, similar to the nether. Setting to the end
+     * makes the dimension have dark spotted sky similar to the end, ignoring
+     * the sky and fog color.
+     * 
+     * @return dimension effect
+     */
+    DimensionEffects getDimensionEffect();
+
+    /**
+     * @param effect
+     */
+    void setDimensionEffect(DimensionEffects effect);
+
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/mcfunction/FunctionTypeBuilder.java b/src/main/java/me/dueris/canvas/registry/builders/mcfunction/FunctionTypeBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..218292a28822e80cb607dee32caba42f0aad8960
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/mcfunction/FunctionTypeBuilder.java
@@ -0,0 +1,18 @@
+package me.dueris.canvas.registry.builders.mcfunction;
+
+import java.util.ArrayList;
+
+import me.dueris.canvas.registry.builders.RegistrySource;
+
+public interface FunctionTypeBuilder extends RegistrySource {
+    /**
+     * Represents the string values of the commands used in the mcfunction
+     * @return the cmds in the mcfunction
+     */
+    public ArrayList<String> getCommands();
+    
+    /**
+     * @param cmds
+     */
+    public void setCommands(ArrayList<String> cmds);
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/tag/ResourceLocationType.java b/src/main/java/me/dueris/canvas/registry/builders/tag/ResourceLocationType.java
new file mode 100644
index 0000000000000000000000000000000000000000..3c9b9a90f434abbfaa943336ef0a4163f1a65304
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/tag/ResourceLocationType.java
@@ -0,0 +1,20 @@
+package me.dueris.canvas.registry.builders.tag;
+
+public enum ResourceLocationType {
+    FUNCTION,
+    DAMAGE_TYPE,
+    INSTRUMENT,
+    BANNER_PATTERN,
+    PAINTING_VARIENT,
+    CAT_VARIENT,
+    WORLD$WORLD_PRESET,
+    WORLD$FLAT_LEVEL_GENERATOR_PRESET,
+    WORLD$STRUCTURE,
+    WORLD$BIOME,
+    ITEMS,
+    GAME_EVENTS,
+    FLUIDS,
+    ENTITY_TYPES,
+    BLOCKS,
+    POINT_OF_INTEREST_TYPE,
+}
diff --git a/src/main/java/me/dueris/canvas/registry/builders/tag/TagTypeBuilder.java b/src/main/java/me/dueris/canvas/registry/builders/tag/TagTypeBuilder.java
new file mode 100644
index 0000000000000000000000000000000000000000..c88828d82e60ba98efeb2ade9345083a95330fef
--- /dev/null
+++ b/src/main/java/me/dueris/canvas/registry/builders/tag/TagTypeBuilder.java
@@ -0,0 +1,82 @@
+package me.dueris.canvas.registry.builders.tag;
+
+import org.bukkit.NamespacedKey;
+
+import me.dueris.canvas.registry.builders.RegistrySource;
+
+public interface TagTypeBuilder extends RegistrySource{
+    /**
+     * Retrieves the resource location type associated with the tag type.
+     * 
+     * @return The ResourceLocationType of the tag type.
+     */
+    public ResourceLocationType getResourceLocationType();
+
+    /**
+     * Sets the resource location type of the tag type.
+     * 
+     * @param type The ResourceLocationType to set.
+     * @return The TagTypeBuilder instance.
+     */
+    public TagTypeBuilder setResourceLocationType(ResourceLocationType type);
+
+    /**
+     * Retrieves whether the tag type should replace existing values.
+     * 
+     * @return True if the tag type replaces existing values, false otherwise.
+     */
+    public boolean getReplace();
+
+    /**
+     * Sets whether the tag type should replace existing values.
+     * 
+     * @param replace True to replace existing values, false otherwise.
+     * @return The TagTypeBuilder instance.
+     */
+    public TagTypeBuilder setReplace(boolean replace);
+
+    /**
+     * Adds a value to the tag type.
+     * 
+     * @param value The value to add as a String.
+     */
+    public void addValue(String value);
+
+    /**
+     * Adds a NamespacedKey value to the tag type.
+     * 
+     * @param key The NamespacedKey value to add.
+     */
+    public void addValue(NamespacedKey key);
+
+    /**
+     * Removes a value from the tag type using its String representation.
+     * 
+     * @param value The value to remove as a String.
+     */
+    public void removeValue(String value);
+
+    /**
+     * Removes a NamespacedKey value from the tag type.
+     * 
+     * @param key The NamespacedKey value to remove.
+     */
+    public void removeValue(NamespacedKey key);
+
+    /**
+     * Checks if the tag type contains a value specified as a String.
+     * 
+     * @param value The value to check as a String.
+     * @return True if the tag type contains the value, false otherwise.
+     */
+    public boolean containsValue(String value);
+
+    /**
+     * Checks if the tag type contains a NamespacedKey value.
+     * 
+     * @param key The NamespacedKey value to check.
+     * @return True if the tag type contains the key, false otherwise.
+     */
+    public boolean containsValue(NamespacedKey key);
+
+}
diff --git a/src/main/java/org/bukkit/Server.java b/src/main/java/org/bukkit/Server.java
index 6a407100d7497942d6bac99aea9bd1a50248796b..39b88ce230d21a155e973a7dec5411060ab922ad 100644
--- a/src/main/java/org/bukkit/Server.java
+++ b/src/main/java/org/bukkit/Server.java
@@ -772,6 +772,11 @@ public interface Server extends PluginMessageRecipient, net.kyori.adventure.audi
      */
     @Nullable
     public World createWorld(@NotNull WorldCreator creator);
+    // Canvas start
+
+    @Nullable
+    public World createWorld(@NotNull WorldCreator creator, String dim_key);
+    // Canvas end
 
     /**
      * Unloads a world with the given name.
diff --git a/src/main/java/org/bukkit/WorldType.java b/src/main/java/org/bukkit/WorldType.java
index c48b5579f78760e93dc0ca71223ea5a5ce394873..337a0b241739683f396cf9506542042308584cfd 100644
--- a/src/main/java/org/bukkit/WorldType.java
+++ b/src/main/java/org/bukkit/WorldType.java
@@ -14,7 +14,7 @@ public enum WorldType {
     LARGE_BIOMES("LARGEBIOMES"),
     AMPLIFIED("AMPLIFIED");
 
-    private static final Map<String, WorldType> BY_NAME = Maps.newHashMap();
+    public static Map<String, WorldType> BY_NAME = Maps.newHashMap(); // Canvas - private -> public && final -> !final
     private final String name;
 
     private WorldType(/*@NotNull*/ String name) {
