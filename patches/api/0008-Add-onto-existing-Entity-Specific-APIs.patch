From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PurpleWolfMC <jedimastertoothless@hotmail.com>
Date: Sat, 21 Oct 2023 20:01:54 -0700
Subject: [PATCH] Add onto existing Entity-Specific APIs


diff --git a/src/main/java/io/papermc/paper/entity/SchoolableFish.java b/src/main/java/io/papermc/paper/entity/SchoolableFish.java
index 39ad7d283609d7e427a2ab35b6fad839e032fe92..19b28ee412a2cef1241054e71b7e6970842824bb 100644
--- a/src/main/java/io/papermc/paper/entity/SchoolableFish.java
+++ b/src/main/java/io/papermc/paper/entity/SchoolableFish.java
@@ -44,4 +44,8 @@ public interface SchoolableFish extends Fish {
     @Nullable
     SchoolableFish getSchoolLeader();
 
+    public void moveToLeader();
+
+    public boolean inRangeOfLeader();
+
 }
diff --git a/src/main/java/org/bukkit/entity/Allay.java b/src/main/java/org/bukkit/entity/Allay.java
index e5e79202b97172efae31031c9c86808b9a268ce5..56555a1f79397da81d6c6e84dded2c6775f39a66 100644
--- a/src/main/java/org/bukkit/entity/Allay.java
+++ b/src/main/java/org/bukkit/entity/Allay.java
@@ -103,4 +103,22 @@ public interface Allay extends Creature, InventoryHolder {
      */
     @Nullable
     public Location getJukebox();
+
+    // Canvas start
+
+    /**
+     * Checks if the entity can interact with something.
+     *
+     * @return true if the entity can interact, false otherwise.
+     */
+    public boolean canInteractWith();
+
+    /**
+     * Sets whether the entity can interact with something.
+     *
+     * @param canInteractWith true to allow interaction, false to restrict it.
+     */
+    public void setCanInteractWith(boolean canInteractWith);
+
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Axolotl.java b/src/main/java/org/bukkit/entity/Axolotl.java
index c8c738b1b72e9ad89d97b7a1f5450d58045a72ca..238182c1b83bfe91b7f834a7aa4b1dcddc84ec91 100644
--- a/src/main/java/org/bukkit/entity/Axolotl.java
+++ b/src/main/java/org/bukkit/entity/Axolotl.java
@@ -1,5 +1,6 @@
 package org.bukkit.entity;
 
+import org.bukkit.potion.PotionEffectType;
 import org.jetbrains.annotations.NotNull;
 
 /**
@@ -66,4 +67,51 @@ public interface Axolotl extends Animals, io.papermc.paper.entity.Bucketable { /
          */
         BLUE;
     }
+
+    // Canvas start
+
+    /**
+     * Returns whether supporting effects should be applied.
+     *
+     * @return true if supporting effects should be applied, false otherwise.
+     */
+    public boolean getApplySupportingEffects();
+
+    /**
+     * Sets whether supporting effects should be applied.
+     *
+     * @param applySupportingEffects true to apply supporting effects, false to disable.
+     */
+    public void setApplySupportingEffects(boolean applySupportingEffects);
+
+    /**
+     * Sets the type of supporting potion effect.
+     *
+     * @param potionEffectType The type of potion effect to apply as support.
+     */
+    public void setSupportingEffectType(PotionEffectType potionEffectType);
+
+    /**
+     * Returns the type of supporting potion effect.
+     *
+     * @return The type of potion effect used for support.
+     */
+    public PotionEffectType getSupportingPotionEffectType();
+
+    /**
+     * Sets the amplifier (strength) of the supporting effect.
+     *
+     * @param amplifier The amplifier value for the supporting effect.
+     */
+    public void setSupportingEffectAmplifier(int amplifier);
+
+    /**
+     * Returns the amplifier (strength) of the supporting effect.
+     *
+     * @return The amplifier value of the supporting effect.
+     */
+    public int getSupportingEffectAmplifier();
+
+
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Bat.java b/src/main/java/org/bukkit/entity/Bat.java
index b9f8b14d90a758672642222675d2f5664d4f67b4..5bdfcbd3169445c1b09a22b86cac78c323471ae4 100644
--- a/src/main/java/org/bukkit/entity/Bat.java
+++ b/src/main/java/org/bukkit/entity/Bat.java
@@ -43,4 +43,16 @@ public interface Bat extends Ambient {
      */
     void setTargetLocation(@org.jetbrains.annotations.Nullable org.bukkit.Location location);
     // Paper end
+
+    /**
+     * Allows for the setting of the ticks per flap data field
+     * @param tpf
+     */
+    public void setTicksPerFlap(int tpf); // Canvas
+
+    /**
+     * Gets the ticks per flap data value
+     * @return ticks per flap value
+     */
+    public int getTicksPerFlap(); // Canvas
 }
diff --git a/src/main/java/org/bukkit/entity/Blaze.java b/src/main/java/org/bukkit/entity/Blaze.java
index 7a5505b7fa84629f81c152fb6da90bdb2392f9df..072163cd7b06360e382aea2091883923b2729a43 100644
--- a/src/main/java/org/bukkit/entity/Blaze.java
+++ b/src/main/java/org/bukkit/entity/Blaze.java
@@ -4,5 +4,20 @@ package org.bukkit.entity;
  * Represents a Blaze monster
  */
 public interface Blaze extends Monster {
+    // Canvas start
+    /**
+     * Checks if the entity is currently on fire.
+     *
+     * @return true if the entity is on fire, false otherwise.
+     */
+    public boolean isOnFire();
 
+    /**
+     * Sets whether the entity is charged with fire.
+     *
+     * @param fireActive true to set the entity on fire, false to extinguish it.
+     */
+    public void setCharged(boolean fireActive);
+
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Boat.java b/src/main/java/org/bukkit/entity/Boat.java
index 2ac685fb1817f3ce06ebe6391cc863712d68367c..db7cbd6d9849c9e69c91171f0d53ca40cd9ad14b 100644
--- a/src/main/java/org/bukkit/entity/Boat.java
+++ b/src/main/java/org/bukkit/entity/Boat.java
@@ -186,4 +186,46 @@ public interface Boat extends Vehicle {
     @NotNull
     public Material getBoatMaterial();
     // Paper end
+
+    // Canvas start
+    /**
+     * Sets whether the boat should drop an item when destroyed.
+     *
+     * @param shouldDrop true if the boat should drop an item, false otherwise.
+     */
+    public void shouldDropItemOnDestroy(boolean shouldDrop);
+
+    /**
+     * Checks if the boat should drop an item when destroyed.
+     *
+     * @return true if the boat should drop an item on destroy, false otherwise.
+     */
+    public boolean getShouldDropItemOnDestroy();
+
+    /**
+     * Destroys the boat, potentially dropping an item if specified.
+     */
+    public void destroy();
+
+    /**
+     * Sets the drop item material for the boat when destroyed.
+     *
+     * @param itemMaterial The material of the item to drop.
+     * @param boatType The material of the boat that can drop the item.
+     */
+    public void setDropItem(final Boat.Type boatType, final Material itemMaterial);
+
+    /**
+     * Gets the drop item material for the boat when destroyed, considering the boat material.
+     *
+     * @param boatMaterial The material of the boat.
+     * @return The material of the item to drop.
+     */
+    public Material getDropItem(Boat.Type boatMaterial);
+
+    /**
+     * Resets the drop map to its default state, removing any custom drop settings.
+     */
+    public void resetDropMap();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Cat.java b/src/main/java/org/bukkit/entity/Cat.java
index bd74b47879b69b7a2e078a5aca460e5c97b0a919..5791c63f85c219589d3255000f5823d04f513513 100644
--- a/src/main/java/org/bukkit/entity/Cat.java
+++ b/src/main/java/org/bukkit/entity/Cat.java
@@ -102,4 +102,38 @@ public interface Cat extends Tameable, Sittable, io.papermc.paper.entity.CollarC
      */
     public boolean isHeadUp();
     // Paper End - More cat api
+
+    // Canvas start
+    /**
+     * Make the cat hiss, typically producing a hissing sound or behavior.
+     * This can be used to simulate the cat's hissing action.
+     */
+    public void hiss();
+
+    /**
+     * Check if the cat is currently stepping carefully, slower movement
+     *
+     * @return True if the cat is stepping carefully; false otherwise.
+     */
+    public boolean isSteppingCarefully();
+
+    /**
+     * Check if the cat allows the spawning of morning gifts
+     *
+     * @return True if morning gift spawn is allowed; false otherwise.
+     */
+    public boolean allowMorningGiftSpawn();
+
+    /**
+     * Set whether the cat allows the spawning of morning gifts.
+     *
+     * @param allow True to allow morning gift spawn, false to disallow it.
+     */
+    public void setAllowMorningGiftSpawn(boolean allow);
+
+    /**
+     * Spawns a morning gift
+     */
+    public void spawnMorningGift();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/ChestBoat.java b/src/main/java/org/bukkit/entity/ChestBoat.java
index 4ebe1033c55dbd58d0794809435c935236fabcc2..29392c1f62aecb25bc6225d11af5953176b1989c 100644
--- a/src/main/java/org/bukkit/entity/ChestBoat.java
+++ b/src/main/java/org/bukkit/entity/ChestBoat.java
@@ -7,4 +7,12 @@ import org.bukkit.loot.Lootable;
  * A {@link Boat} with a chest.
  */
 public interface ChestBoat extends Boat, InventoryHolder, com.destroystokyo.paper.loottable.LootableEntityInventory { // Paper
+    // Canvas start
+    /**
+     * Opens a chest inventory for a player
+     *
+     * @param player The player for whom the chest inventory is being opened.
+     */
+    public void openChestInventory(Player player);
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Chicken.java b/src/main/java/org/bukkit/entity/Chicken.java
index b4c1a262602d4ca5ffc9fcc21d6aa79af8c040a7..8c73249ff50c7e1b12f2d80d5065b82f0e6606f6 100644
--- a/src/main/java/org/bukkit/entity/Chicken.java
+++ b/src/main/java/org/bukkit/entity/Chicken.java
@@ -33,5 +33,12 @@ public interface Chicken extends Animals {
      * @param eggLayTime ticks till the chicken lays an egg
      */
     void setEggLayTime(int eggLayTime);
+
+    /**
+     * Returns a boolean for if the chicken is flapping
+     *
+     * @return Is entity flapping
+     */
+    public boolean isFlapping();
 }
 // Paper end
diff --git a/src/main/java/org/bukkit/entity/Creature.java b/src/main/java/org/bukkit/entity/Creature.java
index 6c9c5e85ead62b258f3b86a647be4c9db7bb3a27..c70d9431cba4d15dee34132fd2de39d736662158 100644
--- a/src/main/java/org/bukkit/entity/Creature.java
+++ b/src/main/java/org/bukkit/entity/Creature.java
@@ -4,4 +4,11 @@ package org.bukkit.entity;
  * Represents a Creature. Creatures are non-intelligent monsters or animals
  * which have very simple abilities.
  */
-public interface Creature extends Mob {}
+public interface Creature extends Mob {
+    /**
+     * Checks if the entity is currently in a state of panic
+     *
+     * @return true if the entity is panicking; false otherwise.
+     */
+    public boolean isPanicking();
+}
diff --git a/src/main/java/org/bukkit/entity/Drowned.java b/src/main/java/org/bukkit/entity/Drowned.java
index 8d1ad9ef757cb1e8d72b145262df73612a76c746..0eae75026d280b94b6a54056c0685c9efa17a4c4 100644
--- a/src/main/java/org/bukkit/entity/Drowned.java
+++ b/src/main/java/org/bukkit/entity/Drowned.java
@@ -5,4 +5,10 @@ import com.destroystokyo.paper.entity.RangedEntity;
 /**
  * Drowned zombie.
  */
-public interface Drowned extends Zombie, RangedEntity { } // Paper
+public interface Drowned extends Zombie, RangedEntity { // Paper
+    // Canvas start
+    public boolean isSearchingForLand();
+
+    public void setSearchingForLand(boolean searching);
+    // Canvas end
+}
diff --git a/src/main/java/org/bukkit/entity/ElderGuardian.java b/src/main/java/org/bukkit/entity/ElderGuardian.java
index 5ca1d4c9f235918070e4180608ab92d6f1b25343..acd2664b4907f597cba315fa163056c497eeaf7d 100644
--- a/src/main/java/org/bukkit/entity/ElderGuardian.java
+++ b/src/main/java/org/bukkit/entity/ElderGuardian.java
@@ -3,4 +3,76 @@ package org.bukkit.entity;
 /**
  * Represents an ElderGuardian - variant of {@link Guardian}.
  */
-public interface ElderGuardian extends Guardian { }
+public interface ElderGuardian extends Guardian {
+    // Canvas start
+    /**
+     * Sets the effect amplifier for the Elder Guardian. The effect amplifier determines the strength of the Guardian's special effect.
+     *
+     * @param effectAmplifier The effect amplifier to set.
+     */
+    public void setEffectAmplifier(final int effectAmplifier);
+
+    /**
+     * Gets the duration of the Guardian's special effect.
+     *
+     * @return The duration of the Guardian's special effect.
+     */
+    public int getEffectDuration();
+
+    /**
+     * Sets the duration of the Guardian's special effect.
+     *
+     * @param effectDuration The duration to set for the Guardian's special effect.
+     */
+    public void setEffectDuration(final int effectDuration);
+
+    /**
+     * Gets the effect amplifier for the Elder Guardian. The effect amplifier determines the strength of the Guardian's special effect.
+     *
+     * @return The effect amplifier of the Guardian.
+     */
+    public int getEffectAmplifier();
+
+    /**
+     * Gets the maximum limit for displaying the Guardian's special effect.
+     *
+     * @return The maximum limit for displaying the Guardian's special effect.
+     */
+    public int getEffectDisplayLimit();
+
+    /**
+     * Sets the maximum limit for displaying the Guardian's special effect. This limit determines when the special effect is visible.
+     *
+     * @param effectDisplayLimit The maximum limit for displaying the Guardian's special effect.
+     */
+    public void setEffectDisplayLimit(final int effectDisplayLimit);
+
+    /**
+     * Gets the interval at which the Guardian's special effect is applied or checked.
+     *
+     * @return The interval for the Guardian's special effect.
+     */
+    public int getEffectInterval();
+
+    /**
+     * Sets the interval at which the Guardian's special effect is applied or checked.
+     *
+     * @param effectInterval The interval for the Guardian's special effect.
+     */
+    public void setEffectInterval(final int effectInterval);
+
+    /**
+     * Gets the radius at which the Guardian's special effect can affect entities.
+     *
+     * @return The radius for the Guardian's special effect.
+     */
+    public int getEffectRadius();
+
+    /**
+     * Sets the radius at which the Guardian's special effect can affect entities.
+     *
+     * @param effectRadius The radius for the Guardian's special effect.
+     */
+    public void setEffectRadius(final int effectRadius);
+    // Canvas end
+}
diff --git a/src/main/java/org/bukkit/entity/EnderDragon.java b/src/main/java/org/bukkit/entity/EnderDragon.java
index 68f58c40a56791df177967de5661cca976a7e98c..42aeb0a2b5c62c65798a1a42f60c245d76bc14a3 100644
--- a/src/main/java/org/bukkit/entity/EnderDragon.java
+++ b/src/main/java/org/bukkit/entity/EnderDragon.java
@@ -4,6 +4,7 @@ import org.bukkit.World;
 import org.bukkit.boss.DragonBattle;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
+import java.util.List;
 
 /**
  * Represents an Ender Dragon
@@ -126,4 +127,32 @@ public interface EnderDragon extends ComplexLivingEntity, Boss, Mob, Enemy {
      */
     void setPodium(@Nullable org.bukkit.Location location);
     // Paper end
+
+    // Canvas start
+    /**
+     * Sets the Dragon Battle for the entity
+     *
+     * @param dragonBattle The Dragon Battle instance to set for this entity.
+     */
+    public void setDragonBattle(DragonBattle dragonBattle);
+
+    /**
+     * Applies knockback to a list of entities with the knockback source of the Dragon
+     *
+     * @param entities The list of entities to apply knockback to.
+     */
+    public void knockback(List<Entity> entities);
+
+    /**
+     * Applies knockback to a specific entity with a knockback source of the Dragon
+     *
+     * @param entity The entity to apply knockback to.
+     */
+    public void knockback(Entity entity);
+
+    /**
+     * Checks for obstacles or walls in the environment that may affect the entity's movement or behavior.
+     */
+    public boolean inWall();
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Enderman.java b/src/main/java/org/bukkit/entity/Enderman.java
index b8ad718dbc6bc6e4000480d35c499cc1542998fa..41ff23aed616532e514b4618cc9a5b680a1201f4 100644
--- a/src/main/java/org/bukkit/entity/Enderman.java
+++ b/src/main/java/org/bukkit/entity/Enderman.java
@@ -1,5 +1,6 @@
 package org.bukkit.entity;
 
+import org.apache.commons.lang3.tuple.Pair;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.material.MaterialData;
 import org.jetbrains.annotations.ApiStatus;
@@ -121,4 +122,44 @@ public interface Enderman extends Monster {
      */
     void setHasBeenStaredAt(boolean hasBeenStaredAt);
     // Paper end
+
+    // Canvas start
+    /**
+     * Teleports the entity towards the specified coordinates (x, y, z).
+     *
+     * @param x The x-coordinate to teleport towards.
+     * @param y The y-coordinate to teleport towards.
+     * @param z The z-coordinate to teleport towards.
+     */
+    public void teleportTowards(int x, int y, int z);
+
+    /**
+     * Sets the persistent anger time for the entity, defining the minimum and maximum values.
+     *
+     * @param min The minimum persistent anger time value.
+     * @param max The maximum persistent anger time value.
+     */
+    public void setPersistentAngerTime(int min, int max);
+
+    /**
+     * Gets the persistent anger time as a pair of values, where the left value represents the minimum and the right value represents the maximum.
+     * setValue() method doesnt work and shouldnt be used. It will always return null.
+     * @return A Pair containing the minimum and maximum persistent anger time values.
+     */
+    public Pair<Integer, Integer> getPersistentAngerTime();
+
+    /**
+     * Plays the Enderman staring sound.
+     */
+    public void playStareSound();
+
+    /**
+     * Checks if the player is looking at the Enderman.
+     *
+     * @param player The player to check if the entity is looking at.
+     * @return true if the player is looking at the Enderman, false otherwise.
+     */
+    public boolean isLookingAtMe(Player player);
+
+    // Canvas end
 }
diff --git a/src/main/java/org/bukkit/entity/Fireball.java b/src/main/java/org/bukkit/entity/Fireball.java
index 7a44707f2307dc4dbfea4de3f4baf3cc0490dc93..ea12d01be3fb8b25ae2fb2d48c75b7624f07df4e 100644
--- a/src/main/java/org/bukkit/entity/Fireball.java
+++ b/src/main/java/org/bukkit/entity/Fireball.java
@@ -1,5 +1,6 @@
 package org.bukkit.entity;
 
+import org.bukkit.Particle;
 import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 
@@ -23,4 +24,16 @@ public interface Fireball extends Projectile, Explosive {
     @NotNull
     public Vector getDirection();
 
+    public void setParticleTrailType(Particle particle);
+
+    public Particle getParticleTrailType();
+
+    public void setShouldBurn(boolean should);
+
+    public boolean shouldBurn();
+
+    public void setInertia(float inertia);
+
+    public float getInertia();
+
 }
diff --git a/src/main/java/org/bukkit/entity/Mob.java b/src/main/java/org/bukkit/entity/Mob.java
index 9e289e92ad76cf61d445b77e3765b0e3ea1abcf7..c06d28a06cfde8fdbb11fc59ab29d7d8cb9eacf4 100644
--- a/src/main/java/org/bukkit/entity/Mob.java
+++ b/src/main/java/org/bukkit/entity/Mob.java
@@ -10,6 +10,15 @@ import org.jetbrains.annotations.Nullable;
  */
 public interface Mob extends LivingEntity, Lootable {
 
+    // Canvas start
+    /**
+     * Checks if the entity can be leashed by a player
+     *
+     * @return true if the entity can be leashed by a player; false otherwise.
+     */
+    public boolean canBeLeashed(Player player);
+    // Canvas end
+
     // Paper start
     @Override
     org.bukkit.inventory.@org.jetbrains.annotations.NotNull EntityEquipment getEquipment();
