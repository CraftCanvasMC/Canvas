From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dueris <jedimastertoothless@hotmail.com>
Date: Fri, 20 Dec 2024 19:53:56 -0800
Subject: [PATCH] Misc Optimizations


diff --git a/src/main/java/net/minecraft/server/level/ChunkTrackingView.java b/src/main/java/net/minecraft/server/level/ChunkTrackingView.java
index 2e354b410324029e1b06eb2995c7b9ff9a0037bf..f75fd2b626a100beb65bd69e3953c3494a977a1b 100644
--- a/src/main/java/net/minecraft/server/level/ChunkTrackingView.java
+++ b/src/main/java/net/minecraft/server/level/ChunkTrackingView.java
@@ -73,12 +73,12 @@ public interface ChunkTrackingView {
     }
 
     static boolean isWithinDistance(int centerX, int centerZ, int viewDistance, int x, int z, boolean includeEdge) {
-        int i = includeEdge ? 2 : 1;
-        long l = (long)Math.max(0, Math.abs(x - centerX) - i);
-        long m = (long)Math.max(0, Math.abs(z - centerZ) - i);
-        long n = l * l + m * m;
-        int j = viewDistance * viewDistance;
-        return n < (long)j;
+        // Canvas start - optimize
+        int actualViewDistance = viewDistance + (includeEdge ? 1 : 0);
+        int xDistance = Math.abs(centerX - x);
+        int zDistance = Math.abs(centerZ - z);
+        return xDistance <= actualViewDistance && zDistance <= actualViewDistance;
+        // Canvas end
     }
 
     public static record Positioned(ChunkPos center, int viewDistance) implements ChunkTrackingView {
diff --git a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
index 038710ba934a9a57815dfe9f414b98223b848385..996a35443f1d6679672f7d4851a87be9db11a04b 100644
--- a/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
+++ b/src/main/java/net/minecraft/util/ClassInstanceMultiMap.java
@@ -11,12 +11,14 @@ import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
+import it.unimi.dsi.fastutil.objects.Object2ObjectLinkedOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ObjectArrayList;
 import net.minecraft.Util;
 
 public class ClassInstanceMultiMap<T> extends AbstractCollection<T> {
-    private final Map<Class<?>, List<T>> byClass = Maps.newHashMap();
+    private final Map<Class<?>, List<T>> byClass = new Object2ObjectLinkedOpenHashMap<>();
     private final Class<T> baseClass;
-    private final List<T> allInstances = Lists.newArrayList();
+    private final List<T> allInstances = new ObjectArrayList<>();
 
     public ClassInstanceMultiMap(Class<T> elementType) {
         this.baseClass = elementType;
@@ -56,13 +58,27 @@ public class ClassInstanceMultiMap<T> extends AbstractCollection<T> {
     }
 
     public <S> Collection<S> find(Class<S> type) {
+        // Canvas start - optimize
+        List<T> cached = this.byClass.get(type);
+        if (cached != null) return (Collection<S>) cached;
+
         if (!this.baseClass.isAssignableFrom(type)) {
             throw new IllegalArgumentException("Don't know how to search for " + type);
         } else {
-            List<? extends T> list = this.byClass
-                .computeIfAbsent(type, typeClass -> this.allInstances.stream().filter(typeClass::isInstance).collect(Util.toMutableList()));
-            return (Collection<S>)Collections.unmodifiableCollection(list);
+            List<? extends T> list = this.byClass.computeIfAbsent(type,
+                typeClass -> {
+                    ObjectArrayList<T> ts = new ObjectArrayList<>(this.allInstances.size());
+                    for (Object _allElement : ((ObjectArrayList<T>) this.allInstances).elements()) {
+                        if (typeClass.isInstance(_allElement)) {
+                            ts.add((T) _allElement);
+                        }
+                    }
+                    return ts;
+                }
+            );
+            return (Collection<S>) list;
         }
+        // Canvas end
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/world/entity/Mob.java b/src/main/java/net/minecraft/world/entity/Mob.java
index 30213b1917de318989f280aed8735bbe539de100..d6fbbbeaded272a36adfa1cf6a1def289c34fba2 100644
--- a/src/main/java/net/minecraft/world/entity/Mob.java
+++ b/src/main/java/net/minecraft/world/entity/Mob.java
@@ -93,7 +93,6 @@ import org.bukkit.event.entity.EntityTargetLivingEntityEvent;
 import org.bukkit.event.entity.EntityTargetEvent;
 import org.bukkit.event.entity.EntityTransformEvent;
 import org.bukkit.event.entity.EntityUnleashEvent;
-import org.bukkit.event.entity.EntityUnleashEvent.UnleashReason;
 // CraftBukkit end
 
 public abstract class Mob extends LivingEntity implements EquipmentUser, Leashable, Targeting {
@@ -904,7 +903,7 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
         if (this.level().getDifficulty() == Difficulty.PEACEFUL && this.shouldDespawnInPeaceful()) {
             this.discard(EntityRemoveEvent.Cause.DESPAWN); // CraftBukkit - add Bukkit remove cause
         } else if (!this.isPersistenceRequired() && !this.requiresCustomPersistence()) {
-            Player entityhuman = this.level().findNearbyPlayer(this, -1.0D, EntitySelector.PLAYER_AFFECTS_SPAWNING); // Paper - Affects Spawning API
+            Player entityhuman = this.canvas$optimizeNearbyPlayerLookups(this.level(), this, -1.0D); // Paper - Affects Spawning API
 
             if (entityhuman != null) {
                 // Paper start - Configurable despawn distances
@@ -933,6 +932,19 @@ public abstract class Mob extends LivingEntity implements EquipmentUser, Leashab
             this.noActionTime = 0;
         }
     }
+    // Canvas start - optimize nearby player lookups
+
+    private Player canvas$optimizeNearbyPlayerLookups(Level instance, Entity entity, double maxDistance) {
+        final Player closestPlayer = instance.getNearestPlayer(entity, this.getType().getCategory().getDespawnDistance());
+        if (closestPlayer != null) {
+            return closestPlayer;
+        } else {
+            final List<? extends Player> players = this.level().players();
+            if (players.isEmpty()) return null;
+            return players.get(0);
+        }
+    }
+    // Canvas end
 
     @Override
     protected final void serverAiStep() {
diff --git a/src/main/java/net/minecraft/world/level/LocalMobCapCalculator.java b/src/main/java/net/minecraft/world/level/LocalMobCapCalculator.java
index 2039b16e5e9bc0797b3f31081d221bb8b34a4dc7..bfa06da6ffc4091c9820974244a1df1dbf31e267 100644
--- a/src/main/java/net/minecraft/world/level/LocalMobCapCalculator.java
+++ b/src/main/java/net/minecraft/world/level/LocalMobCapCalculator.java
@@ -42,14 +42,14 @@ public class LocalMobCapCalculator {
     }
 
     static class MobCounts {
-        private final Object2IntMap<MobCategory> counts = new Object2IntOpenHashMap<>(MobCategory.values().length);
+        private final int[] spawnGroupDensities = new int[MobCategory.values().length]; // Canvas
 
         public void add(MobCategory spawnGroup) {
-            this.counts.computeInt(spawnGroup, (group, density) -> density == null ? 1 : density + 1);
+            this.spawnGroupDensities[spawnGroup.ordinal()] ++; // Canvas
         }
 
         public boolean canSpawn(MobCategory spawnGroup) {
-            return this.counts.getOrDefault(spawnGroup, 0) < spawnGroup.getMaxInstancesPerChunk();
+            return this.spawnGroupDensities[spawnGroup.ordinal()] < spawnGroup.getMaxInstancesPerChunk(); // Canvas
         }
     }
 }
