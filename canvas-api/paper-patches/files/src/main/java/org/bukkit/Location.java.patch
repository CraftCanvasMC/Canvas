--- a/src/main/java/org/bukkit/Location.java
+++ b/src/main/java/org/bukkit/Location.java
@@ -6,6 +_,7 @@
 import java.util.Collection;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.concurrent.atomic.AtomicReference;
 import java.util.function.Predicate;
 import io.papermc.paper.math.FinePosition;
 import io.papermc.paper.math.Rotation;
@@ -29,12 +_,15 @@
  * representation by the implementation.
  */
 public class Location implements Cloneable, ConfigurationSerializable, io.papermc.paper.math.FinePosition {
-    private Reference<World> world;
-    private double x;
-    private double y;
-    private double z;
-    private float pitch;
-    private float yaw;
+    // we set this as atomic to avoid race conditions in threaded applications leading to NPEs
+    private AtomicReference<World> world; // Canvas - atomic
+    // Canvas start - volatile
+    private volatile double x;
+    private volatile double y;
+    private volatile double z;
+    private volatile float pitch;
+    private volatile float yaw;
+    // Canvas end
 
     /**
      * Constructs a new Location with the given coordinates
@@ -60,7 +_,7 @@
      */
     public Location(@UndefinedNullability final World world, final double x, final double y, final double z, final float yaw, final float pitch) {
         if (world != null) {
-            this.world = new WeakReference<>(world);
+            this.world = new AtomicReference<>(world); // Canvas
         }
 
         this.x = x;
@@ -76,7 +_,7 @@
      * @param world New world that this location resides in
      */
     public void setWorld(@Nullable World world) {
-        this.world = (world == null) ? null : new WeakReference<>(world);
+        this.world = (world == null) ? null : new AtomicReference<>(world); // Canvas - atomic
     }
 
     /**
